{"ast":null,"code":"import macro from '../../macros.js';\nimport { x as random } from '../../Common/Core/Math/index.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\n// vtkPointSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPointSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPointSource');\n  publicAPI.requestData = function (inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    var dataset = outData[0]; // Check input\n\n    var pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;\n    var pd = vtkPolyData.newInstance(); // hand create a point cloud\n\n    var numPts = model.numberOfPoints; // Points\n\n    var points = macro.newTypedArray(pointDataType, numPts * 3);\n    pd.getPoints().setData(points, 3); // Cells\n\n    var verts = new Uint32Array(numPts + 1);\n    pd.getVerts().setData(verts, 1);\n    var cosphi;\n    var sinphi;\n    var rho;\n    var radius;\n    var theta;\n    for (var i = 0; i < numPts; i++) {\n      cosphi = 1 - 2.0 * random();\n      sinphi = Math.sqrt(1 - cosphi * cosphi);\n      rho = model.radius * Math.pow(random(), 0.33333333);\n      radius = rho * sinphi;\n      theta = 2.0 * Math.PI * random();\n      points[i * 3] = model.center[0] + radius * Math.cos(theta);\n      points[i * 3 + 1] = model.center[1] + radius * Math.sin(theta);\n      points[i * 3 + 2] = model.center[2] + rho * cosphi;\n    } // Generate point connectivity\n    //\n\n    verts[0] = numPts;\n    for (var _i = 0; _i < numPts; _i++) {\n      verts[_i + 1] = _i;\n    } // Update output\n\n    outData[0] = pd;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  numberOfPoints: 10,\n  center: [0, 0, 0],\n  radius: 0.5,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['numberOfPoints', 'radius']);\n  macro.setGetArray(publicAPI, model, ['center'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkPointSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPointSource'); // ----------------------------------------------------------------------------\n\nvar vtkPointSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkPointSource$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","x","random","vtkPolyData","vtkPointSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","deleted","dataset","pointDataType","getPoints","getDataType","pointType","pd","newInstance","numPts","numberOfPoints","points","newTypedArray","setData","verts","Uint32Array","getVerts","cosphi","sinphi","rho","radius","theta","i","Math","sqrt","pow","PI","center","cos","sin","_i","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGet","setGetArray","algo","vtkPointSource$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/Sources/PointSource.js"],"sourcesContent":["import macro from '../../macros.js';\nimport { x as random } from '../../Common/Core/Math/index.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\n// vtkPointSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPointSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPointSource');\n\n  publicAPI.requestData = function (inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n\n    var dataset = outData[0]; // Check input\n\n    var pointDataType = dataset ? dataset.getPoints().getDataType() : model.pointType;\n    var pd = vtkPolyData.newInstance(); // hand create a point cloud\n\n    var numPts = model.numberOfPoints; // Points\n\n    var points = macro.newTypedArray(pointDataType, numPts * 3);\n    pd.getPoints().setData(points, 3); // Cells\n\n    var verts = new Uint32Array(numPts + 1);\n    pd.getVerts().setData(verts, 1);\n    var cosphi;\n    var sinphi;\n    var rho;\n    var radius;\n    var theta;\n\n    for (var i = 0; i < numPts; i++) {\n      cosphi = 1 - 2.0 * random();\n      sinphi = Math.sqrt(1 - cosphi * cosphi);\n      rho = model.radius * Math.pow(random(), 0.33333333);\n      radius = rho * sinphi;\n      theta = 2.0 * Math.PI * random();\n      points[i * 3] = model.center[0] + radius * Math.cos(theta);\n      points[i * 3 + 1] = model.center[1] + radius * Math.sin(theta);\n      points[i * 3 + 2] = model.center[2] + rho * cosphi;\n    } // Generate point connectivity\n    //\n\n\n    verts[0] = numPts;\n\n    for (var _i = 0; _i < numPts; _i++) {\n      verts[_i + 1] = _i;\n    } // Update output\n\n\n    outData[0] = pd;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  numberOfPoints: 10,\n  center: [0, 0, 0],\n  radius: 0.5,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['numberOfPoints', 'radius']);\n  macro.setGetArray(publicAPI, model, ['center'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkPointSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPointSource'); // ----------------------------------------------------------------------------\n\nvar vtkPointSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkPointSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}