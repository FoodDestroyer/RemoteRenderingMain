{"ast":null,"code":"import macro from 'vtk.js/Sources/macros';\nimport vtkImageStream from 'vtk.js/Sources/IO/Core/ImageStream';\n\n// ----------------------------------------------------------------------------\n// Dependency injection\n// ----------------------------------------------------------------------------\n\nlet SMART_CONNECT_CLASS = null;\n\n// ----------------------------------------------------------------------------\n\nfunction setSmartConnectClass(klass) {\n  SMART_CONNECT_CLASS = klass;\n}\n\n// ----------------------------------------------------------------------------\n// Busy feedback handling\n// ----------------------------------------------------------------------------\n\nfunction busy(fn, update) {\n  return (...args) => new Promise((resolve, reject) => {\n    update(1);\n    fn(...args).then(response => {\n      update(-1);\n      resolve(response);\n    }, error => {\n      update(-1);\n      reject(error);\n    });\n  });\n}\n\n// ----------------------------------------------------------------------------\n\nfunction busyWrap(methodMap, update, skipList = []) {\n  const busyContainer = {};\n  Object.keys(methodMap).forEach(methodName => {\n    if (skipList.indexOf(methodName) === -1) {\n      busyContainer[methodName] = busy(methodMap[methodName], update);\n    } else {\n      busyContainer[methodName] = methodMap[methodName];\n    }\n  });\n  return busyContainer;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWSLinkClient\n// ----------------------------------------------------------------------------\n\nfunction vtkWSLinkClient(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWSLinkClient');\n\n  // --------------------------------------------------------------------------\n  // Internal methods\n  // --------------------------------------------------------------------------\n\n  function notifyBusy() {\n    publicAPI.invokeBusyChange(model.busyCount);\n  }\n\n  // --------------------------------------------------------------------------\n\n  function updateBusy(delta = 0) {\n    model.busyCount += delta;\n\n    // Clear any pending timeout\n    if (model.timeoutId) {\n      clearTimeout(model.timeoutId);\n      model.timeoutId = 0;\n    }\n\n    // Delay notification when idle\n    if (model.busyCount) {\n      notifyBusy();\n    } else {\n      model.timeoutId = setTimeout(notifyBusy, model.notificationTimeout);\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Public methods\n  // --------------------------------------------------------------------------\n\n  publicAPI.beginBusy = () => updateBusy(+1);\n  publicAPI.endBusy = () => updateBusy(-1);\n  publicAPI.isBusy = () => !!model.busyCount;\n  publicAPI.isConnected = () => !!model.connection;\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.connect = (config = {}, configDecorator = null) => {\n    if (!SMART_CONNECT_CLASS) {\n      return Promise.reject(new Error('Need to provide SmartConnect'));\n    }\n    if (model.connection) {\n      return Promise.reject(new Error('Need to disconnect first'));\n    }\n    model.config = config;\n    model.configDecorator = configDecorator || model.configDecorator;\n    return new Promise((resolve, reject) => {\n      model.smartConnect = SMART_CONNECT_CLASS.newInstance({\n        config,\n        configDecorator: model.configDecorator\n      });\n\n      // ready\n      model.smartConnect.onConnectionReady(connection => {\n        model.connection = connection;\n        model.remote = {};\n        model.config = model.smartConnect.getConfig();\n        const session = connection.getSession();\n\n        // Link remote API\n        model.protocols = model.protocols || {};\n        Object.keys(model.protocols).forEach(name => {\n          model.remote[name] = busyWrap(model.protocols[name](session), updateBusy, model.notBusyList);\n        });\n\n        // Handle image stream if needed\n        if (model.createImageStream) {\n          model.imageStream = vtkImageStream.newInstance();\n          model.imageStream.connect(session);\n        }\n\n        // Forward ready info as well\n        publicAPI.invokeConnectionReady(publicAPI);\n        resolve(publicAPI);\n      });\n\n      // error\n      model.smartConnect.onConnectionError(error => {\n        publicAPI.invokeConnectionError(error);\n        reject(error);\n      });\n\n      // close\n      model.smartConnect.onConnectionClose(close => {\n        publicAPI.invokeConnectionClose(close);\n        reject(close);\n      });\n\n      // Start connection\n      model.smartConnect.connect();\n    });\n  };\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.disconnect = (timeout = 60) => {\n    if (model.connection) {\n      model.connection.destroy(timeout);\n      model.connection = null;\n    }\n  };\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.registerProtocol = (name, protocol) => {\n    model.remote[name] = busyWrap(protocol(model.connection.getSession()), updateBusy, model.notBusyList);\n  };\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.unregisterProtocol = name => {\n    delete model.remote[name];\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // protocols: null,\n  // connection: null,\n  // config: null,\n  // imageStream\n  notBusyList: [],\n  busyCount: 0,\n  timeoutId: 0,\n  notificationTimeout: 50,\n  createImageStream: true\n  // configDecorator: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['protocols', 'notBusyList', 'createImageStream', 'configDecorator']);\n  macro.get(publicAPI, model, ['connection', 'config', 'remote', 'imageStream']);\n  macro.event(publicAPI, model, 'BusyChange');\n  macro.event(publicAPI, model, 'ConnectionReady');\n  macro.event(publicAPI, model, 'ConnectionError');\n  macro.event(publicAPI, model, 'ConnectionClose');\n\n  // Object specific methods\n  vtkWSLinkClient(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWSLinkClient');\n\n// ----------------------------------------------------------------------------\n\nexport default {\n  newInstance,\n  extend,\n  setSmartConnectClass\n};","map":{"version":3,"names":["macro","vtkImageStream","SMART_CONNECT_CLASS","setSmartConnectClass","klass","busy","fn","update","args","Promise","resolve","reject","then","response","error","busyWrap","methodMap","skipList","busyContainer","Object","keys","forEach","methodName","indexOf","vtkWSLinkClient","publicAPI","model","classHierarchy","push","notifyBusy","invokeBusyChange","busyCount","updateBusy","delta","timeoutId","clearTimeout","setTimeout","notificationTimeout","beginBusy","endBusy","isBusy","isConnected","connection","connect","config","configDecorator","Error","smartConnect","newInstance","onConnectionReady","remote","getConfig","session","getSession","protocols","name","notBusyList","createImageStream","imageStream","invokeConnectionReady","onConnectionError","invokeConnectionError","onConnectionClose","close","invokeConnectionClose","disconnect","timeout","destroy","registerProtocol","protocol","unregisterProtocol","DEFAULT_VALUES","extend","initialValues","assign","obj","setGet","get","event"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/vtk.js/Sources/IO/Core/WSLinkClient/index.js"],"sourcesContent":["import macro from 'vtk.js/Sources/macros';\n\nimport vtkImageStream from 'vtk.js/Sources/IO/Core/ImageStream';\n\n// ----------------------------------------------------------------------------\n// Dependency injection\n// ----------------------------------------------------------------------------\n\nlet SMART_CONNECT_CLASS = null;\n\n// ----------------------------------------------------------------------------\n\nfunction setSmartConnectClass(klass) {\n  SMART_CONNECT_CLASS = klass;\n}\n\n// ----------------------------------------------------------------------------\n// Busy feedback handling\n// ----------------------------------------------------------------------------\n\nfunction busy(fn, update) {\n  return (...args) =>\n    new Promise((resolve, reject) => {\n      update(1);\n      fn(...args).then(\n        (response) => {\n          update(-1);\n          resolve(response);\n        },\n        (error) => {\n          update(-1);\n          reject(error);\n        }\n      );\n    });\n}\n\n// ----------------------------------------------------------------------------\n\nfunction busyWrap(methodMap, update, skipList = []) {\n  const busyContainer = {};\n  Object.keys(methodMap).forEach((methodName) => {\n    if (skipList.indexOf(methodName) === -1) {\n      busyContainer[methodName] = busy(methodMap[methodName], update);\n    } else {\n      busyContainer[methodName] = methodMap[methodName];\n    }\n  });\n  return busyContainer;\n}\n\n// ----------------------------------------------------------------------------\n// vtkWSLinkClient\n// ----------------------------------------------------------------------------\n\nfunction vtkWSLinkClient(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWSLinkClient');\n\n  // --------------------------------------------------------------------------\n  // Internal methods\n  // --------------------------------------------------------------------------\n\n  function notifyBusy() {\n    publicAPI.invokeBusyChange(model.busyCount);\n  }\n\n  // --------------------------------------------------------------------------\n\n  function updateBusy(delta = 0) {\n    model.busyCount += delta;\n\n    // Clear any pending timeout\n    if (model.timeoutId) {\n      clearTimeout(model.timeoutId);\n      model.timeoutId = 0;\n    }\n\n    // Delay notification when idle\n    if (model.busyCount) {\n      notifyBusy();\n    } else {\n      model.timeoutId = setTimeout(notifyBusy, model.notificationTimeout);\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Public methods\n  // --------------------------------------------------------------------------\n\n  publicAPI.beginBusy = () => updateBusy(+1);\n  publicAPI.endBusy = () => updateBusy(-1);\n  publicAPI.isBusy = () => !!model.busyCount;\n  publicAPI.isConnected = () => !!model.connection;\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.connect = (config = {}, configDecorator = null) => {\n    if (!SMART_CONNECT_CLASS) {\n      return Promise.reject(new Error('Need to provide SmartConnect'));\n    }\n    if (model.connection) {\n      return Promise.reject(new Error('Need to disconnect first'));\n    }\n\n    model.config = config;\n    model.configDecorator = configDecorator || model.configDecorator;\n    return new Promise((resolve, reject) => {\n      model.smartConnect = SMART_CONNECT_CLASS.newInstance({\n        config,\n        configDecorator: model.configDecorator,\n      });\n\n      // ready\n      model.smartConnect.onConnectionReady((connection) => {\n        model.connection = connection;\n        model.remote = {};\n        model.config = model.smartConnect.getConfig();\n        const session = connection.getSession();\n\n        // Link remote API\n        model.protocols = model.protocols || {};\n        Object.keys(model.protocols).forEach((name) => {\n          model.remote[name] = busyWrap(\n            model.protocols[name](session),\n            updateBusy,\n            model.notBusyList\n          );\n        });\n\n        // Handle image stream if needed\n        if (model.createImageStream) {\n          model.imageStream = vtkImageStream.newInstance();\n          model.imageStream.connect(session);\n        }\n\n        // Forward ready info as well\n        publicAPI.invokeConnectionReady(publicAPI);\n\n        resolve(publicAPI);\n      });\n\n      // error\n      model.smartConnect.onConnectionError((error) => {\n        publicAPI.invokeConnectionError(error);\n        reject(error);\n      });\n\n      // close\n      model.smartConnect.onConnectionClose((close) => {\n        publicAPI.invokeConnectionClose(close);\n        reject(close);\n      });\n\n      // Start connection\n      model.smartConnect.connect();\n    });\n  };\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.disconnect = (timeout = 60) => {\n    if (model.connection) {\n      model.connection.destroy(timeout);\n      model.connection = null;\n    }\n  };\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.registerProtocol = (name, protocol) => {\n    model.remote[name] = busyWrap(\n      protocol(model.connection.getSession()),\n      updateBusy,\n      model.notBusyList\n    );\n  };\n\n  // --------------------------------------------------------------------------\n\n  publicAPI.unregisterProtocol = (name) => {\n    delete model.remote[name];\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  // protocols: null,\n  // connection: null,\n  // config: null,\n  // imageStream\n  notBusyList: [],\n  busyCount: 0,\n  timeoutId: 0,\n  notificationTimeout: 50,\n  createImageStream: true,\n  // configDecorator: null,\n};\n\n// ----------------------------------------------------------------------------\n\nexport function extend(publicAPI, model, initialValues = {}) {\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Object methods\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, [\n    'protocols',\n    'notBusyList',\n    'createImageStream',\n    'configDecorator',\n  ]);\n  macro.get(publicAPI, model, [\n    'connection',\n    'config',\n    'remote',\n    'imageStream',\n  ]);\n  macro.event(publicAPI, model, 'BusyChange');\n  macro.event(publicAPI, model, 'ConnectionReady');\n  macro.event(publicAPI, model, 'ConnectionError');\n  macro.event(publicAPI, model, 'ConnectionClose');\n\n  // Object specific methods\n  vtkWSLinkClient(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nexport const newInstance = macro.newInstance(extend, 'vtkWSLinkClient');\n\n// ----------------------------------------------------------------------------\n\nexport default { newInstance, extend, setSmartConnectClass };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,uBAAuB;AAEzC,OAAOC,cAAc,MAAM,oCAAoC;;AAE/D;AACA;AACA;;AAEA,IAAIC,mBAAmB,GAAG,IAAI;;AAE9B;;AAEA,SAASC,oBAAoBA,CAACC,KAAK,EAAE;EACnCF,mBAAmB,GAAGE,KAAK;AAC7B;;AAEA;AACA;AACA;;AAEA,SAASC,IAAIA,CAACC,EAAE,EAAEC,MAAM,EAAE;EACxB,OAAO,CAAC,GAAGC,IAAI,KACb,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC/BJ,MAAM,CAAC,CAAC,CAAC;IACTD,EAAE,CAAC,GAAGE,IAAI,CAAC,CAACI,IAAI,CACbC,QAAQ,IAAK;MACZN,MAAM,CAAC,CAAC,CAAC,CAAC;MACVG,OAAO,CAACG,QAAQ,CAAC;IACnB,CAAC,EACAC,KAAK,IAAK;MACTP,MAAM,CAAC,CAAC,CAAC,CAAC;MACVI,MAAM,CAACG,KAAK,CAAC;IACf,CACF,CAAC;EACH,CAAC,CAAC;AACN;;AAEA;;AAEA,SAASC,QAAQA,CAACC,SAAS,EAAET,MAAM,EAAEU,QAAQ,GAAG,EAAE,EAAE;EAClD,MAAMC,aAAa,GAAG,CAAC,CAAC;EACxBC,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACK,OAAO,CAAEC,UAAU,IAAK;IAC7C,IAAIL,QAAQ,CAACM,OAAO,CAACD,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;MACvCJ,aAAa,CAACI,UAAU,CAAC,GAAGjB,IAAI,CAACW,SAAS,CAACM,UAAU,CAAC,EAAEf,MAAM,CAAC;IACjE,CAAC,MAAM;MACLW,aAAa,CAACI,UAAU,CAAC,GAAGN,SAAS,CAACM,UAAU,CAAC;IACnD;EACF,CAAC,CAAC;EACF,OAAOJ,aAAa;AACtB;;AAEA;AACA;AACA;;AAEA,SAASM,eAAeA,CAACC,SAAS,EAAEC,KAAK,EAAE;EACzC;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,iBAAiB,CAAC;;EAE5C;EACA;EACA;;EAEA,SAASC,UAAUA,CAAA,EAAG;IACpBJ,SAAS,CAACK,gBAAgB,CAACJ,KAAK,CAACK,SAAS,CAAC;EAC7C;;EAEA;;EAEA,SAASC,UAAUA,CAACC,KAAK,GAAG,CAAC,EAAE;IAC7BP,KAAK,CAACK,SAAS,IAAIE,KAAK;;IAExB;IACA,IAAIP,KAAK,CAACQ,SAAS,EAAE;MACnBC,YAAY,CAACT,KAAK,CAACQ,SAAS,CAAC;MAC7BR,KAAK,CAACQ,SAAS,GAAG,CAAC;IACrB;;IAEA;IACA,IAAIR,KAAK,CAACK,SAAS,EAAE;MACnBF,UAAU,CAAC,CAAC;IACd,CAAC,MAAM;MACLH,KAAK,CAACQ,SAAS,GAAGE,UAAU,CAACP,UAAU,EAAEH,KAAK,CAACW,mBAAmB,CAAC;IACrE;EACF;;EAEA;EACA;EACA;;EAEAZ,SAAS,CAACa,SAAS,GAAG,MAAMN,UAAU,CAAC,CAAC,CAAC,CAAC;EAC1CP,SAAS,CAACc,OAAO,GAAG,MAAMP,UAAU,CAAC,CAAC,CAAC,CAAC;EACxCP,SAAS,CAACe,MAAM,GAAG,MAAM,CAAC,CAACd,KAAK,CAACK,SAAS;EAC1CN,SAAS,CAACgB,WAAW,GAAG,MAAM,CAAC,CAACf,KAAK,CAACgB,UAAU;;EAEhD;;EAEAjB,SAAS,CAACkB,OAAO,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC,EAAEC,eAAe,GAAG,IAAI,KAAK;IAC3D,IAAI,CAAC3C,mBAAmB,EAAE;MACxB,OAAOO,OAAO,CAACE,MAAM,CAAC,IAAImC,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClE;IACA,IAAIpB,KAAK,CAACgB,UAAU,EAAE;MACpB,OAAOjC,OAAO,CAACE,MAAM,CAAC,IAAImC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC9D;IAEApB,KAAK,CAACkB,MAAM,GAAGA,MAAM;IACrBlB,KAAK,CAACmB,eAAe,GAAGA,eAAe,IAAInB,KAAK,CAACmB,eAAe;IAChE,OAAO,IAAIpC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCe,KAAK,CAACqB,YAAY,GAAG7C,mBAAmB,CAAC8C,WAAW,CAAC;QACnDJ,MAAM;QACNC,eAAe,EAAEnB,KAAK,CAACmB;MACzB,CAAC,CAAC;;MAEF;MACAnB,KAAK,CAACqB,YAAY,CAACE,iBAAiB,CAAEP,UAAU,IAAK;QACnDhB,KAAK,CAACgB,UAAU,GAAGA,UAAU;QAC7BhB,KAAK,CAACwB,MAAM,GAAG,CAAC,CAAC;QACjBxB,KAAK,CAACkB,MAAM,GAAGlB,KAAK,CAACqB,YAAY,CAACI,SAAS,CAAC,CAAC;QAC7C,MAAMC,OAAO,GAAGV,UAAU,CAACW,UAAU,CAAC,CAAC;;QAEvC;QACA3B,KAAK,CAAC4B,SAAS,GAAG5B,KAAK,CAAC4B,SAAS,IAAI,CAAC,CAAC;QACvCnC,MAAM,CAACC,IAAI,CAACM,KAAK,CAAC4B,SAAS,CAAC,CAACjC,OAAO,CAAEkC,IAAI,IAAK;UAC7C7B,KAAK,CAACwB,MAAM,CAACK,IAAI,CAAC,GAAGxC,QAAQ,CAC3BW,KAAK,CAAC4B,SAAS,CAACC,IAAI,CAAC,CAACH,OAAO,CAAC,EAC9BpB,UAAU,EACVN,KAAK,CAAC8B,WACR,CAAC;QACH,CAAC,CAAC;;QAEF;QACA,IAAI9B,KAAK,CAAC+B,iBAAiB,EAAE;UAC3B/B,KAAK,CAACgC,WAAW,GAAGzD,cAAc,CAAC+C,WAAW,CAAC,CAAC;UAChDtB,KAAK,CAACgC,WAAW,CAACf,OAAO,CAACS,OAAO,CAAC;QACpC;;QAEA;QACA3B,SAAS,CAACkC,qBAAqB,CAAClC,SAAS,CAAC;QAE1Cf,OAAO,CAACe,SAAS,CAAC;MACpB,CAAC,CAAC;;MAEF;MACAC,KAAK,CAACqB,YAAY,CAACa,iBAAiB,CAAE9C,KAAK,IAAK;QAC9CW,SAAS,CAACoC,qBAAqB,CAAC/C,KAAK,CAAC;QACtCH,MAAM,CAACG,KAAK,CAAC;MACf,CAAC,CAAC;;MAEF;MACAY,KAAK,CAACqB,YAAY,CAACe,iBAAiB,CAAEC,KAAK,IAAK;QAC9CtC,SAAS,CAACuC,qBAAqB,CAACD,KAAK,CAAC;QACtCpD,MAAM,CAACoD,KAAK,CAAC;MACf,CAAC,CAAC;;MAEF;MACArC,KAAK,CAACqB,YAAY,CAACJ,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC;;EAED;;EAEAlB,SAAS,CAACwC,UAAU,GAAG,CAACC,OAAO,GAAG,EAAE,KAAK;IACvC,IAAIxC,KAAK,CAACgB,UAAU,EAAE;MACpBhB,KAAK,CAACgB,UAAU,CAACyB,OAAO,CAACD,OAAO,CAAC;MACjCxC,KAAK,CAACgB,UAAU,GAAG,IAAI;IACzB;EACF,CAAC;;EAED;;EAEAjB,SAAS,CAAC2C,gBAAgB,GAAG,CAACb,IAAI,EAAEc,QAAQ,KAAK;IAC/C3C,KAAK,CAACwB,MAAM,CAACK,IAAI,CAAC,GAAGxC,QAAQ,CAC3BsD,QAAQ,CAAC3C,KAAK,CAACgB,UAAU,CAACW,UAAU,CAAC,CAAC,CAAC,EACvCrB,UAAU,EACVN,KAAK,CAAC8B,WACR,CAAC;EACH,CAAC;;EAED;;EAEA/B,SAAS,CAAC6C,kBAAkB,GAAIf,IAAI,IAAK;IACvC,OAAO7B,KAAK,CAACwB,MAAM,CAACK,IAAI,CAAC;EAC3B,CAAC;AACH;;AAEA;AACA;AACA;;AAEA,MAAMgB,cAAc,GAAG;EACrB;EACA;EACA;EACA;EACAf,WAAW,EAAE,EAAE;EACfzB,SAAS,EAAE,CAAC;EACZG,SAAS,EAAE,CAAC;EACZG,mBAAmB,EAAE,EAAE;EACvBoB,iBAAiB,EAAE;EACnB;AACF,CAAC;;AAED;;AAEA,OAAO,SAASe,MAAMA,CAAC/C,SAAS,EAAEC,KAAK,EAAE+C,aAAa,GAAG,CAAC,CAAC,EAAE;EAC3DtD,MAAM,CAACuD,MAAM,CAAChD,KAAK,EAAE6C,cAAc,EAAEE,aAAa,CAAC;;EAEnD;EACAzE,KAAK,CAAC2E,GAAG,CAAClD,SAAS,EAAEC,KAAK,CAAC;EAC3B1B,KAAK,CAAC4E,MAAM,CAACnD,SAAS,EAAEC,KAAK,EAAE,CAC7B,WAAW,EACX,aAAa,EACb,mBAAmB,EACnB,iBAAiB,CAClB,CAAC;EACF1B,KAAK,CAAC6E,GAAG,CAACpD,SAAS,EAAEC,KAAK,EAAE,CAC1B,YAAY,EACZ,QAAQ,EACR,QAAQ,EACR,aAAa,CACd,CAAC;EACF1B,KAAK,CAAC8E,KAAK,CAACrD,SAAS,EAAEC,KAAK,EAAE,YAAY,CAAC;EAC3C1B,KAAK,CAAC8E,KAAK,CAACrD,SAAS,EAAEC,KAAK,EAAE,iBAAiB,CAAC;EAChD1B,KAAK,CAAC8E,KAAK,CAACrD,SAAS,EAAEC,KAAK,EAAE,iBAAiB,CAAC;EAChD1B,KAAK,CAAC8E,KAAK,CAACrD,SAAS,EAAEC,KAAK,EAAE,iBAAiB,CAAC;;EAEhD;EACAF,eAAe,CAACC,SAAS,EAAEC,KAAK,CAAC;AACnC;;AAEA;;AAEA,OAAO,MAAMsB,WAAW,GAAGhD,KAAK,CAACgD,WAAW,CAACwB,MAAM,EAAE,iBAAiB,CAAC;;AAEvE;;AAEA,eAAe;EAAExB,WAAW;EAAEwB,MAAM;EAAErE;AAAqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}