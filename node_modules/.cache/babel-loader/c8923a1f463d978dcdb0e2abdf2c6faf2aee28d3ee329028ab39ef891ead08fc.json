{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkCardinalSpline1D from './CardinalSpline1D.js';\nimport vtkKochanekSpline1D from './KochanekSpline1D.js';\nimport { splineKind } from './Spline3D/Constants.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkSpline3D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSpline3D(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkSpline3D'); // --------------------------------------------------------------------------\n\n  function computeCoefficients1D(spline, points, boundaryConditionValue) {\n    if (points.length === 0) {\n      vtkErrorMacro('Splines require at least one points');\n    } // If we have only one point we create a spline\n    // which two extremities are the same point\n\n    if (points.length === 1) {\n      points.push(points[0]);\n    }\n    var size = points.length;\n    var work = null;\n    var intervals = null;\n    work = new Float32Array(size);\n    if (model.intervals.length === 0) {\n      intervals = new Float32Array(size);\n      for (var i = 0; i < intervals.length; i++) {\n        intervals[i] = i;\n      }\n    } else {\n      intervals = model.intervals;\n    }\n    if (model.close) {\n      spline.computeCloseCoefficients(size, work, intervals, points);\n    } else {\n      spline.computeOpenCoefficients(size, work, intervals, points, {\n        leftConstraint: model.boundaryCondition,\n        leftValue: boundaryConditionValue,\n        rightConstraint: model.boundaryCondition,\n        rightValue: boundaryConditionValue\n      });\n    }\n  } // --------------------------------------------------------------------------\n\n  publicAPI.computeCoefficients = function (points) {\n    var x = points.map(function (pt) {\n      return pt[0];\n    });\n    var y = points.map(function (pt) {\n      return pt[1];\n    });\n    var z = points.map(function (pt) {\n      return pt[2];\n    });\n    computeCoefficients1D(model.splineX, x, model.boundaryConditionValues[0]);\n    computeCoefficients1D(model.splineY, y, model.boundaryConditionValues[1]);\n    computeCoefficients1D(model.splineZ, z, model.boundaryConditionValues[2]);\n  }; // --------------------------------------------------------------------------\n\n  publicAPI.getPoint = function (intervalIndex, t) {\n    return [model.splineX.getValue(intervalIndex, t), model.splineY.getValue(intervalIndex, t), model.splineZ.getValue(intervalIndex, t)];\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n  if (model.kind === splineKind.KOCHANEK_SPLINE) {\n    model.splineX = vtkKochanekSpline1D.newInstance({\n      tension: model.tension,\n      continuity: model.continuity,\n      bias: model.bias\n    });\n    model.splineY = vtkKochanekSpline1D.newInstance({\n      tension: model.tension,\n      continuity: model.continuity,\n      bias: model.bias\n    });\n    model.splineZ = vtkKochanekSpline1D.newInstance({\n      tension: model.tension,\n      continuity: model.continuity,\n      bias: model.bias\n    });\n  } else if (model.kind === splineKind.CARDINAL_SPLINE) {\n    model.splineX = vtkCardinalSpline1D.newInstance();\n    model.splineY = vtkCardinalSpline1D.newInstance();\n    model.splineZ = vtkCardinalSpline1D.newInstance();\n  } else {\n    vtkErrorMacro(\"Unknown spline type \".concat(model.kind));\n  }\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  close: false,\n  intervals: [],\n  kind: splineKind.KOCHANEK_SPLINE,\n  boundaryConditionValues: [0, 0, 0],\n  // Passed to the vtkKochanekSpline1D\n  tension: 0,\n  continuity: 0,\n  bias: 0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['close', 'intervals']);\n  vtkSpline3D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkSpline3D'); // ----------------------------------------------------------------------------\n\nvar vtkSpline3D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkSpline3D$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkCardinalSpline1D","vtkKochanekSpline1D","splineKind","vtkErrorMacro","vtkSpline3D","publicAPI","model","classHierarchy","push","computeCoefficients1D","spline","points","boundaryConditionValue","length","size","work","intervals","Float32Array","i","close","computeCloseCoefficients","computeOpenCoefficients","leftConstraint","boundaryCondition","leftValue","rightConstraint","rightValue","computeCoefficients","x","map","pt","y","z","splineX","boundaryConditionValues","splineY","splineZ","getPoint","intervalIndex","t","getValue","kind","KOCHANEK_SPLINE","newInstance","tension","continuity","bias","CARDINAL_SPLINE","concat","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","setGet","vtkSpline3D$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Common/DataModel/Spline3D.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkCardinalSpline1D from './CardinalSpline1D.js';\nimport vtkKochanekSpline1D from './KochanekSpline1D.js';\nimport { splineKind } from './Spline3D/Constants.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkSpline3D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSpline3D(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkSpline3D'); // --------------------------------------------------------------------------\n\n  function computeCoefficients1D(spline, points, boundaryConditionValue) {\n    if (points.length === 0) {\n      vtkErrorMacro('Splines require at least one points');\n    } // If we have only one point we create a spline\n    // which two extremities are the same point\n\n\n    if (points.length === 1) {\n      points.push(points[0]);\n    }\n\n    var size = points.length;\n    var work = null;\n    var intervals = null;\n    work = new Float32Array(size);\n\n    if (model.intervals.length === 0) {\n      intervals = new Float32Array(size);\n\n      for (var i = 0; i < intervals.length; i++) {\n        intervals[i] = i;\n      }\n    } else {\n      intervals = model.intervals;\n    }\n\n    if (model.close) {\n      spline.computeCloseCoefficients(size, work, intervals, points);\n    } else {\n      spline.computeOpenCoefficients(size, work, intervals, points, {\n        leftConstraint: model.boundaryCondition,\n        leftValue: boundaryConditionValue,\n        rightConstraint: model.boundaryCondition,\n        rightValue: boundaryConditionValue\n      });\n    }\n  } // --------------------------------------------------------------------------\n\n\n  publicAPI.computeCoefficients = function (points) {\n    var x = points.map(function (pt) {\n      return pt[0];\n    });\n    var y = points.map(function (pt) {\n      return pt[1];\n    });\n    var z = points.map(function (pt) {\n      return pt[2];\n    });\n    computeCoefficients1D(model.splineX, x, model.boundaryConditionValues[0]);\n    computeCoefficients1D(model.splineY, y, model.boundaryConditionValues[1]);\n    computeCoefficients1D(model.splineZ, z, model.boundaryConditionValues[2]);\n  }; // --------------------------------------------------------------------------\n\n\n  publicAPI.getPoint = function (intervalIndex, t) {\n    return [model.splineX.getValue(intervalIndex, t), model.splineY.getValue(intervalIndex, t), model.splineZ.getValue(intervalIndex, t)];\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n\n  if (model.kind === splineKind.KOCHANEK_SPLINE) {\n    model.splineX = vtkKochanekSpline1D.newInstance({\n      tension: model.tension,\n      continuity: model.continuity,\n      bias: model.bias\n    });\n    model.splineY = vtkKochanekSpline1D.newInstance({\n      tension: model.tension,\n      continuity: model.continuity,\n      bias: model.bias\n    });\n    model.splineZ = vtkKochanekSpline1D.newInstance({\n      tension: model.tension,\n      continuity: model.continuity,\n      bias: model.bias\n    });\n  } else if (model.kind === splineKind.CARDINAL_SPLINE) {\n    model.splineX = vtkCardinalSpline1D.newInstance();\n    model.splineY = vtkCardinalSpline1D.newInstance();\n    model.splineZ = vtkCardinalSpline1D.newInstance();\n  } else {\n    vtkErrorMacro(\"Unknown spline type \".concat(model.kind));\n  }\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  close: false,\n  intervals: [],\n  kind: splineKind.KOCHANEK_SPLINE,\n  boundaryConditionValues: [0, 0, 0],\n  // Passed to the vtkKochanekSpline1D\n  tension: 0,\n  continuity: 0,\n  bias: 0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['close', 'intervals']);\n  vtkSpline3D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkSpline3D'); // ----------------------------------------------------------------------------\n\nvar vtkSpline3D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkSpline3D$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}