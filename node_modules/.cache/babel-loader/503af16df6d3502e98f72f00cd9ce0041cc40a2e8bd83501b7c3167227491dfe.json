{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport macro from '../../macros.js';\nimport Constants from './HardwareSelector/Constants.js';\nimport vtkHardwareSelector$1 from '../Core/HardwareSelector.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkSelectionNode from '../../Common/DataModel/SelectionNode.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar PassTypes = Constants.PassTypes;\nvar SelectionContent = vtkSelectionNode.SelectionContent,\n  SelectionField = vtkSelectionNode.SelectionField;\nvar FieldAssociations = vtkDataSet.FieldAssociations;\nvar vtkErrorMacro = macro.vtkErrorMacro;\nvar idOffset = 1;\nfunction getInfoHash(info) {\n  return \"\".concat(info.propID, \" \").concat(info.compositeID);\n}\nfunction getAlpha(xx, yy, pb, area) {\n  if (!pb) {\n    return 0;\n  }\n  var offset = (yy * (area[2] - area[0] + 1) + xx) * 4;\n  return pb[offset + 3];\n}\nfunction convert(xx, yy, pb, area) {\n  if (!pb) {\n    return 0;\n  }\n  var offset = (yy * (area[2] - area[0] + 1) + xx) * 4;\n  var r = pb[offset];\n  var g = pb[offset + 1];\n  var b = pb[offset + 2];\n  return (b * 256 + g) * 256 + r;\n}\nfunction getID(low24, high8) {\n  /* eslint-disable no-bitwise */\n  var val = high8;\n  val <<= 24;\n  val |= low24;\n  return val;\n  /* eslint-enable no-bitwise */\n}\n\nfunction getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {\n  // Base case\n  var maxDist = maxDistance < 0 ? 0 : maxDistance;\n  if (maxDist === 0) {\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n    if (inDisplayPosition[0] < buffdata.area[0] || inDisplayPosition[0] > buffdata.area[2] || inDisplayPosition[1] < buffdata.area[1] || inDisplayPosition[1] > buffdata.area[3]) {\n      return null;\n    } // offset inDisplayPosition based on the lower-left-corner of the Area.\n\n    var displayPosition = [inDisplayPosition[0] - buffdata.area[0], inDisplayPosition[1] - buffdata.area[1]];\n    var actorid = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ACTOR_PASS], buffdata.area);\n    if (actorid <= 0 || actorid - idOffset >= buffdata.props.length) {\n      // the pixel did not hit any actor.\n      return null;\n    }\n    var _info = {};\n    _info.valid = true;\n    _info.propID = actorid - idOffset;\n    _info.prop = buffdata.props[_info.propID];\n    var compositeID = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], buffdata.area);\n    if (compositeID < 0 || compositeID > 0xffffff) {\n      compositeID = 0;\n    }\n    _info.compositeID = compositeID - idOffset;\n    if (buffdata.captureZValues) {\n      var offset = (displayPosition[1] * (buffdata.area[2] - buffdata.area[0] + 1) + displayPosition[0]) * 4;\n      _info.zValue = (256 * buffdata.zBuffer[offset] + buffdata.zBuffer[offset + 1]) / 65535.0;\n      _info.displayPosition = inDisplayPosition;\n    }\n    if (buffdata.pixBuffer[PassTypes.ID_LOW24]) {\n      if (getAlpha(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_LOW24], buffdata.area) === 0.0) {\n        return _info;\n      }\n    }\n    var low24 = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_LOW24], buffdata.area);\n    var high24 = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_HIGH24], buffdata.area);\n    _info.attributeID = getID(low24, high24);\n    return _info;\n  } // Iterate over successively growing boxes.\n  // They recursively call the base case to handle single pixels.\n\n  var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n  var curPos = [0, 0];\n  var info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);\n  if (info && info.valid) {\n    return info;\n  }\n  for (var dist = 1; dist < maxDist; ++dist) {\n    // Vertical sides of box.\n    for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n      curPos[1] = y;\n      if (dispPos[0] >= dist) {\n        curPos[0] = dispPos[0] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n      curPos[0] = dispPos[0] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n      if (info && info.valid) {\n        return info;\n      }\n    } // Horizontal sides of box.\n\n    for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n      curPos[0] = x;\n      if (dispPos[1] >= dist) {\n        curPos[1] = dispPos[1] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n      curPos[1] = dispPos[1] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n      if (info && info.valid) {\n        return info;\n      }\n    }\n  } // nothing hit.\n\n  outSelectedPosition[0] = inDisplayPosition[0];\n  outSelectedPosition[1] = inDisplayPosition[1];\n  return null;\n} //-----------------------------------------------------------------------------\n\nfunction convertSelection(fieldassociation, dataMap, captureZValues, renderer, openGLRenderWindow) {\n  var sel = [];\n  var count = 0;\n  dataMap.forEach(function (value, key) {\n    var child = vtkSelectionNode.newInstance();\n    child.setContentType(SelectionContent.INDICES);\n    switch (fieldassociation) {\n      case FieldAssociations.FIELD_ASSOCIATION_CELLS:\n        child.setFieldType(SelectionField.CELL);\n        break;\n      case FieldAssociations.FIELD_ASSOCIATION_POINTS:\n        child.setFieldType(SelectionField.POINT);\n        break;\n      default:\n        vtkErrorMacro('Unknown field association');\n    }\n    child.getProperties().propID = value.info.propID;\n    child.getProperties().prop = value.info.prop;\n    child.getProperties().compositeID = value.info.compositeID;\n    child.getProperties().attributeID = value.info.attributeID;\n    child.getProperties().pixelCount = value.pixelCount;\n    if (captureZValues) {\n      child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];\n      child.getProperties().worldPosition = openGLRenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, renderer);\n    }\n    child.setSelectionList(value.attributeIDs);\n    sel[count] = child;\n    count++;\n  });\n  return sel;\n} //----------------------------------------------------------------------------\n\nfunction generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {\n  var x1 = Math.floor(fx1);\n  var y1 = Math.floor(fy1);\n  var x2 = Math.floor(fx2);\n  var y2 = Math.floor(fy2);\n  var dataMap = new Map();\n  var outSelectedPosition = [0, 0];\n  for (var yy = y1; yy <= y2; yy++) {\n    for (var xx = x1; xx <= x2; xx++) {\n      var pos = [xx, yy];\n      var info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);\n      if (info && info.valid) {\n        var hash = getInfoHash(info);\n        if (!dataMap.has(hash)) {\n          dataMap.set(hash, {\n            info: info,\n            pixelCount: 1,\n            attributeIDs: [info.attributeID]\n          });\n        } else {\n          var dmv = dataMap.get(hash);\n          dmv.pixelCount++;\n          if (buffdata.captureZValues) {\n            if (info.zValue < dmv.info.zValue) {\n              dmv.info = info;\n            }\n          }\n          if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n            dmv.attributeIDs.push(info.attributeID);\n          }\n        }\n      }\n    }\n  }\n  return convertSelection(buffdata.fieldAssociation, dataMap, buffdata.captureZValues, buffdata.renderer, buffdata.openGLRenderWindow);\n} // ----------------------------------------------------------------------------\n// vtkOpenGLHardwareSelector methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLHardwareSelector(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLHardwareSelector'); //----------------------------------------------------------------------------\n\n  publicAPI.releasePixBuffers = function () {\n    model.rawPixBuffer = [];\n    model.pixBuffer = [];\n    model.zBuffer = null;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.beginSelection = function () {\n    model._openGLRenderer = model._openGLRenderWindow.getViewNodeFor(model._renderer);\n    model.maxAttributeId = 0;\n    var size = model._openGLRenderWindow.getSize();\n    if (!model.framebuffer) {\n      model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()\n\n      model.framebuffer.populateFramebuffer();\n    } else {\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      var fbSize = model.framebuffer.getSize();\n      if (fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()\n\n        model.framebuffer.populateFramebuffer();\n      } else {\n        model.framebuffer.bind();\n      }\n    }\n    model._openGLRenderer.clear();\n    model._openGLRenderer.setSelector(publicAPI);\n    model.hitProps = {};\n    model.propPixels = {};\n    model.props = [];\n    publicAPI.releasePixBuffers();\n    if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      var gl = model._openGLRenderWindow.getContext();\n      var originalBlending = gl.isEnabled(gl.BLEND);\n      gl.disable(gl.BLEND);\n      model._openGLRenderWindow.traverseAllPasses();\n      if (originalBlending) {\n        gl.enable(gl.BLEND);\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.endSelection = function () {\n    model.hitProps = {};\n    model._openGLRenderer.setSelector(null);\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n  };\n  publicAPI.preCapturePass = function () {\n    var gl = model._openGLRenderWindow.getContext(); // Disable blending\n\n    model.originalBlending = gl.isEnabled(gl.BLEND);\n    gl.disable(gl.BLEND);\n  };\n  publicAPI.postCapturePass = function () {\n    var gl = model._openGLRenderWindow.getContext(); // Restore blending if it was enabled prior to the capture\n\n    if (model.originalBlending) {\n      gl.enable(gl.BLEND);\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.select = function () {\n    var sel = null;\n    if (publicAPI.captureBuffers()) {\n      sel = publicAPI.generateSelection(model.area[0], model.area[1], model.area[2], model.area[3]);\n      publicAPI.releasePixBuffers();\n    }\n    return sel;\n  };\n  publicAPI.getSourceDataAsync = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(renderer, fx1, fy1, fx2, fy2) {\n      var size, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // assign the renderer\n              model._renderer = renderer; // set area to all if no arguments provided\n\n              if (fx1 === undefined) {\n                size = model._openGLRenderWindow.getSize();\n                publicAPI.setArea(0, 0, size[0] - 1, size[1] - 1);\n              } else {\n                publicAPI.setArea(fx1, fy1, fx2, fy2);\n              } // just do capture buffers and package up the result\n\n              if (publicAPI.captureBuffers()) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 4:\n              result = {\n                area: _toConsumableArray(model.area),\n                pixBuffer: _toConsumableArray(model.pixBuffer),\n                captureZValues: model.captureZValues,\n                zBuffer: model.zBuffer,\n                props: _toConsumableArray(model.props),\n                fieldAssociation: model.fieldAssociation,\n                renderer: renderer,\n                openGLRenderWindow: model._openGLRenderWindow\n              };\n              result.generateSelection = function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                return generateSelectionWithData.apply(void 0, [result].concat(args));\n              };\n              return _context.abrupt(\"return\", result);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2, _x3, _x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }(); //----------------------------------------------------------------------------\n\n  publicAPI.captureBuffers = function () {\n    if (!model._renderer || !model._openGLRenderWindow) {\n      vtkErrorMacro('Renderer and view must be set before calling Select.');\n      return false;\n    }\n    model._openGLRenderer = model._openGLRenderWindow.getViewNodeFor(model._renderer); // todo revisit making selection part of core\n    // then we can do this in core\n\n    model._openGLRenderWindow.getRenderable().preRender(); // int rgba[4];\n    // rwin.getColorBufferSizes(rgba);\n    // if (rgba[0] < 8 || rgba[1] < 8 || rgba[2] < 8) {\n    //   vtkErrorMacro(\"Color buffer depth must be at least 8 bit. \"\n    //     \"Currently: \" << rgba[0] << \", \" << rgba[1] << \", \" <<rgba[2]);\n    //   return false;\n    // }\n\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    }); // Initialize renderer for selection.\n    // change the renderer's background to black, which will indicate a miss\n\n    model.originalBackground = model._renderer.getBackgroundByReference();\n    model._renderer.setBackground(0.0, 0.0, 0.0, 0.0);\n    var rpasses = model._openGLRenderWindow.getRenderPasses();\n    publicAPI.beginSelection();\n    for (model.currentPass = PassTypes.MIN_KNOWN_PASS; model.currentPass <= PassTypes.MAX_KNOWN_PASS; model.currentPass++) {\n      if (publicAPI.passRequired(model.currentPass)) {\n        publicAPI.preCapturePass(model.currentPass);\n        if (model.captureZValues && model.currentPass === PassTypes.ACTOR_PASS && typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {\n          rpasses[0].requestDepth();\n          model._openGLRenderWindow.traverseAllPasses();\n        } else {\n          model._openGLRenderWindow.traverseAllPasses();\n        }\n        publicAPI.postCapturePass(model.currentPass);\n        publicAPI.savePixelBuffer(model.currentPass);\n        publicAPI.processPixelBuffers();\n      }\n    }\n    publicAPI.endSelection(); // restore original background\n\n    model._renderer.setBackground(model.originalBackground);\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    }); // restore image, not needed?\n    // model._openGLRenderWindow.traverseAllPasses();\n\n    return true;\n  };\n  publicAPI.processPixelBuffers = function () {\n    model.props.forEach(function (prop, index) {\n      if (publicAPI.isPropHit(index)) {\n        prop.processSelectorPixelBuffers(publicAPI, model.propPixels[index]);\n      }\n    });\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.passRequired = function (pass) {\n    if (pass === PassTypes.ID_HIGH24) {\n      if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n        return model.maximumPointId > 0x00ffffff;\n      }\n      if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_CELLS) {\n        return model.maximumCellId > 0x00ffffff;\n      }\n    }\n    return true;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.savePixelBuffer = function (passNo) {\n    model.pixBuffer[passNo] = model._openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);\n    if (!model.rawPixBuffer[passNo]) {\n      var size = (model.area[2] - model.area[0] + 1) * (model.area[3] - model.area[1] + 1) * 4;\n      model.rawPixBuffer[passNo] = new Uint8Array(size);\n      model.rawPixBuffer[passNo].set(model.pixBuffer[passNo]);\n    }\n    if (passNo === PassTypes.ACTOR_PASS) {\n      if (model.captureZValues) {\n        var rpasses = model._openGLRenderWindow.getRenderPasses();\n        if (typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {\n          var fb = rpasses[0].getFramebuffer();\n          fb.saveCurrentBindingsAndBuffers();\n          fb.bind();\n          model.zBuffer = model._openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);\n          fb.restorePreviousBindingsAndBuffers();\n        }\n      }\n      publicAPI.buildPropHitList(model.rawPixBuffer[passNo]);\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.buildPropHitList = function (pixelbuffer) {\n    var offset = 0;\n    for (var yy = 0; yy <= model.area[3] - model.area[1]; yy++) {\n      for (var xx = 0; xx <= model.area[2] - model.area[0]; xx++) {\n        var val = convert(xx, yy, pixelbuffer, model.area);\n        if (val > 0) {\n          val--;\n          if (!(val in model.hitProps)) {\n            model.hitProps[val] = true;\n            model.propPixels[val] = [];\n          }\n          model.propPixels[val].push(offset * 4);\n        }\n        ++offset;\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.renderProp = function (prop) {\n    if (model.currentPass === PassTypes.ACTOR_PASS) {\n      publicAPI.setPropColorValueFromInt(model.props.length + idOffset);\n      model.props.push(prop);\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.renderCompositeIndex = function (index) {\n    if (model.currentPass === PassTypes.COMPOSITE_INDEX_PASS) {\n      publicAPI.setPropColorValueFromInt(index + idOffset);\n    }\n  }; //----------------------------------------------------------------------------\n  // TODO: make inline\n\n  publicAPI.renderAttributeId = function (attribid) {\n    if (attribid < 0) {\n      // negative attribid is valid. It happens when rendering higher order\n      // elements where new points are added for rendering smooth surfaces.\n      return;\n    }\n    model.maxAttributeId = attribid > model.maxAttributeId ? attribid : model.maxAttributeId; // if (model.currentPass < PassTypes.ID_LOW24) {\n    //   return; // useless...\n    // }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.passTypeToString = function (type) {\n    return macro.enumToString(PassTypes, type);\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.isPropHit = function (id) {\n    return Boolean(model.hitProps[id]);\n  };\n  publicAPI.setPropColorValueFromInt = function (val) {\n    model.propColorValue[0] = val % 256 / 255.0;\n    model.propColorValue[1] = Math.floor(val / 256) % 256 / 255.0;\n    model.propColorValue[2] = Math.floor(val / 65536) % 256 / 255.0;\n  }; // info has\n  //   valid\n  //   propId\n  //   prop\n  //   compositeID\n  //   attributeID\n  //----------------------------------------------------------------------------\n\n  publicAPI.getPixelInformation = function (inDisplayPosition, maxDistance, outSelectedPosition) {\n    // Base case\n    var maxDist = maxDistance < 0 ? 0 : maxDistance;\n    if (maxDist === 0) {\n      outSelectedPosition[0] = inDisplayPosition[0];\n      outSelectedPosition[1] = inDisplayPosition[1];\n      if (inDisplayPosition[0] < model.area[0] || inDisplayPosition[0] > model.area[2] || inDisplayPosition[1] < model.area[1] || inDisplayPosition[1] > model.area[3]) {\n        return null;\n      } // offset inDisplayPosition based on the lower-left-corner of the Area.\n\n      var displayPosition = [inDisplayPosition[0] - model.area[0], inDisplayPosition[1] - model.area[1]];\n      var actorid = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ACTOR_PASS], model.area);\n      if (actorid <= 0 || actorid - idOffset >= model.props.length) {\n        // the pixel did not hit any actor.\n        return null;\n      }\n      var _info2 = {};\n      _info2.valid = true;\n      _info2.propID = actorid - idOffset;\n      _info2.prop = model.props[_info2.propID];\n      var compositeID = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], model.area);\n      if (compositeID < 0 || compositeID > 0xffffff) {\n        compositeID = 0;\n      }\n      _info2.compositeID = compositeID - idOffset;\n      if (model.captureZValues) {\n        var offset = (displayPosition[1] * (model.area[2] - model.area[0] + 1) + displayPosition[0]) * 4;\n        _info2.zValue = (256 * model.zBuffer[offset] + model.zBuffer[offset + 1]) / 65535.0;\n        _info2.displayPosition = inDisplayPosition;\n      } // Skip attribute ids if alpha is zero (missed)\n\n      if (model.pixBuffer[PassTypes.ID_LOW24]) {\n        if (getAlpha(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_LOW24], model.area) === 0.0) {\n          return _info2;\n        }\n      }\n      var low24 = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_LOW24], model.area);\n      var high24 = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_HIGH24], model.area);\n      _info2.attributeID = getID(low24, high24);\n      return _info2;\n    } // Iterate over successively growing boxes.\n    // They recursively call the base case to handle single pixels.\n\n    var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n    var curPos = [0, 0];\n    var info = publicAPI.getPixelInformation(inDisplayPosition, 0, outSelectedPosition);\n    if (info && info.valid) {\n      return info;\n    }\n    for (var dist = 1; dist < maxDist; ++dist) {\n      // Vertical sides of box.\n      for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n        curPos[1] = y;\n        if (dispPos[0] >= dist) {\n          curPos[0] = dispPos[0] - dist;\n          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n          if (info && info.valid) {\n            return info;\n          }\n        }\n        curPos[0] = dispPos[0] + dist;\n        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      } // Horizontal sides of box.\n\n      for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n        curPos[0] = x;\n        if (dispPos[1] >= dist) {\n          curPos[1] = dispPos[1] - dist;\n          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n          if (info && info.valid) {\n            return info;\n          }\n        }\n        curPos[1] = dispPos[1] + dist;\n        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          return info;\n        }\n      }\n    } // nothing hit.\n\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n    return null;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.generateSelection = function (fx1, fy1, fx2, fy2) {\n    var x1 = Math.floor(fx1);\n    var y1 = Math.floor(fy1);\n    var x2 = Math.floor(fx2);\n    var y2 = Math.floor(fy2);\n    var dataMap = new Map();\n    var outSelectedPosition = [0, 0];\n    for (var yy = y1; yy <= y2; yy++) {\n      for (var xx = x1; xx <= x2; xx++) {\n        var pos = [xx, yy];\n        var info = publicAPI.getPixelInformation(pos, 0, outSelectedPosition);\n        if (info && info.valid) {\n          var hash = getInfoHash(info);\n          if (!dataMap.has(hash)) {\n            dataMap.set(hash, {\n              info: info,\n              pixelCount: 1,\n              attributeIDs: [info.attributeID]\n            });\n          } else {\n            var dmv = dataMap.get(hash);\n            dmv.pixelCount++;\n            if (model.captureZValues) {\n              if (info.zValue < dmv.info.zValue) {\n                dmv.info = info;\n              }\n            }\n            if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n              dmv.attributeIDs.push(info.attributeID);\n            }\n          }\n        }\n      }\n    }\n    return convertSelection(model.fieldAssociation, dataMap, model.captureZValues, model._renderer, model._openGLRenderWindow);\n  };\n  publicAPI.getRawPixelBuffer = function (passNo) {\n    return model.rawPixBuffer[passNo];\n  };\n  publicAPI.getPixelBuffer = function (passNo) {\n    return model.pixBuffer[passNo];\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.attach = function (w, r) {\n    model._openGLRenderWindow = w;\n    model._renderer = r;\n  }; // override\n\n  var superSetArea = publicAPI.setArea;\n  publicAPI.setArea = function () {\n    if (superSetArea.apply(void 0, arguments)) {\n      model.area[0] = Math.floor(model.area[0]);\n      model.area[1] = Math.floor(model.area[1]);\n      model.area[2] = Math.floor(model.area[2]);\n      model.area[3] = Math.floor(model.area[3]);\n      return true;\n    }\n    return false;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  area: undefined,\n  // _renderer: null,\n  // _openGLRenderWindow: null,\n  // _openGLRenderer: null,\n  currentPass: -1,\n  propColorValue: null,\n  props: null,\n  maximumPointId: 0,\n  maximumCellId: 0,\n  idOffset: 1\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkHardwareSelector$1.extend(publicAPI, model, initialValues);\n  model.propColorValue = [0, 0, 0];\n  model.props = [];\n  if (!model.area) {\n    model.area = [0, 0, 0, 0];\n  }\n  macro.setGetArray(publicAPI, model, ['area'], 4);\n  macro.setGet(publicAPI, model, ['_renderer', 'currentPass', '_openGLRenderWindow', 'maximumPointId', 'maximumCellId']);\n  macro.setGetArray(publicAPI, model, ['propColorValue'], 3);\n  macro.moveToProtected(publicAPI, model, ['renderer', 'openGLRenderWindow']);\n  macro.event(publicAPI, model, 'event'); // Object methods\n\n  vtkOpenGLHardwareSelector(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkOpenGLHardwareSelector'); // ----------------------------------------------------------------------------\n\nvar vtkHardwareSelector = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\nexport { vtkHardwareSelector as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","_toConsumableArray","_asyncToGenerator","_regeneratorRuntime","macro","Constants","vtkHardwareSelector$1","vtkOpenGLFramebuffer","vtkSelectionNode","vtkDataSet","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","PassTypes","SelectionContent","SelectionField","FieldAssociations","vtkErrorMacro","idOffset","getInfoHash","info","concat","propID","compositeID","getAlpha","xx","yy","pb","area","offset","convert","r","g","b","getID","low24","high8","val","getPixelInformationWithData","buffdata","inDisplayPosition","maxDistance","outSelectedPosition","maxDist","displayPosition","actorid","pixBuffer","ACTOR_PASS","props","_info","valid","prop","COMPOSITE_INDEX_PASS","captureZValues","zValue","zBuffer","ID_LOW24","high24","ID_HIGH24","attributeID","dispPos","curPos","dist","y","x","convertSelection","fieldassociation","dataMap","renderer","openGLRenderWindow","sel","count","value","child","newInstance","setContentType","INDICES","FIELD_ASSOCIATION_CELLS","setFieldType","CELL","FIELD_ASSOCIATION_POINTS","POINT","getProperties","pixelCount","worldPosition","displayToWorld","setSelectionList","attributeIDs","generateSelectionWithData","fx1","fy1","fx2","fy2","x1","Math","floor","y1","x2","y2","Map","pos","hash","has","set","dmv","get","indexOf","fieldAssociation","vtkOpenGLHardwareSelector","publicAPI","model","classHierarchy","releasePixBuffers","rawPixBuffer","beginSelection","_openGLRenderer","_openGLRenderWindow","getViewNodeFor","_renderer","maxAttributeId","size","getSize","framebuffer","setOpenGLRenderWindow","saveCurrentBindingsAndBuffers","create","populateFramebuffer","fbSize","bind","clear","setSelector","hitProps","propPixels","gl","getContext","originalBlending","isEnabled","BLEND","disable","traverseAllPasses","enable","endSelection","restorePreviousBindingsAndBuffers","preCapturePass","postCapturePass","select","captureBuffers","generateSelection","getSourceDataAsync","_ref","mark","_callee","result","wrap","_callee$","_context","prev","next","undefined","setArea","abrupt","_len","args","Array","_key","stop","_x","_x2","_x3","_x4","_x5","getRenderable","preRender","invokeEvent","type","originalBackground","getBackgroundByReference","setBackground","rpasses","getRenderPasses","currentPass","MIN_KNOWN_PASS","MAX_KNOWN_PASS","passRequired","requestDepth","getFramebuffer","savePixelBuffer","processPixelBuffers","index","isPropHit","processSelectorPixelBuffers","pass","maximumPointId","maximumCellId","passNo","getPixelData","Uint8Array","fb","buildPropHitList","pixelbuffer","renderProp","setPropColorValueFromInt","renderCompositeIndex","renderAttributeId","attribid","passTypeToString","enumToString","id","Boolean","propColorValue","getPixelInformation","_info2","getRawPixelBuffer","getPixelBuffer","attach","w","superSetArea","DEFAULT_VALUES","extend","initialValues","assign","setGetArray","setGet","moveToProtected","event","vtkHardwareSelector","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport macro from '../../macros.js';\nimport Constants from './HardwareSelector/Constants.js';\nimport vtkHardwareSelector$1 from '../Core/HardwareSelector.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkSelectionNode from '../../Common/DataModel/SelectionNode.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar PassTypes = Constants.PassTypes;\nvar SelectionContent = vtkSelectionNode.SelectionContent,\n    SelectionField = vtkSelectionNode.SelectionField;\nvar FieldAssociations = vtkDataSet.FieldAssociations;\nvar vtkErrorMacro = macro.vtkErrorMacro;\nvar idOffset = 1;\n\nfunction getInfoHash(info) {\n  return \"\".concat(info.propID, \" \").concat(info.compositeID);\n}\n\nfunction getAlpha(xx, yy, pb, area) {\n  if (!pb) {\n    return 0;\n  }\n\n  var offset = (yy * (area[2] - area[0] + 1) + xx) * 4;\n  return pb[offset + 3];\n}\n\nfunction convert(xx, yy, pb, area) {\n  if (!pb) {\n    return 0;\n  }\n\n  var offset = (yy * (area[2] - area[0] + 1) + xx) * 4;\n  var r = pb[offset];\n  var g = pb[offset + 1];\n  var b = pb[offset + 2];\n  return (b * 256 + g) * 256 + r;\n}\n\nfunction getID(low24, high8) {\n  /* eslint-disable no-bitwise */\n  var val = high8;\n  val <<= 24;\n  val |= low24;\n  return val;\n  /* eslint-enable no-bitwise */\n}\n\nfunction getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {\n  // Base case\n  var maxDist = maxDistance < 0 ? 0 : maxDistance;\n\n  if (maxDist === 0) {\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n\n    if (inDisplayPosition[0] < buffdata.area[0] || inDisplayPosition[0] > buffdata.area[2] || inDisplayPosition[1] < buffdata.area[1] || inDisplayPosition[1] > buffdata.area[3]) {\n      return null;\n    } // offset inDisplayPosition based on the lower-left-corner of the Area.\n\n\n    var displayPosition = [inDisplayPosition[0] - buffdata.area[0], inDisplayPosition[1] - buffdata.area[1]];\n    var actorid = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ACTOR_PASS], buffdata.area);\n\n    if (actorid <= 0 || actorid - idOffset >= buffdata.props.length) {\n      // the pixel did not hit any actor.\n      return null;\n    }\n\n    var _info = {};\n    _info.valid = true;\n    _info.propID = actorid - idOffset;\n    _info.prop = buffdata.props[_info.propID];\n    var compositeID = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], buffdata.area);\n\n    if (compositeID < 0 || compositeID > 0xffffff) {\n      compositeID = 0;\n    }\n\n    _info.compositeID = compositeID - idOffset;\n\n    if (buffdata.captureZValues) {\n      var offset = (displayPosition[1] * (buffdata.area[2] - buffdata.area[0] + 1) + displayPosition[0]) * 4;\n      _info.zValue = (256 * buffdata.zBuffer[offset] + buffdata.zBuffer[offset + 1]) / 65535.0;\n      _info.displayPosition = inDisplayPosition;\n    }\n\n    if (buffdata.pixBuffer[PassTypes.ID_LOW24]) {\n      if (getAlpha(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_LOW24], buffdata.area) === 0.0) {\n        return _info;\n      }\n    }\n\n    var low24 = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_LOW24], buffdata.area);\n    var high24 = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ID_HIGH24], buffdata.area);\n    _info.attributeID = getID(low24, high24);\n    return _info;\n  } // Iterate over successively growing boxes.\n  // They recursively call the base case to handle single pixels.\n\n\n  var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n  var curPos = [0, 0];\n  var info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);\n\n  if (info && info.valid) {\n    return info;\n  }\n\n  for (var dist = 1; dist < maxDist; ++dist) {\n    // Vertical sides of box.\n    for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n      curPos[1] = y;\n\n      if (dispPos[0] >= dist) {\n        curPos[0] = dispPos[0] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n        if (info && info.valid) {\n          return info;\n        }\n      }\n\n      curPos[0] = dispPos[0] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n      if (info && info.valid) {\n        return info;\n      }\n    } // Horizontal sides of box.\n\n\n    for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n      curPos[0] = x;\n\n      if (dispPos[1] >= dist) {\n        curPos[1] = dispPos[1] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n        if (info && info.valid) {\n          return info;\n        }\n      }\n\n      curPos[1] = dispPos[1] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n      if (info && info.valid) {\n        return info;\n      }\n    }\n  } // nothing hit.\n\n\n  outSelectedPosition[0] = inDisplayPosition[0];\n  outSelectedPosition[1] = inDisplayPosition[1];\n  return null;\n} //-----------------------------------------------------------------------------\n\n\nfunction convertSelection(fieldassociation, dataMap, captureZValues, renderer, openGLRenderWindow) {\n  var sel = [];\n  var count = 0;\n  dataMap.forEach(function (value, key) {\n    var child = vtkSelectionNode.newInstance();\n    child.setContentType(SelectionContent.INDICES);\n\n    switch (fieldassociation) {\n      case FieldAssociations.FIELD_ASSOCIATION_CELLS:\n        child.setFieldType(SelectionField.CELL);\n        break;\n\n      case FieldAssociations.FIELD_ASSOCIATION_POINTS:\n        child.setFieldType(SelectionField.POINT);\n        break;\n\n      default:\n        vtkErrorMacro('Unknown field association');\n    }\n\n    child.getProperties().propID = value.info.propID;\n    child.getProperties().prop = value.info.prop;\n    child.getProperties().compositeID = value.info.compositeID;\n    child.getProperties().attributeID = value.info.attributeID;\n    child.getProperties().pixelCount = value.pixelCount;\n\n    if (captureZValues) {\n      child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];\n      child.getProperties().worldPosition = openGLRenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, renderer);\n    }\n\n    child.setSelectionList(value.attributeIDs);\n    sel[count] = child;\n    count++;\n  });\n  return sel;\n} //----------------------------------------------------------------------------\n\n\nfunction generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {\n  var x1 = Math.floor(fx1);\n  var y1 = Math.floor(fy1);\n  var x2 = Math.floor(fx2);\n  var y2 = Math.floor(fy2);\n  var dataMap = new Map();\n  var outSelectedPosition = [0, 0];\n\n  for (var yy = y1; yy <= y2; yy++) {\n    for (var xx = x1; xx <= x2; xx++) {\n      var pos = [xx, yy];\n      var info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);\n\n      if (info && info.valid) {\n        var hash = getInfoHash(info);\n\n        if (!dataMap.has(hash)) {\n          dataMap.set(hash, {\n            info: info,\n            pixelCount: 1,\n            attributeIDs: [info.attributeID]\n          });\n        } else {\n          var dmv = dataMap.get(hash);\n          dmv.pixelCount++;\n\n          if (buffdata.captureZValues) {\n            if (info.zValue < dmv.info.zValue) {\n              dmv.info = info;\n            }\n          }\n\n          if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n            dmv.attributeIDs.push(info.attributeID);\n          }\n        }\n      }\n    }\n  }\n\n  return convertSelection(buffdata.fieldAssociation, dataMap, buffdata.captureZValues, buffdata.renderer, buffdata.openGLRenderWindow);\n} // ----------------------------------------------------------------------------\n// vtkOpenGLHardwareSelector methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkOpenGLHardwareSelector(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLHardwareSelector'); //----------------------------------------------------------------------------\n\n  publicAPI.releasePixBuffers = function () {\n    model.rawPixBuffer = [];\n    model.pixBuffer = [];\n    model.zBuffer = null;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.beginSelection = function () {\n    model._openGLRenderer = model._openGLRenderWindow.getViewNodeFor(model._renderer);\n    model.maxAttributeId = 0;\n\n    var size = model._openGLRenderWindow.getSize();\n\n    if (!model.framebuffer) {\n      model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()\n\n      model.framebuffer.populateFramebuffer();\n    } else {\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      var fbSize = model.framebuffer.getSize();\n\n      if (fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()\n\n        model.framebuffer.populateFramebuffer();\n      } else {\n        model.framebuffer.bind();\n      }\n    }\n\n    model._openGLRenderer.clear();\n\n    model._openGLRenderer.setSelector(publicAPI);\n\n    model.hitProps = {};\n    model.propPixels = {};\n    model.props = [];\n    publicAPI.releasePixBuffers();\n\n    if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n      var gl = model._openGLRenderWindow.getContext();\n\n      var originalBlending = gl.isEnabled(gl.BLEND);\n      gl.disable(gl.BLEND);\n\n      model._openGLRenderWindow.traverseAllPasses();\n\n      if (originalBlending) {\n        gl.enable(gl.BLEND);\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.endSelection = function () {\n    model.hitProps = {};\n\n    model._openGLRenderer.setSelector(null);\n\n    model.framebuffer.restorePreviousBindingsAndBuffers();\n  };\n\n  publicAPI.preCapturePass = function () {\n    var gl = model._openGLRenderWindow.getContext(); // Disable blending\n\n\n    model.originalBlending = gl.isEnabled(gl.BLEND);\n    gl.disable(gl.BLEND);\n  };\n\n  publicAPI.postCapturePass = function () {\n    var gl = model._openGLRenderWindow.getContext(); // Restore blending if it was enabled prior to the capture\n\n\n    if (model.originalBlending) {\n      gl.enable(gl.BLEND);\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.select = function () {\n    var sel = null;\n\n    if (publicAPI.captureBuffers()) {\n      sel = publicAPI.generateSelection(model.area[0], model.area[1], model.area[2], model.area[3]);\n      publicAPI.releasePixBuffers();\n    }\n\n    return sel;\n  };\n\n  publicAPI.getSourceDataAsync = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(renderer, fx1, fy1, fx2, fy2) {\n      var size, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // assign the renderer\n              model._renderer = renderer; // set area to all if no arguments provided\n\n              if (fx1 === undefined) {\n                size = model._openGLRenderWindow.getSize();\n                publicAPI.setArea(0, 0, size[0] - 1, size[1] - 1);\n              } else {\n                publicAPI.setArea(fx1, fy1, fx2, fy2);\n              } // just do capture buffers and package up the result\n\n\n              if (publicAPI.captureBuffers()) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", false);\n\n            case 4:\n              result = {\n                area: _toConsumableArray(model.area),\n                pixBuffer: _toConsumableArray(model.pixBuffer),\n                captureZValues: model.captureZValues,\n                zBuffer: model.zBuffer,\n                props: _toConsumableArray(model.props),\n                fieldAssociation: model.fieldAssociation,\n                renderer: renderer,\n                openGLRenderWindow: model._openGLRenderWindow\n              };\n\n              result.generateSelection = function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n\n                return generateSelectionWithData.apply(void 0, [result].concat(args));\n              };\n\n              return _context.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3, _x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }(); //----------------------------------------------------------------------------\n\n\n  publicAPI.captureBuffers = function () {\n    if (!model._renderer || !model._openGLRenderWindow) {\n      vtkErrorMacro('Renderer and view must be set before calling Select.');\n      return false;\n    }\n\n    model._openGLRenderer = model._openGLRenderWindow.getViewNodeFor(model._renderer); // todo revisit making selection part of core\n    // then we can do this in core\n\n    model._openGLRenderWindow.getRenderable().preRender(); // int rgba[4];\n    // rwin.getColorBufferSizes(rgba);\n    // if (rgba[0] < 8 || rgba[1] < 8 || rgba[2] < 8) {\n    //   vtkErrorMacro(\"Color buffer depth must be at least 8 bit. \"\n    //     \"Currently: \" << rgba[0] << \", \" << rgba[1] << \", \" <<rgba[2]);\n    //   return false;\n    // }\n\n\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    }); // Initialize renderer for selection.\n    // change the renderer's background to black, which will indicate a miss\n\n    model.originalBackground = model._renderer.getBackgroundByReference();\n\n    model._renderer.setBackground(0.0, 0.0, 0.0, 0.0);\n\n    var rpasses = model._openGLRenderWindow.getRenderPasses();\n\n    publicAPI.beginSelection();\n\n    for (model.currentPass = PassTypes.MIN_KNOWN_PASS; model.currentPass <= PassTypes.MAX_KNOWN_PASS; model.currentPass++) {\n      if (publicAPI.passRequired(model.currentPass)) {\n        publicAPI.preCapturePass(model.currentPass);\n\n        if (model.captureZValues && model.currentPass === PassTypes.ACTOR_PASS && typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {\n          rpasses[0].requestDepth();\n\n          model._openGLRenderWindow.traverseAllPasses();\n        } else {\n          model._openGLRenderWindow.traverseAllPasses();\n        }\n\n        publicAPI.postCapturePass(model.currentPass);\n        publicAPI.savePixelBuffer(model.currentPass);\n        publicAPI.processPixelBuffers();\n      }\n    }\n\n    publicAPI.endSelection(); // restore original background\n\n    model._renderer.setBackground(model.originalBackground);\n\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    }); // restore image, not needed?\n    // model._openGLRenderWindow.traverseAllPasses();\n\n    return true;\n  };\n\n  publicAPI.processPixelBuffers = function () {\n    model.props.forEach(function (prop, index) {\n      if (publicAPI.isPropHit(index)) {\n        prop.processSelectorPixelBuffers(publicAPI, model.propPixels[index]);\n      }\n    });\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.passRequired = function (pass) {\n    if (pass === PassTypes.ID_HIGH24) {\n      if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_POINTS) {\n        return model.maximumPointId > 0x00ffffff;\n      }\n\n      if (model.fieldAssociation === FieldAssociations.FIELD_ASSOCIATION_CELLS) {\n        return model.maximumCellId > 0x00ffffff;\n      }\n    }\n\n    return true;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.savePixelBuffer = function (passNo) {\n    model.pixBuffer[passNo] = model._openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);\n\n    if (!model.rawPixBuffer[passNo]) {\n      var size = (model.area[2] - model.area[0] + 1) * (model.area[3] - model.area[1] + 1) * 4;\n      model.rawPixBuffer[passNo] = new Uint8Array(size);\n      model.rawPixBuffer[passNo].set(model.pixBuffer[passNo]);\n    }\n\n    if (passNo === PassTypes.ACTOR_PASS) {\n      if (model.captureZValues) {\n        var rpasses = model._openGLRenderWindow.getRenderPasses();\n\n        if (typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {\n          var fb = rpasses[0].getFramebuffer();\n          fb.saveCurrentBindingsAndBuffers();\n          fb.bind();\n          model.zBuffer = model._openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);\n          fb.restorePreviousBindingsAndBuffers();\n        }\n      }\n\n      publicAPI.buildPropHitList(model.rawPixBuffer[passNo]);\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.buildPropHitList = function (pixelbuffer) {\n    var offset = 0;\n\n    for (var yy = 0; yy <= model.area[3] - model.area[1]; yy++) {\n      for (var xx = 0; xx <= model.area[2] - model.area[0]; xx++) {\n        var val = convert(xx, yy, pixelbuffer, model.area);\n\n        if (val > 0) {\n          val--;\n\n          if (!(val in model.hitProps)) {\n            model.hitProps[val] = true;\n            model.propPixels[val] = [];\n          }\n\n          model.propPixels[val].push(offset * 4);\n        }\n\n        ++offset;\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.renderProp = function (prop) {\n    if (model.currentPass === PassTypes.ACTOR_PASS) {\n      publicAPI.setPropColorValueFromInt(model.props.length + idOffset);\n      model.props.push(prop);\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.renderCompositeIndex = function (index) {\n    if (model.currentPass === PassTypes.COMPOSITE_INDEX_PASS) {\n      publicAPI.setPropColorValueFromInt(index + idOffset);\n    }\n  }; //----------------------------------------------------------------------------\n  // TODO: make inline\n\n\n  publicAPI.renderAttributeId = function (attribid) {\n    if (attribid < 0) {\n      // negative attribid is valid. It happens when rendering higher order\n      // elements where new points are added for rendering smooth surfaces.\n      return;\n    }\n\n    model.maxAttributeId = attribid > model.maxAttributeId ? attribid : model.maxAttributeId; // if (model.currentPass < PassTypes.ID_LOW24) {\n    //   return; // useless...\n    // }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.passTypeToString = function (type) {\n    return macro.enumToString(PassTypes, type);\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.isPropHit = function (id) {\n    return Boolean(model.hitProps[id]);\n  };\n\n  publicAPI.setPropColorValueFromInt = function (val) {\n    model.propColorValue[0] = val % 256 / 255.0;\n    model.propColorValue[1] = Math.floor(val / 256) % 256 / 255.0;\n    model.propColorValue[2] = Math.floor(val / 65536) % 256 / 255.0;\n  }; // info has\n  //   valid\n  //   propId\n  //   prop\n  //   compositeID\n  //   attributeID\n  //----------------------------------------------------------------------------\n\n\n  publicAPI.getPixelInformation = function (inDisplayPosition, maxDistance, outSelectedPosition) {\n    // Base case\n    var maxDist = maxDistance < 0 ? 0 : maxDistance;\n\n    if (maxDist === 0) {\n      outSelectedPosition[0] = inDisplayPosition[0];\n      outSelectedPosition[1] = inDisplayPosition[1];\n\n      if (inDisplayPosition[0] < model.area[0] || inDisplayPosition[0] > model.area[2] || inDisplayPosition[1] < model.area[1] || inDisplayPosition[1] > model.area[3]) {\n        return null;\n      } // offset inDisplayPosition based on the lower-left-corner of the Area.\n\n\n      var displayPosition = [inDisplayPosition[0] - model.area[0], inDisplayPosition[1] - model.area[1]];\n      var actorid = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ACTOR_PASS], model.area);\n\n      if (actorid <= 0 || actorid - idOffset >= model.props.length) {\n        // the pixel did not hit any actor.\n        return null;\n      }\n\n      var _info2 = {};\n      _info2.valid = true;\n      _info2.propID = actorid - idOffset;\n      _info2.prop = model.props[_info2.propID];\n      var compositeID = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], model.area);\n\n      if (compositeID < 0 || compositeID > 0xffffff) {\n        compositeID = 0;\n      }\n\n      _info2.compositeID = compositeID - idOffset;\n\n      if (model.captureZValues) {\n        var offset = (displayPosition[1] * (model.area[2] - model.area[0] + 1) + displayPosition[0]) * 4;\n        _info2.zValue = (256 * model.zBuffer[offset] + model.zBuffer[offset + 1]) / 65535.0;\n        _info2.displayPosition = inDisplayPosition;\n      } // Skip attribute ids if alpha is zero (missed)\n\n\n      if (model.pixBuffer[PassTypes.ID_LOW24]) {\n        if (getAlpha(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_LOW24], model.area) === 0.0) {\n          return _info2;\n        }\n      }\n\n      var low24 = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_LOW24], model.area);\n      var high24 = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ID_HIGH24], model.area);\n      _info2.attributeID = getID(low24, high24);\n      return _info2;\n    } // Iterate over successively growing boxes.\n    // They recursively call the base case to handle single pixels.\n\n\n    var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n    var curPos = [0, 0];\n    var info = publicAPI.getPixelInformation(inDisplayPosition, 0, outSelectedPosition);\n\n    if (info && info.valid) {\n      return info;\n    }\n\n    for (var dist = 1; dist < maxDist; ++dist) {\n      // Vertical sides of box.\n      for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n        curPos[1] = y;\n\n        if (dispPos[0] >= dist) {\n          curPos[0] = dispPos[0] - dist;\n          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n\n          if (info && info.valid) {\n            return info;\n          }\n        }\n\n        curPos[0] = dispPos[0] + dist;\n        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n\n        if (info && info.valid) {\n          return info;\n        }\n      } // Horizontal sides of box.\n\n\n      for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n        curPos[0] = x;\n\n        if (dispPos[1] >= dist) {\n          curPos[1] = dispPos[1] - dist;\n          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n\n          if (info && info.valid) {\n            return info;\n          }\n        }\n\n        curPos[1] = dispPos[1] + dist;\n        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);\n\n        if (info && info.valid) {\n          return info;\n        }\n      }\n    } // nothing hit.\n\n\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n    return null;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.generateSelection = function (fx1, fy1, fx2, fy2) {\n    var x1 = Math.floor(fx1);\n    var y1 = Math.floor(fy1);\n    var x2 = Math.floor(fx2);\n    var y2 = Math.floor(fy2);\n    var dataMap = new Map();\n    var outSelectedPosition = [0, 0];\n\n    for (var yy = y1; yy <= y2; yy++) {\n      for (var xx = x1; xx <= x2; xx++) {\n        var pos = [xx, yy];\n        var info = publicAPI.getPixelInformation(pos, 0, outSelectedPosition);\n\n        if (info && info.valid) {\n          var hash = getInfoHash(info);\n\n          if (!dataMap.has(hash)) {\n            dataMap.set(hash, {\n              info: info,\n              pixelCount: 1,\n              attributeIDs: [info.attributeID]\n            });\n          } else {\n            var dmv = dataMap.get(hash);\n            dmv.pixelCount++;\n\n            if (model.captureZValues) {\n              if (info.zValue < dmv.info.zValue) {\n                dmv.info = info;\n              }\n            }\n\n            if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n              dmv.attributeIDs.push(info.attributeID);\n            }\n          }\n        }\n      }\n    }\n\n    return convertSelection(model.fieldAssociation, dataMap, model.captureZValues, model._renderer, model._openGLRenderWindow);\n  };\n\n  publicAPI.getRawPixelBuffer = function (passNo) {\n    return model.rawPixBuffer[passNo];\n  };\n\n  publicAPI.getPixelBuffer = function (passNo) {\n    return model.pixBuffer[passNo];\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.attach = function (w, r) {\n    model._openGLRenderWindow = w;\n    model._renderer = r;\n  }; // override\n\n\n  var superSetArea = publicAPI.setArea;\n\n  publicAPI.setArea = function () {\n    if (superSetArea.apply(void 0, arguments)) {\n      model.area[0] = Math.floor(model.area[0]);\n      model.area[1] = Math.floor(model.area[1]);\n      model.area[2] = Math.floor(model.area[2]);\n      model.area[3] = Math.floor(model.area[3]);\n      return true;\n    }\n\n    return false;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  area: undefined,\n  // _renderer: null,\n  // _openGLRenderWindow: null,\n  // _openGLRenderer: null,\n  currentPass: -1,\n  propColorValue: null,\n  props: null,\n  maximumPointId: 0,\n  maximumCellId: 0,\n  idOffset: 1\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkHardwareSelector$1.extend(publicAPI, model, initialValues);\n  model.propColorValue = [0, 0, 0];\n  model.props = [];\n\n  if (!model.area) {\n    model.area = [0, 0, 0, 0];\n  }\n\n  macro.setGetArray(publicAPI, model, ['area'], 4);\n  macro.setGet(publicAPI, model, ['_renderer', 'currentPass', '_openGLRenderWindow', 'maximumPointId', 'maximumCellId']);\n  macro.setGetArray(publicAPI, model, ['propColorValue'], 3);\n  macro.moveToProtected(publicAPI, model, ['renderer', 'openGLRenderWindow']);\n  macro.event(publicAPI, model, 'event'); // Object methods\n\n  vtkOpenGLHardwareSelector(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkOpenGLHardwareSelector'); // ----------------------------------------------------------------------------\n\nvar vtkHardwareSelector = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\n\nexport { vtkHardwareSelector as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}