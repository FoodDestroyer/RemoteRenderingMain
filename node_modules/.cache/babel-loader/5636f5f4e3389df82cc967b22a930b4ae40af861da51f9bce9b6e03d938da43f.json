{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkImageData from './ImageData.js';\nimport vtkPolyData from './PolyData.js';\nimport vtkDataArray from '../Core/DataArray.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // see itk.js PixelTypes.js\n\nvar ITKJSPixelTypes = {\n  Unknown: 0,\n  Scalar: 1,\n  RGB: 2,\n  RGBA: 3,\n  Offset: 4,\n  Vector: 5,\n  Point: 6,\n  CovariantVector: 7,\n  SymmetricSecondRankTensor: 8,\n  DiffusionTensor3D: 9,\n  Complex: 10,\n  FixedArray: 11,\n  Array: 12,\n  Matrix: 13,\n  VariableLengthVector: 14,\n  VariableSizeMatrix: 15\n}; // itk-wasm pixel types from https://github.com/InsightSoftwareConsortium/itk-wasm/blob/master/src/core/PixelTypes.ts\n\nvar ITKWASMPixelTypes = {\n  Unknown: 'Unknown',\n  Scalar: 'Scalar',\n  RGB: 'RGB',\n  RGBA: 'RGBA',\n  Offset: 'Offset',\n  Vector: 'Vector',\n  Point: 'Point',\n  CovariantVector: 'CovariantVector',\n  SymmetricSecondRankTensor: 'SymmetricSecondRankTensor',\n  DiffusionTensor3D: 'DiffusionTensor3D',\n  Complex: 'Complex',\n  FixedArray: 'FixedArray',\n  Array: 'Array',\n  Matrix: 'Matrix',\n  VariableLengthVector: 'VariableLengthVector',\n  VariableSizeMatrix: 'VariableSizeMatrix'\n};\nvar vtkArrayTypeToItkComponentType = new Map([['Uint8Array', 'uint8'], ['Int8Array', 'int8'], ['Uint16Array', 'uint16'], ['Int16Array', 'int16'], ['Uint32Array', 'uint32'], ['Int32Array', 'int32'], ['Float32Array', 'float32'], ['Float64Array', 'float64']]);\nvar itkComponentTypeToVtkArrayType = new Map([['uint8', 'Uint8Array'], ['int8', 'Int8Array'], ['uint16', 'Uint16Array'], ['int16', 'Int16Array'], ['uint32', 'Uint32Array'], ['int32', 'Int32Array'], ['float32', 'Float32Array'], ['float64', 'Float64Array']]);\n/**\n * Converts an itk-wasm Image to a vtk.js vtkImageData.\n *\n * Requires an itk-wasm Image as input.\n */\n\nfunction convertItkToVtkImage(itkImage) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var vtkImage = {\n    origin: [0, 0, 0],\n    spacing: [1, 1, 1]\n  };\n  var dimensions = [1, 1, 1];\n  var direction = [1, 0, 0, 0, 1, 0, 0, 0, 1]; // Check whether itkImage is an itk.js Image or an itk-wasm Image?\n\n  var isITKWasm = itkImage.direction.data === undefined;\n  var ITKPixelTypes = isITKWasm ? ITKWASMPixelTypes : ITKJSPixelTypes;\n  for (var idx = 0; idx < itkImage.imageType.dimension; ++idx) {\n    vtkImage.origin[idx] = itkImage.origin[idx];\n    vtkImage.spacing[idx] = itkImage.spacing[idx];\n    dimensions[idx] = itkImage.size[idx];\n    for (var col = 0; col < itkImage.imageType.dimension; ++col) {\n      // ITK (and VTKMath) use a row-major index axis, but the direction\n      // matrix on the vtkImageData is a webGL matrix, which uses a\n      // column-major data layout. Transpose the direction matrix from\n      // itkImage when instantiating that vtkImageData direction matrix.\n      if (isITKWasm) {\n        direction[col + idx * 3] = itkImage.direction[idx + col * itkImage.imageType.dimension];\n      } else {\n        direction[col + idx * 3] = itkImage.direction.data[idx + col * itkImage.imageType.dimension];\n      }\n    }\n  } // Create VTK Image Data\n\n  var imageData = vtkImageData.newInstance(vtkImage); // Create VTK point data -- the data associated with the pixels / voxels\n\n  var pointData = vtkDataArray.newInstance({\n    name: options.scalarArrayName || 'Scalars',\n    values: itkImage.data,\n    numberOfComponents: itkImage.imageType.components\n  });\n  imageData.setDirection(direction);\n  imageData.setDimensions.apply(imageData, dimensions); // Always associate multi-component pixel types with vtk.js point data\n  // scalars to facilitate multi-component volume rendering\n\n  imageData.getPointData().setScalars(pointData); // Associate the point data that are 3D vectors / tensors\n  // Refer to itk-js/src/PixelTypes.js for numerical values\n\n  switch (isITKWasm ? ITKPixelTypes[itkImage.imageType.pixelType] : itkImage.imageType.pixelType) {\n    case ITKPixelTypes.Scalar:\n      break;\n    case ITKPixelTypes.RGB:\n      break;\n    case ITKPixelTypes.RGBA:\n      break;\n    case ITKPixelTypes.Offset:\n      break;\n    case ITKPixelTypes.Vector:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 3) {\n        imageData.getPointData().setVectors(pointData);\n      }\n      break;\n    case ITKPixelTypes.Point:\n      break;\n    case ITKPixelTypes.CovariantVector:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 3) {\n        imageData.getPointData().setVectors(pointData);\n      }\n      break;\n    case ITKPixelTypes.SymmetricSecondRankTensor:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 6) {\n        imageData.getPointData().setTensors(pointData);\n      }\n      break;\n    case ITKPixelTypes.DiffusionTensor3D:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 6) {\n        imageData.getPointData().setTensors(pointData);\n      }\n      break;\n    case ITKPixelTypes.Complex:\n      break;\n    case ITKPixelTypes.FixedArray:\n      break;\n    case ITKPixelTypes.Array:\n      break;\n    case ITKPixelTypes.Matrix:\n      break;\n    case ITKPixelTypes.VariableLengthVector:\n      break;\n    case ITKPixelTypes.VariableSizeMatrix:\n      break;\n    default:\n      vtkErrorMacro(\"Cannot handle unexpected itk-wasm pixel type \".concat(itkImage.imageType.pixelType));\n      return null;\n  }\n  return imageData;\n}\n/**\n * Converts a vtk.js vtkImageData to an itk-wasm Image.\n *\n * Requires a vtk.js vtkImageData as input.\n *\n */\n\nfunction convertVtkToItkImage(vtkImage) {\n  var copyData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var dimension = 3;\n  var itkImage = {\n    imageType: {\n      dimension: dimension,\n      pixelType: ITKWASMPixelTypes.Scalar,\n      componentType: '',\n      components: 1\n    },\n    name: 'vtkImageData',\n    origin: vtkImage.getOrigin(),\n    spacing: vtkImage.getSpacing(),\n    direction: new Float64Array(9),\n    size: vtkImage.getDimensions()\n  };\n  var direction = vtkImage.getDirection(); // Transpose the direction matrix from column-major to row-major\n\n  for (var idx = 0; idx < dimension; ++idx) {\n    for (var idy = 0; idy < dimension; ++idy) {\n      itkImage.direction[idx + idy * dimension] = direction[idy + idx * dimension];\n    }\n  }\n  var pointData = vtkImage.getPointData();\n  var vtkArray;\n  if (pointData.getTensors() !== null) {\n    itkImage.imageType.pixelType = ITKWASMPixelTypes.DiffusionTensor3D;\n    vtkArray = pointData.getTensors();\n  } else if (pointData.getVectors() != null) {\n    itkImage.imageType.pixelType = ITKWASMPixelTypes.Vector;\n    vtkArray = pointData.getVectors();\n  } else {\n    vtkArray = pointData.getScalars();\n  }\n  itkImage.imageType.componentType = vtkArrayTypeToItkComponentType.get(vtkArray.getDataType());\n  if (copyData) {\n    // Copy the data array\n    itkImage.data = vtkArray.getData().slice(0);\n  } else {\n    itkImage.data = vtkArray.getData();\n  }\n  return itkImage;\n}\n/**\n * Converts an itk-wasm PolyData to a vtk.js vtkPolyData.\n *\n * Requires an itk-wasm PolyData as input.\n */\n\nfunction convertItkToVtkPolyData(itkPolyData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pointDataArrays = [];\n  if (itkPolyData.pointData.length) {\n    pointDataArrays.push({\n      data: {\n        vtkClass: 'vtkDataArray',\n        name: options.pointDataName || 'PointData',\n        numberOfComponents: itkPolyData.polyDataType.pointPixelComponents,\n        size: itkPolyData.pointData.length,\n        dataType: itkComponentTypeToVtkArrayType.get(itkPolyData.polyDataType.pointPixelComponentType),\n        buffer: itkPolyData.pointData.buffer,\n        values: itkPolyData.pointData\n      }\n    });\n  }\n  var cellDataArrays = [];\n  if (itkPolyData.cellData.length) {\n    cellDataArrays.push({\n      data: {\n        vtkClass: 'vtkDataArray',\n        name: options.cellDataName || 'CellData',\n        numberOfComponents: itkPolyData.polyDataType.pointPixelComponents,\n        size: itkPolyData.cellData.length,\n        dataType: itkComponentTypeToVtkArrayType.get(itkPolyData.polyDataType.pointPixelComponentType),\n        buffer: itkPolyData.cellData.buffer,\n        values: itkPolyData.cellData\n      }\n    });\n  }\n  var vtkPolyDataModel = {\n    points: {\n      vtkClass: 'vtkPoints',\n      name: '_points',\n      numberOfComponents: 3,\n      size: itkPolyData.numberOfPoints,\n      dataType: 'Float32Array',\n      buffer: itkPolyData.points.buffer,\n      values: itkPolyData.points\n    },\n    verts: {\n      vtkClass: 'vtkCellArray',\n      name: '_verts',\n      numberOfComponents: 1,\n      size: itkPolyData.verticesBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.vertices.buffer,\n      values: itkPolyData.vertices\n    },\n    lines: {\n      vtkClass: 'vtkCellArray',\n      name: '_lines',\n      numberOfComponents: 1,\n      size: itkPolyData.linesBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.lines.buffer,\n      values: itkPolyData.lines\n    },\n    polys: {\n      vtkClass: 'vtkCellArray',\n      name: '_polys',\n      numberOfComponents: 1,\n      size: itkPolyData.polygonsBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.polygons.buffer,\n      values: itkPolyData.polygons\n    },\n    strips: {\n      vtkClass: 'vtkCellArray',\n      name: '_strips',\n      numberOfComponents: 1,\n      size: itkPolyData.triangleStripsBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.triangleStrips.buffer,\n      values: itkPolyData.triangleStrips\n    },\n    pointData: {\n      vtkClass: 'vtkDataSetAttributes',\n      activeGlobalIds: -1,\n      activeNormals: -1,\n      activePedigreeIds: -1,\n      activeScalars: -1,\n      activeTCoords: -1,\n      activeTensors: -1,\n      activeVectors: -1,\n      copyFieldFlags: [],\n      doCopyAllOff: false,\n      doCopyAllOn: true,\n      arrays: pointDataArrays\n    },\n    cellData: {\n      vtkClass: 'vtkDataSetAttributes',\n      activeGlobalIds: -1,\n      activeNormals: -1,\n      activePedigreeIds: -1,\n      activeScalars: -1,\n      activeTCoords: -1,\n      activeTensors: -1,\n      activeVectors: -1,\n      copyFieldFlags: [],\n      doCopyAllOff: false,\n      doCopyAllOn: true,\n      arrays: cellDataArrays\n    }\n  }; // Create VTK PolyData\n\n  var polyData = vtkPolyData.newInstance(vtkPolyDataModel);\n  var pd = polyData.getPointData();\n  var cd = polyData.getCellData();\n  if (itkPolyData.pointData.length) {\n    // Associate the point data that are 3D vectors / tensors\n    switch (ITKWASMPixelTypes[itkPolyData.polyDataType.pointPixelType]) {\n      case ITKWASMPixelTypes.Scalar:\n        pd.setScalars(pd.getArrayByIndex(0));\n        break;\n      case ITKWASMPixelTypes.RGB:\n        break;\n      case ITKWASMPixelTypes.RGBA:\n        break;\n      case ITKWASMPixelTypes.Offset:\n        break;\n      case ITKWASMPixelTypes.Vector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          pd.setVectors(pd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.Point:\n        break;\n      case ITKWASMPixelTypes.CovariantVector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          pd.setVectors(pd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.SymmetricSecondRankTensor:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          pd.setTensors(pd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.DiffusionTensor3D:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          pd.setTensors(pd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.Complex:\n        break;\n      case ITKWASMPixelTypes.FixedArray:\n        break;\n      case ITKWASMPixelTypes.Array:\n        break;\n      case ITKWASMPixelTypes.Matrix:\n        break;\n      case ITKWASMPixelTypes.VariableLengthVector:\n        break;\n      case ITKWASMPixelTypes.VariableSizeMatrix:\n        break;\n      default:\n        vtkErrorMacro(\"Cannot handle unexpected itk-wasm pixel type \".concat(itkPolyData.polyDataType.pointPixelType));\n        return null;\n    }\n  }\n  if (itkPolyData.cellData.length) {\n    // Associate the cell data that are 3D vectors / tensors\n    switch (ITKWASMPixelTypes[itkPolyData.polyDataType.cellPixelType]) {\n      case ITKWASMPixelTypes.Scalar:\n        cd.setScalars(cd.getArrayByIndex(0));\n        break;\n      case ITKWASMPixelTypes.RGB:\n        break;\n      case ITKWASMPixelTypes.RGBA:\n        break;\n      case ITKWASMPixelTypes.Offset:\n        break;\n      case ITKWASMPixelTypes.Vector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          cd.setVectors(cd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.Point:\n        break;\n      case ITKWASMPixelTypes.CovariantVector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          cd.setVectors(cd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.SymmetricSecondRankTensor:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          cd.setTensors(cd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.DiffusionTensor3D:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          cd.setTensors(cd.getArrayByIndex(0));\n        }\n        break;\n      case ITKWASMPixelTypes.Complex:\n        break;\n      case ITKWASMPixelTypes.FixedArray:\n        break;\n      case ITKWASMPixelTypes.Array:\n        break;\n      case ITKWASMPixelTypes.Matrix:\n        break;\n      case ITKWASMPixelTypes.VariableLengthVector:\n        break;\n      case ITKWASMPixelTypes.VariableSizeMatrix:\n        break;\n      default:\n        vtkErrorMacro(\"Cannot handle unexpected itk-wasm pixel type \".concat(itkPolyData.polyDataType.pointPixelType));\n        return null;\n    }\n  }\n  return polyData;\n}\n/**\n * Converts a vtk.js vtkPolyData to an itk-wasm PolyData.\n *\n * Requires a vtk.js vtkPolyData as input.\n *\n */\n\nfunction convertVtkToItkPolyData(polyData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var itkPolyData = {\n    polyDataType: {\n      pointPixelComponentType: 'float32',\n      pointPixelComponents: 1,\n      pointPixelType: 'Scalar',\n      cellPixelComponentType: 'float32',\n      cellPixelComponents: 1,\n      cellPixelType: 'Scalar'\n    },\n    numberOfPoints: polyData.getNumberOfPoints(),\n    points: polyData.getPoints().getData(),\n    verticesBufferSize: polyData.getVerts().getNumberOfValues(),\n    vertices: polyData.getVerts().getData(),\n    linesBufferSize: polyData.getLines().getNumberOfValues(),\n    lines: polyData.getLines().getData(),\n    polygonsBufferSize: polyData.getPolys().getNumberOfValues(),\n    polygons: polyData.getPolys().getData(),\n    triangleStripsBufferSize: polyData.getStrips().getNumberOfValues(),\n    triangleStrips: polyData.getStrips().getData(),\n    numberOfPointPixels: 0,\n    pointData: new Float32Array(),\n    numberOfCellPixels: 0,\n    cellData: new Float32Array()\n  };\n  var pd = polyData.getPointData();\n  if (pd.getNumberOfArrays()) {\n    var pdArray = options.pointDataName ? pd.getArrayByName(options.pointDataName) : pd.getArrayByIndex(0);\n    itkPolyData.numberOfPointPixels = pdArray.getNumberOfTuples();\n    itkPolyData.pointData = pdArray.getData();\n    itkPolyData.polyDataType.pointPixelComponentType = vtkArrayTypeToItkComponentType.get(pdArray.getDataType()); // default to the same type\n\n    itkPolyData.polyDataType.cellPixelComponentType = itkPolyData.polyDataType.pointPixelComponentType;\n    itkPolyData.polyDataType.pointPixelComponents = pdArray.getNumberOfComponents();\n    itkPolyData.polyDataType.cellPixelComponents = itkPolyData.polyDataType.pointPixelComponents;\n    if (pd.getTensors() === pdArray) {\n      itkPolyData.polyDataType.pointPixelType = ITKWASMPixelTypes.SymmetricSecondRankTensor;\n    } else if (pd.getVectors() === pdArray) {\n      itkPolyData.polyDataType.pointPixelType = ITKWASMPixelTypes.Vector;\n    }\n    itkPolyData.polyDataType.cellPixelType = itkPolyData.polyDataType.pointPixelType;\n  }\n  var cd = polyData.getCellData();\n  if (cd.getNumberOfArrays()) {\n    var cdArray = options.cellDataName ? pd.getArrayByName(options.cellDataName) : pd.getArrayByIndex(0);\n    itkPolyData.numberOfCellPixels = cdArray.getNumberOfTuples();\n    itkPolyData.cellData = cdArray.getData();\n    itkPolyData.polyDataType.cellPixelComponentType = vtkArrayTypeToItkComponentType.get(cdArray.getDataType());\n    itkPolyData.polyDataType.cellPixelComponents = cdArray.getNumberOfComponents();\n    if (cd.getTensors() === cdArray) {\n      itkPolyData.polyDataType.cellPixelType = ITKWASMPixelTypes.SymmetricSecondRankTensor;\n    } else if (cd.getVectors() === cdArray) {\n      itkPolyData.polyDataType.cellPixelType = ITKWASMPixelTypes.Vector;\n    } else {\n      itkPolyData.polyDataType.cellPixelType = ITKWASMPixelTypes.Scalar;\n    }\n  }\n  return itkPolyData;\n}\nvar ITKHelper = {\n  convertItkToVtkImage: convertItkToVtkImage,\n  convertVtkToItkImage: convertVtkToItkImage,\n  convertItkToVtkPolyData: convertItkToVtkPolyData,\n  convertVtkToItkPolyData: convertVtkToItkPolyData\n};\nexport { convertItkToVtkImage, convertItkToVtkPolyData, convertVtkToItkImage, convertVtkToItkPolyData, ITKHelper as default };","map":{"version":3,"names":["macro","vtkImageData","vtkPolyData","vtkDataArray","vtkErrorMacro","ITKJSPixelTypes","Unknown","Scalar","RGB","RGBA","Offset","Vector","Point","CovariantVector","SymmetricSecondRankTensor","DiffusionTensor3D","Complex","FixedArray","Array","Matrix","VariableLengthVector","VariableSizeMatrix","ITKWASMPixelTypes","vtkArrayTypeToItkComponentType","Map","itkComponentTypeToVtkArrayType","convertItkToVtkImage","itkImage","options","arguments","length","undefined","vtkImage","origin","spacing","dimensions","direction","isITKWasm","data","ITKPixelTypes","idx","imageType","dimension","size","col","imageData","newInstance","pointData","name","scalarArrayName","values","numberOfComponents","components","setDirection","setDimensions","apply","getPointData","setScalars","pixelType","setVectors","setTensors","concat","convertVtkToItkImage","copyData","componentType","getOrigin","getSpacing","Float64Array","getDimensions","getDirection","idy","vtkArray","getTensors","getVectors","getScalars","get","getDataType","getData","slice","convertItkToVtkPolyData","itkPolyData","pointDataArrays","push","vtkClass","pointDataName","polyDataType","pointPixelComponents","dataType","pointPixelComponentType","buffer","cellDataArrays","cellData","cellDataName","vtkPolyDataModel","points","numberOfPoints","verts","verticesBufferSize","vertices","lines","linesBufferSize","polys","polygonsBufferSize","polygons","strips","triangleStripsBufferSize","triangleStrips","activeGlobalIds","activeNormals","activePedigreeIds","activeScalars","activeTCoords","activeTensors","activeVectors","copyFieldFlags","doCopyAllOff","doCopyAllOn","arrays","polyData","pd","cd","getCellData","pointPixelType","getArrayByIndex","cellPixelType","convertVtkToItkPolyData","cellPixelComponentType","cellPixelComponents","getNumberOfPoints","getPoints","getVerts","getNumberOfValues","getLines","getPolys","getStrips","numberOfPointPixels","Float32Array","numberOfCellPixels","getNumberOfArrays","pdArray","getArrayByName","getNumberOfTuples","getNumberOfComponents","cdArray","ITKHelper","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Common/DataModel/ITKHelper.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkImageData from './ImageData.js';\nimport vtkPolyData from './PolyData.js';\nimport vtkDataArray from '../Core/DataArray.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // see itk.js PixelTypes.js\n\nvar ITKJSPixelTypes = {\n  Unknown: 0,\n  Scalar: 1,\n  RGB: 2,\n  RGBA: 3,\n  Offset: 4,\n  Vector: 5,\n  Point: 6,\n  CovariantVector: 7,\n  SymmetricSecondRankTensor: 8,\n  DiffusionTensor3D: 9,\n  Complex: 10,\n  FixedArray: 11,\n  Array: 12,\n  Matrix: 13,\n  VariableLengthVector: 14,\n  VariableSizeMatrix: 15\n}; // itk-wasm pixel types from https://github.com/InsightSoftwareConsortium/itk-wasm/blob/master/src/core/PixelTypes.ts\n\nvar ITKWASMPixelTypes = {\n  Unknown: 'Unknown',\n  Scalar: 'Scalar',\n  RGB: 'RGB',\n  RGBA: 'RGBA',\n  Offset: 'Offset',\n  Vector: 'Vector',\n  Point: 'Point',\n  CovariantVector: 'CovariantVector',\n  SymmetricSecondRankTensor: 'SymmetricSecondRankTensor',\n  DiffusionTensor3D: 'DiffusionTensor3D',\n  Complex: 'Complex',\n  FixedArray: 'FixedArray',\n  Array: 'Array',\n  Matrix: 'Matrix',\n  VariableLengthVector: 'VariableLengthVector',\n  VariableSizeMatrix: 'VariableSizeMatrix'\n};\nvar vtkArrayTypeToItkComponentType = new Map([['Uint8Array', 'uint8'], ['Int8Array', 'int8'], ['Uint16Array', 'uint16'], ['Int16Array', 'int16'], ['Uint32Array', 'uint32'], ['Int32Array', 'int32'], ['Float32Array', 'float32'], ['Float64Array', 'float64']]);\nvar itkComponentTypeToVtkArrayType = new Map([['uint8', 'Uint8Array'], ['int8', 'Int8Array'], ['uint16', 'Uint16Array'], ['int16', 'Int16Array'], ['uint32', 'Uint32Array'], ['int32', 'Int32Array'], ['float32', 'Float32Array'], ['float64', 'Float64Array']]);\n/**\n * Converts an itk-wasm Image to a vtk.js vtkImageData.\n *\n * Requires an itk-wasm Image as input.\n */\n\nfunction convertItkToVtkImage(itkImage) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var vtkImage = {\n    origin: [0, 0, 0],\n    spacing: [1, 1, 1]\n  };\n  var dimensions = [1, 1, 1];\n  var direction = [1, 0, 0, 0, 1, 0, 0, 0, 1]; // Check whether itkImage is an itk.js Image or an itk-wasm Image?\n\n  var isITKWasm = itkImage.direction.data === undefined;\n  var ITKPixelTypes = isITKWasm ? ITKWASMPixelTypes : ITKJSPixelTypes;\n\n  for (var idx = 0; idx < itkImage.imageType.dimension; ++idx) {\n    vtkImage.origin[idx] = itkImage.origin[idx];\n    vtkImage.spacing[idx] = itkImage.spacing[idx];\n    dimensions[idx] = itkImage.size[idx];\n\n    for (var col = 0; col < itkImage.imageType.dimension; ++col) {\n      // ITK (and VTKMath) use a row-major index axis, but the direction\n      // matrix on the vtkImageData is a webGL matrix, which uses a\n      // column-major data layout. Transpose the direction matrix from\n      // itkImage when instantiating that vtkImageData direction matrix.\n      if (isITKWasm) {\n        direction[col + idx * 3] = itkImage.direction[idx + col * itkImage.imageType.dimension];\n      } else {\n        direction[col + idx * 3] = itkImage.direction.data[idx + col * itkImage.imageType.dimension];\n      }\n    }\n  } // Create VTK Image Data\n\n\n  var imageData = vtkImageData.newInstance(vtkImage); // Create VTK point data -- the data associated with the pixels / voxels\n\n  var pointData = vtkDataArray.newInstance({\n    name: options.scalarArrayName || 'Scalars',\n    values: itkImage.data,\n    numberOfComponents: itkImage.imageType.components\n  });\n  imageData.setDirection(direction);\n  imageData.setDimensions.apply(imageData, dimensions); // Always associate multi-component pixel types with vtk.js point data\n  // scalars to facilitate multi-component volume rendering\n\n  imageData.getPointData().setScalars(pointData); // Associate the point data that are 3D vectors / tensors\n  // Refer to itk-js/src/PixelTypes.js for numerical values\n\n  switch (isITKWasm ? ITKPixelTypes[itkImage.imageType.pixelType] : itkImage.imageType.pixelType) {\n    case ITKPixelTypes.Scalar:\n      break;\n\n    case ITKPixelTypes.RGB:\n      break;\n\n    case ITKPixelTypes.RGBA:\n      break;\n\n    case ITKPixelTypes.Offset:\n      break;\n\n    case ITKPixelTypes.Vector:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 3) {\n        imageData.getPointData().setVectors(pointData);\n      }\n\n      break;\n\n    case ITKPixelTypes.Point:\n      break;\n\n    case ITKPixelTypes.CovariantVector:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 3) {\n        imageData.getPointData().setVectors(pointData);\n      }\n\n      break;\n\n    case ITKPixelTypes.SymmetricSecondRankTensor:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 6) {\n        imageData.getPointData().setTensors(pointData);\n      }\n\n      break;\n\n    case ITKPixelTypes.DiffusionTensor3D:\n      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 6) {\n        imageData.getPointData().setTensors(pointData);\n      }\n\n      break;\n\n    case ITKPixelTypes.Complex:\n      break;\n\n    case ITKPixelTypes.FixedArray:\n      break;\n\n    case ITKPixelTypes.Array:\n      break;\n\n    case ITKPixelTypes.Matrix:\n      break;\n\n    case ITKPixelTypes.VariableLengthVector:\n      break;\n\n    case ITKPixelTypes.VariableSizeMatrix:\n      break;\n\n    default:\n      vtkErrorMacro(\"Cannot handle unexpected itk-wasm pixel type \".concat(itkImage.imageType.pixelType));\n      return null;\n  }\n\n  return imageData;\n}\n/**\n * Converts a vtk.js vtkImageData to an itk-wasm Image.\n *\n * Requires a vtk.js vtkImageData as input.\n *\n */\n\nfunction convertVtkToItkImage(vtkImage) {\n  var copyData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var dimension = 3;\n  var itkImage = {\n    imageType: {\n      dimension: dimension,\n      pixelType: ITKWASMPixelTypes.Scalar,\n      componentType: '',\n      components: 1\n    },\n    name: 'vtkImageData',\n    origin: vtkImage.getOrigin(),\n    spacing: vtkImage.getSpacing(),\n    direction: new Float64Array(9),\n    size: vtkImage.getDimensions()\n  };\n  var direction = vtkImage.getDirection(); // Transpose the direction matrix from column-major to row-major\n\n  for (var idx = 0; idx < dimension; ++idx) {\n    for (var idy = 0; idy < dimension; ++idy) {\n      itkImage.direction[idx + idy * dimension] = direction[idy + idx * dimension];\n    }\n  }\n\n  var pointData = vtkImage.getPointData();\n  var vtkArray;\n\n  if (pointData.getTensors() !== null) {\n    itkImage.imageType.pixelType = ITKWASMPixelTypes.DiffusionTensor3D;\n    vtkArray = pointData.getTensors();\n  } else if (pointData.getVectors() != null) {\n    itkImage.imageType.pixelType = ITKWASMPixelTypes.Vector;\n    vtkArray = pointData.getVectors();\n  } else {\n    vtkArray = pointData.getScalars();\n  }\n\n  itkImage.imageType.componentType = vtkArrayTypeToItkComponentType.get(vtkArray.getDataType());\n\n  if (copyData) {\n    // Copy the data array\n    itkImage.data = vtkArray.getData().slice(0);\n  } else {\n    itkImage.data = vtkArray.getData();\n  }\n\n  return itkImage;\n}\n/**\n * Converts an itk-wasm PolyData to a vtk.js vtkPolyData.\n *\n * Requires an itk-wasm PolyData as input.\n */\n\nfunction convertItkToVtkPolyData(itkPolyData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pointDataArrays = [];\n\n  if (itkPolyData.pointData.length) {\n    pointDataArrays.push({\n      data: {\n        vtkClass: 'vtkDataArray',\n        name: options.pointDataName || 'PointData',\n        numberOfComponents: itkPolyData.polyDataType.pointPixelComponents,\n        size: itkPolyData.pointData.length,\n        dataType: itkComponentTypeToVtkArrayType.get(itkPolyData.polyDataType.pointPixelComponentType),\n        buffer: itkPolyData.pointData.buffer,\n        values: itkPolyData.pointData\n      }\n    });\n  }\n\n  var cellDataArrays = [];\n\n  if (itkPolyData.cellData.length) {\n    cellDataArrays.push({\n      data: {\n        vtkClass: 'vtkDataArray',\n        name: options.cellDataName || 'CellData',\n        numberOfComponents: itkPolyData.polyDataType.pointPixelComponents,\n        size: itkPolyData.cellData.length,\n        dataType: itkComponentTypeToVtkArrayType.get(itkPolyData.polyDataType.pointPixelComponentType),\n        buffer: itkPolyData.cellData.buffer,\n        values: itkPolyData.cellData\n      }\n    });\n  }\n\n  var vtkPolyDataModel = {\n    points: {\n      vtkClass: 'vtkPoints',\n      name: '_points',\n      numberOfComponents: 3,\n      size: itkPolyData.numberOfPoints,\n      dataType: 'Float32Array',\n      buffer: itkPolyData.points.buffer,\n      values: itkPolyData.points\n    },\n    verts: {\n      vtkClass: 'vtkCellArray',\n      name: '_verts',\n      numberOfComponents: 1,\n      size: itkPolyData.verticesBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.vertices.buffer,\n      values: itkPolyData.vertices\n    },\n    lines: {\n      vtkClass: 'vtkCellArray',\n      name: '_lines',\n      numberOfComponents: 1,\n      size: itkPolyData.linesBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.lines.buffer,\n      values: itkPolyData.lines\n    },\n    polys: {\n      vtkClass: 'vtkCellArray',\n      name: '_polys',\n      numberOfComponents: 1,\n      size: itkPolyData.polygonsBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.polygons.buffer,\n      values: itkPolyData.polygons\n    },\n    strips: {\n      vtkClass: 'vtkCellArray',\n      name: '_strips',\n      numberOfComponents: 1,\n      size: itkPolyData.triangleStripsBufferSize,\n      dataType: 'Uint32Array',\n      buffer: itkPolyData.triangleStrips.buffer,\n      values: itkPolyData.triangleStrips\n    },\n    pointData: {\n      vtkClass: 'vtkDataSetAttributes',\n      activeGlobalIds: -1,\n      activeNormals: -1,\n      activePedigreeIds: -1,\n      activeScalars: -1,\n      activeTCoords: -1,\n      activeTensors: -1,\n      activeVectors: -1,\n      copyFieldFlags: [],\n      doCopyAllOff: false,\n      doCopyAllOn: true,\n      arrays: pointDataArrays\n    },\n    cellData: {\n      vtkClass: 'vtkDataSetAttributes',\n      activeGlobalIds: -1,\n      activeNormals: -1,\n      activePedigreeIds: -1,\n      activeScalars: -1,\n      activeTCoords: -1,\n      activeTensors: -1,\n      activeVectors: -1,\n      copyFieldFlags: [],\n      doCopyAllOff: false,\n      doCopyAllOn: true,\n      arrays: cellDataArrays\n    }\n  }; // Create VTK PolyData\n\n  var polyData = vtkPolyData.newInstance(vtkPolyDataModel);\n  var pd = polyData.getPointData();\n  var cd = polyData.getCellData();\n\n  if (itkPolyData.pointData.length) {\n    // Associate the point data that are 3D vectors / tensors\n    switch (ITKWASMPixelTypes[itkPolyData.polyDataType.pointPixelType]) {\n      case ITKWASMPixelTypes.Scalar:\n        pd.setScalars(pd.getArrayByIndex(0));\n        break;\n\n      case ITKWASMPixelTypes.RGB:\n        break;\n\n      case ITKWASMPixelTypes.RGBA:\n        break;\n\n      case ITKWASMPixelTypes.Offset:\n        break;\n\n      case ITKWASMPixelTypes.Vector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          pd.setVectors(pd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.Point:\n        break;\n\n      case ITKWASMPixelTypes.CovariantVector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          pd.setVectors(pd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.SymmetricSecondRankTensor:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          pd.setTensors(pd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.DiffusionTensor3D:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          pd.setTensors(pd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.Complex:\n        break;\n\n      case ITKWASMPixelTypes.FixedArray:\n        break;\n\n      case ITKWASMPixelTypes.Array:\n        break;\n\n      case ITKWASMPixelTypes.Matrix:\n        break;\n\n      case ITKWASMPixelTypes.VariableLengthVector:\n        break;\n\n      case ITKWASMPixelTypes.VariableSizeMatrix:\n        break;\n\n      default:\n        vtkErrorMacro(\"Cannot handle unexpected itk-wasm pixel type \".concat(itkPolyData.polyDataType.pointPixelType));\n        return null;\n    }\n  }\n\n  if (itkPolyData.cellData.length) {\n    // Associate the cell data that are 3D vectors / tensors\n    switch (ITKWASMPixelTypes[itkPolyData.polyDataType.cellPixelType]) {\n      case ITKWASMPixelTypes.Scalar:\n        cd.setScalars(cd.getArrayByIndex(0));\n        break;\n\n      case ITKWASMPixelTypes.RGB:\n        break;\n\n      case ITKWASMPixelTypes.RGBA:\n        break;\n\n      case ITKWASMPixelTypes.Offset:\n        break;\n\n      case ITKWASMPixelTypes.Vector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          cd.setVectors(cd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.Point:\n        break;\n\n      case ITKWASMPixelTypes.CovariantVector:\n        if (itkPolyData.polyDataType.pointPixelComponents === 3) {\n          cd.setVectors(cd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.SymmetricSecondRankTensor:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          cd.setTensors(cd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.DiffusionTensor3D:\n        if (itkPolyData.polyDataType.pointPixelComponents === 6) {\n          cd.setTensors(cd.getArrayByIndex(0));\n        }\n\n        break;\n\n      case ITKWASMPixelTypes.Complex:\n        break;\n\n      case ITKWASMPixelTypes.FixedArray:\n        break;\n\n      case ITKWASMPixelTypes.Array:\n        break;\n\n      case ITKWASMPixelTypes.Matrix:\n        break;\n\n      case ITKWASMPixelTypes.VariableLengthVector:\n        break;\n\n      case ITKWASMPixelTypes.VariableSizeMatrix:\n        break;\n\n      default:\n        vtkErrorMacro(\"Cannot handle unexpected itk-wasm pixel type \".concat(itkPolyData.polyDataType.pointPixelType));\n        return null;\n    }\n  }\n\n  return polyData;\n}\n/**\n * Converts a vtk.js vtkPolyData to an itk-wasm PolyData.\n *\n * Requires a vtk.js vtkPolyData as input.\n *\n */\n\nfunction convertVtkToItkPolyData(polyData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var itkPolyData = {\n    polyDataType: {\n      pointPixelComponentType: 'float32',\n      pointPixelComponents: 1,\n      pointPixelType: 'Scalar',\n      cellPixelComponentType: 'float32',\n      cellPixelComponents: 1,\n      cellPixelType: 'Scalar'\n    },\n    numberOfPoints: polyData.getNumberOfPoints(),\n    points: polyData.getPoints().getData(),\n    verticesBufferSize: polyData.getVerts().getNumberOfValues(),\n    vertices: polyData.getVerts().getData(),\n    linesBufferSize: polyData.getLines().getNumberOfValues(),\n    lines: polyData.getLines().getData(),\n    polygonsBufferSize: polyData.getPolys().getNumberOfValues(),\n    polygons: polyData.getPolys().getData(),\n    triangleStripsBufferSize: polyData.getStrips().getNumberOfValues(),\n    triangleStrips: polyData.getStrips().getData(),\n    numberOfPointPixels: 0,\n    pointData: new Float32Array(),\n    numberOfCellPixels: 0,\n    cellData: new Float32Array()\n  };\n  var pd = polyData.getPointData();\n\n  if (pd.getNumberOfArrays()) {\n    var pdArray = options.pointDataName ? pd.getArrayByName(options.pointDataName) : pd.getArrayByIndex(0);\n    itkPolyData.numberOfPointPixels = pdArray.getNumberOfTuples();\n    itkPolyData.pointData = pdArray.getData();\n    itkPolyData.polyDataType.pointPixelComponentType = vtkArrayTypeToItkComponentType.get(pdArray.getDataType()); // default to the same type\n\n    itkPolyData.polyDataType.cellPixelComponentType = itkPolyData.polyDataType.pointPixelComponentType;\n    itkPolyData.polyDataType.pointPixelComponents = pdArray.getNumberOfComponents();\n    itkPolyData.polyDataType.cellPixelComponents = itkPolyData.polyDataType.pointPixelComponents;\n\n    if (pd.getTensors() === pdArray) {\n      itkPolyData.polyDataType.pointPixelType = ITKWASMPixelTypes.SymmetricSecondRankTensor;\n    } else if (pd.getVectors() === pdArray) {\n      itkPolyData.polyDataType.pointPixelType = ITKWASMPixelTypes.Vector;\n    }\n\n    itkPolyData.polyDataType.cellPixelType = itkPolyData.polyDataType.pointPixelType;\n  }\n\n  var cd = polyData.getCellData();\n\n  if (cd.getNumberOfArrays()) {\n    var cdArray = options.cellDataName ? pd.getArrayByName(options.cellDataName) : pd.getArrayByIndex(0);\n    itkPolyData.numberOfCellPixels = cdArray.getNumberOfTuples();\n    itkPolyData.cellData = cdArray.getData();\n    itkPolyData.polyDataType.cellPixelComponentType = vtkArrayTypeToItkComponentType.get(cdArray.getDataType());\n    itkPolyData.polyDataType.cellPixelComponents = cdArray.getNumberOfComponents();\n\n    if (cd.getTensors() === cdArray) {\n      itkPolyData.polyDataType.cellPixelType = ITKWASMPixelTypes.SymmetricSecondRankTensor;\n    } else if (cd.getVectors() === cdArray) {\n      itkPolyData.polyDataType.cellPixelType = ITKWASMPixelTypes.Vector;\n    } else {\n      itkPolyData.polyDataType.cellPixelType = ITKWASMPixelTypes.Scalar;\n    }\n  }\n\n  return itkPolyData;\n}\nvar ITKHelper = {\n  convertItkToVtkImage: convertItkToVtkImage,\n  convertVtkToItkImage: convertVtkToItkImage,\n  convertItkToVtkPolyData: convertItkToVtkPolyData,\n  convertVtkToItkPolyData: convertVtkToItkPolyData\n};\n\nexport { convertItkToVtkImage, convertItkToVtkPolyData, convertVtkToItkImage, convertVtkToItkPolyData, ITKHelper as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}