{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtk from '../../vtk.js';\nimport vtkCellArray from '../Core/CellArray.js';\nimport vtkCellLinks from './CellLinks.js';\nimport vtkCellTypes from './CellTypes.js';\nimport vtkLine from './Line.js';\nimport vtkPointSet from './PointSet.js';\nimport vtkTriangle from './Triangle.js';\nimport { CellType } from './CellTypes/Constants.js';\nimport { POLYDATA_FIELDS } from './PolyData/Constants.js';\nvar _CELL_FACTORY;\nvar vtkWarningMacro = macro.vtkWarningMacro;\nvar CELL_FACTORY = (_CELL_FACTORY = {}, _defineProperty(_CELL_FACTORY, CellType.VTK_LINE, vtkLine), _defineProperty(_CELL_FACTORY, CellType.VTK_POLY_LINE, vtkLine), _defineProperty(_CELL_FACTORY, CellType.VTK_TRIANGLE, vtkTriangle), _CELL_FACTORY); // ----------------------------------------------------------------------------\n// vtkPolyData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyData');\n  function camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter) {\n      return letter.toUpperCase();\n    }).replace(/\\s+/g, '');\n  } // build empty cell arrays and set methods\n\n  POLYDATA_FIELDS.forEach(function (type) {\n    publicAPI[\"getNumberOf\".concat(camelize(type))] = function () {\n      return model[type].getNumberOfCells();\n    };\n    if (!model[type]) {\n      model[type] = vtkCellArray.newInstance();\n    } else {\n      model[type] = vtk(model[type]);\n    }\n  });\n  publicAPI.getNumberOfCells = function () {\n    return POLYDATA_FIELDS.reduce(function (num, cellType) {\n      return num + model[cellType].getNumberOfCells();\n    }, 0);\n  };\n  var superShallowCopy = publicAPI.shallowCopy;\n  publicAPI.shallowCopy = function (other) {\n    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    POLYDATA_FIELDS.forEach(function (type) {\n      model[type] = vtkCellArray.newInstance();\n      model[type].shallowCopy(other.getReferenceByName(type));\n    });\n  };\n  publicAPI.buildCells = function () {\n    // here are the number of cells we have\n    var nVerts = publicAPI.getNumberOfVerts();\n    var nLines = publicAPI.getNumberOfLines();\n    var nPolys = publicAPI.getNumberOfPolys();\n    var nStrips = publicAPI.getNumberOfStrips(); // pre-allocate the space we need\n\n    var nCells = nVerts + nLines + nPolys + nStrips;\n    var types = new Uint8Array(nCells);\n    var pTypes = types;\n    var locs = new Uint32Array(nCells);\n    var pLocs = locs; // record locations and type of each cell.\n    // verts\n\n    if (nVerts) {\n      var nextCellPts = 0;\n      model.verts.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = nextCellPts;\n        pTypes[index] = numCellPts > 1 ? CellType.VTK_POLY_VERTEX : CellType.VTK_VERTEX;\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nVerts);\n      pTypes = pTypes.subarray(nVerts);\n    } // lines\n\n    if (nLines) {\n      var _nextCellPts = 0;\n      model.lines.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = _nextCellPts;\n        pTypes[index] = numCellPts > 2 ? CellType.VTK_POLY_LINE : CellType.VTK_LINE;\n        if (numCellPts === 1) {\n          vtkWarningMacro('Building VTK_LINE ', index, ' with only one point, but VTK_LINE needs at least two points. Check the input.');\n        }\n        _nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nLines);\n      pTypes = pTypes.subarray(nLines);\n    } // polys\n\n    if (nPolys) {\n      var _nextCellPts2 = 0;\n      model.polys.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = _nextCellPts2;\n        switch (numCellPts) {\n          case 3:\n            pTypes[index] = CellType.VTK_TRIANGLE;\n            break;\n          case 4:\n            pTypes[index] = CellType.VTK_QUAD;\n            break;\n          default:\n            pTypes[index] = CellType.VTK_POLYGON;\n            break;\n        }\n        if (numCellPts < 3) {\n          vtkWarningMacro('Building VTK_TRIANGLE ', index, ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.');\n        }\n        _nextCellPts2 += numCellPts + 1;\n      });\n      pLocs += pLocs.subarray(nPolys);\n      pTypes += pTypes.subarray(nPolys);\n    } // strips\n\n    if (nStrips) {\n      var _nextCellPts3 = 0;\n      pTypes.fill(CellType.VTK_TRIANGLE_STRIP, 0, nStrips);\n      model.strips.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = _nextCellPts3;\n        _nextCellPts3 += numCellPts + 1;\n      });\n    } // set up the cell types data structure\n\n    model.cells = vtkCellTypes.newInstance();\n    model.cells.setCellTypes(nCells, types, locs);\n  };\n  /**\n   * Create upward links from points to cells that use each point. Enables\n   * topologically complex queries.\n   */\n\n  publicAPI.buildLinks = function () {\n    var initialSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    if (model.cells === undefined) {\n      publicAPI.buildCells();\n    }\n    model.links = vtkCellLinks.newInstance();\n    if (initialSize > 0) {\n      model.links.allocate(initialSize);\n    } else {\n      model.links.allocate(publicAPI.getPoints().getNumberOfPoints());\n    }\n    model.links.buildLinks(publicAPI);\n  };\n  publicAPI.getCellType = function (cellId) {\n    return model.cells.getCellType(cellId);\n  };\n  publicAPI.getCellPoints = function (cellId) {\n    var cellType = publicAPI.getCellType(cellId);\n    var cells = null;\n    switch (cellType) {\n      case CellType.VTK_VERTEX:\n      case CellType.VTK_POLY_VERTEX:\n        cells = model.verts;\n        break;\n      case CellType.VTK_LINE:\n      case CellType.VTK_POLY_LINE:\n        cells = model.lines;\n        break;\n      case CellType.VTK_TRIANGLE:\n      case CellType.VTK_QUAD:\n      case CellType.VTK_POLYGON:\n        cells = model.polys;\n        break;\n      case CellType.VTK_TRIANGLE_STRIP:\n        cells = model.strips;\n        break;\n      default:\n        cells = null;\n        return {\n          type: 0,\n          cellPointIds: null\n        };\n    }\n    var loc = model.cells.getCellLocation(cellId);\n    var cellPointIds = cells.getCell(loc);\n    return {\n      cellType: cellType,\n      cellPointIds: cellPointIds\n    };\n  };\n  publicAPI.getPointCells = function (ptId) {\n    return model.links.getCells(ptId);\n  };\n  publicAPI.getCellEdgeNeighbors = function (cellId, point1, point2) {\n    var link1 = model.links.getLink(point1);\n    var link2 = model.links.getLink(point2);\n    return link1.cells.filter(function (cell) {\n      return cell !== cellId && link2.cells.indexOf(cell) !== -1;\n    });\n  };\n  /**\n   * If you know the type of cell, you may provide it to improve performances.\n   */\n\n  publicAPI.getCell = function (cellId) {\n    var cellHint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var cellInfo = publicAPI.getCellPoints(cellId);\n    var cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();\n    cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);\n    return cell;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {// verts: null,\n  // lines: null,\n  // polys: null,\n  // strips: null,\n  // cells: null,\n  // links: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkPointSet.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['cells', 'links']);\n  macro.setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']); // Object specific methods\n\n  vtkPolyData(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyData'); // ----------------------------------------------------------------------------\n\nvar vtkPolyData$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { CELL_FACTORY, vtkPolyData$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","macro","vtk","vtkCellArray","vtkCellLinks","vtkCellTypes","vtkLine","vtkPointSet","vtkTriangle","CellType","POLYDATA_FIELDS","_CELL_FACTORY","vtkWarningMacro","CELL_FACTORY","VTK_LINE","VTK_POLY_LINE","VTK_TRIANGLE","vtkPolyData","publicAPI","model","classHierarchy","push","camelize","str","replace","letter","toUpperCase","forEach","type","concat","getNumberOfCells","newInstance","reduce","num","cellType","superShallowCopy","shallowCopy","other","debug","arguments","length","undefined","getReferenceByName","buildCells","nVerts","getNumberOfVerts","nLines","getNumberOfLines","nPolys","getNumberOfPolys","nStrips","getNumberOfStrips","nCells","types","Uint8Array","pTypes","locs","Uint32Array","pLocs","nextCellPts","verts","getCellSizes","numCellPts","index","VTK_POLY_VERTEX","VTK_VERTEX","subarray","_nextCellPts","lines","_nextCellPts2","polys","VTK_QUAD","VTK_POLYGON","_nextCellPts3","fill","VTK_TRIANGLE_STRIP","strips","cells","setCellTypes","buildLinks","initialSize","links","allocate","getPoints","getNumberOfPoints","getCellType","cellId","getCellPoints","cellPointIds","loc","getCellLocation","getCell","getPointCells","ptId","getCells","getCellEdgeNeighbors","point1","point2","link1","getLink","link2","filter","cell","indexOf","cellHint","cellInfo","initialize","DEFAULT_VALUES","extend","initialValues","Object","assign","get","setGet","vtkPolyData$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtk from '../../vtk.js';\nimport vtkCellArray from '../Core/CellArray.js';\nimport vtkCellLinks from './CellLinks.js';\nimport vtkCellTypes from './CellTypes.js';\nimport vtkLine from './Line.js';\nimport vtkPointSet from './PointSet.js';\nimport vtkTriangle from './Triangle.js';\nimport { CellType } from './CellTypes/Constants.js';\nimport { POLYDATA_FIELDS } from './PolyData/Constants.js';\n\nvar _CELL_FACTORY;\nvar vtkWarningMacro = macro.vtkWarningMacro;\nvar CELL_FACTORY = (_CELL_FACTORY = {}, _defineProperty(_CELL_FACTORY, CellType.VTK_LINE, vtkLine), _defineProperty(_CELL_FACTORY, CellType.VTK_POLY_LINE, vtkLine), _defineProperty(_CELL_FACTORY, CellType.VTK_TRIANGLE, vtkTriangle), _CELL_FACTORY); // ----------------------------------------------------------------------------\n// vtkPolyData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyData');\n\n  function camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter) {\n      return letter.toUpperCase();\n    }).replace(/\\s+/g, '');\n  } // build empty cell arrays and set methods\n\n\n  POLYDATA_FIELDS.forEach(function (type) {\n    publicAPI[\"getNumberOf\".concat(camelize(type))] = function () {\n      return model[type].getNumberOfCells();\n    };\n\n    if (!model[type]) {\n      model[type] = vtkCellArray.newInstance();\n    } else {\n      model[type] = vtk(model[type]);\n    }\n  });\n\n  publicAPI.getNumberOfCells = function () {\n    return POLYDATA_FIELDS.reduce(function (num, cellType) {\n      return num + model[cellType].getNumberOfCells();\n    }, 0);\n  };\n\n  var superShallowCopy = publicAPI.shallowCopy;\n\n  publicAPI.shallowCopy = function (other) {\n    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    superShallowCopy(other, debug);\n    POLYDATA_FIELDS.forEach(function (type) {\n      model[type] = vtkCellArray.newInstance();\n      model[type].shallowCopy(other.getReferenceByName(type));\n    });\n  };\n\n  publicAPI.buildCells = function () {\n    // here are the number of cells we have\n    var nVerts = publicAPI.getNumberOfVerts();\n    var nLines = publicAPI.getNumberOfLines();\n    var nPolys = publicAPI.getNumberOfPolys();\n    var nStrips = publicAPI.getNumberOfStrips(); // pre-allocate the space we need\n\n    var nCells = nVerts + nLines + nPolys + nStrips;\n    var types = new Uint8Array(nCells);\n    var pTypes = types;\n    var locs = new Uint32Array(nCells);\n    var pLocs = locs; // record locations and type of each cell.\n    // verts\n\n    if (nVerts) {\n      var nextCellPts = 0;\n      model.verts.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = nextCellPts;\n        pTypes[index] = numCellPts > 1 ? CellType.VTK_POLY_VERTEX : CellType.VTK_VERTEX;\n        nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nVerts);\n      pTypes = pTypes.subarray(nVerts);\n    } // lines\n\n\n    if (nLines) {\n      var _nextCellPts = 0;\n      model.lines.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = _nextCellPts;\n        pTypes[index] = numCellPts > 2 ? CellType.VTK_POLY_LINE : CellType.VTK_LINE;\n\n        if (numCellPts === 1) {\n          vtkWarningMacro('Building VTK_LINE ', index, ' with only one point, but VTK_LINE needs at least two points. Check the input.');\n        }\n\n        _nextCellPts += numCellPts + 1;\n      });\n      pLocs = pLocs.subarray(nLines);\n      pTypes = pTypes.subarray(nLines);\n    } // polys\n\n\n    if (nPolys) {\n      var _nextCellPts2 = 0;\n      model.polys.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = _nextCellPts2;\n\n        switch (numCellPts) {\n          case 3:\n            pTypes[index] = CellType.VTK_TRIANGLE;\n            break;\n\n          case 4:\n            pTypes[index] = CellType.VTK_QUAD;\n            break;\n\n          default:\n            pTypes[index] = CellType.VTK_POLYGON;\n            break;\n        }\n\n        if (numCellPts < 3) {\n          vtkWarningMacro('Building VTK_TRIANGLE ', index, ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.');\n        }\n\n        _nextCellPts2 += numCellPts + 1;\n      });\n      pLocs += pLocs.subarray(nPolys);\n      pTypes += pTypes.subarray(nPolys);\n    } // strips\n\n\n    if (nStrips) {\n      var _nextCellPts3 = 0;\n      pTypes.fill(CellType.VTK_TRIANGLE_STRIP, 0, nStrips);\n      model.strips.getCellSizes().forEach(function (numCellPts, index) {\n        pLocs[index] = _nextCellPts3;\n        _nextCellPts3 += numCellPts + 1;\n      });\n    } // set up the cell types data structure\n\n\n    model.cells = vtkCellTypes.newInstance();\n    model.cells.setCellTypes(nCells, types, locs);\n  };\n  /**\n   * Create upward links from points to cells that use each point. Enables\n   * topologically complex queries.\n   */\n\n\n  publicAPI.buildLinks = function () {\n    var initialSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (model.cells === undefined) {\n      publicAPI.buildCells();\n    }\n\n    model.links = vtkCellLinks.newInstance();\n\n    if (initialSize > 0) {\n      model.links.allocate(initialSize);\n    } else {\n      model.links.allocate(publicAPI.getPoints().getNumberOfPoints());\n    }\n\n    model.links.buildLinks(publicAPI);\n  };\n\n  publicAPI.getCellType = function (cellId) {\n    return model.cells.getCellType(cellId);\n  };\n\n  publicAPI.getCellPoints = function (cellId) {\n    var cellType = publicAPI.getCellType(cellId);\n    var cells = null;\n\n    switch (cellType) {\n      case CellType.VTK_VERTEX:\n      case CellType.VTK_POLY_VERTEX:\n        cells = model.verts;\n        break;\n\n      case CellType.VTK_LINE:\n      case CellType.VTK_POLY_LINE:\n        cells = model.lines;\n        break;\n\n      case CellType.VTK_TRIANGLE:\n      case CellType.VTK_QUAD:\n      case CellType.VTK_POLYGON:\n        cells = model.polys;\n        break;\n\n      case CellType.VTK_TRIANGLE_STRIP:\n        cells = model.strips;\n        break;\n\n      default:\n        cells = null;\n        return {\n          type: 0,\n          cellPointIds: null\n        };\n    }\n\n    var loc = model.cells.getCellLocation(cellId);\n    var cellPointIds = cells.getCell(loc);\n    return {\n      cellType: cellType,\n      cellPointIds: cellPointIds\n    };\n  };\n\n  publicAPI.getPointCells = function (ptId) {\n    return model.links.getCells(ptId);\n  };\n\n  publicAPI.getCellEdgeNeighbors = function (cellId, point1, point2) {\n    var link1 = model.links.getLink(point1);\n    var link2 = model.links.getLink(point2);\n    return link1.cells.filter(function (cell) {\n      return cell !== cellId && link2.cells.indexOf(cell) !== -1;\n    });\n  };\n  /**\n   * If you know the type of cell, you may provide it to improve performances.\n   */\n\n\n  publicAPI.getCell = function (cellId) {\n    var cellHint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var cellInfo = publicAPI.getCellPoints(cellId);\n    var cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();\n    cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);\n    return cell;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {// verts: null,\n  // lines: null,\n  // polys: null,\n  // strips: null,\n  // cells: null,\n  // links: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkPointSet.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['cells', 'links']);\n  macro.setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']); // Object specific methods\n\n  vtkPolyData(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyData'); // ----------------------------------------------------------------------------\n\nvar vtkPolyData$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { CELL_FACTORY, vtkPolyData$1 as default, extend, newInstance };\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,GAAG,MAAM,cAAc;AAC9B,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,IAAIC,aAAa;AACjB,IAAIC,eAAe,GAAGX,KAAK,CAACW,eAAe;AAC3C,IAAIC,YAAY,IAAIF,aAAa,GAAG,CAAC,CAAC,EAAEX,eAAe,CAACW,aAAa,EAAEF,QAAQ,CAACK,QAAQ,EAAER,OAAO,CAAC,EAAEN,eAAe,CAACW,aAAa,EAAEF,QAAQ,CAACM,aAAa,EAAET,OAAO,CAAC,EAAEN,eAAe,CAACW,aAAa,EAAEF,QAAQ,CAACO,YAAY,EAAER,WAAW,CAAC,EAAEG,aAAa,CAAC,CAAC,CAAC;AACzP;AACA;;AAEA,SAASM,WAAWA,CAACC,SAAS,EAAEC,KAAK,EAAE;EACrC;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,aAAa,CAAC;EAExC,SAASC,QAAQA,CAACC,GAAG,EAAE;IACrB,OAAOA,GAAG,CAACC,OAAO,CAAC,qBAAqB,EAAE,UAAUC,MAAM,EAAE;MAC1D,OAAOA,MAAM,CAACC,WAAW,CAAC,CAAC;IAC7B,CAAC,CAAC,CAACF,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACxB,CAAC,CAAC;;EAGFd,eAAe,CAACiB,OAAO,CAAC,UAAUC,IAAI,EAAE;IACtCV,SAAS,CAAC,aAAa,CAACW,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,GAAG,YAAY;MAC5D,OAAOT,KAAK,CAACS,IAAI,CAAC,CAACE,gBAAgB,CAAC,CAAC;IACvC,CAAC;IAED,IAAI,CAACX,KAAK,CAACS,IAAI,CAAC,EAAE;MAChBT,KAAK,CAACS,IAAI,CAAC,GAAGzB,YAAY,CAAC4B,WAAW,CAAC,CAAC;IAC1C,CAAC,MAAM;MACLZ,KAAK,CAACS,IAAI,CAAC,GAAG1B,GAAG,CAACiB,KAAK,CAACS,IAAI,CAAC,CAAC;IAChC;EACF,CAAC,CAAC;EAEFV,SAAS,CAACY,gBAAgB,GAAG,YAAY;IACvC,OAAOpB,eAAe,CAACsB,MAAM,CAAC,UAAUC,GAAG,EAAEC,QAAQ,EAAE;MACrD,OAAOD,GAAG,GAAGd,KAAK,CAACe,QAAQ,CAAC,CAACJ,gBAAgB,CAAC,CAAC;IACjD,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;EAED,IAAIK,gBAAgB,GAAGjB,SAAS,CAACkB,WAAW;EAE5ClB,SAAS,CAACkB,WAAW,GAAG,UAAUC,KAAK,EAAE;IACvC,IAAIC,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;IACrFJ,gBAAgB,CAACE,KAAK,EAAEC,KAAK,CAAC;IAC9B5B,eAAe,CAACiB,OAAO,CAAC,UAAUC,IAAI,EAAE;MACtCT,KAAK,CAACS,IAAI,CAAC,GAAGzB,YAAY,CAAC4B,WAAW,CAAC,CAAC;MACxCZ,KAAK,CAACS,IAAI,CAAC,CAACQ,WAAW,CAACC,KAAK,CAACK,kBAAkB,CAACd,IAAI,CAAC,CAAC;IACzD,CAAC,CAAC;EACJ,CAAC;EAEDV,SAAS,CAACyB,UAAU,GAAG,YAAY;IACjC;IACA,IAAIC,MAAM,GAAG1B,SAAS,CAAC2B,gBAAgB,CAAC,CAAC;IACzC,IAAIC,MAAM,GAAG5B,SAAS,CAAC6B,gBAAgB,CAAC,CAAC;IACzC,IAAIC,MAAM,GAAG9B,SAAS,CAAC+B,gBAAgB,CAAC,CAAC;IACzC,IAAIC,OAAO,GAAGhC,SAAS,CAACiC,iBAAiB,CAAC,CAAC,CAAC,CAAC;;IAE7C,IAAIC,MAAM,GAAGR,MAAM,GAAGE,MAAM,GAAGE,MAAM,GAAGE,OAAO;IAC/C,IAAIG,KAAK,GAAG,IAAIC,UAAU,CAACF,MAAM,CAAC;IAClC,IAAIG,MAAM,GAAGF,KAAK;IAClB,IAAIG,IAAI,GAAG,IAAIC,WAAW,CAACL,MAAM,CAAC;IAClC,IAAIM,KAAK,GAAGF,IAAI,CAAC,CAAC;IAClB;;IAEA,IAAIZ,MAAM,EAAE;MACV,IAAIe,WAAW,GAAG,CAAC;MACnBxC,KAAK,CAACyC,KAAK,CAACC,YAAY,CAAC,CAAC,CAAClC,OAAO,CAAC,UAAUmC,UAAU,EAAEC,KAAK,EAAE;QAC9DL,KAAK,CAACK,KAAK,CAAC,GAAGJ,WAAW;QAC1BJ,MAAM,CAACQ,KAAK,CAAC,GAAGD,UAAU,GAAG,CAAC,GAAGrD,QAAQ,CAACuD,eAAe,GAAGvD,QAAQ,CAACwD,UAAU;QAC/EN,WAAW,IAAIG,UAAU,GAAG,CAAC;MAC/B,CAAC,CAAC;MACFJ,KAAK,GAAGA,KAAK,CAACQ,QAAQ,CAACtB,MAAM,CAAC;MAC9BW,MAAM,GAAGA,MAAM,CAACW,QAAQ,CAACtB,MAAM,CAAC;IAClC,CAAC,CAAC;;IAGF,IAAIE,MAAM,EAAE;MACV,IAAIqB,YAAY,GAAG,CAAC;MACpBhD,KAAK,CAACiD,KAAK,CAACP,YAAY,CAAC,CAAC,CAAClC,OAAO,CAAC,UAAUmC,UAAU,EAAEC,KAAK,EAAE;QAC9DL,KAAK,CAACK,KAAK,CAAC,GAAGI,YAAY;QAC3BZ,MAAM,CAACQ,KAAK,CAAC,GAAGD,UAAU,GAAG,CAAC,GAAGrD,QAAQ,CAACM,aAAa,GAAGN,QAAQ,CAACK,QAAQ;QAE3E,IAAIgD,UAAU,KAAK,CAAC,EAAE;UACpBlD,eAAe,CAAC,oBAAoB,EAAEmD,KAAK,EAAE,gFAAgF,CAAC;QAChI;QAEAI,YAAY,IAAIL,UAAU,GAAG,CAAC;MAChC,CAAC,CAAC;MACFJ,KAAK,GAAGA,KAAK,CAACQ,QAAQ,CAACpB,MAAM,CAAC;MAC9BS,MAAM,GAAGA,MAAM,CAACW,QAAQ,CAACpB,MAAM,CAAC;IAClC,CAAC,CAAC;;IAGF,IAAIE,MAAM,EAAE;MACV,IAAIqB,aAAa,GAAG,CAAC;MACrBlD,KAAK,CAACmD,KAAK,CAACT,YAAY,CAAC,CAAC,CAAClC,OAAO,CAAC,UAAUmC,UAAU,EAAEC,KAAK,EAAE;QAC9DL,KAAK,CAACK,KAAK,CAAC,GAAGM,aAAa;QAE5B,QAAQP,UAAU;UAChB,KAAK,CAAC;YACJP,MAAM,CAACQ,KAAK,CAAC,GAAGtD,QAAQ,CAACO,YAAY;YACrC;UAEF,KAAK,CAAC;YACJuC,MAAM,CAACQ,KAAK,CAAC,GAAGtD,QAAQ,CAAC8D,QAAQ;YACjC;UAEF;YACEhB,MAAM,CAACQ,KAAK,CAAC,GAAGtD,QAAQ,CAAC+D,WAAW;YACpC;QACJ;QAEA,IAAIV,UAAU,GAAG,CAAC,EAAE;UAClBlD,eAAe,CAAC,wBAAwB,EAAEmD,KAAK,EAAE,8FAA8F,CAAC;QAClJ;QAEAM,aAAa,IAAIP,UAAU,GAAG,CAAC;MACjC,CAAC,CAAC;MACFJ,KAAK,IAAIA,KAAK,CAACQ,QAAQ,CAAClB,MAAM,CAAC;MAC/BO,MAAM,IAAIA,MAAM,CAACW,QAAQ,CAAClB,MAAM,CAAC;IACnC,CAAC,CAAC;;IAGF,IAAIE,OAAO,EAAE;MACX,IAAIuB,aAAa,GAAG,CAAC;MACrBlB,MAAM,CAACmB,IAAI,CAACjE,QAAQ,CAACkE,kBAAkB,EAAE,CAAC,EAAEzB,OAAO,CAAC;MACpD/B,KAAK,CAACyD,MAAM,CAACf,YAAY,CAAC,CAAC,CAAClC,OAAO,CAAC,UAAUmC,UAAU,EAAEC,KAAK,EAAE;QAC/DL,KAAK,CAACK,KAAK,CAAC,GAAGU,aAAa;QAC5BA,aAAa,IAAIX,UAAU,GAAG,CAAC;MACjC,CAAC,CAAC;IACJ,CAAC,CAAC;;IAGF3C,KAAK,CAAC0D,KAAK,GAAGxE,YAAY,CAAC0B,WAAW,CAAC,CAAC;IACxCZ,KAAK,CAAC0D,KAAK,CAACC,YAAY,CAAC1B,MAAM,EAAEC,KAAK,EAAEG,IAAI,CAAC;EAC/C,CAAC;EACD;AACF;AACA;AACA;;EAGEtC,SAAS,CAAC6D,UAAU,GAAG,YAAY;IACjC,IAAIC,WAAW,GAAGzC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;IAEvF,IAAIpB,KAAK,CAAC0D,KAAK,KAAKpC,SAAS,EAAE;MAC7BvB,SAAS,CAACyB,UAAU,CAAC,CAAC;IACxB;IAEAxB,KAAK,CAAC8D,KAAK,GAAG7E,YAAY,CAAC2B,WAAW,CAAC,CAAC;IAExC,IAAIiD,WAAW,GAAG,CAAC,EAAE;MACnB7D,KAAK,CAAC8D,KAAK,CAACC,QAAQ,CAACF,WAAW,CAAC;IACnC,CAAC,MAAM;MACL7D,KAAK,CAAC8D,KAAK,CAACC,QAAQ,CAAChE,SAAS,CAACiE,SAAS,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC,CAAC;IACjE;IAEAjE,KAAK,CAAC8D,KAAK,CAACF,UAAU,CAAC7D,SAAS,CAAC;EACnC,CAAC;EAEDA,SAAS,CAACmE,WAAW,GAAG,UAAUC,MAAM,EAAE;IACxC,OAAOnE,KAAK,CAAC0D,KAAK,CAACQ,WAAW,CAACC,MAAM,CAAC;EACxC,CAAC;EAEDpE,SAAS,CAACqE,aAAa,GAAG,UAAUD,MAAM,EAAE;IAC1C,IAAIpD,QAAQ,GAAGhB,SAAS,CAACmE,WAAW,CAACC,MAAM,CAAC;IAC5C,IAAIT,KAAK,GAAG,IAAI;IAEhB,QAAQ3C,QAAQ;MACd,KAAKzB,QAAQ,CAACwD,UAAU;MACxB,KAAKxD,QAAQ,CAACuD,eAAe;QAC3Ba,KAAK,GAAG1D,KAAK,CAACyC,KAAK;QACnB;MAEF,KAAKnD,QAAQ,CAACK,QAAQ;MACtB,KAAKL,QAAQ,CAACM,aAAa;QACzB8D,KAAK,GAAG1D,KAAK,CAACiD,KAAK;QACnB;MAEF,KAAK3D,QAAQ,CAACO,YAAY;MAC1B,KAAKP,QAAQ,CAAC8D,QAAQ;MACtB,KAAK9D,QAAQ,CAAC+D,WAAW;QACvBK,KAAK,GAAG1D,KAAK,CAACmD,KAAK;QACnB;MAEF,KAAK7D,QAAQ,CAACkE,kBAAkB;QAC9BE,KAAK,GAAG1D,KAAK,CAACyD,MAAM;QACpB;MAEF;QACEC,KAAK,GAAG,IAAI;QACZ,OAAO;UACLjD,IAAI,EAAE,CAAC;UACP4D,YAAY,EAAE;QAChB,CAAC;IACL;IAEA,IAAIC,GAAG,GAAGtE,KAAK,CAAC0D,KAAK,CAACa,eAAe,CAACJ,MAAM,CAAC;IAC7C,IAAIE,YAAY,GAAGX,KAAK,CAACc,OAAO,CAACF,GAAG,CAAC;IACrC,OAAO;MACLvD,QAAQ,EAAEA,QAAQ;MAClBsD,YAAY,EAAEA;IAChB,CAAC;EACH,CAAC;EAEDtE,SAAS,CAAC0E,aAAa,GAAG,UAAUC,IAAI,EAAE;IACxC,OAAO1E,KAAK,CAAC8D,KAAK,CAACa,QAAQ,CAACD,IAAI,CAAC;EACnC,CAAC;EAED3E,SAAS,CAAC6E,oBAAoB,GAAG,UAAUT,MAAM,EAAEU,MAAM,EAAEC,MAAM,EAAE;IACjE,IAAIC,KAAK,GAAG/E,KAAK,CAAC8D,KAAK,CAACkB,OAAO,CAACH,MAAM,CAAC;IACvC,IAAII,KAAK,GAAGjF,KAAK,CAAC8D,KAAK,CAACkB,OAAO,CAACF,MAAM,CAAC;IACvC,OAAOC,KAAK,CAACrB,KAAK,CAACwB,MAAM,CAAC,UAAUC,IAAI,EAAE;MACxC,OAAOA,IAAI,KAAKhB,MAAM,IAAIc,KAAK,CAACvB,KAAK,CAAC0B,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC;EACD;AACF;AACA;;EAGEpF,SAAS,CAACyE,OAAO,GAAG,UAAUL,MAAM,EAAE;IACpC,IAAIkB,QAAQ,GAAGjE,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IACvF,IAAIkE,QAAQ,GAAGvF,SAAS,CAACqE,aAAa,CAACD,MAAM,CAAC;IAC9C,IAAIgB,IAAI,GAAGE,QAAQ,IAAI3F,YAAY,CAAC4F,QAAQ,CAACvE,QAAQ,CAAC,CAACH,WAAW,CAAC,CAAC;IACpEuE,IAAI,CAACI,UAAU,CAACxF,SAAS,CAACiE,SAAS,CAAC,CAAC,EAAEsB,QAAQ,CAACjB,YAAY,CAAC;IAC7D,OAAOc,IAAI;EACb,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,IAAIK,cAAc,GAAG,CAAC;EACpB;EACA;EACA;EACA;EACA;AAAA,CACD,CAAC,CAAC;;AAEH,SAASC,MAAMA,CAAC1F,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAI0F,aAAa,GAAGtE,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FuE,MAAM,CAACC,MAAM,CAAC5F,KAAK,EAAEwF,cAAc,EAAEE,aAAa,CAAC,CAAC,CAAC;;EAErDtG,WAAW,CAACqG,MAAM,CAAC1F,SAAS,EAAEC,KAAK,EAAE0F,aAAa,CAAC;EACnD5G,KAAK,CAAC+G,GAAG,CAAC9F,SAAS,EAAEC,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;EAC/ClB,KAAK,CAACgH,MAAM,CAAC/F,SAAS,EAAEC,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEvEF,WAAW,CAACC,SAAS,EAAEC,KAAK,CAAC;AAC/B,CAAC,CAAC;;AAEF,IAAIY,WAAW,GAAG9B,KAAK,CAAC8B,WAAW,CAAC6E,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;;AAE5D,IAAIM,aAAa,GAAG;EAClBnF,WAAW,EAAEA,WAAW;EACxB6E,MAAM,EAAEA;AACV,CAAC;AAED,SAAS/F,YAAY,EAAEqG,aAAa,IAAIC,OAAO,EAAEP,MAAM,EAAE7E,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}