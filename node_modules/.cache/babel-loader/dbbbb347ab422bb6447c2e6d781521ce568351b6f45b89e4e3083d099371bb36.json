{"ast":null,"code":"import '../../Common/DataModel/ImageData.js';\nimport '../../Common/DataModel/PolyData.js';\nimport vtk from '../../vtk.js';\nimport macro from '../../macros.js';\nimport DataAccessHelper from './DataAccessHelper.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkStringArray from '../../Common/Core/StringArray.js';\nimport './DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// For vtk factory\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\nvar fieldDataLocations = ['pointData', 'cellData', 'fieldData'];\nvar ARRAY_BUILDERS = {\n  vtkDataArray: vtkDataArray,\n  vtkStringArray: vtkStringArray\n}; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nvar cachedArrays = {};\nvar GEOMETRY_ARRAYS = {\n  vtkPolyData: function vtkPolyData(dataset) {\n    var arrayToDownload = [];\n    arrayToDownload.push(dataset.points);\n    ['verts', 'lines', 'polys', 'strips'].forEach(function (cellName) {\n      if (dataset[cellName]) {\n        arrayToDownload.push(dataset[cellName]);\n      }\n    });\n    return arrayToDownload;\n  },\n  vtkImageData: function vtkImageData(dataset) {\n    return [];\n  },\n  vtkUnstructuredGrid: function vtkUnstructuredGrid(dataset) {\n    var arrayToDownload = [];\n    arrayToDownload.push(dataset.points);\n    arrayToDownload.push(dataset.cells);\n    arrayToDownload.push(dataset.cellTypes);\n    return arrayToDownload;\n  },\n  vtkRectilinearGrid: function vtkRectilinearGrid(dataset) {\n    var arrayToDownload = [];\n    arrayToDownload.push(dataset.xCoordinates);\n    arrayToDownload.push(dataset.yCoordinates);\n    arrayToDownload.push(dataset.zCoordinates);\n    return arrayToDownload;\n  }\n};\nfunction processDataSet(publicAPI, model, dataset, fetchArray, resolve, reject, loadData) {\n  var enable = model.enableArray; // Generate array list\n\n  model.arrays = [];\n  fieldDataLocations.forEach(function (location) {\n    if (dataset[location]) {\n      dataset[location].arrays.map(function (i) {\n        return i.data;\n      }).forEach(function (array) {\n        model.arrays.push({\n          name: array.name,\n          enable: enable,\n          location: location,\n          array: array,\n          registration: array.ref.registration || 'addArray'\n        });\n      }); // Reset data arrays\n\n      dataset[location].arrays = [];\n    }\n  }); // Fetch geometry arrays\n\n  var pendingPromises = [];\n  var progressCallback = model.progressCallback;\n  var compression = model.fetchGzip ? 'gz' : null;\n  GEOMETRY_ARRAYS[dataset.vtkClass](dataset).forEach(function (array) {\n    pendingPromises.push(fetchArray(array, {\n      compression: compression,\n      progressCallback: progressCallback\n    }));\n  });\n  function success() {\n    model.dataset = vtk(dataset);\n    if (!loadData) {\n      model.output[0] = model.dataset;\n      resolve(publicAPI, model.output[0]);\n    } else {\n      publicAPI.loadData().then(function () {\n        model.output[0] = model.dataset;\n        resolve(publicAPI, model.output[0]);\n      });\n    }\n  } // Wait for all geometry array to be fetched\n\n  if (pendingPromises.length) {\n    Promise.all(pendingPromises).then(success, function (err) {\n      reject(err);\n    });\n  } else {\n    success();\n  }\n} // ----------------------------------------------------------------------------\n// vtkHttpDataSetReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkHttpDataSetReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkHttpDataSetReader'); // Empty output by default\n\n  model.output[0] = vtk({\n    vtkClass: 'vtkPolyData'\n  }); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n  function fetchArray(array) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var arrayId = \"\".concat(array.ref.id, \"|\").concat(array.vtkClass);\n    if (!cachedArrays[arrayId]) {\n      // Cache the promise while fetching\n      cachedArrays[arrayId] = model.dataAccessHelper.fetchArray(publicAPI, model.baseURL, array, options).then(function (newArray) {\n        // Replace the promise with the array in cache once downloaded\n        cachedArrays[arrayId] = newArray;\n        return newArray;\n      });\n    } else {\n      // cacheArrays[arrayId] can be a promise or value\n      Promise.resolve(cachedArrays[arrayId]).then(function (cachedArray) {\n        if (array !== cachedArray) {\n          Object.assign(array, cachedArray);\n          delete array.ref;\n        }\n      });\n    }\n    return Promise.resolve(cachedArrays[arrayId]);\n  } // Fetch dataset (metadata)\n\n  publicAPI.updateMetadata = function () {\n    var loadData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (model.compression === 'zip') {\n      return new Promise(function (resolve, reject) {\n        DataAccessHelper.get('http').fetchBinary(model.url).then(function (zipContent) {\n          model.dataAccessHelper = DataAccessHelper.get('zip', {\n            zipContent: zipContent,\n            callback: function callback(zip) {\n              model.baseURL = '';\n              model.dataAccessHelper.fetchJSON(publicAPI, 'index.json').then(function (dataset) {\n                publicAPI.parseObject(dataset, {\n                  loadData: loadData,\n                  deepCopy: false\n                }).then(resolve, reject);\n              }, function (error) {\n                reject(error);\n              });\n            }\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n    return new Promise(function (resolve, reject) {\n      model.dataAccessHelper.fetchJSON(publicAPI, model.url).then(function (dataset) {\n        publicAPI.parseObject(dataset, {\n          loadData: loadData,\n          deepCopy: false\n        }).then(resolve, reject);\n      }, function (error) {\n        reject(error);\n      });\n    });\n  }; // Set DataSet url\n\n  publicAPI.setUrl = function (url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (url.indexOf('index.json') === -1 && !options.fullpath) {\n      model.baseURL = url;\n      model.url = \"\".concat(url, \"/index.json\");\n    } else {\n      model.url = url; // Remove the file in the URL\n\n      var path = url.split('/');\n      path.pop();\n      model.baseURL = path.join('/');\n    }\n    model.compression = options.compression; // Fetch metadata\n\n    return publicAPI.updateMetadata(!!options.loadData);\n  };\n  publicAPI.parseObject = function (manifest, _ref) {\n    var loadData = _ref.loadData,\n      baseUrl = _ref.baseUrl,\n      _ref$deepCopy = _ref.deepCopy,\n      deepCopy = _ref$deepCopy === void 0 ? true : _ref$deepCopy;\n    if (baseUrl) {\n      model.baseURL = baseUrl;\n    }\n    var dataset = deepCopy ? structuredClone(manifest) : manifest;\n    return new Promise(function (resolve, reject) {\n      processDataSet(publicAPI, model, dataset, fetchArray, resolve, reject, loadData);\n    });\n  }; // Fetch the actual data arrays\n\n  publicAPI.loadData = function () {\n    var datasetObj = model.dataset;\n    var arrayToFecth = model.arrays.filter(function (array) {\n      return array.enable;\n    }).filter(function (array) {\n      return array.array.ref;\n    }).map(function (array) {\n      return array.array;\n    });\n    return new Promise(function (resolve, reject) {\n      var error = function error(e) {\n        reject(e);\n      };\n      var processNext = function processNext() {\n        if (arrayToFecth.length) {\n          var progressCallback = model.progressCallback;\n          var compression = model.fetchGzip ? 'gz' : null;\n          fetchArray(arrayToFecth.pop(), {\n            compression: compression,\n            progressCallback: progressCallback\n          }).then(processNext, error);\n        } else if (datasetObj) {\n          // Perform array registration on new arrays\n          model.arrays.filter(function (metaArray) {\n            return metaArray.registration && !metaArray.array.ref;\n          }).forEach(function (metaArray) {\n            var newArray = ARRAY_BUILDERS[metaArray.array.vtkClass].newInstance(metaArray.array);\n            datasetObj[\"get\".concat(macro.capitalize(metaArray.location))]()[metaArray.registration](newArray);\n            delete metaArray.registration;\n          });\n          datasetObj.modified();\n          resolve(publicAPI, datasetObj);\n        }\n      }; // Start processing queue\n\n      processNext();\n    });\n  };\n  publicAPI.requestData = function (inData, outData) {// do nothing loadData will eventually load up the data\n  }; // Toggle arrays to load\n\n  publicAPI.enableArray = function (location, name) {\n    var enable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var activeArray = model.arrays.filter(function (array) {\n      return array.name === name && array.location === location;\n    });\n    if (activeArray.length === 1) {\n      activeArray[0].enable = enable;\n    }\n  }; // return Busy state\n\n  publicAPI.isBusy = function () {\n    return !!model.requestCount;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  enableArray: true,\n  fetchGzip: false,\n  arrays: [],\n  url: null,\n  baseURL: null,\n  requestCount: 0 // dataAccessHelper: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['enableArray', 'fetchGzip', 'url', 'baseURL', 'dataAccessHelper']);\n  macro.set(publicAPI, model, ['dataAccessHelper', 'progressCallback']);\n  macro.getArray(publicAPI, model, ['arrays']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy'); // Object methods\n\n  vtkHttpDataSetReader(publicAPI, model); // Make sure we can destructuring progressCallback from model\n\n  if (model.progressCallback === undefined) {\n    model.progressCallback = null;\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkHttpDataSetReader'); // ----------------------------------------------------------------------------\n\nvar vtkHttpDataSetReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkHttpDataSetReader$1 as default, extend, newInstance };","map":{"version":3,"names":["vtk","macro","DataAccessHelper","vtkDataArray","vtkStringArray","fieldDataLocations","ARRAY_BUILDERS","cachedArrays","GEOMETRY_ARRAYS","vtkPolyData","dataset","arrayToDownload","push","points","forEach","cellName","vtkImageData","vtkUnstructuredGrid","cells","cellTypes","vtkRectilinearGrid","xCoordinates","yCoordinates","zCoordinates","processDataSet","publicAPI","model","fetchArray","resolve","reject","loadData","enable","enableArray","arrays","location","map","i","data","array","name","registration","ref","pendingPromises","progressCallback","compression","fetchGzip","vtkClass","success","output","then","length","Promise","all","err","vtkHttpDataSetReader","classHierarchy","dataAccessHelper","get","options","arguments","undefined","arrayId","concat","id","baseURL","newArray","cachedArray","Object","assign","updateMetadata","fetchBinary","url","zipContent","callback","zip","fetchJSON","parseObject","deepCopy","error","setUrl","indexOf","fullpath","path","split","pop","join","manifest","_ref","baseUrl","_ref$deepCopy","structuredClone","datasetObj","arrayToFecth","filter","e","processNext","metaArray","newInstance","capitalize","modified","requestData","inData","outData","activeArray","isBusy","requestCount","DEFAULT_VALUES","extend","initialValues","obj","set","getArray","algo","event","vtkHttpDataSetReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Core/HttpDataSetReader.js"],"sourcesContent":["import '../../Common/DataModel/ImageData.js';\nimport '../../Common/DataModel/PolyData.js';\nimport vtk from '../../vtk.js';\nimport macro from '../../macros.js';\nimport DataAccessHelper from './DataAccessHelper.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkStringArray from '../../Common/Core/StringArray.js';\nimport './DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// For vtk factory\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\nvar fieldDataLocations = ['pointData', 'cellData', 'fieldData'];\nvar ARRAY_BUILDERS = {\n  vtkDataArray: vtkDataArray,\n  vtkStringArray: vtkStringArray\n}; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n\nvar cachedArrays = {};\nvar GEOMETRY_ARRAYS = {\n  vtkPolyData: function vtkPolyData(dataset) {\n    var arrayToDownload = [];\n    arrayToDownload.push(dataset.points);\n    ['verts', 'lines', 'polys', 'strips'].forEach(function (cellName) {\n      if (dataset[cellName]) {\n        arrayToDownload.push(dataset[cellName]);\n      }\n    });\n    return arrayToDownload;\n  },\n  vtkImageData: function vtkImageData(dataset) {\n    return [];\n  },\n  vtkUnstructuredGrid: function vtkUnstructuredGrid(dataset) {\n    var arrayToDownload = [];\n    arrayToDownload.push(dataset.points);\n    arrayToDownload.push(dataset.cells);\n    arrayToDownload.push(dataset.cellTypes);\n    return arrayToDownload;\n  },\n  vtkRectilinearGrid: function vtkRectilinearGrid(dataset) {\n    var arrayToDownload = [];\n    arrayToDownload.push(dataset.xCoordinates);\n    arrayToDownload.push(dataset.yCoordinates);\n    arrayToDownload.push(dataset.zCoordinates);\n    return arrayToDownload;\n  }\n};\n\nfunction processDataSet(publicAPI, model, dataset, fetchArray, resolve, reject, loadData) {\n  var enable = model.enableArray; // Generate array list\n\n  model.arrays = [];\n  fieldDataLocations.forEach(function (location) {\n    if (dataset[location]) {\n      dataset[location].arrays.map(function (i) {\n        return i.data;\n      }).forEach(function (array) {\n        model.arrays.push({\n          name: array.name,\n          enable: enable,\n          location: location,\n          array: array,\n          registration: array.ref.registration || 'addArray'\n        });\n      }); // Reset data arrays\n\n      dataset[location].arrays = [];\n    }\n  }); // Fetch geometry arrays\n\n  var pendingPromises = [];\n  var progressCallback = model.progressCallback;\n  var compression = model.fetchGzip ? 'gz' : null;\n  GEOMETRY_ARRAYS[dataset.vtkClass](dataset).forEach(function (array) {\n    pendingPromises.push(fetchArray(array, {\n      compression: compression,\n      progressCallback: progressCallback\n    }));\n  });\n\n  function success() {\n    model.dataset = vtk(dataset);\n\n    if (!loadData) {\n      model.output[0] = model.dataset;\n      resolve(publicAPI, model.output[0]);\n    } else {\n      publicAPI.loadData().then(function () {\n        model.output[0] = model.dataset;\n        resolve(publicAPI, model.output[0]);\n      });\n    }\n  } // Wait for all geometry array to be fetched\n\n\n  if (pendingPromises.length) {\n    Promise.all(pendingPromises).then(success, function (err) {\n      reject(err);\n    });\n  } else {\n    success();\n  }\n} // ----------------------------------------------------------------------------\n// vtkHttpDataSetReader methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkHttpDataSetReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkHttpDataSetReader'); // Empty output by default\n\n  model.output[0] = vtk({\n    vtkClass: 'vtkPolyData'\n  }); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n\n  function fetchArray(array) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var arrayId = \"\".concat(array.ref.id, \"|\").concat(array.vtkClass);\n\n    if (!cachedArrays[arrayId]) {\n      // Cache the promise while fetching\n      cachedArrays[arrayId] = model.dataAccessHelper.fetchArray(publicAPI, model.baseURL, array, options).then(function (newArray) {\n        // Replace the promise with the array in cache once downloaded\n        cachedArrays[arrayId] = newArray;\n        return newArray;\n      });\n    } else {\n      // cacheArrays[arrayId] can be a promise or value\n      Promise.resolve(cachedArrays[arrayId]).then(function (cachedArray) {\n        if (array !== cachedArray) {\n          Object.assign(array, cachedArray);\n          delete array.ref;\n        }\n      });\n    }\n\n    return Promise.resolve(cachedArrays[arrayId]);\n  } // Fetch dataset (metadata)\n\n\n  publicAPI.updateMetadata = function () {\n    var loadData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (model.compression === 'zip') {\n      return new Promise(function (resolve, reject) {\n        DataAccessHelper.get('http').fetchBinary(model.url).then(function (zipContent) {\n          model.dataAccessHelper = DataAccessHelper.get('zip', {\n            zipContent: zipContent,\n            callback: function callback(zip) {\n              model.baseURL = '';\n              model.dataAccessHelper.fetchJSON(publicAPI, 'index.json').then(function (dataset) {\n                publicAPI.parseObject(dataset, {\n                  loadData: loadData,\n                  deepCopy: false\n                }).then(resolve, reject);\n              }, function (error) {\n                reject(error);\n              });\n            }\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      model.dataAccessHelper.fetchJSON(publicAPI, model.url).then(function (dataset) {\n        publicAPI.parseObject(dataset, {\n          loadData: loadData,\n          deepCopy: false\n        }).then(resolve, reject);\n      }, function (error) {\n        reject(error);\n      });\n    });\n  }; // Set DataSet url\n\n\n  publicAPI.setUrl = function (url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (url.indexOf('index.json') === -1 && !options.fullpath) {\n      model.baseURL = url;\n      model.url = \"\".concat(url, \"/index.json\");\n    } else {\n      model.url = url; // Remove the file in the URL\n\n      var path = url.split('/');\n      path.pop();\n      model.baseURL = path.join('/');\n    }\n\n    model.compression = options.compression; // Fetch metadata\n\n    return publicAPI.updateMetadata(!!options.loadData);\n  };\n\n  publicAPI.parseObject = function (manifest, _ref) {\n    var loadData = _ref.loadData,\n        baseUrl = _ref.baseUrl,\n        _ref$deepCopy = _ref.deepCopy,\n        deepCopy = _ref$deepCopy === void 0 ? true : _ref$deepCopy;\n\n    if (baseUrl) {\n      model.baseURL = baseUrl;\n    }\n\n    var dataset = deepCopy ? structuredClone(manifest) : manifest;\n    return new Promise(function (resolve, reject) {\n      processDataSet(publicAPI, model, dataset, fetchArray, resolve, reject, loadData);\n    });\n  }; // Fetch the actual data arrays\n\n\n  publicAPI.loadData = function () {\n    var datasetObj = model.dataset;\n    var arrayToFecth = model.arrays.filter(function (array) {\n      return array.enable;\n    }).filter(function (array) {\n      return array.array.ref;\n    }).map(function (array) {\n      return array.array;\n    });\n    return new Promise(function (resolve, reject) {\n      var error = function error(e) {\n        reject(e);\n      };\n\n      var processNext = function processNext() {\n        if (arrayToFecth.length) {\n          var progressCallback = model.progressCallback;\n          var compression = model.fetchGzip ? 'gz' : null;\n          fetchArray(arrayToFecth.pop(), {\n            compression: compression,\n            progressCallback: progressCallback\n          }).then(processNext, error);\n        } else if (datasetObj) {\n          // Perform array registration on new arrays\n          model.arrays.filter(function (metaArray) {\n            return metaArray.registration && !metaArray.array.ref;\n          }).forEach(function (metaArray) {\n            var newArray = ARRAY_BUILDERS[metaArray.array.vtkClass].newInstance(metaArray.array);\n            datasetObj[\"get\".concat(macro.capitalize(metaArray.location))]()[metaArray.registration](newArray);\n            delete metaArray.registration;\n          });\n          datasetObj.modified();\n          resolve(publicAPI, datasetObj);\n        }\n      }; // Start processing queue\n\n\n      processNext();\n    });\n  };\n\n  publicAPI.requestData = function (inData, outData) {// do nothing loadData will eventually load up the data\n  }; // Toggle arrays to load\n\n\n  publicAPI.enableArray = function (location, name) {\n    var enable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var activeArray = model.arrays.filter(function (array) {\n      return array.name === name && array.location === location;\n    });\n\n    if (activeArray.length === 1) {\n      activeArray[0].enable = enable;\n    }\n  }; // return Busy state\n\n\n  publicAPI.isBusy = function () {\n    return !!model.requestCount;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  enableArray: true,\n  fetchGzip: false,\n  arrays: [],\n  url: null,\n  baseURL: null,\n  requestCount: 0 // dataAccessHelper: null,\n\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['enableArray', 'fetchGzip', 'url', 'baseURL', 'dataAccessHelper']);\n  macro.set(publicAPI, model, ['dataAccessHelper', 'progressCallback']);\n  macro.getArray(publicAPI, model, ['arrays']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy'); // Object methods\n\n  vtkHttpDataSetReader(publicAPI, model); // Make sure we can destructuring progressCallback from model\n\n  if (model.progressCallback === undefined) {\n    model.progressCallback = null;\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkHttpDataSetReader'); // ----------------------------------------------------------------------------\n\nvar vtkHttpDataSetReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkHttpDataSetReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}