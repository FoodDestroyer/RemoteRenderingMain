{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport { B as areEquals } from '../../Common/Core/Math/index.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkTubeFilter from '../../Filters/General/TubeFilter.js';\nimport { getPixelWorldHeightAtCoord } from '../Core/WidgetManager.js';\nimport vtkWidgetRepresentation, { allocateArray } from './WidgetRepresentation.js';\nimport { RenderingTypes } from '../Core/WidgetManager/Constants.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n// vtkPolyLineRepresentation methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyLineRepresentation(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyLineRepresentation');\n  var superClass = _objectSpread({}, publicAPI); // --------------------------------------------------------------------------\n  // Internal polydata dataset\n  // --------------------------------------------------------------------------\n\n  var internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n  function allocateSize(polyData, size) {\n    var closePolyLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var points = null;\n    if (size < 2) {\n      // FIXME: Why 1 point and not 0 ?\n      points = allocateArray(polyData, 'points', 1).getData();\n      points.set([0, 0, 0]);\n      allocateArray(polyData, 'lines', 0).getData();\n    } else if (!polyData.getPoints() || polyData.getPoints().length !== size * 3) {\n      points = allocateArray(polyData, 'points', size).getData();\n      var cellSize = size + (closePolyLine ? 1 : 0);\n      if (polyData.getLines().getNumberOfCells() !== 1 || polyData.getLines().getCellSizes()[0] !== cellSize) {\n        var lines = allocateArray(polyData, 'lines', cellSize + 1); // +1 for the number of points\n\n        var cellData = lines.getData();\n        cellData[0] = cellSize;\n        for (var i = 1; i <= cellSize; i++) {\n          cellData[i] = i - 1;\n        }\n        if (closePolyLine) {\n          cellData[cellSize - 1] = 0;\n        }\n        lines.setData(cellData);\n      }\n    }\n    return points;\n  }\n  /**\n   * Change the line/tube thickness.\n   * @param {number} lineThickness\n   */\n\n  function applyLineThickness(lineThickness) {\n    var scaledLineThickness = lineThickness;\n    if (publicAPI.getScaleInPixels() && internalPolyData) {\n      var center = vtkBoundingBox.getCenter(internalPolyData.getBounds());\n      scaledLineThickness *= getPixelWorldHeightAtCoord(center, model.displayScaleParams);\n    }\n    model._pipelines.tubes.filter.setRadius(scaledLineThickness);\n  } // --------------------------------------------------------------------------\n  // Generic rendering pipeline\n  // --------------------------------------------------------------------------\n\n  model._pipelines = {\n    tubes: {\n      source: publicAPI,\n      filter: vtkTubeFilter.newInstance({\n        radius: model.lineThickness,\n        numberOfSides: 12,\n        capping: false\n      }),\n      mapper: vtkMapper.newInstance(),\n      actor: vtkActor.newInstance({\n        parentProp: publicAPI\n      })\n    }\n  };\n  vtkWidgetRepresentation.connectPipeline(model._pipelines.tubes);\n  publicAPI.addActor(model._pipelines.tubes.actor); // --------------------------------------------------------------------------\n\n  publicAPI.requestData = function (inData, outData) {\n    var _state$getLineThickne, _state$getLineThickne2;\n    var state = inData[0];\n    outData[0] = internalPolyData; // Remove invalid and coincident points for tube filter.\n\n    var list = publicAPI.getRepresentationStates(state).reduce(function (subStates, subState) {\n      var subStateOrigin = subState.getOrigin && subState.getOrigin() ? subState.getOrigin() : null;\n      var previousSubStateOrigin = subStates.length && subStates[subStates.length - 1].getOrigin();\n      if (!subStateOrigin || previousSubStateOrigin && areEquals(subStateOrigin, previousSubStateOrigin)) {\n        return subStates;\n      }\n      subStates.push(subState);\n      return subStates;\n    }, []);\n    var size = list.length;\n    var points = allocateSize(outData[0], size, model.closePolyLine && size > 2);\n    if (points) {\n      for (var i = 0; i < size; i++) {\n        var coords = list[i].getOrigin();\n        points[i * 3] = coords[0];\n        points[i * 3 + 1] = coords[1];\n        points[i * 3 + 2] = coords[2];\n      }\n    }\n    outData[0].getPoints().modified();\n    outData[0].modified();\n    var lineThickness = (_state$getLineThickne = (_state$getLineThickne2 = state.getLineThickness) === null || _state$getLineThickne2 === void 0 ? void 0 : _state$getLineThickne2.call(state)) !== null && _state$getLineThickne !== void 0 ? _state$getLineThickne : model.lineThickness;\n    applyLineThickness(lineThickness);\n  };\n  /**\n   * When mousing over the line, if behavior != CONTEXT,\n   * returns the parent state.\n   * @param {object} prop\n   * @param {number} compositeID\n   * @returns {object}\n   */\n\n  publicAPI.getSelectedState = function (prop, compositeID) {\n    return model.inputData[0];\n  };\n  publicAPI.updateActorVisibility = function (renderingType, ctxVisible, hVisible) {\n    var _state$getLineThickne3, _state$getLineThickne4;\n    var state = model.inputData[0]; // Make lines/tubes thicker for picking\n\n    var lineThickness = (_state$getLineThickne3 = (_state$getLineThickne4 = state.getLineThickness) === null || _state$getLineThickne4 === void 0 ? void 0 : _state$getLineThickne4.call(state)) !== null && _state$getLineThickne3 !== void 0 ? _state$getLineThickne3 : model.lineThickness;\n    if (renderingType === RenderingTypes.PICKING_BUFFER) {\n      lineThickness = Math.max(4, lineThickness);\n    }\n    applyLineThickness(lineThickness);\n    return superClass.updateActorVisibility(renderingType, ctxVisible, hVisible);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  threshold: Number.EPSILON,\n  closePolyLine: false,\n  lineThickness: 2,\n  scaleInPixels: true\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var newDefault = _objectSpread(_objectSpread({}, DEFAULT_VALUES), initialValues);\n  vtkWidgetRepresentation.extend(publicAPI, model, newDefault);\n  macro.setGet(publicAPI, model, ['threshold', 'closePolyLine', 'lineThickness']);\n  vtkPolyLineRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyLineRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkPolyLineRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkPolyLineRepresentation$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","macro","vtkActor","vtkMapper","B","areEquals","vtkBoundingBox","vtkTubeFilter","getPixelWorldHeightAtCoord","vtkWidgetRepresentation","allocateArray","RenderingTypes","vtkPolyData","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","vtkPolyLineRepresentation","publicAPI","model","classHierarchy","superClass","internalPolyData","newInstance","mtime","allocateSize","polyData","size","closePolyLine","undefined","points","getData","set","getPoints","cellSize","getLines","getNumberOfCells","getCellSizes","lines","cellData","setData","applyLineThickness","lineThickness","scaledLineThickness","getScaleInPixels","center","getCenter","getBounds","displayScaleParams","_pipelines","tubes","setRadius","radius","numberOfSides","capping","mapper","actor","parentProp","connectPipeline","addActor","requestData","inData","outData","_state$getLineThickne","_state$getLineThickne2","state","list","getRepresentationStates","reduce","subStates","subState","subStateOrigin","getOrigin","previousSubStateOrigin","coords","modified","getLineThickness","call","getSelectedState","prop","compositeID","inputData","updateActorVisibility","renderingType","ctxVisible","hVisible","_state$getLineThickne3","_state$getLineThickne4","PICKING_BUFFER","Math","max","DEFAULT_VALUES","threshold","Number","EPSILON","scaleInPixels","extend","initialValues","newDefault","setGet","vtkPolyLineRepresentation$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Representations/PolyLineRepresentation.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport { B as areEquals } from '../../Common/Core/Math/index.js';\nimport vtkBoundingBox from '../../Common/DataModel/BoundingBox.js';\nimport vtkTubeFilter from '../../Filters/General/TubeFilter.js';\nimport { getPixelWorldHeightAtCoord } from '../Core/WidgetManager.js';\nimport vtkWidgetRepresentation, { allocateArray } from './WidgetRepresentation.js';\nimport { RenderingTypes } from '../Core/WidgetManager/Constants.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// vtkPolyLineRepresentation methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPolyLineRepresentation(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPolyLineRepresentation');\n\n  var superClass = _objectSpread({}, publicAPI); // --------------------------------------------------------------------------\n  // Internal polydata dataset\n  // --------------------------------------------------------------------------\n\n\n  var internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n\n  function allocateSize(polyData, size) {\n    var closePolyLine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var points = null;\n\n    if (size < 2) {\n      // FIXME: Why 1 point and not 0 ?\n      points = allocateArray(polyData, 'points', 1).getData();\n      points.set([0, 0, 0]);\n      allocateArray(polyData, 'lines', 0).getData();\n    } else if (!polyData.getPoints() || polyData.getPoints().length !== size * 3) {\n      points = allocateArray(polyData, 'points', size).getData();\n      var cellSize = size + (closePolyLine ? 1 : 0);\n\n      if (polyData.getLines().getNumberOfCells() !== 1 || polyData.getLines().getCellSizes()[0] !== cellSize) {\n        var lines = allocateArray(polyData, 'lines', cellSize + 1); // +1 for the number of points\n\n        var cellData = lines.getData();\n        cellData[0] = cellSize;\n\n        for (var i = 1; i <= cellSize; i++) {\n          cellData[i] = i - 1;\n        }\n\n        if (closePolyLine) {\n          cellData[cellSize - 1] = 0;\n        }\n\n        lines.setData(cellData);\n      }\n    }\n\n    return points;\n  }\n  /**\n   * Change the line/tube thickness.\n   * @param {number} lineThickness\n   */\n\n\n  function applyLineThickness(lineThickness) {\n    var scaledLineThickness = lineThickness;\n\n    if (publicAPI.getScaleInPixels() && internalPolyData) {\n      var center = vtkBoundingBox.getCenter(internalPolyData.getBounds());\n      scaledLineThickness *= getPixelWorldHeightAtCoord(center, model.displayScaleParams);\n    }\n\n    model._pipelines.tubes.filter.setRadius(scaledLineThickness);\n  } // --------------------------------------------------------------------------\n  // Generic rendering pipeline\n  // --------------------------------------------------------------------------\n\n\n  model._pipelines = {\n    tubes: {\n      source: publicAPI,\n      filter: vtkTubeFilter.newInstance({\n        radius: model.lineThickness,\n        numberOfSides: 12,\n        capping: false\n      }),\n      mapper: vtkMapper.newInstance(),\n      actor: vtkActor.newInstance({\n        parentProp: publicAPI\n      })\n    }\n  };\n  vtkWidgetRepresentation.connectPipeline(model._pipelines.tubes);\n  publicAPI.addActor(model._pipelines.tubes.actor); // --------------------------------------------------------------------------\n\n  publicAPI.requestData = function (inData, outData) {\n    var _state$getLineThickne, _state$getLineThickne2;\n\n    var state = inData[0];\n    outData[0] = internalPolyData; // Remove invalid and coincident points for tube filter.\n\n    var list = publicAPI.getRepresentationStates(state).reduce(function (subStates, subState) {\n      var subStateOrigin = subState.getOrigin && subState.getOrigin() ? subState.getOrigin() : null;\n      var previousSubStateOrigin = subStates.length && subStates[subStates.length - 1].getOrigin();\n\n      if (!subStateOrigin || previousSubStateOrigin && areEquals(subStateOrigin, previousSubStateOrigin)) {\n        return subStates;\n      }\n\n      subStates.push(subState);\n      return subStates;\n    }, []);\n    var size = list.length;\n    var points = allocateSize(outData[0], size, model.closePolyLine && size > 2);\n\n    if (points) {\n      for (var i = 0; i < size; i++) {\n        var coords = list[i].getOrigin();\n        points[i * 3] = coords[0];\n        points[i * 3 + 1] = coords[1];\n        points[i * 3 + 2] = coords[2];\n      }\n    }\n\n    outData[0].getPoints().modified();\n    outData[0].modified();\n    var lineThickness = (_state$getLineThickne = (_state$getLineThickne2 = state.getLineThickness) === null || _state$getLineThickne2 === void 0 ? void 0 : _state$getLineThickne2.call(state)) !== null && _state$getLineThickne !== void 0 ? _state$getLineThickne : model.lineThickness;\n    applyLineThickness(lineThickness);\n  };\n  /**\n   * When mousing over the line, if behavior != CONTEXT,\n   * returns the parent state.\n   * @param {object} prop\n   * @param {number} compositeID\n   * @returns {object}\n   */\n\n\n  publicAPI.getSelectedState = function (prop, compositeID) {\n    return model.inputData[0];\n  };\n\n  publicAPI.updateActorVisibility = function (renderingType, ctxVisible, hVisible) {\n    var _state$getLineThickne3, _state$getLineThickne4;\n\n    var state = model.inputData[0]; // Make lines/tubes thicker for picking\n\n    var lineThickness = (_state$getLineThickne3 = (_state$getLineThickne4 = state.getLineThickness) === null || _state$getLineThickne4 === void 0 ? void 0 : _state$getLineThickne4.call(state)) !== null && _state$getLineThickne3 !== void 0 ? _state$getLineThickne3 : model.lineThickness;\n\n    if (renderingType === RenderingTypes.PICKING_BUFFER) {\n      lineThickness = Math.max(4, lineThickness);\n    }\n\n    applyLineThickness(lineThickness);\n    return superClass.updateActorVisibility(renderingType, ctxVisible, hVisible);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  threshold: Number.EPSILON,\n  closePolyLine: false,\n  lineThickness: 2,\n  scaleInPixels: true\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var newDefault = _objectSpread(_objectSpread({}, DEFAULT_VALUES), initialValues);\n\n  vtkWidgetRepresentation.extend(publicAPI, model, newDefault);\n  macro.setGet(publicAPI, model, ['threshold', 'closePolyLine', 'lineThickness']);\n  vtkPolyLineRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyLineRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkPolyLineRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkPolyLineRepresentation$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}