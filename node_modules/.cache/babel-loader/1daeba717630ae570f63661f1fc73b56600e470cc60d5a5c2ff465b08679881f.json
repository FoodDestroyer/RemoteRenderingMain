{"ast":null,"code":"import { mat4, vec3 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, get, getArray, setGet, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport { r as radiansFromDegrees } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkWebGPUBindGroup from './BindGroup.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUStorageBuffer from './StorageBuffer.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nvar vtkDebugMacro = vtkDebugMacro$1;\nvar clearFragColorTemplate = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\nvar clearFragTextureTemplate = \"\\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\\n  var tau: f32 = 6.28318530718;\\n  var pi: f32 = 3.14159265359;\\n  var out: vec2<f32> = vec2<f32>(0.0);\\n\\n  out.x = atan2(dir.z, dir.x) / tau;\\n  out.x += 0.5;\\n\\n  var phix: f32 = length(vec2(dir.x, dir.z));\\n  out.y = atan2(dir.y, phix) / pi + 0.5;\\n\\n  return out;\\n}\\n\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var tcoord: vec4<f32> = vec4<f32>(input.vertexVC.xy, -1, 1);\\n  var V: vec4<f32> = normalize(mapperUBO.FSQMatrix * tcoord); // vec2<f32>((input.tcoordVS.x - 0.5) * 2, -(input.tcoordVS.y - 0.5) * 2);\\n  // textureSampleLevel gets rid of some ugly artifacts\\n  var background = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, vecToRectCoord(V.xyz), 0);\\n  var computedColor: vec4<f32> = vec4<f32>(background.rgb, 1);\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\nvar _fsqClearMat4 = new Float64Array(16);\nvar _tNormalMat4 = new Float64Array(16); // Light type index gives either 0, 1, or 2 which indicates what type of light there is.\n// While technically, there are only spot and directional lights, within the CellArrayMapper\n// there is a third, positional light. It is technically just a variant of a spot light with\n// a cone angle of 90 or above, however certain calculations can be skipped if it is treated\n// separately.\n// The mappings are shown below:\n// 0 -> positional light\n// 1 -> directional light\n// 2 -> spot light\n\nfunction getLightTypeIndex(light) {\n  if (light.getPositional()) {\n    if (light.getConeAngle() >= 90) {\n      return 0;\n    }\n    return 2;\n  }\n  return 1;\n} // ----------------------------------------------------------------------------\n// vtkWebGPURenderer methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPURenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderer'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model.camera = model.renderable.getActiveCamera();\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.camera);\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n      model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);\n      publicAPI.updateStabilizedMatrix();\n    }\n  };\n  publicAPI.updateStabilizedMatrix = function () {\n    // This method is designed to help with floating point\n    // issues when rendering datasets that push the limits of\n    // resolutions on float.\n    //\n    // One of the most common cases is when the dataset is located far\n    // away from the origin relative to the clipping range we are looking\n    // at. For that case we want to perform the floating point sensitive\n    // multiplications on the CPU in double. To this end we want the\n    // vertex rendering ops to look something like\n    //\n    // Compute shifted points and load those into the VBO\n    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;\n    //\n    // In the vertex shader do the following\n    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;\n    //\n    // We use two matrices because it is expensive to change the\n    // WorldToStabilized matrix as we have to reupload all pointCoords\n    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to\n    // Device matrix is the one that gets updated every time the camera\n    // changes.\n    //\n    // The basic idea is that we should translate the data so that\n    // when the center of the view frustum moves a lot\n    // we recenter it. The center of the view frustum is roughly\n    // camPos + dirOfProj*(far + near)*0.5\n    var clipRange = model.camera.getClippingRange();\n    var pos = model.camera.getPositionByReference();\n    var dop = model.camera.getDirectionOfProjectionByReference();\n    var center = [];\n    var offset = [];\n    vec3.scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));\n    vec3.add(center, pos, offset);\n    vec3.sub(offset, center, model.stabilizedCenter);\n    var length = vec3.len(offset);\n    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {\n      model.stabilizedCenter = center;\n      model.stabilizedTime.modified();\n    }\n  };\n  publicAPI.updateLights = function () {\n    var count = 0;\n    var lights = model.renderable.getLightsByReference();\n    for (var index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n    return count;\n  };\n  publicAPI.updateUBO = function () {\n    // make sure the data is up to date\n    // has the camera changed?\n    var utime = model.UBO.getSendTime();\n    if (model._parent.getMTime() > utime || publicAPI.getMTime() > utime || model.camera.getMTime() > utime || model.renderable.getMTime() > utime) {\n      var _model$renderable$get;\n      var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);\n      model.UBO.setArray('SCPCMatrix', keyMats.scpc);\n      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);\n      model.UBO.setArray('SCVCMatrix', keyMats.scvc);\n      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);\n      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);\n      model.UBO.setValue('LightCount', model.renderable.getLights().length);\n      model.UBO.setValue('MaxEnvironmentMipLevel', (_model$renderable$get = model.renderable.getEnvironmentTexture()) === null || _model$renderable$get === void 0 ? void 0 : _model$renderable$get.getMipLevel());\n      model.UBO.setValue('BackgroundDiffuseStrength', model.renderable.getEnvironmentTextureDiffuseStrength());\n      model.UBO.setValue('BackgroundSpecularStrength', model.renderable.getEnvironmentTextureSpecularStrength());\n      var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n      model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);\n      model.UBO.setValue('cameraParallel', model.camera.getParallelProjection());\n      var device = model._parent.getDevice();\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n  publicAPI.updateSSBO = function () {\n    var lights = model.renderable.getLights();\n    var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    var lightTimeString = \"\".concat(model.renderable.getMTime());\n    for (var i = 0; i < lights.length; i++) {\n      lightTimeString += lights[i].getMTime();\n    }\n    if (lightTimeString !== model.lightTimeString) {\n      var lightPosArray = new Float32Array(lights.length * 4);\n      var lightDirArray = new Float32Array(lights.length * 4);\n      var lightColorArray = new Float32Array(lights.length * 4);\n      var lightTypeArray = new Float32Array(lights.length * 4);\n      for (var _i = 0; _i < lights.length; _i++) {\n        var offset = _i * 4; // Position\n\n        var viewCoordinatePosition = lights[_i].getPosition();\n        vec3.transformMat4(viewCoordinatePosition, viewCoordinatePosition, keyMats.wcvc); // viewCoordinatePosition\n\n        lightPosArray[offset] = viewCoordinatePosition[0];\n        lightPosArray[offset + 1] = viewCoordinatePosition[1];\n        lightPosArray[offset + 2] = viewCoordinatePosition[2];\n        lightPosArray[offset + 3] = 0; // Rotation (All are negative to correct for -Z being forward)\n\n        lightDirArray[offset] = -lights[_i].getDirection()[0];\n        lightDirArray[offset + 1] = -lights[_i].getDirection()[1];\n        lightDirArray[offset + 2] = -lights[_i].getDirection()[2];\n        lightDirArray[offset + 3] = 0; // Color\n\n        lightColorArray[offset] = lights[_i].getColor()[0];\n        lightColorArray[offset + 1] = lights[_i].getColor()[1];\n        lightColorArray[offset + 2] = lights[_i].getColor()[2];\n        lightColorArray[offset + 3] = lights[_i].getIntensity() * 5; // arbitrary multiplication to fix the dullness of low value PBR lights\n        // Type\n\n        lightTypeArray[offset] = getLightTypeIndex(lights[_i]); // Type\n\n        lightTypeArray[offset + 1] = Math.cos(radiansFromDegrees(lights[_i].getConeAngle())); // Inner Phi, should probably do some check on these to make sure they dont excede limits\n\n        lightTypeArray[offset + 2] = Math.cos(radiansFromDegrees(lights[_i].getConeAngle() + lights[_i].getConeFalloff())); // Outer Phi\n\n        lightTypeArray[offset + 3] = 0;\n      } // Im not sure how correct this is, but this is what the example does\n      // https://kitware.github.io/vtk-js/api/Rendering_WebGPU_VolumePassFSQ.html\n\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(lights.length);\n      model.SSBO.addEntry('LightPos', 'vec4<f32>'); // Position\n\n      model.SSBO.addEntry('LightDir', 'vec4<f32>'); // Direction\n\n      model.SSBO.addEntry('LightColor', 'vec4<f32>'); // Color (r, g, b, intensity)\n\n      model.SSBO.addEntry('LightData', 'vec4<f32>'); // Other data (type, etc, etc, etc)\n\n      model.SSBO.setAllInstancesFromArray('LightPos', lightPosArray);\n      model.SSBO.setAllInstancesFromArray('LightDir', lightDirArray);\n      model.SSBO.setAllInstancesFromArray('LightColor', lightColorArray);\n      model.SSBO.setAllInstancesFromArray('LightData', lightTypeArray);\n      var device = model._parent.getDevice();\n      model.SSBO.send(device);\n    }\n    model.lightTimeString = lightTimeString;\n  };\n  publicAPI.scissorAndViewport = function (encoder) {\n    var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n    encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n  };\n  publicAPI.bindUBO = function (renderEncoder) {\n    renderEncoder.activateBindGroup(model.bindGroup);\n  }; // Renders myself\n\n  publicAPI.opaquePass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n      publicAPI.updateUBO();\n      publicAPI.updateSSBO();\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      publicAPI.clear();\n      model.renderEncoder.end();\n    }\n  };\n  publicAPI.clear = function () {\n    var _model$backgroundTex;\n    if (model.renderable.getTransparent() || model.suppressClear) {\n      return;\n    }\n    var device = model._parent.getDevice(); // Normal Solid Color\n\n    if (!model.clearFSQ) {\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      var ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      model.backgroundTex = model.renderable.getEnvironmentTexture();\n    } // Textured Background\n\n    if (model.clearFSQ.getPipelineHash() !== 'clearfsqwithtexture' && model.renderable.getUseEnvironmentTextureAsBackground() && (_model$backgroundTex = model.backgroundTex) !== null && _model$backgroundTex !== void 0 && _model$backgroundTex.getImageLoaded()) {\n      model.clearFSQ.setFragmentShaderTemplate(clearFragTextureTemplate);\n      var _ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      _ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      _ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(_ubo);\n      var environmentTextureHash = device.getTextureManager().getTextureForVTKTexture(model.backgroundTex);\n      if (environmentTextureHash.getReady()) {\n        var tview = environmentTextureHash.createView(\"EnvironmentTexture\");\n        model.clearFSQ.setTextureViews([tview]);\n        model.backgroundTexLoaded = true;\n        var interpolate = model.backgroundTex.getInterpolate() ? 'linear' : 'nearest';\n        tview.addSampler(device, {\n          addressModeU: 'repeat',\n          addressModeV: 'clamp-to-edge',\n          addressModeW: 'repeat',\n          minFilter: interpolate,\n          magFilter: interpolate,\n          mipmapFilter: 'linear'\n        });\n      }\n      model.clearFSQ.setPipelineHash('clearfsqwithtexture');\n    } else if (model.clearFSQ.getPipelineHash() === 'clearfsqwithtexture' && !model.renderable.getUseEnvironmentTextureAsBackground()) {\n      // In case the mode is changed at runtime\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      var _ubo2 = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      _ubo2.addEntry('FSQMatrix', 'mat4x4<f32>');\n      _ubo2.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(_ubo2);\n    }\n    var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    var background = model.renderable.getBackgroundByReference();\n    model.clearFSQ.getUBO().setArray('BackgroundColor', background);\n    mat4.transpose(_tNormalMat4, keyMats.normalMatrix);\n    mat4.mul(_fsqClearMat4, keyMats.scvc, keyMats.pcsc);\n    mat4.mul(_fsqClearMat4, _tNormalMat4, _fsqClearMat4);\n    model.clearFSQ.getUBO().setArray('FSQMatrix', _fsqClearMat4);\n    model.clearFSQ.getUBO().sendIfNeeded(device);\n    model.clearFSQ.prepareAndDraw(model.renderEncoder);\n  };\n  publicAPI.translucentPass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n  publicAPI.volumeDepthRangePass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n  publicAPI.getAspectRatio = function () {\n    var size = model._parent.getSizeByReference();\n    var viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n  publicAPI.convertToOpenGLDepth = function (val) {\n    return model.webgpuCamera.convertToOpenGLDepth(val);\n  };\n  publicAPI.getYInvertedTiledSizeAndOrigin = function () {\n    var res = publicAPI.getTiledSizeAndOrigin();\n    var size = model._parent.getSizeByReference();\n    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;\n    return res;\n  };\n  publicAPI.getTiledSizeAndOrigin = function () {\n    var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1\n\n    var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu = vport[0] - tileViewPort[0];\n    var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value\n\n    var ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n    var lowerLeftU = Math.round(ndvp[0]);\n    var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu2 = vport[2] - tileViewPort[0];\n    var vpv2 = vport[3] - tileViewPort[1];\n    var ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the\n    // current tile\n\n    var usize = Math.round(ndvp2[0]) - lowerLeftU;\n    var vsize = Math.round(ndvp2[1]) - lowerLeftV;\n    if (usize < 0) {\n      usize = 0;\n    }\n    if (vsize < 0) {\n      vsize = 0;\n    }\n    return {\n      usize: usize,\n      vsize: vsize,\n      lowerLeftU: lowerLeftU,\n      lowerLeftV: lowerLeftV\n    };\n  };\n  publicAPI.getPropFromID = function (id) {\n    for (var i = 0; i < model.children.length; i++) {\n      var res = model.children[i].getPropID ? model.children[i].getPropID() : -1;\n      if (res === id) {\n        return model.children[i];\n      }\n    }\n    return null;\n  };\n  publicAPI.getStabilizedTime = function () {\n    return model.stabilizedTime.getMTime();\n  };\n  publicAPI.releaseGraphicsResources = function () {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  bindGroup: null,\n  selector: null,\n  renderEncoder: null,\n  recenterThreshold: 20.0,\n  suppressClear: false,\n  stabilizedCenter: [0.0, 0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // UBO\n\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'rendererUBO'\n  });\n  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('viewportSize', 'vec2<f32>');\n  model.UBO.addEntry('LightCount', 'i32');\n  model.UBO.addEntry('MaxEnvironmentMipLevel', 'f32');\n  model.UBO.addEntry('BackgroundDiffuseStrength', 'f32');\n  model.UBO.addEntry('BackgroundSpecularStrength', 'f32');\n  model.UBO.addEntry('cameraParallel', 'u32'); // SSBO (Light data)\n\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'rendererLightSSBO'\n  });\n  model.lightTimeString = '';\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({\n    label: 'rendererBG'\n  });\n  model.bindGroup.setBindables([model.UBO, model.SSBO]);\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  model.stabilizedTime = {};\n  obj(model.stabilizedTime, {\n    mtime: 0\n  }); // Build VTK API\n\n  get(publicAPI, model, ['bindGroup', 'stabilizedTime']);\n  getArray(publicAPI, model, ['stabilizedCenter']);\n  setGet(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']); // Object methods\n\n  vtkWebGPURenderer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPURenderer'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkRenderer', newInstance);\nexport { index as default, extend, newInstance };","map":{"version":3,"names":["mat4","vec3","newInstance","newInstance$1","obj","get","getArray","setGet","vtkDebugMacro","vtkDebugMacro$1","r","radiansFromDegrees","vtkViewNode","vtkWebGPUBindGroup","vtkWebGPUFullScreenQuad","vtkWebGPUStorageBuffer","vtkWebGPUUniformBuffer","registerOverride","clearFragColorTemplate","clearFragTextureTemplate","_fsqClearMat4","Float64Array","_tNormalMat4","getLightTypeIndex","light","getPositional","getConeAngle","vtkWebGPURenderer","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","camera","getActiveCamera","updateLights","prepareNodes","addMissingNode","addMissingNodes","getViewPropsWithNestedProps","removeUnusedNodes","webgpuCamera","getViewNodeFor","updateStabilizedMatrix","clipRange","getClippingRange","pos","getPositionByReference","dop","getDirectionOfProjectionByReference","center","offset","scale","add","sub","stabilizedCenter","length","len","recenterThreshold","stabilizedTime","modified","count","lights","getLightsByReference","index","getSwitch","createLight","updateUBO","utime","UBO","getSendTime","_parent","getMTime","_model$renderable$get","keyMats","getKeyMatrices","setArray","wcvc","scpc","pcsc","scvc","vcpc","normalMatrix","setValue","getLights","getEnvironmentTexture","getMipLevel","getEnvironmentTextureDiffuseStrength","getEnvironmentTextureSpecularStrength","tsize","getYInvertedTiledSizeAndOrigin","usize","vsize","getParallelProjection","device","getDevice","sendIfNeeded","updateSSBO","lightTimeString","concat","i","lightPosArray","Float32Array","lightDirArray","lightColorArray","lightTypeArray","_i","viewCoordinatePosition","getPosition","transformMat4","getDirection","getColor","getIntensity","Math","cos","getConeFalloff","SSBO","clearData","setNumberOfInstances","addEntry","setAllInstancesFromArray","send","scissorAndViewport","encoder","getHandle","setViewport","lowerLeftU","lowerLeftV","setScissorRect","bindUBO","renderEncoder","activateBindGroup","bindGroup","opaquePass","begin","getCommandEncoder","clear","end","_model$backgroundTex","getTransparent","suppressClear","clearFSQ","setDevice","setPipelineHash","setFragmentShaderTemplate","ubo","label","setUBO","backgroundTex","getPipelineHash","getUseEnvironmentTextureAsBackground","getImageLoaded","_ubo","environmentTextureHash","getTextureManager","getTextureForVTKTexture","getReady","tview","createView","setTextureViews","backgroundTexLoaded","interpolate","getInterpolate","addSampler","addressModeU","addressModeV","addressModeW","minFilter","magFilter","mipmapFilter","_ubo2","background","getBackgroundByReference","getUBO","transpose","mul","prepareAndDraw","translucentPass","volumeDepthRangePass","getAspectRatio","size","getSizeByReference","viewport","getViewportByReference","convertToOpenGLDepth","val","res","getTiledSizeAndOrigin","vport","tileViewPort","vpu","vpv","ndvp","normalizedDisplayToDisplay","round","vpu2","vpv2","ndvp2","getPropFromID","id","children","getPropID","getStabilizedTime","releaseGraphicsResources","selector","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","setBindables","tmpMat4","identity","mtime","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/Renderer.js"],"sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, get, getArray, setGet, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport { r as radiansFromDegrees } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport vtkWebGPUBindGroup from './BindGroup.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUStorageBuffer from './StorageBuffer.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nvar vtkDebugMacro = vtkDebugMacro$1;\nvar clearFragColorTemplate = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\nvar clearFragTextureTemplate = \"\\nfn vecToRectCoord(dir: vec3<f32>) -> vec2<f32> {\\n  var tau: f32 = 6.28318530718;\\n  var pi: f32 = 3.14159265359;\\n  var out: vec2<f32> = vec2<f32>(0.0);\\n\\n  out.x = atan2(dir.z, dir.x) / tau;\\n  out.x += 0.5;\\n\\n  var phix: f32 = length(vec2(dir.x, dir.z));\\n  out.y = atan2(dir.y, phix) / pi + 0.5;\\n\\n  return out;\\n}\\n\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var tcoord: vec4<f32> = vec4<f32>(input.vertexVC.xy, -1, 1);\\n  var V: vec4<f32> = normalize(mapperUBO.FSQMatrix * tcoord); // vec2<f32>((input.tcoordVS.x - 0.5) * 2, -(input.tcoordVS.y - 0.5) * 2);\\n  // textureSampleLevel gets rid of some ugly artifacts\\n  var background = textureSampleLevel(EnvironmentTexture, EnvironmentTextureSampler, vecToRectCoord(V.xyz), 0);\\n  var computedColor: vec4<f32> = vec4<f32>(background.rgb, 1);\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\n\nvar _fsqClearMat4 = new Float64Array(16);\n\nvar _tNormalMat4 = new Float64Array(16); // Light type index gives either 0, 1, or 2 which indicates what type of light there is.\n// While technically, there are only spot and directional lights, within the CellArrayMapper\n// there is a third, positional light. It is technically just a variant of a spot light with\n// a cone angle of 90 or above, however certain calculations can be skipped if it is treated\n// separately.\n// The mappings are shown below:\n// 0 -> positional light\n// 1 -> directional light\n// 2 -> spot light\n\n\nfunction getLightTypeIndex(light) {\n  if (light.getPositional()) {\n    if (light.getConeAngle() >= 90) {\n      return 0;\n    }\n\n    return 2;\n  }\n\n  return 1;\n} // ----------------------------------------------------------------------------\n// vtkWebGPURenderer methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\n\nfunction vtkWebGPURenderer(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderer'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      model.camera = model.renderable.getActiveCamera();\n      publicAPI.updateLights();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNode(model.camera);\n      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());\n      publicAPI.removeUnusedNodes();\n      model.webgpuCamera = publicAPI.getViewNodeFor(model.camera);\n      publicAPI.updateStabilizedMatrix();\n    }\n  };\n\n  publicAPI.updateStabilizedMatrix = function () {\n    // This method is designed to help with floating point\n    // issues when rendering datasets that push the limits of\n    // resolutions on float.\n    //\n    // One of the most common cases is when the dataset is located far\n    // away from the origin relative to the clipping range we are looking\n    // at. For that case we want to perform the floating point sensitive\n    // multiplications on the CPU in double. To this end we want the\n    // vertex rendering ops to look something like\n    //\n    // Compute shifted points and load those into the VBO\n    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;\n    //\n    // In the vertex shader do the following\n    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;\n    //\n    // We use two matrices because it is expensive to change the\n    // WorldToStabilized matrix as we have to reupload all pointCoords\n    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to\n    // Device matrix is the one that gets updated every time the camera\n    // changes.\n    //\n    // The basic idea is that we should translate the data so that\n    // when the center of the view frustum moves a lot\n    // we recenter it. The center of the view frustum is roughly\n    // camPos + dirOfProj*(far + near)*0.5\n    var clipRange = model.camera.getClippingRange();\n    var pos = model.camera.getPositionByReference();\n    var dop = model.camera.getDirectionOfProjectionByReference();\n    var center = [];\n    var offset = [];\n    vec3.scale(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));\n    vec3.add(center, pos, offset);\n    vec3.sub(offset, center, model.stabilizedCenter);\n    var length = vec3.len(offset);\n\n    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {\n      model.stabilizedCenter = center;\n      model.stabilizedTime.modified();\n    }\n  };\n\n  publicAPI.updateLights = function () {\n    var count = 0;\n    var lights = model.renderable.getLightsByReference();\n\n    for (var index = 0; index < lights.length; ++index) {\n      if (lights[index].getSwitch() > 0.0) {\n        count++;\n      }\n    }\n\n    if (!count) {\n      vtkDebugMacro('No lights are on, creating one.');\n      model.renderable.createLight();\n    }\n\n    return count;\n  };\n\n  publicAPI.updateUBO = function () {\n    // make sure the data is up to date\n    // has the camera changed?\n    var utime = model.UBO.getSendTime();\n\n    if (model._parent.getMTime() > utime || publicAPI.getMTime() > utime || model.camera.getMTime() > utime || model.renderable.getMTime() > utime) {\n      var _model$renderable$get;\n\n      var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);\n      model.UBO.setArray('SCPCMatrix', keyMats.scpc);\n      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);\n      model.UBO.setArray('SCVCMatrix', keyMats.scvc);\n      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);\n      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);\n      model.UBO.setValue('LightCount', model.renderable.getLights().length);\n      model.UBO.setValue('MaxEnvironmentMipLevel', (_model$renderable$get = model.renderable.getEnvironmentTexture()) === null || _model$renderable$get === void 0 ? void 0 : _model$renderable$get.getMipLevel());\n      model.UBO.setValue('BackgroundDiffuseStrength', model.renderable.getEnvironmentTextureDiffuseStrength());\n      model.UBO.setValue('BackgroundSpecularStrength', model.renderable.getEnvironmentTextureSpecularStrength());\n      var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n      model.UBO.setArray('viewportSize', [tsize.usize, tsize.vsize]);\n      model.UBO.setValue('cameraParallel', model.camera.getParallelProjection());\n\n      var device = model._parent.getDevice();\n\n      model.UBO.sendIfNeeded(device);\n    }\n  };\n\n  publicAPI.updateSSBO = function () {\n    var lights = model.renderable.getLights();\n    var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    var lightTimeString = \"\".concat(model.renderable.getMTime());\n\n    for (var i = 0; i < lights.length; i++) {\n      lightTimeString += lights[i].getMTime();\n    }\n\n    if (lightTimeString !== model.lightTimeString) {\n      var lightPosArray = new Float32Array(lights.length * 4);\n      var lightDirArray = new Float32Array(lights.length * 4);\n      var lightColorArray = new Float32Array(lights.length * 4);\n      var lightTypeArray = new Float32Array(lights.length * 4);\n\n      for (var _i = 0; _i < lights.length; _i++) {\n        var offset = _i * 4; // Position\n\n        var viewCoordinatePosition = lights[_i].getPosition();\n\n        vec3.transformMat4(viewCoordinatePosition, viewCoordinatePosition, keyMats.wcvc); // viewCoordinatePosition\n\n        lightPosArray[offset] = viewCoordinatePosition[0];\n        lightPosArray[offset + 1] = viewCoordinatePosition[1];\n        lightPosArray[offset + 2] = viewCoordinatePosition[2];\n        lightPosArray[offset + 3] = 0; // Rotation (All are negative to correct for -Z being forward)\n\n        lightDirArray[offset] = -lights[_i].getDirection()[0];\n        lightDirArray[offset + 1] = -lights[_i].getDirection()[1];\n        lightDirArray[offset + 2] = -lights[_i].getDirection()[2];\n        lightDirArray[offset + 3] = 0; // Color\n\n        lightColorArray[offset] = lights[_i].getColor()[0];\n        lightColorArray[offset + 1] = lights[_i].getColor()[1];\n        lightColorArray[offset + 2] = lights[_i].getColor()[2];\n        lightColorArray[offset + 3] = lights[_i].getIntensity() * 5; // arbitrary multiplication to fix the dullness of low value PBR lights\n        // Type\n\n        lightTypeArray[offset] = getLightTypeIndex(lights[_i]); // Type\n\n        lightTypeArray[offset + 1] = Math.cos(radiansFromDegrees(lights[_i].getConeAngle())); // Inner Phi, should probably do some check on these to make sure they dont excede limits\n\n        lightTypeArray[offset + 2] = Math.cos(radiansFromDegrees(lights[_i].getConeAngle() + lights[_i].getConeFalloff())); // Outer Phi\n\n        lightTypeArray[offset + 3] = 0;\n      } // Im not sure how correct this is, but this is what the example does\n      // https://kitware.github.io/vtk-js/api/Rendering_WebGPU_VolumePassFSQ.html\n\n\n      model.SSBO.clearData();\n      model.SSBO.setNumberOfInstances(lights.length);\n      model.SSBO.addEntry('LightPos', 'vec4<f32>'); // Position\n\n      model.SSBO.addEntry('LightDir', 'vec4<f32>'); // Direction\n\n      model.SSBO.addEntry('LightColor', 'vec4<f32>'); // Color (r, g, b, intensity)\n\n      model.SSBO.addEntry('LightData', 'vec4<f32>'); // Other data (type, etc, etc, etc)\n\n      model.SSBO.setAllInstancesFromArray('LightPos', lightPosArray);\n      model.SSBO.setAllInstancesFromArray('LightDir', lightDirArray);\n      model.SSBO.setAllInstancesFromArray('LightColor', lightColorArray);\n      model.SSBO.setAllInstancesFromArray('LightData', lightTypeArray);\n\n      var device = model._parent.getDevice();\n\n      model.SSBO.send(device);\n    }\n\n    model.lightTimeString = lightTimeString;\n  };\n\n  publicAPI.scissorAndViewport = function (encoder) {\n    var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();\n    encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);\n  };\n\n  publicAPI.bindUBO = function (renderEncoder) {\n    renderEncoder.activateBindGroup(model.bindGroup);\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n      publicAPI.updateUBO();\n      publicAPI.updateSSBO();\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      publicAPI.clear();\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.clear = function () {\n    var _model$backgroundTex;\n\n    if (model.renderable.getTransparent() || model.suppressClear) {\n      return;\n    }\n\n    var device = model._parent.getDevice(); // Normal Solid Color\n\n\n    if (!model.clearFSQ) {\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n      var ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n      ubo.addEntry('BackgroundColor', 'vec4<f32>');\n      model.clearFSQ.setUBO(ubo);\n      model.backgroundTex = model.renderable.getEnvironmentTexture();\n    } // Textured Background\n\n\n    if (model.clearFSQ.getPipelineHash() !== 'clearfsqwithtexture' && model.renderable.getUseEnvironmentTextureAsBackground() && (_model$backgroundTex = model.backgroundTex) !== null && _model$backgroundTex !== void 0 && _model$backgroundTex.getImageLoaded()) {\n      model.clearFSQ.setFragmentShaderTemplate(clearFragTextureTemplate);\n\n      var _ubo = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n\n      _ubo.addEntry('FSQMatrix', 'mat4x4<f32>');\n\n      _ubo.addEntry('BackgroundColor', 'vec4<f32>');\n\n      model.clearFSQ.setUBO(_ubo);\n      var environmentTextureHash = device.getTextureManager().getTextureForVTKTexture(model.backgroundTex);\n\n      if (environmentTextureHash.getReady()) {\n        var tview = environmentTextureHash.createView(\"EnvironmentTexture\");\n        model.clearFSQ.setTextureViews([tview]);\n        model.backgroundTexLoaded = true;\n        var interpolate = model.backgroundTex.getInterpolate() ? 'linear' : 'nearest';\n        tview.addSampler(device, {\n          addressModeU: 'repeat',\n          addressModeV: 'clamp-to-edge',\n          addressModeW: 'repeat',\n          minFilter: interpolate,\n          magFilter: interpolate,\n          mipmapFilter: 'linear'\n        });\n      }\n\n      model.clearFSQ.setPipelineHash('clearfsqwithtexture');\n    } else if (model.clearFSQ.getPipelineHash() === 'clearfsqwithtexture' && !model.renderable.getUseEnvironmentTextureAsBackground()) {\n      // In case the mode is changed at runtime\n      model.clearFSQ = vtkWebGPUFullScreenQuad.newInstance();\n      model.clearFSQ.setDevice(device);\n      model.clearFSQ.setPipelineHash('clearfsq');\n      model.clearFSQ.setFragmentShaderTemplate(clearFragColorTemplate);\n\n      var _ubo2 = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n\n      _ubo2.addEntry('FSQMatrix', 'mat4x4<f32>');\n\n      _ubo2.addEntry('BackgroundColor', 'vec4<f32>');\n\n      model.clearFSQ.setUBO(_ubo2);\n    }\n\n    var keyMats = model.webgpuCamera.getKeyMatrices(publicAPI);\n    var background = model.renderable.getBackgroundByReference();\n    model.clearFSQ.getUBO().setArray('BackgroundColor', background);\n    mat4.transpose(_tNormalMat4, keyMats.normalMatrix);\n    mat4.mul(_fsqClearMat4, keyMats.scvc, keyMats.pcsc);\n    mat4.mul(_fsqClearMat4, _tNormalMat4, _fsqClearMat4);\n    model.clearFSQ.getUBO().setArray('FSQMatrix', _fsqClearMat4);\n    model.clearFSQ.getUBO().sendIfNeeded(device);\n    model.clearFSQ.prepareAndDraw(model.renderEncoder);\n  };\n\n  publicAPI.translucentPass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.volumeDepthRangePass = function (prepass) {\n    if (prepass) {\n      model.renderEncoder.begin(model._parent.getCommandEncoder());\n    } else {\n      publicAPI.scissorAndViewport(model.renderEncoder);\n      model.renderEncoder.end();\n    }\n  };\n\n  publicAPI.getAspectRatio = function () {\n    var size = model._parent.getSizeByReference();\n\n    var viewport = model.renderable.getViewportByReference();\n    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);\n  };\n\n  publicAPI.convertToOpenGLDepth = function (val) {\n    return model.webgpuCamera.convertToOpenGLDepth(val);\n  };\n\n  publicAPI.getYInvertedTiledSizeAndOrigin = function () {\n    var res = publicAPI.getTiledSizeAndOrigin();\n\n    var size = model._parent.getSizeByReference();\n\n    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;\n    return res;\n  };\n\n  publicAPI.getTiledSizeAndOrigin = function () {\n    var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1\n\n    var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu = vport[0] - tileViewPort[0];\n    var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value\n\n    var ndvp = model._parent.normalizedDisplayToDisplay(vpu, vpv);\n\n    var lowerLeftU = Math.round(ndvp[0]);\n    var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the\n    // lower left boundary of this tile\n\n    var vpu2 = vport[2] - tileViewPort[0];\n    var vpv2 = vport[3] - tileViewPort[1];\n\n    var ndvp2 = model._parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the\n    // current tile\n\n\n    var usize = Math.round(ndvp2[0]) - lowerLeftU;\n    var vsize = Math.round(ndvp2[1]) - lowerLeftV;\n\n    if (usize < 0) {\n      usize = 0;\n    }\n\n    if (vsize < 0) {\n      vsize = 0;\n    }\n\n    return {\n      usize: usize,\n      vsize: vsize,\n      lowerLeftU: lowerLeftU,\n      lowerLeftV: lowerLeftV\n    };\n  };\n\n  publicAPI.getPropFromID = function (id) {\n    for (var i = 0; i < model.children.length; i++) {\n      var res = model.children[i].getPropID ? model.children[i].getPropID() : -1;\n\n      if (res === id) {\n        return model.children[i];\n      }\n    }\n\n    return null;\n  };\n\n  publicAPI.getStabilizedTime = function () {\n    return model.stabilizedTime.getMTime();\n  };\n\n  publicAPI.releaseGraphicsResources = function () {\n    if (model.selector !== null) {\n      model.selector.releaseGraphicsResources();\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  bindGroup: null,\n  selector: null,\n  renderEncoder: null,\n  recenterThreshold: 20.0,\n  suppressClear: false,\n  stabilizedCenter: [0.0, 0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // UBO\n\n  model.UBO = vtkWebGPUUniformBuffer.newInstance({\n    label: 'rendererUBO'\n  });\n  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');\n  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');\n  model.UBO.addEntry('viewportSize', 'vec2<f32>');\n  model.UBO.addEntry('LightCount', 'i32');\n  model.UBO.addEntry('MaxEnvironmentMipLevel', 'f32');\n  model.UBO.addEntry('BackgroundDiffuseStrength', 'f32');\n  model.UBO.addEntry('BackgroundSpecularStrength', 'f32');\n  model.UBO.addEntry('cameraParallel', 'u32'); // SSBO (Light data)\n\n  model.SSBO = vtkWebGPUStorageBuffer.newInstance({\n    label: 'rendererLightSSBO'\n  });\n  model.lightTimeString = '';\n  model.bindGroup = vtkWebGPUBindGroup.newInstance({\n    label: 'rendererBG'\n  });\n  model.bindGroup.setBindables([model.UBO, model.SSBO]);\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  model.stabilizedTime = {};\n  obj(model.stabilizedTime, {\n    mtime: 0\n  }); // Build VTK API\n\n  get(publicAPI, model, ['bindGroup', 'stabilizedTime']);\n  getArray(publicAPI, model, ['stabilizedCenter']);\n  setGet(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']); // Object methods\n\n  vtkWebGPURenderer(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPURenderer'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkRenderer', newInstance);\n\nexport { index as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}