{"ast":null,"code":"/* eslint-disable no-bitwise */\nvar floatView = new Float32Array(1);\nvar int32View = new Int32Array(floatView.buffer);\n/* eslint-disable no-bitwise */\n\n/* This method is faster than the OpenEXR implementation (very often\n * used, eg. in Ogre), with the additional benefit of rounding, inspired\n * by James Tursa?s half-precision code. */\n\nfunction toHalf(val) {\n  floatView[0] = val;\n  var x = int32View[0];\n  var bits = x >> 16 & 0x8000;\n  /* Get the sign */\n\n  var m = x >> 12 & 0x07ff;\n  /* Keep one extra bit for rounding */\n\n  var e = x >> 23 & 0xff;\n  /* Using int is faster here */\n\n  /* If zero, or denormal, or exponent underflows too much for a denormal\n   * half, return signed zero. */\n\n  if (e < 103) {\n    return bits;\n  }\n  /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n  if (e > 142) {\n    bits |= 0x7c00;\n    /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n     * not Inf, so make sure we set one mantissa bit too. */\n\n    bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;\n    return bits;\n  }\n  /* If exponent underflows but not too much, return a denormal */\n\n  if (e < 113) {\n    m |= 0x0800;\n    /* Extra rounding may overflow and set mantissa to 0 and exponent\n     * to 1, which is OK. */\n\n    bits |= (m >> 114 - e) + (m >> 113 - e & 1);\n    return bits;\n  }\n  bits |= e - 112 << 10 | m >> 1;\n  /* Extra rounding. An overflow will set mantissa to 0 and increment\n   * the exponent, which is OK. */\n\n  bits += m & 1;\n  return bits;\n}\nfunction fromHalf(h) {\n  var s = (h & 0x8000) >> 15;\n  var e = (h & 0x7c00) >> 10;\n  var f = h & 0x03ff;\n  if (e === 0) {\n    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\n  }\n  if (e === 0x1f) {\n    return f ? NaN : (s ? -1 : 1) * Infinity;\n  }\n  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));\n}\nvar HalfFloat = {\n  fromHalf: fromHalf,\n  toHalf: toHalf\n};\nexport { HalfFloat as default };","map":{"version":3,"names":["floatView","Float32Array","int32View","Int32Array","buffer","toHalf","val","x","bits","m","e","fromHalf","h","s","f","Math","pow","NaN","Infinity","HalfFloat","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Common/Core/HalfFloat.js"],"sourcesContent":["/* eslint-disable no-bitwise */\nvar floatView = new Float32Array(1);\nvar int32View = new Int32Array(floatView.buffer);\n/* eslint-disable no-bitwise */\n\n/* This method is faster than the OpenEXR implementation (very often\n * used, eg. in Ogre), with the additional benefit of rounding, inspired\n * by James Tursa?s half-precision code. */\n\nfunction toHalf(val) {\n  floatView[0] = val;\n  var x = int32View[0];\n  var bits = x >> 16 & 0x8000;\n  /* Get the sign */\n\n  var m = x >> 12 & 0x07ff;\n  /* Keep one extra bit for rounding */\n\n  var e = x >> 23 & 0xff;\n  /* Using int is faster here */\n\n  /* If zero, or denormal, or exponent underflows too much for a denormal\n   * half, return signed zero. */\n\n  if (e < 103) {\n    return bits;\n  }\n  /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\n  if (e > 142) {\n    bits |= 0x7c00;\n    /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n     * not Inf, so make sure we set one mantissa bit too. */\n\n    bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;\n    return bits;\n  }\n  /* If exponent underflows but not too much, return a denormal */\n\n\n  if (e < 113) {\n    m |= 0x0800;\n    /* Extra rounding may overflow and set mantissa to 0 and exponent\n     * to 1, which is OK. */\n\n    bits |= (m >> 114 - e) + (m >> 113 - e & 1);\n    return bits;\n  }\n\n  bits |= e - 112 << 10 | m >> 1;\n  /* Extra rounding. An overflow will set mantissa to 0 and increment\n   * the exponent, which is OK. */\n\n  bits += m & 1;\n  return bits;\n}\n\nfunction fromHalf(h) {\n  var s = (h & 0x8000) >> 15;\n  var e = (h & 0x7c00) >> 10;\n  var f = h & 0x03ff;\n\n  if (e === 0) {\n    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\n  }\n\n  if (e === 0x1f) {\n    return f ? NaN : (s ? -1 : 1) * Infinity;\n  }\n\n  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));\n}\n\nvar HalfFloat = {\n  fromHalf: fromHalf,\n  toHalf: toHalf\n};\n\nexport { HalfFloat as default };\n"],"mappings":"AAAA;AACA,IAAIA,SAAS,GAAG,IAAIC,YAAY,CAAC,CAAC,CAAC;AACnC,IAAIC,SAAS,GAAG,IAAIC,UAAU,CAACH,SAAS,CAACI,MAAM,CAAC;AAChD;;AAEA;AACA;AACA;;AAEA,SAASC,MAAMA,CAACC,GAAG,EAAE;EACnBN,SAAS,CAAC,CAAC,CAAC,GAAGM,GAAG;EAClB,IAAIC,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC;EACpB,IAAIM,IAAI,GAAGD,CAAC,IAAI,EAAE,GAAG,MAAM;EAC3B;;EAEA,IAAIE,CAAC,GAAGF,CAAC,IAAI,EAAE,GAAG,MAAM;EACxB;;EAEA,IAAIG,CAAC,GAAGH,CAAC,IAAI,EAAE,GAAG,IAAI;EACtB;;EAEA;AACF;;EAEE,IAAIG,CAAC,GAAG,GAAG,EAAE;IACX,OAAOF,IAAI;EACb;EACA;;EAGA,IAAIE,CAAC,GAAG,GAAG,EAAE;IACXF,IAAI,IAAI,MAAM;IACd;AACJ;;IAEIA,IAAI,IAAI,CAACE,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,KAAKH,CAAC,GAAG,UAAU;IAC7C,OAAOC,IAAI;EACb;EACA;;EAGA,IAAIE,CAAC,GAAG,GAAG,EAAE;IACXD,CAAC,IAAI,MAAM;IACX;AACJ;;IAEID,IAAI,IAAI,CAACC,CAAC,IAAI,GAAG,GAAGC,CAAC,KAAKD,CAAC,IAAI,GAAG,GAAGC,CAAC,GAAG,CAAC,CAAC;IAC3C,OAAOF,IAAI;EACb;EAEAA,IAAI,IAAIE,CAAC,GAAG,GAAG,IAAI,EAAE,GAAGD,CAAC,IAAI,CAAC;EAC9B;AACF;;EAEED,IAAI,IAAIC,CAAC,GAAG,CAAC;EACb,OAAOD,IAAI;AACb;AAEA,SAASG,QAAQA,CAACC,CAAC,EAAE;EACnB,IAAIC,CAAC,GAAG,CAACD,CAAC,GAAG,MAAM,KAAK,EAAE;EAC1B,IAAIF,CAAC,GAAG,CAACE,CAAC,GAAG,MAAM,KAAK,EAAE;EAC1B,IAAIE,CAAC,GAAGF,CAAC,GAAG,MAAM;EAElB,IAAIF,CAAC,KAAK,CAAC,EAAE;IACX,OAAO,CAACG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAIF,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAChE;EAEA,IAAIN,CAAC,KAAK,IAAI,EAAE;IACd,OAAOI,CAAC,GAAGG,GAAG,GAAG,CAACJ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIK,QAAQ;EAC1C;EAEA,OAAO,CAACL,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEN,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,GAAGI,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACvE;AAEA,IAAIG,SAAS,GAAG;EACdR,QAAQ,EAAEA,QAAQ;EAClBN,MAAM,EAAEA;AACV,CAAC;AAED,SAASc,SAAS,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}