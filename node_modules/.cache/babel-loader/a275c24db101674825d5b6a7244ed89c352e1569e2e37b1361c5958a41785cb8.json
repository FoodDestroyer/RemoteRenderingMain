{"ast":null,"code":"import { newInstance as newInstance$1, obj, get, setGet } from '../../macros.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nvar forwarded = ['setBindGroup', 'setIndexBuffer', 'setVertexBuffer', 'draw', 'drawIndexed']; // ----------------------------------------------------------------------------\n// vtkWebGPURenderEncoder methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPURenderEncoder(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderEncoder');\n  publicAPI.begin = function (encoder) {\n    model.drawCallbacks = [];\n    model.handle = encoder.beginRenderPass(model.description);\n    if (model.label) {\n      model.handle.pushDebugGroup(model.label);\n    }\n  };\n  publicAPI.end = function () {\n    // loop over registered pipelines and their callbacks\n    for (var i = 0; i < model.drawCallbacks.length; i++) {\n      var pStruct = model.drawCallbacks[i];\n      var pl = pStruct.pipeline;\n      publicAPI.setPipeline(pl);\n      for (var cb = 0; cb < pStruct.callbacks.length; cb++) {\n        pStruct.callbacks[cb](publicAPI);\n      }\n    }\n    if (model.label) {\n      model.handle.popDebugGroup();\n    }\n    model.handle.end();\n    model.boundPipeline = null;\n  };\n  publicAPI.setPipeline = function (pl) {\n    if (model.boundPipeline === pl) {\n      return;\n    }\n    model.handle.setPipeline(pl.getHandle());\n    var pd = pl.getPipelineDescription(); // check attachment state\n\n    if (model.colorTextureViews.length !== pd.fragment.targets.length) {\n      console.log(\"mismatched attachment counts on pipeline \".concat(pd.fragment.targets.length, \" while encoder has \").concat(model.colorTextureViews.length));\n      console.trace();\n    } else {\n      for (var i = 0; i < model.colorTextureViews.length; i++) {\n        var _model$colorTextureVi;\n        var fmt = (_model$colorTextureVi = model.colorTextureViews[i].getTexture()) === null || _model$colorTextureVi === void 0 ? void 0 : _model$colorTextureVi.getFormat();\n        if (fmt && fmt !== pd.fragment.targets[i].format) {\n          console.log(\"mismatched attachments for attachment \".concat(i, \" on pipeline \").concat(pd.fragment.targets[i].format, \" while encoder has \").concat(fmt));\n          console.trace();\n        }\n      }\n    } // check depth buffer\n\n    if (!model.depthTextureView !== !('depthStencil' in pd)) {\n      console.log('mismatched depth attachments');\n      console.trace();\n    } else if (model.depthTextureView) {\n      var _model$depthTextureVi;\n      var dfmt = (_model$depthTextureVi = model.depthTextureView.getTexture()) === null || _model$depthTextureVi === void 0 ? void 0 : _model$depthTextureVi.getFormat();\n      if (dfmt && dfmt !== pd.depthStencil.format) {\n        console.log(\"mismatched depth attachments on pipeline \".concat(pd.depthStencil.format, \" while encoder has \").concat(dfmt));\n        console.trace();\n      }\n    }\n    model.boundPipeline = pl;\n  };\n  publicAPI.replaceShaderCode = function (pipeline) {\n    model.replaceShaderCodeFunction(pipeline);\n  };\n  publicAPI.setColorTextureView = function (idx, view) {\n    if (model.colorTextureViews[idx] === view) {\n      return;\n    }\n    model.colorTextureViews[idx] = view;\n  };\n  publicAPI.activateBindGroup = function (bg) {\n    var device = model.boundPipeline.getDevice();\n    var midx = model.boundPipeline.getBindGroupLayoutCount(bg.getLabel());\n    model.handle.setBindGroup(midx, bg.getBindGroup(device)); // verify bind group layout matches\n\n    var bgl1 = device.getBindGroupLayoutDescription(bg.getBindGroupLayout(device));\n    var bgl2 = device.getBindGroupLayoutDescription(model.boundPipeline.getBindGroupLayout(midx));\n    if (bgl1 !== bgl2) {\n      console.log(\"renderEncoder \".concat(model.pipelineHash, \" mismatched bind group layouts bind group has\\n\").concat(bgl1, \"\\n versus pipeline\\n\").concat(bgl2, \"\\n\"));\n      console.trace();\n    }\n  };\n  publicAPI.attachTextureViews = function () {\n    // for each texture create a view if we do not already have one\n    for (var i = 0; i < model.colorTextureViews.length; i++) {\n      if (!model.description.colorAttachments[i]) {\n        model.description.colorAttachments[i] = {\n          view: model.colorTextureViews[i].getHandle()\n        };\n      } else {\n        model.description.colorAttachments[i].view = model.colorTextureViews[i].getHandle();\n      }\n    }\n    if (model.depthTextureView) {\n      model.description.depthStencilAttachment.view = model.depthTextureView.getHandle();\n    }\n  }; // register pipeline callbacks from a mapper\n\n  publicAPI.registerDrawCallback = function (pipeline, cb) {\n    // if there is a matching pipeline just add the cb\n    for (var i = 0; i < model.drawCallbacks.length; i++) {\n      if (model.drawCallbacks[i].pipeline === pipeline) {\n        model.drawCallbacks[i].callbacks.push(cb);\n        return;\n      }\n    }\n    model.drawCallbacks.push({\n      pipeline: pipeline,\n      callbacks: [cb]\n    });\n  }; // simple forwarders\n\n  var _loop = function _loop(i) {\n    publicAPI[forwarded[i]] = function () {\n      var _model$handle;\n      return (_model$handle = model.handle)[forwarded[i]].apply(_model$handle, arguments);\n    };\n  };\n  for (var i = 0; i < forwarded.length; i++) {\n    _loop(i);\n  }\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  description: null,\n  handle: null,\n  boundPipeline: null,\n  pipelineHash: null,\n  pipelineSettings: null,\n  replaceShaderCodeFunction: null,\n  depthTextureView: null,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  obj(publicAPI, model);\n  model.description = {\n    colorAttachments: [{\n      view: undefined,\n      loadOp: 'load',\n      storeOp: 'store'\n    }],\n    depthStencilAttachment: {\n      view: undefined,\n      depthLoadOp: 'clear',\n      depthClearValue: 0.0,\n      depthStoreOp: 'store'\n    }\n  }; // default shader code just writes out the computedColor\n\n  model.replaceShaderCodeFunction = function (pipeline) {\n    var fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addOutput('vec4<f32>', 'outColor');\n    var code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = computedColor;']).result;\n    fDesc.setCode(code);\n  }; // default pipeline settings\n\n  model.pipelineSettings = {\n    primitive: {\n      cullMode: 'none'\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'greater-equal',\n      format: 'depth32float'\n    },\n    fragment: {\n      targets: [{\n        format: 'rgba16float',\n        blend: {\n          color: {\n            srcFactor: 'src-alpha',\n            dstFactor: 'one-minus-src-alpha'\n          },\n          alpha: {\n            srcfactor: 'one',\n            dstFactor: 'one-minus-src-alpha'\n          }\n        }\n      }]\n    }\n  };\n  model.colorTextureViews = [];\n  get(publicAPI, model, ['boundPipeline', 'colorTextureViews']);\n  setGet(publicAPI, model, ['depthTextureView', 'description', 'handle', 'label', 'pipelineHash', 'pipelineSettings', 'replaceShaderCodeFunction']); // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n\n  vtkWebGPURenderEncoder(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPURenderEncoder'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPURenderEncoder$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkWebGPURenderEncoder$1 as default, extend, newInstance };","map":{"version":3,"names":["newInstance","newInstance$1","obj","get","setGet","vtkWebGPUShaderCache","forwarded","vtkWebGPURenderEncoder","publicAPI","model","classHierarchy","push","begin","encoder","drawCallbacks","handle","beginRenderPass","description","label","pushDebugGroup","end","i","length","pStruct","pl","pipeline","setPipeline","cb","callbacks","popDebugGroup","boundPipeline","getHandle","pd","getPipelineDescription","colorTextureViews","fragment","targets","console","log","concat","trace","_model$colorTextureVi","fmt","getTexture","getFormat","format","depthTextureView","_model$depthTextureVi","dfmt","depthStencil","replaceShaderCode","replaceShaderCodeFunction","setColorTextureView","idx","view","activateBindGroup","bg","device","getDevice","midx","getBindGroupLayoutCount","getLabel","setBindGroup","getBindGroup","bgl1","getBindGroupLayoutDescription","getBindGroupLayout","bgl2","pipelineHash","attachTextureViews","colorAttachments","depthStencilAttachment","registerDrawCallback","_loop","_model$handle","apply","arguments","DEFAULT_VALUES","pipelineSettings","extend","initialValues","undefined","Object","assign","loadOp","storeOp","depthLoadOp","depthClearValue","depthStoreOp","fDesc","getShaderDescription","addOutput","code","getCode","substitute","result","setCode","primitive","cullMode","depthWriteEnabled","depthCompare","blend","color","srcFactor","dstFactor","alpha","srcfactor","vtkWebGPURenderEncoder$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/RenderEncoder.js"],"sourcesContent":["import { newInstance as newInstance$1, obj, get, setGet } from '../../macros.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\n\nvar forwarded = ['setBindGroup', 'setIndexBuffer', 'setVertexBuffer', 'draw', 'drawIndexed']; // ----------------------------------------------------------------------------\n// vtkWebGPURenderEncoder methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPURenderEncoder(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPURenderEncoder');\n\n  publicAPI.begin = function (encoder) {\n    model.drawCallbacks = [];\n    model.handle = encoder.beginRenderPass(model.description);\n\n    if (model.label) {\n      model.handle.pushDebugGroup(model.label);\n    }\n  };\n\n  publicAPI.end = function () {\n    // loop over registered pipelines and their callbacks\n    for (var i = 0; i < model.drawCallbacks.length; i++) {\n      var pStruct = model.drawCallbacks[i];\n      var pl = pStruct.pipeline;\n      publicAPI.setPipeline(pl);\n\n      for (var cb = 0; cb < pStruct.callbacks.length; cb++) {\n        pStruct.callbacks[cb](publicAPI);\n      }\n    }\n\n    if (model.label) {\n      model.handle.popDebugGroup();\n    }\n\n    model.handle.end();\n    model.boundPipeline = null;\n  };\n\n  publicAPI.setPipeline = function (pl) {\n    if (model.boundPipeline === pl) {\n      return;\n    }\n\n    model.handle.setPipeline(pl.getHandle());\n    var pd = pl.getPipelineDescription(); // check attachment state\n\n    if (model.colorTextureViews.length !== pd.fragment.targets.length) {\n      console.log(\"mismatched attachment counts on pipeline \".concat(pd.fragment.targets.length, \" while encoder has \").concat(model.colorTextureViews.length));\n      console.trace();\n    } else {\n      for (var i = 0; i < model.colorTextureViews.length; i++) {\n        var _model$colorTextureVi;\n\n        var fmt = (_model$colorTextureVi = model.colorTextureViews[i].getTexture()) === null || _model$colorTextureVi === void 0 ? void 0 : _model$colorTextureVi.getFormat();\n\n        if (fmt && fmt !== pd.fragment.targets[i].format) {\n          console.log(\"mismatched attachments for attachment \".concat(i, \" on pipeline \").concat(pd.fragment.targets[i].format, \" while encoder has \").concat(fmt));\n          console.trace();\n        }\n      }\n    } // check depth buffer\n\n\n    if (!model.depthTextureView !== !('depthStencil' in pd)) {\n      console.log('mismatched depth attachments');\n      console.trace();\n    } else if (model.depthTextureView) {\n      var _model$depthTextureVi;\n\n      var dfmt = (_model$depthTextureVi = model.depthTextureView.getTexture()) === null || _model$depthTextureVi === void 0 ? void 0 : _model$depthTextureVi.getFormat();\n\n      if (dfmt && dfmt !== pd.depthStencil.format) {\n        console.log(\"mismatched depth attachments on pipeline \".concat(pd.depthStencil.format, \" while encoder has \").concat(dfmt));\n        console.trace();\n      }\n    }\n\n    model.boundPipeline = pl;\n  };\n\n  publicAPI.replaceShaderCode = function (pipeline) {\n    model.replaceShaderCodeFunction(pipeline);\n  };\n\n  publicAPI.setColorTextureView = function (idx, view) {\n    if (model.colorTextureViews[idx] === view) {\n      return;\n    }\n\n    model.colorTextureViews[idx] = view;\n  };\n\n  publicAPI.activateBindGroup = function (bg) {\n    var device = model.boundPipeline.getDevice();\n    var midx = model.boundPipeline.getBindGroupLayoutCount(bg.getLabel());\n    model.handle.setBindGroup(midx, bg.getBindGroup(device)); // verify bind group layout matches\n\n    var bgl1 = device.getBindGroupLayoutDescription(bg.getBindGroupLayout(device));\n    var bgl2 = device.getBindGroupLayoutDescription(model.boundPipeline.getBindGroupLayout(midx));\n\n    if (bgl1 !== bgl2) {\n      console.log(\"renderEncoder \".concat(model.pipelineHash, \" mismatched bind group layouts bind group has\\n\").concat(bgl1, \"\\n versus pipeline\\n\").concat(bgl2, \"\\n\"));\n      console.trace();\n    }\n  };\n\n  publicAPI.attachTextureViews = function () {\n    // for each texture create a view if we do not already have one\n    for (var i = 0; i < model.colorTextureViews.length; i++) {\n      if (!model.description.colorAttachments[i]) {\n        model.description.colorAttachments[i] = {\n          view: model.colorTextureViews[i].getHandle()\n        };\n      } else {\n        model.description.colorAttachments[i].view = model.colorTextureViews[i].getHandle();\n      }\n    }\n\n    if (model.depthTextureView) {\n      model.description.depthStencilAttachment.view = model.depthTextureView.getHandle();\n    }\n  }; // register pipeline callbacks from a mapper\n\n\n  publicAPI.registerDrawCallback = function (pipeline, cb) {\n    // if there is a matching pipeline just add the cb\n    for (var i = 0; i < model.drawCallbacks.length; i++) {\n      if (model.drawCallbacks[i].pipeline === pipeline) {\n        model.drawCallbacks[i].callbacks.push(cb);\n        return;\n      }\n    }\n\n    model.drawCallbacks.push({\n      pipeline: pipeline,\n      callbacks: [cb]\n    });\n  }; // simple forwarders\n\n\n  var _loop = function _loop(i) {\n    publicAPI[forwarded[i]] = function () {\n      var _model$handle;\n\n      return (_model$handle = model.handle)[forwarded[i]].apply(_model$handle, arguments);\n    };\n  };\n\n  for (var i = 0; i < forwarded.length; i++) {\n    _loop(i);\n  }\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  description: null,\n  handle: null,\n  boundPipeline: null,\n  pipelineHash: null,\n  pipelineSettings: null,\n  replaceShaderCodeFunction: null,\n  depthTextureView: null,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  obj(publicAPI, model);\n  model.description = {\n    colorAttachments: [{\n      view: undefined,\n      loadOp: 'load',\n      storeOp: 'store'\n    }],\n    depthStencilAttachment: {\n      view: undefined,\n      depthLoadOp: 'clear',\n      depthClearValue: 0.0,\n      depthStoreOp: 'store'\n    }\n  }; // default shader code just writes out the computedColor\n\n  model.replaceShaderCodeFunction = function (pipeline) {\n    var fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addOutput('vec4<f32>', 'outColor');\n    var code = fDesc.getCode();\n    code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = computedColor;']).result;\n    fDesc.setCode(code);\n  }; // default pipeline settings\n\n\n  model.pipelineSettings = {\n    primitive: {\n      cullMode: 'none'\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'greater-equal',\n      format: 'depth32float'\n    },\n    fragment: {\n      targets: [{\n        format: 'rgba16float',\n        blend: {\n          color: {\n            srcFactor: 'src-alpha',\n            dstFactor: 'one-minus-src-alpha'\n          },\n          alpha: {\n            srcfactor: 'one',\n            dstFactor: 'one-minus-src-alpha'\n          }\n        }\n      }]\n    }\n  };\n  model.colorTextureViews = [];\n  get(publicAPI, model, ['boundPipeline', 'colorTextureViews']);\n  setGet(publicAPI, model, ['depthTextureView', 'description', 'handle', 'label', 'pipelineHash', 'pipelineSettings', 'replaceShaderCodeFunction']); // For more macro methods, see \"Sources/macros.js\"\n  // Object specific methods\n\n  vtkWebGPURenderEncoder(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPURenderEncoder'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPURenderEncoder$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPURenderEncoder$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}