{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1, event, get, chain, newTypedArray, traverseInstanceTree } from '../../macros.js';\nimport Base64 from '../../Common/Core/Base64.js';\nimport vtkRenderWindow from '../Core/RenderWindow.js';\nimport vtkObjectManager from './SynchronizableRenderWindow/ObjectManager.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar SYNCHRONIZER_CONTEXTS = {}; // ----------------------------------------------------------------------------\n// Static methods\n// ----------------------------------------------------------------------------\n\nfunction createArrayHandler() {\n  var dataArrayCache = {};\n  var arrayFetcher = null;\n  function setFetchArrayFunction(fetcher) {\n    arrayFetcher = fetcher;\n  }\n  function getArray(sha, dataType, context) {\n    var arrayEntry = dataArrayCache[sha];\n    if (arrayEntry) {\n      arrayEntry.mtimes[context.getActiveViewId()] = context.getMTime();\n      return new Promise(function (resolve, reject) {\n        resolve(arrayEntry.array);\n      });\n    }\n    if (!arrayFetcher) {\n      return Promise.reject(new Error('No array fetcher found, please use \"setArrayFetcher\" to provide one'));\n    }\n    return new Promise(function (resolve, reject) {\n      arrayFetcher(sha).then(function (data) {\n        var buffer = data;\n        if (typeof data === 'string') {\n          buffer = Base64.toArrayBuffer(data);\n        }\n        if (buffer instanceof Blob) {\n          var fileReader = new FileReader();\n          fileReader.onload = function () {\n            var array = newTypedArray(dataType, fileReader.result);\n            var mtimes = _defineProperty({}, context.getActiveViewId(), context.getMTime());\n            dataArrayCache[sha] = {\n              mtimes: mtimes,\n              array: array\n            };\n            resolve(array);\n          };\n          fileReader.readAsArrayBuffer(buffer);\n        } else {\n          var array = newTypedArray(dataType, buffer);\n          var mtimes = _defineProperty({}, context.getActiveViewId(), context.getMTime());\n          dataArrayCache[sha] = {\n            mtimes: mtimes,\n            array: array\n          };\n          resolve(array);\n        }\n      }, function (error) {\n        console.log('Error getting data array:');\n        console.log(error);\n        reject(error);\n      });\n    });\n  }\n  function emptyCachedArrays() {\n    Object.keys(dataArrayCache).forEach(function (key) {\n      delete dataArrayCache[key];\n    });\n  }\n  function freeOldArrays(threshold, context) {\n    var mtimeThreshold = context.getMTime() - threshold;\n    Object.keys(dataArrayCache).filter(function (key) {\n      return dataArrayCache[key].mtimes[context.getActiveViewId()];\n    }).filter(function (key) {\n      return dataArrayCache[key].mtimes[context.getActiveViewId()] < mtimeThreshold;\n    }).forEach(function (key) {\n      delete dataArrayCache[key];\n    });\n  }\n  return {\n    setFetchArrayFunction: setFetchArrayFunction,\n    getArray: getArray,\n    emptyCachedArrays: emptyCachedArrays,\n    freeOldArrays: freeOldArrays\n  };\n} // ----------------------------------------------------------------------------\n\nfunction createInstanceMap() {\n  var instances = {};\n  function getInstance(id) {\n    return instances[id];\n  }\n  function getInstanceId(instance) {\n    var instanceId = null;\n    Object.keys(instances).forEach(function (id) {\n      if (instance === instances[id]) {\n        instanceId = id;\n      }\n    });\n    return instanceId;\n  }\n  function registerInstance(id, instance) {\n    instances[id] = instance;\n    instance.set({\n      remoteId: id\n    }, true, true);\n  }\n  function unregisterInstance(id) {\n    delete instances[id];\n  }\n  function emptyCachedInstances() {\n    Object.keys(instances).forEach(function (key) {\n      delete instances[key];\n    });\n  }\n  return {\n    getInstance: getInstance,\n    getInstanceId: getInstanceId,\n    registerInstance: registerInstance,\n    unregisterInstance: unregisterInstance,\n    emptyCachedInstances: emptyCachedInstances\n  };\n} // ----------------------------------------------------------------------------\n\nfunction createProgressHandler() {\n  var readyCount = 0;\n  var publicAPI = {\n    start: function start() {\n      readyCount += 1;\n      publicAPI.invokeProgressEvent(readyCount);\n    },\n    end: function end() {\n      readyCount -= 1;\n      publicAPI.invokeProgressEvent(readyCount);\n      if (readyCount === 0) {\n        publicAPI.invokeProgressDone();\n      }\n    },\n    resetProgress: function resetProgress() {\n      readyCount = 0;\n    }\n  };\n  var model = {};\n  event(publicAPI, model, 'progressEvent');\n  event(publicAPI, model, 'progressDone');\n  return publicAPI;\n} // ----------------------------------------------------------------------------\n\nfunction createSceneMtimeHandler() {\n  var mtimes = {};\n  var activeViewId = 'default';\n  function getMTime(viewId) {\n    var key = viewId || activeViewId;\n    return mtimes[key] || 1;\n  }\n  function incrementMTime(viewId) {\n    var key = viewId || activeViewId;\n    if (!mtimes[key]) {\n      mtimes[key] = 1;\n    }\n    mtimes[key] += 1;\n  }\n  function setActiveViewId(viewId) {\n    activeViewId = viewId;\n  }\n  function getActiveViewId() {\n    return activeViewId;\n  }\n  return {\n    getMTime: getMTime,\n    incrementMTime: incrementMTime,\n    setActiveViewId: setActiveViewId,\n    getActiveViewId: getActiveViewId\n  };\n} // ----------------------------------------------------------------------------\n\nfunction getSynchronizerContext() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  var ctx = SYNCHRONIZER_CONTEXTS[name];\n  if (!ctx) {\n    ctx = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, createArrayHandler()), createInstanceMap()), createProgressHandler()), createSceneMtimeHandler());\n    SYNCHRONIZER_CONTEXTS[name] = ctx;\n  }\n  return ctx;\n} // ----------------------------------------------------------------------------\n\nfunction setSynchronizerContext(name, ctx) {\n  SYNCHRONIZER_CONTEXTS[name] = ctx;\n}\nfunction clearSynchronizerContext(name) {\n  if (name && SYNCHRONIZER_CONTEXTS[name]) {\n    delete SYNCHRONIZER_CONTEXTS[name];\n  }\n  if (!name) {\n    var keys = Object.keys(SYNCHRONIZER_CONTEXTS);\n    for (var i = 0; i < keys.length; i++) {\n      delete SYNCHRONIZER_CONTEXTS[keys[i]];\n    }\n  }\n} // ----------------------------------------------------------------------------\n\nfunction createSyncFunction(renderWindow, synchronizerContext) {\n  var lastMtime = -1;\n  var gcThreshold = 100;\n  var getManagedInstanceId = function getManagedInstanceId(instance) {\n    return instance.get('managedInstanceId').managedInstanceId;\n  };\n  var getManagedInstanceIds = function getManagedInstanceIds() {\n    return traverseInstanceTree(renderWindow, getManagedInstanceId);\n  };\n  function clearOneTimeUpdaters() {\n    vtkObjectManager.clearOneTimeUpdaters(getManagedInstanceIds());\n  }\n  function setSynchronizedViewId(synchronizedViewId) {\n    renderWindow.set({\n      synchronizedViewId: synchronizedViewId\n    }, true, true);\n  }\n  function getSynchronizedViewId() {\n    return renderWindow.get('synchronizedViewId').synchronizedViewId;\n  }\n  function updateGarbageCollectorThreshold(v) {\n    gcThreshold = v;\n  }\n  function synchronize(state) {\n    if (!getSynchronizedViewId()) {\n      setSynchronizedViewId(state.id);\n    }\n    var mtime = state.mtime || 0;\n    if (getSynchronizedViewId() === state.id && lastMtime < mtime) {\n      return new Promise(function (resolve, reject) {\n        var subscription = synchronizerContext.onProgressDone(function () {\n          subscription.unsubscribe();\n          renderWindow.render();\n          resolve(true);\n        });\n        lastMtime = mtime;\n        synchronizerContext.setActiveViewId(state.id);\n        synchronizerContext.incrementMTime();\n        vtkObjectManager.updateRenderWindow(renderWindow, state, synchronizerContext);\n        synchronizerContext.freeOldArrays(gcThreshold, synchronizerContext);\n      });\n    }\n    return Promise.resolve(false);\n  }\n  return {\n    synchronize: synchronize,\n    setSynchronizedViewId: setSynchronizedViewId,\n    getSynchronizedViewId: getSynchronizedViewId,\n    updateGarbageCollectorThreshold: updateGarbageCollectorThreshold,\n    getManagedInstanceIds: getManagedInstanceIds,\n    clearOneTimeUpdaters: clearOneTimeUpdaters\n  };\n} // ----------------------------------------------------------------------------\n// vtkSynchronizableRenderWindow methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSynchronizableRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSynchronizableRenderWindow');\n  if (!model.synchronizerContext) {\n    model.synchronizerContext = getSynchronizerContext(model.synchronizerContextName);\n  }\n  var addOn = createSyncFunction(publicAPI, model.synchronizerContext);\n  Object.keys(addOn).forEach(function (methodName) {\n    if (publicAPI[methodName]) {\n      publicAPI[methodName] = chain(publicAPI[methodName], addOn[methodName]);\n    } else {\n      publicAPI[methodName] = addOn[methodName];\n    }\n  });\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  synchronizerContextName: 'default',\n  synchronizerContext: null,\n  synchronizedViewId: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderWindow.extend(publicAPI, model);\n  get(publicAPI, model, ['synchronizerContext']); // Object methods\n\n  vtkSynchronizableRenderWindow(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkSynchronizableRenderWindow'); // ----------------------------------------------------------------------------\n// More Static methods\n// ----------------------------------------------------------------------------\n\nfunction decorate(renderWindow) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n  var addOn = createSyncFunction(renderWindow, getSynchronizerContext(name));\n  return _objectSpread(_objectSpread(_objectSpread({}, addOn), renderWindow), {}, {\n    delete: chain(renderWindow.delete, addOn.delete)\n  });\n} // ----------------------------------------------------------------------------\n\nvar vtkSynchronizableRenderWindow$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  getSynchronizerContext: getSynchronizerContext,\n  setSynchronizerContext: setSynchronizerContext,\n  clearSynchronizerContext: clearSynchronizerContext,\n  decorate: decorate,\n  createInstanceMap: createInstanceMap,\n  createArrayHandler: createArrayHandler,\n  createProgressHandler: createProgressHandler,\n  createSceneMtimeHandler: createSceneMtimeHandler,\n  vtkObjectManager: vtkObjectManager\n};\nexport { DEFAULT_VALUES, vtkSynchronizableRenderWindow$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","newInstance","newInstance$1","event","get","chain","newTypedArray","traverseInstanceTree","Base64","vtkRenderWindow","vtkObjectManager","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","SYNCHRONIZER_CONTEXTS","createArrayHandler","dataArrayCache","arrayFetcher","setFetchArrayFunction","fetcher","getArray","sha","dataType","context","arrayEntry","mtimes","getActiveViewId","getMTime","Promise","resolve","reject","array","Error","then","data","buffer","toArrayBuffer","Blob","fileReader","FileReader","onload","result","readAsArrayBuffer","error","console","log","emptyCachedArrays","freeOldArrays","threshold","mtimeThreshold","createInstanceMap","instances","getInstance","id","getInstanceId","instance","instanceId","registerInstance","set","remoteId","unregisterInstance","emptyCachedInstances","createProgressHandler","readyCount","publicAPI","start","invokeProgressEvent","end","invokeProgressDone","resetProgress","model","createSceneMtimeHandler","activeViewId","viewId","incrementMTime","setActiveViewId","getSynchronizerContext","name","undefined","ctx","setSynchronizerContext","clearSynchronizerContext","createSyncFunction","renderWindow","synchronizerContext","lastMtime","gcThreshold","getManagedInstanceId","managedInstanceId","getManagedInstanceIds","clearOneTimeUpdaters","setSynchronizedViewId","synchronizedViewId","getSynchronizedViewId","updateGarbageCollectorThreshold","v","synchronize","state","mtime","subscription","onProgressDone","unsubscribe","render","updateRenderWindow","vtkSynchronizableRenderWindow","classHierarchy","synchronizerContextName","addOn","methodName","DEFAULT_VALUES","extend","initialValues","assign","decorate","delete","vtkSynchronizableRenderWindow$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Misc/SynchronizableRenderWindow.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1, event, get, chain, newTypedArray, traverseInstanceTree } from '../../macros.js';\nimport Base64 from '../../Common/Core/Base64.js';\nimport vtkRenderWindow from '../Core/RenderWindow.js';\nimport vtkObjectManager from './SynchronizableRenderWindow/ObjectManager.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar SYNCHRONIZER_CONTEXTS = {}; // ----------------------------------------------------------------------------\n// Static methods\n// ----------------------------------------------------------------------------\n\nfunction createArrayHandler() {\n  var dataArrayCache = {};\n  var arrayFetcher = null;\n\n  function setFetchArrayFunction(fetcher) {\n    arrayFetcher = fetcher;\n  }\n\n  function getArray(sha, dataType, context) {\n    var arrayEntry = dataArrayCache[sha];\n\n    if (arrayEntry) {\n      arrayEntry.mtimes[context.getActiveViewId()] = context.getMTime();\n      return new Promise(function (resolve, reject) {\n        resolve(arrayEntry.array);\n      });\n    }\n\n    if (!arrayFetcher) {\n      return Promise.reject(new Error('No array fetcher found, please use \"setArrayFetcher\" to provide one'));\n    }\n\n    return new Promise(function (resolve, reject) {\n      arrayFetcher(sha).then(function (data) {\n        var buffer = data;\n\n        if (typeof data === 'string') {\n          buffer = Base64.toArrayBuffer(data);\n        }\n\n        if (buffer instanceof Blob) {\n          var fileReader = new FileReader();\n\n          fileReader.onload = function () {\n            var array = newTypedArray(dataType, fileReader.result);\n\n            var mtimes = _defineProperty({}, context.getActiveViewId(), context.getMTime());\n\n            dataArrayCache[sha] = {\n              mtimes: mtimes,\n              array: array\n            };\n            resolve(array);\n          };\n\n          fileReader.readAsArrayBuffer(buffer);\n        } else {\n          var array = newTypedArray(dataType, buffer);\n\n          var mtimes = _defineProperty({}, context.getActiveViewId(), context.getMTime());\n\n          dataArrayCache[sha] = {\n            mtimes: mtimes,\n            array: array\n          };\n          resolve(array);\n        }\n      }, function (error) {\n        console.log('Error getting data array:');\n        console.log(error);\n        reject(error);\n      });\n    });\n  }\n\n  function emptyCachedArrays() {\n    Object.keys(dataArrayCache).forEach(function (key) {\n      delete dataArrayCache[key];\n    });\n  }\n\n  function freeOldArrays(threshold, context) {\n    var mtimeThreshold = context.getMTime() - threshold;\n    Object.keys(dataArrayCache).filter(function (key) {\n      return dataArrayCache[key].mtimes[context.getActiveViewId()];\n    }).filter(function (key) {\n      return dataArrayCache[key].mtimes[context.getActiveViewId()] < mtimeThreshold;\n    }).forEach(function (key) {\n      delete dataArrayCache[key];\n    });\n  }\n\n  return {\n    setFetchArrayFunction: setFetchArrayFunction,\n    getArray: getArray,\n    emptyCachedArrays: emptyCachedArrays,\n    freeOldArrays: freeOldArrays\n  };\n} // ----------------------------------------------------------------------------\n\n\nfunction createInstanceMap() {\n  var instances = {};\n\n  function getInstance(id) {\n    return instances[id];\n  }\n\n  function getInstanceId(instance) {\n    var instanceId = null;\n    Object.keys(instances).forEach(function (id) {\n      if (instance === instances[id]) {\n        instanceId = id;\n      }\n    });\n    return instanceId;\n  }\n\n  function registerInstance(id, instance) {\n    instances[id] = instance;\n    instance.set({\n      remoteId: id\n    }, true, true);\n  }\n\n  function unregisterInstance(id) {\n    delete instances[id];\n  }\n\n  function emptyCachedInstances() {\n    Object.keys(instances).forEach(function (key) {\n      delete instances[key];\n    });\n  }\n\n  return {\n    getInstance: getInstance,\n    getInstanceId: getInstanceId,\n    registerInstance: registerInstance,\n    unregisterInstance: unregisterInstance,\n    emptyCachedInstances: emptyCachedInstances\n  };\n} // ----------------------------------------------------------------------------\n\n\nfunction createProgressHandler() {\n  var readyCount = 0;\n  var publicAPI = {\n    start: function start() {\n      readyCount += 1;\n      publicAPI.invokeProgressEvent(readyCount);\n    },\n    end: function end() {\n      readyCount -= 1;\n      publicAPI.invokeProgressEvent(readyCount);\n\n      if (readyCount === 0) {\n        publicAPI.invokeProgressDone();\n      }\n    },\n    resetProgress: function resetProgress() {\n      readyCount = 0;\n    }\n  };\n  var model = {};\n  event(publicAPI, model, 'progressEvent');\n  event(publicAPI, model, 'progressDone');\n  return publicAPI;\n} // ----------------------------------------------------------------------------\n\n\nfunction createSceneMtimeHandler() {\n  var mtimes = {};\n  var activeViewId = 'default';\n\n  function getMTime(viewId) {\n    var key = viewId || activeViewId;\n    return mtimes[key] || 1;\n  }\n\n  function incrementMTime(viewId) {\n    var key = viewId || activeViewId;\n\n    if (!mtimes[key]) {\n      mtimes[key] = 1;\n    }\n\n    mtimes[key] += 1;\n  }\n\n  function setActiveViewId(viewId) {\n    activeViewId = viewId;\n  }\n\n  function getActiveViewId() {\n    return activeViewId;\n  }\n\n  return {\n    getMTime: getMTime,\n    incrementMTime: incrementMTime,\n    setActiveViewId: setActiveViewId,\n    getActiveViewId: getActiveViewId\n  };\n} // ----------------------------------------------------------------------------\n\n\nfunction getSynchronizerContext() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  var ctx = SYNCHRONIZER_CONTEXTS[name];\n\n  if (!ctx) {\n    ctx = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, createArrayHandler()), createInstanceMap()), createProgressHandler()), createSceneMtimeHandler());\n    SYNCHRONIZER_CONTEXTS[name] = ctx;\n  }\n\n  return ctx;\n} // ----------------------------------------------------------------------------\n\n\nfunction setSynchronizerContext(name, ctx) {\n  SYNCHRONIZER_CONTEXTS[name] = ctx;\n}\n\nfunction clearSynchronizerContext(name) {\n  if (name && SYNCHRONIZER_CONTEXTS[name]) {\n    delete SYNCHRONIZER_CONTEXTS[name];\n  }\n\n  if (!name) {\n    var keys = Object.keys(SYNCHRONIZER_CONTEXTS);\n\n    for (var i = 0; i < keys.length; i++) {\n      delete SYNCHRONIZER_CONTEXTS[keys[i]];\n    }\n  }\n} // ----------------------------------------------------------------------------\n\n\nfunction createSyncFunction(renderWindow, synchronizerContext) {\n  var lastMtime = -1;\n  var gcThreshold = 100;\n\n  var getManagedInstanceId = function getManagedInstanceId(instance) {\n    return instance.get('managedInstanceId').managedInstanceId;\n  };\n\n  var getManagedInstanceIds = function getManagedInstanceIds() {\n    return traverseInstanceTree(renderWindow, getManagedInstanceId);\n  };\n\n  function clearOneTimeUpdaters() {\n    vtkObjectManager.clearOneTimeUpdaters(getManagedInstanceIds());\n  }\n\n  function setSynchronizedViewId(synchronizedViewId) {\n    renderWindow.set({\n      synchronizedViewId: synchronizedViewId\n    }, true, true);\n  }\n\n  function getSynchronizedViewId() {\n    return renderWindow.get('synchronizedViewId').synchronizedViewId;\n  }\n\n  function updateGarbageCollectorThreshold(v) {\n    gcThreshold = v;\n  }\n\n  function synchronize(state) {\n    if (!getSynchronizedViewId()) {\n      setSynchronizedViewId(state.id);\n    }\n\n    var mtime = state.mtime || 0;\n\n    if (getSynchronizedViewId() === state.id && lastMtime < mtime) {\n      return new Promise(function (resolve, reject) {\n        var subscription = synchronizerContext.onProgressDone(function () {\n          subscription.unsubscribe();\n          renderWindow.render();\n          resolve(true);\n        });\n        lastMtime = mtime;\n        synchronizerContext.setActiveViewId(state.id);\n        synchronizerContext.incrementMTime();\n        vtkObjectManager.updateRenderWindow(renderWindow, state, synchronizerContext);\n        synchronizerContext.freeOldArrays(gcThreshold, synchronizerContext);\n      });\n    }\n\n    return Promise.resolve(false);\n  }\n\n  return {\n    synchronize: synchronize,\n    setSynchronizedViewId: setSynchronizedViewId,\n    getSynchronizedViewId: getSynchronizedViewId,\n    updateGarbageCollectorThreshold: updateGarbageCollectorThreshold,\n    getManagedInstanceIds: getManagedInstanceIds,\n    clearOneTimeUpdaters: clearOneTimeUpdaters\n  };\n} // ----------------------------------------------------------------------------\n// vtkSynchronizableRenderWindow methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkSynchronizableRenderWindow(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSynchronizableRenderWindow');\n\n  if (!model.synchronizerContext) {\n    model.synchronizerContext = getSynchronizerContext(model.synchronizerContextName);\n  }\n\n  var addOn = createSyncFunction(publicAPI, model.synchronizerContext);\n  Object.keys(addOn).forEach(function (methodName) {\n    if (publicAPI[methodName]) {\n      publicAPI[methodName] = chain(publicAPI[methodName], addOn[methodName]);\n    } else {\n      publicAPI[methodName] = addOn[methodName];\n    }\n  });\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  synchronizerContextName: 'default',\n  synchronizerContext: null,\n  synchronizedViewId: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderWindow.extend(publicAPI, model);\n  get(publicAPI, model, ['synchronizerContext']); // Object methods\n\n  vtkSynchronizableRenderWindow(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkSynchronizableRenderWindow'); // ----------------------------------------------------------------------------\n// More Static methods\n// ----------------------------------------------------------------------------\n\nfunction decorate(renderWindow) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n  var addOn = createSyncFunction(renderWindow, getSynchronizerContext(name));\n  return _objectSpread(_objectSpread(_objectSpread({}, addOn), renderWindow), {}, {\n    delete: chain(renderWindow.delete, addOn.delete)\n  });\n} // ----------------------------------------------------------------------------\n\n\nvar vtkSynchronizableRenderWindow$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  getSynchronizerContext: getSynchronizerContext,\n  setSynchronizerContext: setSynchronizerContext,\n  clearSynchronizerContext: clearSynchronizerContext,\n  decorate: decorate,\n  createInstanceMap: createInstanceMap,\n  createArrayHandler: createArrayHandler,\n  createProgressHandler: createProgressHandler,\n  createSceneMtimeHandler: createSceneMtimeHandler,\n  vtkObjectManager: vtkObjectManager\n};\n\nexport { DEFAULT_VALUES, vtkSynchronizableRenderWindow$1 as default, extend, newInstance };\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,SAASC,WAAW,IAAIC,aAAa,EAAEC,KAAK,EAAEC,GAAG,EAAEC,KAAK,EAAEC,aAAa,EAAEC,oBAAoB,QAAQ,iBAAiB;AACtH,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAOC,eAAe,MAAM,yBAAyB;AACrD,OAAOC,gBAAgB,MAAM,+CAA+C;AAE5E,SAASC,OAAOA,CAACC,MAAM,EAAEC,cAAc,EAAE;EAAE,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,MAAM,CAAC;EAAE,IAAIG,MAAM,CAACC,qBAAqB,EAAE;IAAE,IAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAqB,CAACJ,MAAM,CAAC;IAAEC,cAAc,KAAKI,OAAO,GAAGA,OAAO,CAACC,MAAM,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAOJ,MAAM,CAACK,wBAAwB,CAACR,MAAM,EAAEO,GAAG,CAAC,CAACE,UAAU;IAAE,CAAC,CAAC,CAAC,EAAEP,IAAI,CAACQ,IAAI,CAACC,KAAK,CAACT,IAAI,EAAEG,OAAO,CAAC;EAAE;EAAE,OAAOH,IAAI;AAAE;AAEpV,SAASU,aAAaA,CAACC,MAAM,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAAE,IAAIG,MAAM,GAAG,IAAI,IAAIF,SAAS,CAACD,CAAC,CAAC,GAAGC,SAAS,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC;IAAEA,CAAC,GAAG,CAAC,GAAGf,OAAO,CAACI,MAAM,CAACc,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAAE/B,eAAe,CAACyB,MAAM,EAAEM,GAAG,EAAEF,MAAM,CAACE,GAAG,CAAC,CAAC;IAAE,CAAC,CAAC,GAAGhB,MAAM,CAACiB,yBAAyB,GAAGjB,MAAM,CAACkB,gBAAgB,CAACR,MAAM,EAAEV,MAAM,CAACiB,yBAAyB,CAACH,MAAM,CAAC,CAAC,GAAGlB,OAAO,CAACI,MAAM,CAACc,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAAEhB,MAAM,CAACmB,cAAc,CAACT,MAAM,EAAEM,GAAG,EAAEhB,MAAM,CAACK,wBAAwB,CAACS,MAAM,EAAEE,GAAG,CAAC,CAAC;IAAE,CAAC,CAAC;EAAE;EAAE,OAAON,MAAM;AAAE;AACzf,IAAIU,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;AAChC;AACA;;AAEA,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,IAAIC,cAAc,GAAG,CAAC,CAAC;EACvB,IAAIC,YAAY,GAAG,IAAI;EAEvB,SAASC,qBAAqBA,CAACC,OAAO,EAAE;IACtCF,YAAY,GAAGE,OAAO;EACxB;EAEA,SAASC,QAAQA,CAACC,GAAG,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACxC,IAAIC,UAAU,GAAGR,cAAc,CAACK,GAAG,CAAC;IAEpC,IAAIG,UAAU,EAAE;MACdA,UAAU,CAACC,MAAM,CAACF,OAAO,CAACG,eAAe,CAAC,CAAC,CAAC,GAAGH,OAAO,CAACI,QAAQ,CAAC,CAAC;MACjE,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;QAC5CD,OAAO,CAACL,UAAU,CAACO,KAAK,CAAC;MAC3B,CAAC,CAAC;IACJ;IAEA,IAAI,CAACd,YAAY,EAAE;MACjB,OAAOW,OAAO,CAACE,MAAM,CAAC,IAAIE,KAAK,CAAC,qEAAqE,CAAC,CAAC;IACzG;IAEA,OAAO,IAAIJ,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MAC5Cb,YAAY,CAACI,GAAG,CAAC,CAACY,IAAI,CAAC,UAAUC,IAAI,EAAE;QACrC,IAAIC,MAAM,GAAGD,IAAI;QAEjB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC5BC,MAAM,GAAGhD,MAAM,CAACiD,aAAa,CAACF,IAAI,CAAC;QACrC;QAEA,IAAIC,MAAM,YAAYE,IAAI,EAAE;UAC1B,IAAIC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;UAEjCD,UAAU,CAACE,MAAM,GAAG,YAAY;YAC9B,IAAIT,KAAK,GAAG9C,aAAa,CAACqC,QAAQ,EAAEgB,UAAU,CAACG,MAAM,CAAC;YAEtD,IAAIhB,MAAM,GAAG9C,eAAe,CAAC,CAAC,CAAC,EAAE4C,OAAO,CAACG,eAAe,CAAC,CAAC,EAAEH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;YAE/EX,cAAc,CAACK,GAAG,CAAC,GAAG;cACpBI,MAAM,EAAEA,MAAM;cACdM,KAAK,EAAEA;YACT,CAAC;YACDF,OAAO,CAACE,KAAK,CAAC;UAChB,CAAC;UAEDO,UAAU,CAACI,iBAAiB,CAACP,MAAM,CAAC;QACtC,CAAC,MAAM;UACL,IAAIJ,KAAK,GAAG9C,aAAa,CAACqC,QAAQ,EAAEa,MAAM,CAAC;UAE3C,IAAIV,MAAM,GAAG9C,eAAe,CAAC,CAAC,CAAC,EAAE4C,OAAO,CAACG,eAAe,CAAC,CAAC,EAAEH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;UAE/EX,cAAc,CAACK,GAAG,CAAC,GAAG;YACpBI,MAAM,EAAEA,MAAM;YACdM,KAAK,EAAEA;UACT,CAAC;UACDF,OAAO,CAACE,KAAK,CAAC;QAChB;MACF,CAAC,EAAE,UAAUY,KAAK,EAAE;QAClBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxCD,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClBb,MAAM,CAACa,KAAK,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,SAASG,iBAAiBA,CAAA,EAAG;IAC3BpD,MAAM,CAACD,IAAI,CAACuB,cAAc,CAAC,CAACP,OAAO,CAAC,UAAUC,GAAG,EAAE;MACjD,OAAOM,cAAc,CAACN,GAAG,CAAC;IAC5B,CAAC,CAAC;EACJ;EAEA,SAASqC,aAAaA,CAACC,SAAS,EAAEzB,OAAO,EAAE;IACzC,IAAI0B,cAAc,GAAG1B,OAAO,CAACI,QAAQ,CAAC,CAAC,GAAGqB,SAAS;IACnDtD,MAAM,CAACD,IAAI,CAACuB,cAAc,CAAC,CAACnB,MAAM,CAAC,UAAUa,GAAG,EAAE;MAChD,OAAOM,cAAc,CAACN,GAAG,CAAC,CAACe,MAAM,CAACF,OAAO,CAACG,eAAe,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC7B,MAAM,CAAC,UAAUa,GAAG,EAAE;MACvB,OAAOM,cAAc,CAACN,GAAG,CAAC,CAACe,MAAM,CAACF,OAAO,CAACG,eAAe,CAAC,CAAC,CAAC,GAAGuB,cAAc;IAC/E,CAAC,CAAC,CAACxC,OAAO,CAAC,UAAUC,GAAG,EAAE;MACxB,OAAOM,cAAc,CAACN,GAAG,CAAC;IAC5B,CAAC,CAAC;EACJ;EAEA,OAAO;IACLQ,qBAAqB,EAAEA,qBAAqB;IAC5CE,QAAQ,EAAEA,QAAQ;IAClB0B,iBAAiB,EAAEA,iBAAiB;IACpCC,aAAa,EAAEA;EACjB,CAAC;AACH,CAAC,CAAC;;AAGF,SAASG,iBAAiBA,CAAA,EAAG;EAC3B,IAAIC,SAAS,GAAG,CAAC,CAAC;EAElB,SAASC,WAAWA,CAACC,EAAE,EAAE;IACvB,OAAOF,SAAS,CAACE,EAAE,CAAC;EACtB;EAEA,SAASC,aAAaA,CAACC,QAAQ,EAAE;IAC/B,IAAIC,UAAU,GAAG,IAAI;IACrB9D,MAAM,CAACD,IAAI,CAAC0D,SAAS,CAAC,CAAC1C,OAAO,CAAC,UAAU4C,EAAE,EAAE;MAC3C,IAAIE,QAAQ,KAAKJ,SAAS,CAACE,EAAE,CAAC,EAAE;QAC9BG,UAAU,GAAGH,EAAE;MACjB;IACF,CAAC,CAAC;IACF,OAAOG,UAAU;EACnB;EAEA,SAASC,gBAAgBA,CAACJ,EAAE,EAAEE,QAAQ,EAAE;IACtCJ,SAAS,CAACE,EAAE,CAAC,GAAGE,QAAQ;IACxBA,QAAQ,CAACG,GAAG,CAAC;MACXC,QAAQ,EAAEN;IACZ,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;EAChB;EAEA,SAASO,kBAAkBA,CAACP,EAAE,EAAE;IAC9B,OAAOF,SAAS,CAACE,EAAE,CAAC;EACtB;EAEA,SAASQ,oBAAoBA,CAAA,EAAG;IAC9BnE,MAAM,CAACD,IAAI,CAAC0D,SAAS,CAAC,CAAC1C,OAAO,CAAC,UAAUC,GAAG,EAAE;MAC5C,OAAOyC,SAAS,CAACzC,GAAG,CAAC;IACvB,CAAC,CAAC;EACJ;EAEA,OAAO;IACL0C,WAAW,EAAEA,WAAW;IACxBE,aAAa,EAAEA,aAAa;IAC5BG,gBAAgB,EAAEA,gBAAgB;IAClCG,kBAAkB,EAAEA,kBAAkB;IACtCC,oBAAoB,EAAEA;EACxB,CAAC;AACH,CAAC,CAAC;;AAGF,SAASC,qBAAqBA,CAAA,EAAG;EAC/B,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,SAAS,GAAG;IACdC,KAAK,EAAE,SAASA,KAAKA,CAAA,EAAG;MACtBF,UAAU,IAAI,CAAC;MACfC,SAAS,CAACE,mBAAmB,CAACH,UAAU,CAAC;IAC3C,CAAC;IACDI,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;MAClBJ,UAAU,IAAI,CAAC;MACfC,SAAS,CAACE,mBAAmB,CAACH,UAAU,CAAC;MAEzC,IAAIA,UAAU,KAAK,CAAC,EAAE;QACpBC,SAAS,CAACI,kBAAkB,CAAC,CAAC;MAChC;IACF,CAAC;IACDC,aAAa,EAAE,SAASA,aAAaA,CAAA,EAAG;MACtCN,UAAU,GAAG,CAAC;IAChB;EACF,CAAC;EACD,IAAIO,KAAK,GAAG,CAAC,CAAC;EACdxF,KAAK,CAACkF,SAAS,EAAEM,KAAK,EAAE,eAAe,CAAC;EACxCxF,KAAK,CAACkF,SAAS,EAAEM,KAAK,EAAE,cAAc,CAAC;EACvC,OAAON,SAAS;AAClB,CAAC,CAAC;;AAGF,SAASO,uBAAuBA,CAAA,EAAG;EACjC,IAAI9C,MAAM,GAAG,CAAC,CAAC;EACf,IAAI+C,YAAY,GAAG,SAAS;EAE5B,SAAS7C,QAAQA,CAAC8C,MAAM,EAAE;IACxB,IAAI/D,GAAG,GAAG+D,MAAM,IAAID,YAAY;IAChC,OAAO/C,MAAM,CAACf,GAAG,CAAC,IAAI,CAAC;EACzB;EAEA,SAASgE,cAAcA,CAACD,MAAM,EAAE;IAC9B,IAAI/D,GAAG,GAAG+D,MAAM,IAAID,YAAY;IAEhC,IAAI,CAAC/C,MAAM,CAACf,GAAG,CAAC,EAAE;MAChBe,MAAM,CAACf,GAAG,CAAC,GAAG,CAAC;IACjB;IAEAe,MAAM,CAACf,GAAG,CAAC,IAAI,CAAC;EAClB;EAEA,SAASiE,eAAeA,CAACF,MAAM,EAAE;IAC/BD,YAAY,GAAGC,MAAM;EACvB;EAEA,SAAS/C,eAAeA,CAAA,EAAG;IACzB,OAAO8C,YAAY;EACrB;EAEA,OAAO;IACL7C,QAAQ,EAAEA,QAAQ;IAClB+C,cAAc,EAAEA,cAAc;IAC9BC,eAAe,EAAEA,eAAe;IAChCjD,eAAe,EAAEA;EACnB,CAAC;AACH,CAAC,CAAC;;AAGF,SAASkD,sBAAsBA,CAAA,EAAG;EAChC,IAAIC,IAAI,GAAGvE,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKwE,SAAS,GAAGxE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS;EACxF,IAAIyE,GAAG,GAAGjE,qBAAqB,CAAC+D,IAAI,CAAC;EAErC,IAAI,CAACE,GAAG,EAAE;IACRA,GAAG,GAAG5E,aAAa,CAACA,aAAa,CAACA,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEY,kBAAkB,CAAC,CAAC,CAAC,EAAEmC,iBAAiB,CAAC,CAAC,CAAC,EAAEY,qBAAqB,CAAC,CAAC,CAAC,EAAES,uBAAuB,CAAC,CAAC,CAAC;IACnKzD,qBAAqB,CAAC+D,IAAI,CAAC,GAAGE,GAAG;EACnC;EAEA,OAAOA,GAAG;AACZ,CAAC,CAAC;;AAGF,SAASC,sBAAsBA,CAACH,IAAI,EAAEE,GAAG,EAAE;EACzCjE,qBAAqB,CAAC+D,IAAI,CAAC,GAAGE,GAAG;AACnC;AAEA,SAASE,wBAAwBA,CAACJ,IAAI,EAAE;EACtC,IAAIA,IAAI,IAAI/D,qBAAqB,CAAC+D,IAAI,CAAC,EAAE;IACvC,OAAO/D,qBAAqB,CAAC+D,IAAI,CAAC;EACpC;EAEA,IAAI,CAACA,IAAI,EAAE;IACT,IAAIpF,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACqB,qBAAqB,CAAC;IAE7C,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,CAACc,MAAM,EAAEF,CAAC,EAAE,EAAE;MACpC,OAAOS,qBAAqB,CAACrB,IAAI,CAACY,CAAC,CAAC,CAAC;IACvC;EACF;AACF,CAAC,CAAC;;AAGF,SAAS6E,kBAAkBA,CAACC,YAAY,EAAEC,mBAAmB,EAAE;EAC7D,IAAIC,SAAS,GAAG,CAAC,CAAC;EAClB,IAAIC,WAAW,GAAG,GAAG;EAErB,IAAIC,oBAAoB,GAAG,SAASA,oBAAoBA,CAAChC,QAAQ,EAAE;IACjE,OAAOA,QAAQ,CAACxE,GAAG,CAAC,mBAAmB,CAAC,CAACyG,iBAAiB;EAC5D,CAAC;EAED,IAAIC,qBAAqB,GAAG,SAASA,qBAAqBA,CAAA,EAAG;IAC3D,OAAOvG,oBAAoB,CAACiG,YAAY,EAAEI,oBAAoB,CAAC;EACjE,CAAC;EAED,SAASG,oBAAoBA,CAAA,EAAG;IAC9BrG,gBAAgB,CAACqG,oBAAoB,CAACD,qBAAqB,CAAC,CAAC,CAAC;EAChE;EAEA,SAASE,qBAAqBA,CAACC,kBAAkB,EAAE;IACjDT,YAAY,CAACzB,GAAG,CAAC;MACfkC,kBAAkB,EAAEA;IACtB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;EAChB;EAEA,SAASC,qBAAqBA,CAAA,EAAG;IAC/B,OAAOV,YAAY,CAACpG,GAAG,CAAC,oBAAoB,CAAC,CAAC6G,kBAAkB;EAClE;EAEA,SAASE,+BAA+BA,CAACC,CAAC,EAAE;IAC1CT,WAAW,GAAGS,CAAC;EACjB;EAEA,SAASC,WAAWA,CAACC,KAAK,EAAE;IAC1B,IAAI,CAACJ,qBAAqB,CAAC,CAAC,EAAE;MAC5BF,qBAAqB,CAACM,KAAK,CAAC5C,EAAE,CAAC;IACjC;IAEA,IAAI6C,KAAK,GAAGD,KAAK,CAACC,KAAK,IAAI,CAAC;IAE5B,IAAIL,qBAAqB,CAAC,CAAC,KAAKI,KAAK,CAAC5C,EAAE,IAAIgC,SAAS,GAAGa,KAAK,EAAE;MAC7D,OAAO,IAAItE,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;QAC5C,IAAIqE,YAAY,GAAGf,mBAAmB,CAACgB,cAAc,CAAC,YAAY;UAChED,YAAY,CAACE,WAAW,CAAC,CAAC;UAC1BlB,YAAY,CAACmB,MAAM,CAAC,CAAC;UACrBzE,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC;QACFwD,SAAS,GAAGa,KAAK;QACjBd,mBAAmB,CAACT,eAAe,CAACsB,KAAK,CAAC5C,EAAE,CAAC;QAC7C+B,mBAAmB,CAACV,cAAc,CAAC,CAAC;QACpCrF,gBAAgB,CAACkH,kBAAkB,CAACpB,YAAY,EAAEc,KAAK,EAAEb,mBAAmB,CAAC;QAC7EA,mBAAmB,CAACrC,aAAa,CAACuC,WAAW,EAAEF,mBAAmB,CAAC;MACrE,CAAC,CAAC;IACJ;IAEA,OAAOxD,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EAC/B;EAEA,OAAO;IACLmE,WAAW,EAAEA,WAAW;IACxBL,qBAAqB,EAAEA,qBAAqB;IAC5CE,qBAAqB,EAAEA,qBAAqB;IAC5CC,+BAA+B,EAAEA,+BAA+B;IAChEL,qBAAqB,EAAEA,qBAAqB;IAC5CC,oBAAoB,EAAEA;EACxB,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,SAASc,6BAA6BA,CAACxC,SAAS,EAAEM,KAAK,EAAE;EACvD;EACAA,KAAK,CAACmC,cAAc,CAACxG,IAAI,CAAC,+BAA+B,CAAC;EAE1D,IAAI,CAACqE,KAAK,CAACc,mBAAmB,EAAE;IAC9Bd,KAAK,CAACc,mBAAmB,GAAGR,sBAAsB,CAACN,KAAK,CAACoC,uBAAuB,CAAC;EACnF;EAEA,IAAIC,KAAK,GAAGzB,kBAAkB,CAAClB,SAAS,EAAEM,KAAK,CAACc,mBAAmB,CAAC;EACpE1F,MAAM,CAACD,IAAI,CAACkH,KAAK,CAAC,CAAClG,OAAO,CAAC,UAAUmG,UAAU,EAAE;IAC/C,IAAI5C,SAAS,CAAC4C,UAAU,CAAC,EAAE;MACzB5C,SAAS,CAAC4C,UAAU,CAAC,GAAG5H,KAAK,CAACgF,SAAS,CAAC4C,UAAU,CAAC,EAAED,KAAK,CAACC,UAAU,CAAC,CAAC;IACzE,CAAC,MAAM;MACL5C,SAAS,CAAC4C,UAAU,CAAC,GAAGD,KAAK,CAACC,UAAU,CAAC;IAC3C;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACF;AACA;;AAGA,IAAIC,cAAc,GAAG;EACnBH,uBAAuB,EAAE,SAAS;EAClCtB,mBAAmB,EAAE,IAAI;EACzBQ,kBAAkB,EAAE;AACtB,CAAC,CAAC,CAAC;;AAEH,SAASkB,MAAMA,CAAC9C,SAAS,EAAEM,KAAK,EAAE;EAChC,IAAIyC,aAAa,GAAGzG,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKwE,SAAS,GAAGxE,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FZ,MAAM,CAACsH,MAAM,CAAC1C,KAAK,EAAEuC,cAAc,EAAEE,aAAa,CAAC,CAAC,CAAC;;EAErD3H,eAAe,CAAC0H,MAAM,CAAC9C,SAAS,EAAEM,KAAK,CAAC;EACxCvF,GAAG,CAACiF,SAAS,EAAEM,KAAK,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;;EAEhDkC,6BAA6B,CAACxC,SAAS,EAAEM,KAAK,CAAC;AACjD,CAAC,CAAC;;AAEF,IAAI1F,WAAW,GAAGC,aAAa,CAACiI,MAAM,EAAE,+BAA+B,CAAC,CAAC,CAAC;AAC1E;AACA;;AAEA,SAASG,QAAQA,CAAC9B,YAAY,EAAE;EAC9B,IAAIN,IAAI,GAAGvE,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKwE,SAAS,GAAGxE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS;EACxF,IAAIqG,KAAK,GAAGzB,kBAAkB,CAACC,YAAY,EAAEP,sBAAsB,CAACC,IAAI,CAAC,CAAC;EAC1E,OAAO1E,aAAa,CAACA,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEwG,KAAK,CAAC,EAAExB,YAAY,CAAC,EAAE,CAAC,CAAC,EAAE;IAC9E+B,MAAM,EAAElI,KAAK,CAACmG,YAAY,CAAC+B,MAAM,EAAEP,KAAK,CAACO,MAAM;EACjD,CAAC,CAAC;AACJ,CAAC,CAAC;;AAGF,IAAIC,+BAA+B,GAAG;EACpCvI,WAAW,EAAEA,WAAW;EACxBkI,MAAM,EAAEA,MAAM;EACdlC,sBAAsB,EAAEA,sBAAsB;EAC9CI,sBAAsB,EAAEA,sBAAsB;EAC9CC,wBAAwB,EAAEA,wBAAwB;EAClDgC,QAAQ,EAAEA,QAAQ;EAClB/D,iBAAiB,EAAEA,iBAAiB;EACpCnC,kBAAkB,EAAEA,kBAAkB;EACtC+C,qBAAqB,EAAEA,qBAAqB;EAC5CS,uBAAuB,EAAEA,uBAAuB;EAChDlF,gBAAgB,EAAEA;AACpB,CAAC;AAED,SAASwH,cAAc,EAAEM,+BAA+B,IAAIC,OAAO,EAAEN,MAAM,EAAElI,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}