{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport Constants from './Coordinate/Constants.js';\nimport { L as round, K as floor } from '../../Common/Core/Math/index.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar Coordinate = Constants.Coordinate;\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCoordinate(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCoordinate');\n  publicAPI.setValue = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var array = args; // allow an array passed as a single arg.\n\n    if (array.length === 1 && Array.isArray(array[0])) {\n      array = array[0];\n    }\n    if (array.length === 2) {\n      publicAPI.setValue(array[0], array[1], 0.0);\n      return true;\n    }\n    if (array.length !== 3) {\n      throw new RangeError('Invalid number of values for array setter');\n    }\n    var changeDetected = false;\n    model.value.forEach(function (item, index) {\n      if (item !== array[index]) {\n        if (changeDetected) {\n          return;\n        }\n        changeDetected = true;\n      }\n    });\n    if (changeDetected) {\n      model.value = [].concat(array);\n      publicAPI.modified();\n    }\n    return true;\n  };\n  publicAPI.setCoordinateSystemToDisplay = function () {\n    publicAPI.setCoordinateSystem(Coordinate.DISPLAY);\n  };\n  publicAPI.setCoordinateSystemToNormalizedDisplay = function () {\n    publicAPI.setCoordinateSystem(Coordinate.NORMALIZED_DISPLAY);\n  };\n  publicAPI.setCoordinateSystemToViewport = function () {\n    publicAPI.setCoordinateSystem(Coordinate.VIEWPORT);\n  };\n  publicAPI.setCoordinateSystemToNormalizedViewport = function () {\n    publicAPI.setCoordinateSystem(Coordinate.NORMALIZED_VIEWPORT);\n  };\n  publicAPI.setCoordinateSystemToProjection = function () {\n    publicAPI.setCoordinateSystem(Coordinate.PROJECTION);\n  };\n  publicAPI.setCoordinateSystemToView = function () {\n    publicAPI.setCoordinateSystem(Coordinate.VIEW);\n  };\n  publicAPI.setCoordinateSystemToWorld = function () {\n    publicAPI.setCoordinateSystem(Coordinate.WORLD);\n  };\n  publicAPI.getCoordinateSystemAsString = function () {\n    return macro.enumToString(Coordinate, model.coordinateSystem);\n  };\n  publicAPI.getComputedWorldValue = function (ren) {\n    var val = model.computedWorldValue;\n    if (model.computing) {\n      return val;\n    }\n    model.computing = 1;\n    val[0] = model.value[0];\n    val[1] = model.value[1];\n    val[2] = model.value[2]; // Use our renderer if is defined\n\n    var renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    if (!renderer) {\n      if (model.coordinateSystem === Coordinate.WORLD) {\n        if (model.referenceCoordinate) {\n          var refValue = model.referenceCoordinate.getComputedWorldValue(renderer);\n          val[0] += refValue[0];\n          val[1] += refValue[1];\n          val[2] += refValue[2];\n        }\n        model.computing = 0;\n      } else {\n        vtkErrorMacro('Attempt to compute world coordinates from another coordinate system without a renderer');\n      }\n      return val;\n    } // convert to current coordinate system\n\n    var view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return model.computedWorldValue;\n    }\n    var dims = view.getViewportSize(renderer);\n    var aspect = dims[0] / dims[1];\n    if (model.referenceCoordinate && model.coordinateSystem !== Coordinate.WORLD) {\n      var fval = model.referenceCoordinate.getComputedDoubleDisplayValue(renderer);\n      var _refValue = [fval[0], fval[1], 0.0];\n      switch (model.coordinateSystem) {\n        case Coordinate.NORMALIZED_DISPLAY:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          break;\n        case Coordinate.VIEWPORT:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          break;\n        case Coordinate.NORMALIZED_VIEWPORT:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = view.viewportToNormalizedViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          break;\n        case Coordinate.PROJECTION:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = view.viewportToNormalizedViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = renderer.normalizedViewportToProjection(_refValue[0], _refValue[1], _refValue[2]);\n          break;\n        case Coordinate.VIEW:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = view.viewportToNormalizedViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = renderer.normalizedViewportToProjection(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = renderer.projectionToView(_refValue[0], _refValue[1], _refValue[2], aspect);\n          break;\n      }\n      val[0] += _refValue[0];\n      val[1] += _refValue[1];\n      val[2] += _refValue[2];\n    }\n    switch (model.coordinateSystem) {\n      case Coordinate.DISPLAY:\n        val = view.displayToNormalizedDisplay(val[0], val[1], val[2]);\n        val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.NORMALIZED_DISPLAY:\n        val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.VIEWPORT:\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.NORMALIZED_VIEWPORT:\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.PROJECTION:\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n      case Coordinate.VIEW:\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n    }\n    if (model.referenceCoordinate && model.coordinateSystem === Coordinate.WORLD) {\n      var _refValue2 = publicAPI.getComputedWorldValue(renderer);\n      val[0] += _refValue2[0];\n      val[1] += _refValue2[1];\n      val[2] += _refValue2[2];\n    }\n    model.computing = 0;\n    model.computedWorldValue = val.slice(0);\n    return val;\n  };\n  publicAPI.getComputedViewportValue = function (ren) {\n    var f = publicAPI.getComputedDoubleViewportValue(ren);\n    return [round(f[0]), round(f[1])];\n  };\n  publicAPI.getComputedDisplayValue = function (ren) {\n    var val = publicAPI.getComputedDoubleDisplayValue(ren);\n    return [floor(val[0]), floor(val[1])];\n  };\n  publicAPI.getComputedLocalDisplayValue = function (ren) {\n    // Use our renderer if it is defined\n    var renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    var val = publicAPI.getComputedDisplayValue(renderer);\n    if (!renderer) {\n      vtkErrorMacro('Attempt to convert to local display coordinates without a renderer');\n      return val;\n    }\n    var view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n    val = view.displayToLocalDisplay(val[0], val[1], val[2]);\n    return [round(val[0]), round(val[1])];\n  };\n  publicAPI.getComputedDoubleViewportValue = function (ren) {\n    var renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    var val = publicAPI.getComputedDoubleDisplayValue(renderer);\n    if (!renderer) {\n      return val;\n    }\n    var view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n    val = view.displayToNormalizedDisplay(val[0], val[1], val[2]);\n    val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n    return [val[0], val[1]];\n  };\n  publicAPI.getComputedDoubleDisplayValue = function (ren) {\n    if (model.computing) {\n      return model.computedDoubleDisplayValue;\n    }\n    model.computing = 1;\n    var val = model.value.slice(0);\n    var renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    if (!renderer) {\n      if (model.coordinateSystem === Coordinate.DISPLAY) {\n        model.computedDoubleDisplayValue[0] = val[0];\n        model.computedDoubleDisplayValue[1] = val[1];\n        if (model.referenceCoordinate) {\n          var refValue = model.referenceCoordinate.getComputedDoubleDisplayValue();\n          model.computedDoubleDisplayValue[0] += refValue[0];\n          model.computedDoubleDisplayValue[1] += refValue[1];\n        }\n      } else {\n        model.computedDoubleDisplayValue[0] = Number.MAX_VALUE;\n        model.computedDoubleDisplayValue[1] = Number.MAX_VALUE;\n        vtkErrorMacro('Request for coordinate transformation without required viewport');\n      }\n      return model.computedDoubleDisplayValue;\n    }\n    var view = null;\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n    var dims = view.getViewportSize(renderer);\n    var aspect = dims[0] / dims[1];\n    switch (model.coordinateSystem) {\n      case Coordinate.WORLD:\n        {\n          if (model.referenceCoordinate) {\n            var _refValue3 = model.referenceCoordinate.getComputedWorldValue(renderer);\n            val[0] += _refValue3[0];\n            val[1] += _refValue3[1];\n            val[2] += _refValue3[2];\n          }\n          val = renderer.worldToView(val[0], val[1], val[2]);\n          val = renderer.viewToProjection(val[0], val[1], val[2], aspect);\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.VIEW:\n        {\n          val = renderer.viewToProjection(val[0], val[1], val[2], aspect);\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.PROJECTION:\n        {\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.NORMALIZED_VIEWPORT:\n        {\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          if (model.referenceCoordinate) {\n            var _refValue4 = model.referenceCoordinate.getComputedDoubleViewportValue(renderer);\n            val[0] += _refValue4[0];\n            val[1] += _refValue4[1];\n          }\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.VIEWPORT:\n        {\n          if (model.referenceCoordinate) {\n            var _refValue5 = model.referenceCoordinate.getComputedDoubleViewportValue(renderer);\n            val[0] += _refValue5[0];\n            val[1] += _refValue5[1];\n          }\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n      case Coordinate.NORMALIZED_DISPLAY:\n        val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n        break;\n      case Coordinate.USERDEFINED:\n        val = model.value.slice(0);\n        break;\n    } // if we have a reference coordinate and we haven't handled it yet\n\n    if (model.referenceCoordinate && (model.coordinateSystem === Coordinate.DISPLAY || model.coordinateSystem === Coordinate.NORMALIZED_DISPLAY)) {\n      var _refValue6 = model.referenceCoordinate.getComputedDoubleDisplayValue(renderer);\n      val[0] += _refValue6[0];\n      val[1] += _refValue6[1];\n    }\n    model.computedDoubleDisplayValue[0] = val[0];\n    model.computedDoubleDisplayValue[1] = val[1];\n    model.computing = 0;\n    return model.computedDoubleDisplayValue;\n  };\n  publicAPI.getComputedValue = function (ren) {\n    var renderer = ren;\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n    switch (model.coordinateSystem) {\n      case Coordinate.WORLD:\n        return publicAPI.getComputedWorldValue(renderer);\n      case Coordinate.VIEW:\n      case Coordinate.NORMALIZED_VIEWPORT:\n      case Coordinate.VIEWPORT:\n        {\n          var val = publicAPI.getComputedViewportValue(renderer);\n          model.computedWorldValue[0] = val[0];\n          model.computedWorldValue[1] = val[1];\n          break;\n        }\n      case Coordinate.NORMALIZED_DISPLAY:\n      case Coordinate.DISPLAY:\n        {\n          var _val = model.getComputedDisplayValue(renderer);\n          model.computedWorldValue[0] = _val[0];\n          model.computedWorldValue[1] = _val[1];\n          break;\n        }\n    }\n    return model.computedWorldValue;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  coordinateSystem: Coordinate.WORLD,\n  value: [0.0, 0.0, 0.0],\n  renderer: null,\n  referenceCoordinate: null,\n  computing: 0,\n  computedWorldValue: [0.0, 0.0, 0.0],\n  computedDoubleDisplayValue: [0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model); // Build VTK API\n\n  macro.set(publicAPI, model, ['property']);\n  macro.get(publicAPI, model, ['value']);\n  macro.setGet(publicAPI, model, ['coordinateSystem', 'referenceCoordinate', 'renderer']);\n  macro.getArray(publicAPI, model, ['value'], 3); // Object methods\n\n  vtkCoordinate(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCoordinate'); // ----------------------------------------------------------------------------\n\nvar vtkCoordinate$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\nexport { vtkCoordinate$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","macro","Constants","L","round","K","floor","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Coordinate","vtkErrorMacro","vtkCoordinate","publicAPI","model","classHierarchy","setValue","deleted","_len","args","Array","_key","array","isArray","RangeError","changeDetected","value","item","index","concat","modified","setCoordinateSystemToDisplay","setCoordinateSystem","DISPLAY","setCoordinateSystemToNormalizedDisplay","NORMALIZED_DISPLAY","setCoordinateSystemToViewport","VIEWPORT","setCoordinateSystemToNormalizedViewport","NORMALIZED_VIEWPORT","setCoordinateSystemToProjection","PROJECTION","setCoordinateSystemToView","VIEW","setCoordinateSystemToWorld","WORLD","getCoordinateSystemAsString","enumToString","coordinateSystem","getComputedWorldValue","ren","val","computedWorldValue","computing","renderer","referenceCoordinate","refValue","view","getRenderWindow","getViews","dims","getViewportSize","aspect","fval","getComputedDoubleDisplayValue","_refValue","displayToNormalizedDisplay","normalizedDisplayToViewport","viewportToNormalizedViewport","normalizedViewportToProjection","projectionToView","viewToWorld","_refValue2","slice","getComputedViewportValue","f","getComputedDoubleViewportValue","getComputedDisplayValue","getComputedLocalDisplayValue","displayToLocalDisplay","computedDoubleDisplayValue","Number","MAX_VALUE","_refValue3","worldToView","viewToProjection","projectionToNormalizedViewport","normalizedViewportToViewport","viewportToNormalizedDisplay","normalizedDisplayToDisplay","_refValue4","_refValue5","USERDEFINED","_refValue6","getComputedValue","_val","DEFAULT_VALUES","extend","initialValues","undefined","assign","obj","set","get","setGet","getArray","newInstance","vtkCoordinate$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Core/Coordinate.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport Constants from './Coordinate/Constants.js';\nimport { L as round, K as floor } from '../../Common/Core/Math/index.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar Coordinate = Constants.Coordinate;\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCoordinate(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCoordinate');\n\n  publicAPI.setValue = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var array = args; // allow an array passed as a single arg.\n\n    if (array.length === 1 && Array.isArray(array[0])) {\n      array = array[0];\n    }\n\n    if (array.length === 2) {\n      publicAPI.setValue(array[0], array[1], 0.0);\n      return true;\n    }\n\n    if (array.length !== 3) {\n      throw new RangeError('Invalid number of values for array setter');\n    }\n\n    var changeDetected = false;\n    model.value.forEach(function (item, index) {\n      if (item !== array[index]) {\n        if (changeDetected) {\n          return;\n        }\n\n        changeDetected = true;\n      }\n    });\n\n    if (changeDetected) {\n      model.value = [].concat(array);\n      publicAPI.modified();\n    }\n\n    return true;\n  };\n\n  publicAPI.setCoordinateSystemToDisplay = function () {\n    publicAPI.setCoordinateSystem(Coordinate.DISPLAY);\n  };\n\n  publicAPI.setCoordinateSystemToNormalizedDisplay = function () {\n    publicAPI.setCoordinateSystem(Coordinate.NORMALIZED_DISPLAY);\n  };\n\n  publicAPI.setCoordinateSystemToViewport = function () {\n    publicAPI.setCoordinateSystem(Coordinate.VIEWPORT);\n  };\n\n  publicAPI.setCoordinateSystemToNormalizedViewport = function () {\n    publicAPI.setCoordinateSystem(Coordinate.NORMALIZED_VIEWPORT);\n  };\n\n  publicAPI.setCoordinateSystemToProjection = function () {\n    publicAPI.setCoordinateSystem(Coordinate.PROJECTION);\n  };\n\n  publicAPI.setCoordinateSystemToView = function () {\n    publicAPI.setCoordinateSystem(Coordinate.VIEW);\n  };\n\n  publicAPI.setCoordinateSystemToWorld = function () {\n    publicAPI.setCoordinateSystem(Coordinate.WORLD);\n  };\n\n  publicAPI.getCoordinateSystemAsString = function () {\n    return macro.enumToString(Coordinate, model.coordinateSystem);\n  };\n\n  publicAPI.getComputedWorldValue = function (ren) {\n    var val = model.computedWorldValue;\n\n    if (model.computing) {\n      return val;\n    }\n\n    model.computing = 1;\n    val[0] = model.value[0];\n    val[1] = model.value[1];\n    val[2] = model.value[2]; // Use our renderer if is defined\n\n    var renderer = ren;\n\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n\n    if (!renderer) {\n      if (model.coordinateSystem === Coordinate.WORLD) {\n        if (model.referenceCoordinate) {\n          var refValue = model.referenceCoordinate.getComputedWorldValue(renderer);\n          val[0] += refValue[0];\n          val[1] += refValue[1];\n          val[2] += refValue[2];\n        }\n\n        model.computing = 0;\n      } else {\n        vtkErrorMacro('Attempt to compute world coordinates from another coordinate system without a renderer');\n      }\n\n      return val;\n    } // convert to current coordinate system\n\n\n    var view = null;\n\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return model.computedWorldValue;\n    }\n\n    var dims = view.getViewportSize(renderer);\n    var aspect = dims[0] / dims[1];\n\n    if (model.referenceCoordinate && model.coordinateSystem !== Coordinate.WORLD) {\n      var fval = model.referenceCoordinate.getComputedDoubleDisplayValue(renderer);\n      var _refValue = [fval[0], fval[1], 0.0];\n\n      switch (model.coordinateSystem) {\n        case Coordinate.NORMALIZED_DISPLAY:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          break;\n\n        case Coordinate.VIEWPORT:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          break;\n\n        case Coordinate.NORMALIZED_VIEWPORT:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = view.viewportToNormalizedViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          break;\n\n        case Coordinate.PROJECTION:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = view.viewportToNormalizedViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = renderer.normalizedViewportToProjection(_refValue[0], _refValue[1], _refValue[2]);\n          break;\n\n        case Coordinate.VIEW:\n          _refValue = view.displayToNormalizedDisplay(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = view.normalizedDisplayToViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = view.viewportToNormalizedViewport(_refValue[0], _refValue[1], _refValue[2], renderer);\n          _refValue = renderer.normalizedViewportToProjection(_refValue[0], _refValue[1], _refValue[2]);\n          _refValue = renderer.projectionToView(_refValue[0], _refValue[1], _refValue[2], aspect);\n          break;\n      }\n\n      val[0] += _refValue[0];\n      val[1] += _refValue[1];\n      val[2] += _refValue[2];\n    }\n\n    switch (model.coordinateSystem) {\n      case Coordinate.DISPLAY:\n        val = view.displayToNormalizedDisplay(val[0], val[1], val[2]);\n        val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n\n      case Coordinate.NORMALIZED_DISPLAY:\n        val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n\n      case Coordinate.VIEWPORT:\n        val = view.viewportToNormalizedViewport(val[0], val[1], val[2], renderer);\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n\n      case Coordinate.NORMALIZED_VIEWPORT:\n        val = renderer.normalizedViewportToProjection(val[0], val[1], val[2]);\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n\n      case Coordinate.PROJECTION:\n        val = renderer.projectionToView(val[0], val[1], val[2], aspect);\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n\n      case Coordinate.VIEW:\n        val = renderer.viewToWorld(val[0], val[1], val[2]);\n        break;\n    }\n\n    if (model.referenceCoordinate && model.coordinateSystem === Coordinate.WORLD) {\n      var _refValue2 = publicAPI.getComputedWorldValue(renderer);\n\n      val[0] += _refValue2[0];\n      val[1] += _refValue2[1];\n      val[2] += _refValue2[2];\n    }\n\n    model.computing = 0;\n    model.computedWorldValue = val.slice(0);\n    return val;\n  };\n\n  publicAPI.getComputedViewportValue = function (ren) {\n    var f = publicAPI.getComputedDoubleViewportValue(ren);\n    return [round(f[0]), round(f[1])];\n  };\n\n  publicAPI.getComputedDisplayValue = function (ren) {\n    var val = publicAPI.getComputedDoubleDisplayValue(ren);\n    return [floor(val[0]), floor(val[1])];\n  };\n\n  publicAPI.getComputedLocalDisplayValue = function (ren) {\n    // Use our renderer if it is defined\n    var renderer = ren;\n\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n\n    var val = publicAPI.getComputedDisplayValue(renderer);\n\n    if (!renderer) {\n      vtkErrorMacro('Attempt to convert to local display coordinates without a renderer');\n      return val;\n    }\n\n    var view = null;\n\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n\n    val = view.displayToLocalDisplay(val[0], val[1], val[2]);\n    return [round(val[0]), round(val[1])];\n  };\n\n  publicAPI.getComputedDoubleViewportValue = function (ren) {\n    var renderer = ren;\n\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n\n    var val = publicAPI.getComputedDoubleDisplayValue(renderer);\n\n    if (!renderer) {\n      return val;\n    }\n\n    var view = null;\n\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n\n    val = view.displayToNormalizedDisplay(val[0], val[1], val[2]);\n    val = view.normalizedDisplayToViewport(val[0], val[1], val[2], renderer);\n    return [val[0], val[1]];\n  };\n\n  publicAPI.getComputedDoubleDisplayValue = function (ren) {\n    if (model.computing) {\n      return model.computedDoubleDisplayValue;\n    }\n\n    model.computing = 1;\n    var val = model.value.slice(0);\n    var renderer = ren;\n\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n\n    if (!renderer) {\n      if (model.coordinateSystem === Coordinate.DISPLAY) {\n        model.computedDoubleDisplayValue[0] = val[0];\n        model.computedDoubleDisplayValue[1] = val[1];\n\n        if (model.referenceCoordinate) {\n          var refValue = model.referenceCoordinate.getComputedDoubleDisplayValue();\n          model.computedDoubleDisplayValue[0] += refValue[0];\n          model.computedDoubleDisplayValue[1] += refValue[1];\n        }\n      } else {\n        model.computedDoubleDisplayValue[0] = Number.MAX_VALUE;\n        model.computedDoubleDisplayValue[1] = Number.MAX_VALUE;\n        vtkErrorMacro('Request for coordinate transformation without required viewport');\n      }\n\n      return model.computedDoubleDisplayValue;\n    }\n\n    var view = null;\n\n    if (renderer && renderer.getRenderWindow().getViews()) {\n      view = renderer.getRenderWindow().getViews()[0];\n    } else {\n      return val;\n    }\n\n    var dims = view.getViewportSize(renderer);\n    var aspect = dims[0] / dims[1];\n\n    switch (model.coordinateSystem) {\n      case Coordinate.WORLD:\n        {\n          if (model.referenceCoordinate) {\n            var _refValue3 = model.referenceCoordinate.getComputedWorldValue(renderer);\n\n            val[0] += _refValue3[0];\n            val[1] += _refValue3[1];\n            val[2] += _refValue3[2];\n          }\n\n          val = renderer.worldToView(val[0], val[1], val[2]);\n          val = renderer.viewToProjection(val[0], val[1], val[2], aspect);\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n\n      case Coordinate.VIEW:\n        {\n          val = renderer.viewToProjection(val[0], val[1], val[2], aspect);\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n\n      case Coordinate.PROJECTION:\n        {\n          val = renderer.projectionToNormalizedViewport(val[0], val[1], val[2]);\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n\n      case Coordinate.NORMALIZED_VIEWPORT:\n        {\n          val = view.normalizedViewportToViewport(val[0], val[1], val[2], renderer);\n\n          if (model.referenceCoordinate) {\n            var _refValue4 = model.referenceCoordinate.getComputedDoubleViewportValue(renderer);\n\n            val[0] += _refValue4[0];\n            val[1] += _refValue4[1];\n          }\n\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n\n      case Coordinate.VIEWPORT:\n        {\n          if (model.referenceCoordinate) {\n            var _refValue5 = model.referenceCoordinate.getComputedDoubleViewportValue(renderer);\n\n            val[0] += _refValue5[0];\n            val[1] += _refValue5[1];\n          }\n\n          val = view.viewportToNormalizedDisplay(val[0], val[1], val[2], renderer);\n          val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n          break;\n        }\n\n      case Coordinate.NORMALIZED_DISPLAY:\n        val = view.normalizedDisplayToDisplay(val[0], val[1], val[2]);\n        break;\n\n      case Coordinate.USERDEFINED:\n        val = model.value.slice(0);\n        break;\n    } // if we have a reference coordinate and we haven't handled it yet\n\n\n    if (model.referenceCoordinate && (model.coordinateSystem === Coordinate.DISPLAY || model.coordinateSystem === Coordinate.NORMALIZED_DISPLAY)) {\n      var _refValue6 = model.referenceCoordinate.getComputedDoubleDisplayValue(renderer);\n\n      val[0] += _refValue6[0];\n      val[1] += _refValue6[1];\n    }\n\n    model.computedDoubleDisplayValue[0] = val[0];\n    model.computedDoubleDisplayValue[1] = val[1];\n    model.computing = 0;\n    return model.computedDoubleDisplayValue;\n  };\n\n  publicAPI.getComputedValue = function (ren) {\n    var renderer = ren;\n\n    if (model.renderer) {\n      renderer = model.renderer;\n    }\n\n    switch (model.coordinateSystem) {\n      case Coordinate.WORLD:\n        return publicAPI.getComputedWorldValue(renderer);\n\n      case Coordinate.VIEW:\n      case Coordinate.NORMALIZED_VIEWPORT:\n      case Coordinate.VIEWPORT:\n        {\n          var val = publicAPI.getComputedViewportValue(renderer);\n          model.computedWorldValue[0] = val[0];\n          model.computedWorldValue[1] = val[1];\n          break;\n        }\n\n      case Coordinate.NORMALIZED_DISPLAY:\n      case Coordinate.DISPLAY:\n        {\n          var _val = model.getComputedDisplayValue(renderer);\n\n          model.computedWorldValue[0] = _val[0];\n          model.computedWorldValue[1] = _val[1];\n          break;\n        }\n    }\n\n    return model.computedWorldValue;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  coordinateSystem: Coordinate.WORLD,\n  value: [0.0, 0.0, 0.0],\n  renderer: null,\n  referenceCoordinate: null,\n  computing: 0,\n  computedWorldValue: [0.0, 0.0, 0.0],\n  computedDoubleDisplayValue: [0.0, 0.0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model); // Build VTK API\n\n  macro.set(publicAPI, model, ['property']);\n  macro.get(publicAPI, model, ['value']);\n  macro.setGet(publicAPI, model, ['coordinateSystem', 'referenceCoordinate', 'renderer']);\n  macro.getArray(publicAPI, model, ['value'], 3); // Object methods\n\n  vtkCoordinate(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCoordinate'); // ----------------------------------------------------------------------------\n\nvar vtkCoordinate$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants);\n\nexport { vtkCoordinate$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}