{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkCoordinate from './Coordinate.js';\nimport vtkProp from './Prop.js';\nimport vtkProperty2D from './Property2D.js';\nimport { Coordinate } from './Coordinate/Constants.js';\n\n// vtkActor2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkActor2D');\n  publicAPI.getActors2D = function () {\n    return publicAPI;\n  };\n  publicAPI.getIsOpaque = function () {\n    // make sure we have a property\n    if (!model.property) {\n      // force creation of a property\n      publicAPI.getProperty();\n    }\n    var isOpaque = model.property.getOpacity() >= 1.0; // are we using an opaque texture, if any?\n\n    isOpaque = isOpaque && (!model.texture || !model.texture.isTranslucent());\n    return isOpaque;\n  };\n  publicAPI.hasTranslucentPolygonalGeometry = function () {\n    if (model.mapper === null) {\n      return false;\n    } // make sure we have a property\n\n    if (model.property === null) {\n      // force creation of a property\n      publicAPI.setProperty(publicAPI.makeProperty());\n    } // is this actor opaque ?\n\n    return !publicAPI.getIsOpaque();\n  };\n  publicAPI.makeProperty = vtkProperty2D.newInstance;\n  publicAPI.getProperty = function () {\n    if (model.property === null) {\n      model.property = publicAPI.makeProperty();\n    }\n    return model.property;\n  }; //----------------------------------------------------------------------------\n  // Set the Prop2D's position in display coordinates.\n\n  publicAPI.setDisplayPosition = function (XPos, YPos) {\n    model.positionCoordinate.setCoordinateSystem(Coordinate.DISPLAY);\n    model.positionCoordinate.setValue(XPos, YPos, 0.0);\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.setWidth = function (w) {\n    var pos = model.position2Coordinate.getValue();\n    model.position2Coordinate.setCoordinateSystemToNormalizedViewport();\n    model.position2Coordinate.setValue(w, pos[1]);\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.setHeight = function (w) {\n    var pos = model.position2Coordinate.getValue();\n    model.position2Coordinate.setCoordinateSystemToNormalizedViewport();\n    model.position2Coordinate.setValue(pos[0], w);\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getWidth = function () {\n    return model.position2Coordinate.getValue()[0];\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getHeight = function () {\n    return model.position2Coordinate.getValue()[1];\n  };\n  publicAPI.getMTime = function () {\n    var mt = model.mtime;\n    if (model.property !== null) {\n      var time = model.property.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    mt = model.positionCoordinate.getMTime() > mt ? model.positionCoordinate.getMTime() : mt;\n    mt = model.positionCoordinate2.getMTime() > mt ? model.positionCoordinate2.getMTime() : mt; // TBD: Handle array of textures here.\n\n    return mt;\n  };\n  publicAPI.getRedrawMTime = function () {\n    var mt = model.mtime;\n    if (model.mapper !== null) {\n      var time = model.mapper.getMTime();\n      mt = time > mt ? time : mt;\n      if (model.mapper.getInput() !== null) {\n        // FIXME !!! getInputAlgorithm / getInput\n        model.mapper.getInputAlgorithm().update();\n        time = model.mapper.getInput().getMTime();\n        mt = time > mt ? time : mt;\n      }\n    }\n    return mt;\n  };\n  publicAPI.getBounds = function () {\n    // does our mapper support bounds\n    if (typeof publicAPI.getMapper().getBounds === 'function') {\n      model.useBounds = true;\n      return publicAPI.getMapper().getBounds();\n    }\n    model.useBounds = false;\n    return [];\n  }; // Description:\n  // Return the actual vtkCoordinate reference that the mapper should use\n  // to position the actor. This is used internally by the mappers and should\n  // be overridden in specialized subclasses and otherwise ignored.\n\n  publicAPI.getActualPositionCoordinate = function () {\n    return model.positionCoordinate;\n  };\n  publicAPI.getActualPositionCoordinate2 = function () {\n    return model.positionCoordinate2;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  mapper: null,\n  property: null,\n  layerNumber: 0,\n  positionCoordinate: null,\n  positionCoordinate2: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkProp.extend(publicAPI, model, initialValues);\n  model.positionCoordinate = vtkCoordinate.newInstance();\n  model.positionCoordinate.setCoordinateSystemToViewport();\n  model.positionCoordinate2 = vtkCoordinate.newInstance();\n  model.positionCoordinate2.setCoordinateSystemToNormalizedViewport();\n  model.positionCoordinate2.setValue(0.5, 0.5);\n  model.positionCoordinate2.setReferenceCoordinate(model.positionCoordinate); // Build VTK API\n\n  macro.set(publicAPI, model, ['property']);\n  macro.setGet(publicAPI, model, ['mapper']); // Object methods\n\n  vtkActor2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkActor2D'); // ----------------------------------------------------------------------------\n\nvar vtkActor2D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkActor2D$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkCoordinate","vtkProp","vtkProperty2D","Coordinate","vtkActor2D","publicAPI","model","classHierarchy","push","getActors2D","getIsOpaque","property","getProperty","isOpaque","getOpacity","texture","isTranslucent","hasTranslucentPolygonalGeometry","mapper","setProperty","makeProperty","newInstance","setDisplayPosition","XPos","YPos","positionCoordinate","setCoordinateSystem","DISPLAY","setValue","setWidth","w","pos","position2Coordinate","getValue","setCoordinateSystemToNormalizedViewport","setHeight","getWidth","getHeight","getMTime","mt","mtime","time","positionCoordinate2","getRedrawMTime","getInput","getInputAlgorithm","update","getBounds","getMapper","useBounds","getActualPositionCoordinate","getActualPositionCoordinate2","DEFAULT_VALUES","layerNumber","extend","initialValues","arguments","length","undefined","Object","assign","setCoordinateSystemToViewport","setReferenceCoordinate","set","setGet","vtkActor2D$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Core/Actor2D.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkCoordinate from './Coordinate.js';\nimport vtkProp from './Prop.js';\nimport vtkProperty2D from './Property2D.js';\nimport { Coordinate } from './Coordinate/Constants.js';\n\n// vtkActor2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkActor2D');\n\n  publicAPI.getActors2D = function () {\n    return publicAPI;\n  };\n\n  publicAPI.getIsOpaque = function () {\n    // make sure we have a property\n    if (!model.property) {\n      // force creation of a property\n      publicAPI.getProperty();\n    }\n\n    var isOpaque = model.property.getOpacity() >= 1.0; // are we using an opaque texture, if any?\n\n    isOpaque = isOpaque && (!model.texture || !model.texture.isTranslucent());\n    return isOpaque;\n  };\n\n  publicAPI.hasTranslucentPolygonalGeometry = function () {\n    if (model.mapper === null) {\n      return false;\n    } // make sure we have a property\n\n\n    if (model.property === null) {\n      // force creation of a property\n      publicAPI.setProperty(publicAPI.makeProperty());\n    } // is this actor opaque ?\n\n\n    return !publicAPI.getIsOpaque();\n  };\n\n  publicAPI.makeProperty = vtkProperty2D.newInstance;\n\n  publicAPI.getProperty = function () {\n    if (model.property === null) {\n      model.property = publicAPI.makeProperty();\n    }\n\n    return model.property;\n  }; //----------------------------------------------------------------------------\n  // Set the Prop2D's position in display coordinates.\n\n\n  publicAPI.setDisplayPosition = function (XPos, YPos) {\n    model.positionCoordinate.setCoordinateSystem(Coordinate.DISPLAY);\n    model.positionCoordinate.setValue(XPos, YPos, 0.0);\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.setWidth = function (w) {\n    var pos = model.position2Coordinate.getValue();\n    model.position2Coordinate.setCoordinateSystemToNormalizedViewport();\n    model.position2Coordinate.setValue(w, pos[1]);\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.setHeight = function (w) {\n    var pos = model.position2Coordinate.getValue();\n    model.position2Coordinate.setCoordinateSystemToNormalizedViewport();\n    model.position2Coordinate.setValue(pos[0], w);\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getWidth = function () {\n    return model.position2Coordinate.getValue()[0];\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getHeight = function () {\n    return model.position2Coordinate.getValue()[1];\n  };\n\n  publicAPI.getMTime = function () {\n    var mt = model.mtime;\n\n    if (model.property !== null) {\n      var time = model.property.getMTime();\n      mt = time > mt ? time : mt;\n    }\n\n    mt = model.positionCoordinate.getMTime() > mt ? model.positionCoordinate.getMTime() : mt;\n    mt = model.positionCoordinate2.getMTime() > mt ? model.positionCoordinate2.getMTime() : mt; // TBD: Handle array of textures here.\n\n    return mt;\n  };\n\n  publicAPI.getRedrawMTime = function () {\n    var mt = model.mtime;\n\n    if (model.mapper !== null) {\n      var time = model.mapper.getMTime();\n      mt = time > mt ? time : mt;\n\n      if (model.mapper.getInput() !== null) {\n        // FIXME !!! getInputAlgorithm / getInput\n        model.mapper.getInputAlgorithm().update();\n        time = model.mapper.getInput().getMTime();\n        mt = time > mt ? time : mt;\n      }\n    }\n\n    return mt;\n  };\n\n  publicAPI.getBounds = function () {\n    // does our mapper support bounds\n    if (typeof publicAPI.getMapper().getBounds === 'function') {\n      model.useBounds = true;\n      return publicAPI.getMapper().getBounds();\n    }\n\n    model.useBounds = false;\n    return [];\n  }; // Description:\n  // Return the actual vtkCoordinate reference that the mapper should use\n  // to position the actor. This is used internally by the mappers and should\n  // be overridden in specialized subclasses and otherwise ignored.\n\n\n  publicAPI.getActualPositionCoordinate = function () {\n    return model.positionCoordinate;\n  };\n\n  publicAPI.getActualPositionCoordinate2 = function () {\n    return model.positionCoordinate2;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  mapper: null,\n  property: null,\n  layerNumber: 0,\n  positionCoordinate: null,\n  positionCoordinate2: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkProp.extend(publicAPI, model, initialValues);\n  model.positionCoordinate = vtkCoordinate.newInstance();\n  model.positionCoordinate.setCoordinateSystemToViewport();\n  model.positionCoordinate2 = vtkCoordinate.newInstance();\n  model.positionCoordinate2.setCoordinateSystemToNormalizedViewport();\n  model.positionCoordinate2.setValue(0.5, 0.5);\n  model.positionCoordinate2.setReferenceCoordinate(model.positionCoordinate); // Build VTK API\n\n  macro.set(publicAPI, model, ['property']);\n  macro.setGet(publicAPI, model, ['mapper']); // Object methods\n\n  vtkActor2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkActor2D'); // ----------------------------------------------------------------------------\n\nvar vtkActor2D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkActor2D$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}