{"ast":null,"code":"import BinaryHelper from '../Core/BinaryHelper.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\nvar PLYFormats = {\n  ASCII: 'ascii',\n  BINARY_BIG_ENDIAN: 'binary_big_endian',\n  BINARY_LITTLE_ENDIAN: 'binary_little_endian'\n};\nvar mapping = {\n  diffuse_red: 'red',\n  diffuse_green: 'green',\n  diffuse_blue: 'blue'\n};\nvar patterns = {\n  patternHeader: /ply([\\s\\S]*)end_header\\r?\\n/,\n  patternBody: /end_header\\s([\\s\\S]*)$/\n};\nfunction parseHeader(data) {\n  var headerText = '';\n  var headerLength = 0;\n  var result = patterns.patternHeader.exec(data);\n  if (result !== null) {\n    headerText = result[1];\n    headerLength = result[0].length;\n  }\n  var header = {\n    comments: [],\n    elements: [],\n    headerLength: headerLength\n  };\n  var lines = headerText.split('\\n');\n  var elem;\n  var lineType;\n  var lineValues;\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    line = line.trim();\n    if (line !== '') {\n      var property = void 0;\n      lineValues = line.split(/\\s+/);\n      lineType = lineValues.shift();\n      line = lineValues.join(' ');\n      switch (lineType) {\n        case 'format':\n          header.format = lineValues[0];\n          header.version = lineValues[1];\n          break;\n        case 'comment':\n          header.comments.push(line);\n          break;\n        case 'element':\n          if (elem !== undefined) {\n            header.elements.push(elem);\n          }\n          elem = {};\n          elem.name = lineValues[0];\n          elem.count = parseInt(lineValues[1], 10);\n          elem.properties = [];\n          break;\n        case 'property':\n          property = {\n            type: lineValues[0]\n          };\n          if (property.type === 'list') {\n            property.name = lineValues[3];\n            property.countType = lineValues[1];\n            property.itemType = lineValues[2];\n          } else {\n            property.name = lineValues[1];\n          }\n          if (property.name in mapping) {\n            property.name = mapping[property.name];\n          }\n          elem.properties.push(property);\n          break;\n        case 'obj_info':\n          header.objInfo = line;\n          break;\n        default:\n          console.warn('unhandled', lineType, lineValues);\n          break;\n      }\n    }\n  }\n  if (elem !== undefined) {\n    header.elements.push(elem);\n  }\n  return header;\n}\nfunction postProcess(buffer, elements) {\n  var vertElement = elements.find(function (element) {\n    return element.name === 'vertex';\n  });\n  var faceElement = elements.find(function (element) {\n    return element.name === 'face';\n  });\n  var nbVerts = 0;\n  var nbFaces = 0;\n  if (vertElement) {\n    nbVerts = vertElement.count;\n  }\n  if (faceElement) {\n    nbFaces = faceElement.count;\n  }\n  var pointValues = new Float32Array(nbVerts * 3);\n  var colorArray = new Uint8Array(nbVerts * 3);\n  var tcoordsArray = new Float32Array(nbVerts * 2);\n  var normalsArray = new Float32Array(nbVerts * 3);\n  var hasColor = buffer.colors.length > 0;\n  var hasVertTCoords = buffer.uvs.length > 0;\n  var hasNorms = buffer.normals.length > 0;\n  var hasFaceTCoords = buffer.faceVertexUvs.length > 0;\n  for (var vertIdx = 0; vertIdx < nbVerts; vertIdx++) {\n    var a = vertIdx * 3 + 0;\n    var b = vertIdx * 3 + 1;\n    var c = vertIdx * 3 + 2;\n    pointValues[a] = buffer.vertices[a];\n    pointValues[b] = buffer.vertices[b];\n    pointValues[c] = buffer.vertices[c];\n    if (hasColor) {\n      colorArray[a] = buffer.colors[a];\n      colorArray[b] = buffer.colors[b];\n      colorArray[c] = buffer.colors[c];\n    }\n    if (hasVertTCoords) {\n      a = vertIdx * 2 + 0;\n      b = vertIdx * 2 + 1;\n      tcoordsArray[a] = buffer.uvs[a];\n      tcoordsArray[b] = buffer.uvs[b];\n    }\n    if (hasNorms) {\n      normalsArray[a] = buffer.normals[a];\n      normalsArray[b] = buffer.normals[b];\n      normalsArray[c] = buffer.normals[c];\n    }\n  }\n  if (!hasVertTCoords && hasFaceTCoords) {\n    // don't use array.shift, because buffer.indices will be used later\n    var idxVerts = 0;\n    var idxCoord = 0;\n    for (var faceIdx = 0; faceIdx < nbFaces; ++faceIdx) {\n      var nbFaceVerts = buffer.indices[idxVerts++];\n      var texcoords = buffer.faceVertexUvs[idxCoord++];\n      if (texcoords && nbFaceVerts * 2 === texcoords.length) {\n        // grab the vertex index\n        for (var _vertIdx = 0; _vertIdx < nbFaceVerts; ++_vertIdx) {\n          var vert = buffer.indices[idxVerts++]; // new texture stored at the current face\n\n          tcoordsArray[vert * 2 + 0] = texcoords[_vertIdx * 2 + 0];\n          tcoordsArray[vert * 2 + 1] = texcoords[_vertIdx * 2 + 1];\n        }\n      } else {\n        idxVerts += nbFaceVerts;\n      }\n    }\n  }\n  var polydata = vtkPolyData.newInstance();\n  polydata.getPoints().setData(pointValues, 3);\n  if (hasColor) {\n    polydata.getPointData().setScalars(vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: colorArray,\n      name: 'Scalars'\n    }));\n  }\n  if (hasVertTCoords || hasFaceTCoords) {\n    var da = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordsArray,\n      name: 'TextureCoordinates'\n    });\n    var cpd = polydata.getPointData();\n    cpd.addArray(da);\n    cpd.setActiveTCoords(da.getName());\n  }\n  if (hasNorms) {\n    polydata.getPointData().setNormals(vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      name: 'Normals',\n      values: normalsArray\n    }));\n  }\n  polydata.getPolys().setData(Uint32Array.from(buffer.indices));\n  return polydata;\n}\nfunction parseNumber(n, type) {\n  var r;\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'short':\n    case 'ushort':\n    case 'int':\n    case 'uint':\n    case 'int8':\n    case 'uint8':\n    case 'int16':\n    case 'uint16':\n    case 'int32':\n    case 'uint32':\n      r = parseInt(n, 10);\n      break;\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      r = parseFloat(n);\n      break;\n    default:\n      console.log('Unsupported type');\n      break;\n  }\n  return r;\n}\nfunction parseElement(properties, line) {\n  var values = line.split(/\\s+/);\n  var element = {};\n  for (var i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      var list = [];\n      var n = parseNumber(values.shift(), properties[i].countType);\n      for (var j = 0; j < n; j++) {\n        list.push(parseNumber(values.shift(), properties[i].itemType));\n      }\n      element[properties[i].name] = list;\n    } else {\n      element[properties[i].name] = parseNumber(values.shift(), properties[i].type);\n    }\n  }\n  return element;\n}\nfunction handleElement(buffer, name, element) {\n  if (name === 'vertex') {\n    buffer.vertices.push(element.x, element.y, element.z); // Normals\n\n    if ('nx' in element && 'ny' in element && 'nz' in element) {\n      buffer.normals.push(element.nx, element.ny, element.nz);\n    } // Uvs\n\n    if ('s' in element && 't' in element) {\n      buffer.uvs.push(element.s, element.t);\n    } else if ('u' in element && 'v' in element) {\n      buffer.uvs.push(element.u, element.v);\n    } else if ('texture_u' in element && 'texture_v' in element) {\n      buffer.uvs.push(element.texture_u, element.texture_v);\n    } // Colors\n\n    if ('red' in element && 'green' in element && 'blue' in element) {\n      buffer.colors.push(element.red, element.green, element.blue);\n    }\n  } else if (name === 'face') {\n    var vertexIndices = element.vertex_indices || element.vertex_index;\n    var texcoord = element.texcoord;\n    if (vertexIndices && vertexIndices.length > 0) {\n      buffer.indices.push(vertexIndices.length);\n      vertexIndices.forEach(function (val, idx) {\n        buffer.indices.push(val);\n      });\n    }\n    buffer.faceVertexUvs.push(texcoord);\n  }\n}\nfunction binaryRead(dataview, at, type, littleEndian) {\n  var r;\n  switch (type) {\n    case 'int8':\n    case 'char':\n      r = [dataview.getInt8(at), 1];\n      break;\n    case 'uint8':\n    case 'uchar':\n      r = [dataview.getUint8(at), 1];\n      break;\n    case 'int16':\n    case 'short':\n      r = [dataview.getInt16(at, littleEndian), 2];\n      break;\n    case 'uint16':\n    case 'ushort':\n      r = [dataview.getUint16(at, littleEndian), 2];\n      break;\n    case 'int32':\n    case 'int':\n      r = [dataview.getInt32(at, littleEndian), 4];\n      break;\n    case 'uint32':\n    case 'uint':\n      r = [dataview.getUint32(at, littleEndian), 4];\n      break;\n    case 'float32':\n    case 'float':\n      r = [dataview.getFloat32(at, littleEndian), 4];\n      break;\n    case 'float64':\n    case 'double':\n      r = [dataview.getFloat64(at, littleEndian), 8];\n      break;\n    default:\n      console.log('Unsupported type');\n      break;\n  }\n  return r;\n}\nfunction binaryReadElement(dataview, at, properties, littleEndian) {\n  var element = {};\n  var result;\n  var read = 0;\n  for (var i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      var list = [];\n      result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);\n      var n = result[0];\n      read += result[1];\n      for (var j = 0; j < n; j++) {\n        result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);\n        list.push(result[0]);\n        read += result[1];\n      }\n      element[properties[i].name] = list;\n    } else {\n      result = binaryRead(dataview, at + read, properties[i].type, littleEndian);\n      element[properties[i].name] = result[0];\n      read += result[1];\n    }\n  }\n  return [element, read];\n} // ----------------------------------------------------------------------------\n// vtkPLYReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPLYReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPLYReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n  function fetchData(url) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var compression = model.compression,\n      progressCallback = model.progressCallback;\n    if (option.binary) {\n      return model.dataAccessHelper.fetchBinary(url, {\n        compression: compression,\n        progressCallback: progressCallback\n      });\n    }\n    return model.dataAccessHelper.fetchText(publicAPI, url, {\n      compression: compression,\n      progressCallback: progressCallback\n    });\n  } // Set DataSet url\n\n  publicAPI.setUrl = function (url) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      binary: true\n    };\n    model.url = url; // Remove the file in the URL\n\n    var path = url.split('/');\n    path.pop();\n    model.baseURL = path.join('/');\n    model.compression = option.compression; // Fetch metadata\n\n    return publicAPI.loadData({\n      progressCallback: option.progressCallback,\n      binary: !!option.binary\n    });\n  }; // Fetch the actual data arrays\n\n  publicAPI.loadData = function () {\n    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var promise = fetchData(model.url, option);\n    promise.then(publicAPI.parse);\n    return promise;\n  };\n  publicAPI.parse = function (content) {\n    if (typeof content === 'string') {\n      publicAPI.parseAsText(content);\n    } else {\n      publicAPI.parseAsArrayBuffer(content);\n    }\n  };\n  publicAPI.parseAsArrayBuffer = function (content) {\n    if (!content) {\n      return;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    } // Header\n\n    var text = BinaryHelper.arrayBufferToString(content);\n    var header = parseHeader(text); // ascii/binary detection\n\n    var isBinary = header.format !== PLYFormats.ASCII; // Check if ascii format\n\n    if (!isBinary) {\n      publicAPI.parseAsText(content);\n      return;\n    }\n    model.parseData = content; // Binary parsing\n\n    var buffer = {\n      indices: [],\n      vertices: [],\n      normals: [],\n      uvs: [],\n      faceVertexUvs: [],\n      colors: []\n    };\n    var littleEndian = header.format === PLYFormats.BINARY_LITTLE_ENDIAN;\n    var arraybuffer = content instanceof ArrayBuffer ? content : content.buffer;\n    var body = new DataView(arraybuffer, header.headerLength);\n    var result;\n    var loc = 0;\n    for (var elem = 0; elem < header.elements.length; elem++) {\n      for (var idx = 0; idx < header.elements[elem].count; idx++) {\n        result = binaryReadElement(body, loc, header.elements[elem].properties, littleEndian);\n        loc += result[1];\n        var element = result[0];\n        handleElement(buffer, header.elements[elem].name, element);\n      }\n    }\n    var polydata = postProcess(buffer, header.elements); // Add new output\n\n    model.output[0] = polydata;\n  };\n  publicAPI.parseAsText = function (content) {\n    if (!content) {\n      return;\n    }\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n    model.parseData = content; // Header\n\n    var text = BinaryHelper.arrayBufferToString(content);\n    var header = parseHeader(text); // ascii/binary detection\n\n    var isBinary = header.format !== PLYFormats.ASCII; // Check if ascii format\n\n    if (isBinary) {\n      publicAPI.parseAsArrayBuffer(content);\n      return;\n    } // Text parsing\n\n    var buffer = {\n      indices: [],\n      vertices: [],\n      normals: [],\n      uvs: [],\n      faceVertexUvs: [],\n      colors: []\n    };\n    var result = patterns.patternBody.exec(text);\n    var body = '';\n    if (result !== null) {\n      body = result[1];\n    }\n    var lines = body.split('\\n');\n    var elem = 0;\n    var idx = 0;\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n      if (line !== '') {\n        if (idx >= header.elements[elem].count) {\n          elem++;\n          idx = 0;\n        }\n        var element = parseElement(header.elements[elem].properties, line);\n        handleElement(buffer, header.elements[elem].name, element);\n        idx++;\n      }\n    }\n    var polydata = postProcess(buffer, header.elements); // Add new output\n\n    model.output[0] = polydata;\n  };\n  publicAPI.requestData = function (inData, outData) {\n    publicAPI.parse(model.parseData);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {// baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1); // vtkPLYReader methods\n\n  vtkPLYReader(publicAPI, model); // To support destructuring\n\n  if (!model.compression) {\n    model.compression = null;\n  }\n  if (!model.progressCallback) {\n    model.progressCallback = null;\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPLYReader'); // ----------------------------------------------------------------------------\n\nvar vtkPLYReader$1 = {\n  extend: extend,\n  newInstance: newInstance\n};\nexport { vtkPLYReader$1 as default, extend, newInstance };","map":{"version":3,"names":["BinaryHelper","DataAccessHelper","macro","vtkDataArray","vtkPolyData","PLYFormats","ASCII","BINARY_BIG_ENDIAN","BINARY_LITTLE_ENDIAN","mapping","diffuse_red","diffuse_green","diffuse_blue","patterns","patternHeader","patternBody","parseHeader","data","headerText","headerLength","result","exec","length","header","comments","elements","lines","split","elem","lineType","lineValues","i","line","trim","property","shift","join","format","version","push","undefined","name","count","parseInt","properties","type","countType","itemType","objInfo","console","warn","postProcess","buffer","vertElement","find","element","faceElement","nbVerts","nbFaces","pointValues","Float32Array","colorArray","Uint8Array","tcoordsArray","normalsArray","hasColor","colors","hasVertTCoords","uvs","hasNorms","normals","hasFaceTCoords","faceVertexUvs","vertIdx","a","b","c","vertices","idxVerts","idxCoord","faceIdx","nbFaceVerts","indices","texcoords","_vertIdx","vert","polydata","newInstance","getPoints","setData","getPointData","setScalars","numberOfComponents","values","da","cpd","addArray","setActiveTCoords","getName","setNormals","getPolys","Uint32Array","from","parseNumber","n","r","parseFloat","log","parseElement","list","j","handleElement","x","y","z","nx","ny","nz","s","t","u","v","texture_u","texture_v","red","green","blue","vertexIndices","vertex_indices","vertex_index","texcoord","forEach","val","idx","binaryRead","dataview","at","littleEndian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","vtkPLYReader","publicAPI","model","classHierarchy","dataAccessHelper","get","fetchData","url","option","arguments","compression","progressCallback","binary","fetchBinary","fetchText","setUrl","path","pop","baseURL","loadData","promise","then","parse","content","parseAsText","parseAsArrayBuffer","parseData","modified","text","arrayBufferToString","isBinary","arraybuffer","ArrayBuffer","body","DataView","loc","output","requestData","inData","outData","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","setGet","algo","vtkPLYReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Geometry/PLYReader.js"],"sourcesContent":["import BinaryHelper from '../Core/BinaryHelper.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n\nvar PLYFormats = {\n  ASCII: 'ascii',\n  BINARY_BIG_ENDIAN: 'binary_big_endian',\n  BINARY_LITTLE_ENDIAN: 'binary_little_endian'\n};\nvar mapping = {\n  diffuse_red: 'red',\n  diffuse_green: 'green',\n  diffuse_blue: 'blue'\n};\nvar patterns = {\n  patternHeader: /ply([\\s\\S]*)end_header\\r?\\n/,\n  patternBody: /end_header\\s([\\s\\S]*)$/\n};\n\nfunction parseHeader(data) {\n  var headerText = '';\n  var headerLength = 0;\n  var result = patterns.patternHeader.exec(data);\n\n  if (result !== null) {\n    headerText = result[1];\n    headerLength = result[0].length;\n  }\n\n  var header = {\n    comments: [],\n    elements: [],\n    headerLength: headerLength\n  };\n  var lines = headerText.split('\\n');\n  var elem;\n  var lineType;\n  var lineValues;\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    line = line.trim();\n\n    if (line !== '') {\n      var property = void 0;\n      lineValues = line.split(/\\s+/);\n      lineType = lineValues.shift();\n      line = lineValues.join(' ');\n\n      switch (lineType) {\n        case 'format':\n          header.format = lineValues[0];\n          header.version = lineValues[1];\n          break;\n\n        case 'comment':\n          header.comments.push(line);\n          break;\n\n        case 'element':\n          if (elem !== undefined) {\n            header.elements.push(elem);\n          }\n\n          elem = {};\n          elem.name = lineValues[0];\n          elem.count = parseInt(lineValues[1], 10);\n          elem.properties = [];\n          break;\n\n        case 'property':\n          property = {\n            type: lineValues[0]\n          };\n\n          if (property.type === 'list') {\n            property.name = lineValues[3];\n            property.countType = lineValues[1];\n            property.itemType = lineValues[2];\n          } else {\n            property.name = lineValues[1];\n          }\n\n          if (property.name in mapping) {\n            property.name = mapping[property.name];\n          }\n\n          elem.properties.push(property);\n          break;\n\n        case 'obj_info':\n          header.objInfo = line;\n          break;\n\n        default:\n          console.warn('unhandled', lineType, lineValues);\n          break;\n      }\n    }\n  }\n\n  if (elem !== undefined) {\n    header.elements.push(elem);\n  }\n\n  return header;\n}\n\nfunction postProcess(buffer, elements) {\n  var vertElement = elements.find(function (element) {\n    return element.name === 'vertex';\n  });\n  var faceElement = elements.find(function (element) {\n    return element.name === 'face';\n  });\n  var nbVerts = 0;\n  var nbFaces = 0;\n\n  if (vertElement) {\n    nbVerts = vertElement.count;\n  }\n\n  if (faceElement) {\n    nbFaces = faceElement.count;\n  }\n\n  var pointValues = new Float32Array(nbVerts * 3);\n  var colorArray = new Uint8Array(nbVerts * 3);\n  var tcoordsArray = new Float32Array(nbVerts * 2);\n  var normalsArray = new Float32Array(nbVerts * 3);\n  var hasColor = buffer.colors.length > 0;\n  var hasVertTCoords = buffer.uvs.length > 0;\n  var hasNorms = buffer.normals.length > 0;\n  var hasFaceTCoords = buffer.faceVertexUvs.length > 0;\n\n  for (var vertIdx = 0; vertIdx < nbVerts; vertIdx++) {\n    var a = vertIdx * 3 + 0;\n    var b = vertIdx * 3 + 1;\n    var c = vertIdx * 3 + 2;\n    pointValues[a] = buffer.vertices[a];\n    pointValues[b] = buffer.vertices[b];\n    pointValues[c] = buffer.vertices[c];\n\n    if (hasColor) {\n      colorArray[a] = buffer.colors[a];\n      colorArray[b] = buffer.colors[b];\n      colorArray[c] = buffer.colors[c];\n    }\n\n    if (hasVertTCoords) {\n      a = vertIdx * 2 + 0;\n      b = vertIdx * 2 + 1;\n      tcoordsArray[a] = buffer.uvs[a];\n      tcoordsArray[b] = buffer.uvs[b];\n    }\n\n    if (hasNorms) {\n      normalsArray[a] = buffer.normals[a];\n      normalsArray[b] = buffer.normals[b];\n      normalsArray[c] = buffer.normals[c];\n    }\n  }\n\n  if (!hasVertTCoords && hasFaceTCoords) {\n    // don't use array.shift, because buffer.indices will be used later\n    var idxVerts = 0;\n    var idxCoord = 0;\n\n    for (var faceIdx = 0; faceIdx < nbFaces; ++faceIdx) {\n      var nbFaceVerts = buffer.indices[idxVerts++];\n      var texcoords = buffer.faceVertexUvs[idxCoord++];\n\n      if (texcoords && nbFaceVerts * 2 === texcoords.length) {\n        // grab the vertex index\n        for (var _vertIdx = 0; _vertIdx < nbFaceVerts; ++_vertIdx) {\n          var vert = buffer.indices[idxVerts++]; // new texture stored at the current face\n\n          tcoordsArray[vert * 2 + 0] = texcoords[_vertIdx * 2 + 0];\n          tcoordsArray[vert * 2 + 1] = texcoords[_vertIdx * 2 + 1];\n        }\n      } else {\n        idxVerts += nbFaceVerts;\n      }\n    }\n  }\n\n  var polydata = vtkPolyData.newInstance();\n  polydata.getPoints().setData(pointValues, 3);\n\n  if (hasColor) {\n    polydata.getPointData().setScalars(vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: colorArray,\n      name: 'Scalars'\n    }));\n  }\n\n  if (hasVertTCoords || hasFaceTCoords) {\n    var da = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordsArray,\n      name: 'TextureCoordinates'\n    });\n    var cpd = polydata.getPointData();\n    cpd.addArray(da);\n    cpd.setActiveTCoords(da.getName());\n  }\n\n  if (hasNorms) {\n    polydata.getPointData().setNormals(vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      name: 'Normals',\n      values: normalsArray\n    }));\n  }\n\n  polydata.getPolys().setData(Uint32Array.from(buffer.indices));\n  return polydata;\n}\n\nfunction parseNumber(n, type) {\n  var r;\n\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'short':\n    case 'ushort':\n    case 'int':\n    case 'uint':\n    case 'int8':\n    case 'uint8':\n    case 'int16':\n    case 'uint16':\n    case 'int32':\n    case 'uint32':\n      r = parseInt(n, 10);\n      break;\n\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      r = parseFloat(n);\n      break;\n\n    default:\n      console.log('Unsupported type');\n      break;\n  }\n\n  return r;\n}\n\nfunction parseElement(properties, line) {\n  var values = line.split(/\\s+/);\n  var element = {};\n\n  for (var i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      var list = [];\n      var n = parseNumber(values.shift(), properties[i].countType);\n\n      for (var j = 0; j < n; j++) {\n        list.push(parseNumber(values.shift(), properties[i].itemType));\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      element[properties[i].name] = parseNumber(values.shift(), properties[i].type);\n    }\n  }\n\n  return element;\n}\n\nfunction handleElement(buffer, name, element) {\n  if (name === 'vertex') {\n    buffer.vertices.push(element.x, element.y, element.z); // Normals\n\n    if ('nx' in element && 'ny' in element && 'nz' in element) {\n      buffer.normals.push(element.nx, element.ny, element.nz);\n    } // Uvs\n\n\n    if ('s' in element && 't' in element) {\n      buffer.uvs.push(element.s, element.t);\n    } else if ('u' in element && 'v' in element) {\n      buffer.uvs.push(element.u, element.v);\n    } else if ('texture_u' in element && 'texture_v' in element) {\n      buffer.uvs.push(element.texture_u, element.texture_v);\n    } // Colors\n\n\n    if ('red' in element && 'green' in element && 'blue' in element) {\n      buffer.colors.push(element.red, element.green, element.blue);\n    }\n  } else if (name === 'face') {\n    var vertexIndices = element.vertex_indices || element.vertex_index;\n    var texcoord = element.texcoord;\n\n    if (vertexIndices && vertexIndices.length > 0) {\n      buffer.indices.push(vertexIndices.length);\n      vertexIndices.forEach(function (val, idx) {\n        buffer.indices.push(val);\n      });\n    }\n\n    buffer.faceVertexUvs.push(texcoord);\n  }\n}\n\nfunction binaryRead(dataview, at, type, littleEndian) {\n  var r;\n\n  switch (type) {\n    case 'int8':\n    case 'char':\n      r = [dataview.getInt8(at), 1];\n      break;\n\n    case 'uint8':\n    case 'uchar':\n      r = [dataview.getUint8(at), 1];\n      break;\n\n    case 'int16':\n    case 'short':\n      r = [dataview.getInt16(at, littleEndian), 2];\n      break;\n\n    case 'uint16':\n    case 'ushort':\n      r = [dataview.getUint16(at, littleEndian), 2];\n      break;\n\n    case 'int32':\n    case 'int':\n      r = [dataview.getInt32(at, littleEndian), 4];\n      break;\n\n    case 'uint32':\n    case 'uint':\n      r = [dataview.getUint32(at, littleEndian), 4];\n      break;\n\n    case 'float32':\n    case 'float':\n      r = [dataview.getFloat32(at, littleEndian), 4];\n      break;\n\n    case 'float64':\n    case 'double':\n      r = [dataview.getFloat64(at, littleEndian), 8];\n      break;\n\n    default:\n      console.log('Unsupported type');\n      break;\n  }\n\n  return r;\n}\n\nfunction binaryReadElement(dataview, at, properties, littleEndian) {\n  var element = {};\n  var result;\n  var read = 0;\n\n  for (var i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      var list = [];\n      result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);\n      var n = result[0];\n      read += result[1];\n\n      for (var j = 0; j < n; j++) {\n        result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);\n        list.push(result[0]);\n        read += result[1];\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      result = binaryRead(dataview, at + read, properties[i].type, littleEndian);\n      element[properties[i].name] = result[0];\n      read += result[1];\n    }\n  }\n\n  return [element, read];\n} // ----------------------------------------------------------------------------\n// vtkPLYReader methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkPLYReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPLYReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n\n  function fetchData(url) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var compression = model.compression,\n        progressCallback = model.progressCallback;\n\n    if (option.binary) {\n      return model.dataAccessHelper.fetchBinary(url, {\n        compression: compression,\n        progressCallback: progressCallback\n      });\n    }\n\n    return model.dataAccessHelper.fetchText(publicAPI, url, {\n      compression: compression,\n      progressCallback: progressCallback\n    });\n  } // Set DataSet url\n\n\n  publicAPI.setUrl = function (url) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      binary: true\n    };\n    model.url = url; // Remove the file in the URL\n\n    var path = url.split('/');\n    path.pop();\n    model.baseURL = path.join('/');\n    model.compression = option.compression; // Fetch metadata\n\n    return publicAPI.loadData({\n      progressCallback: option.progressCallback,\n      binary: !!option.binary\n    });\n  }; // Fetch the actual data arrays\n\n\n  publicAPI.loadData = function () {\n    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var promise = fetchData(model.url, option);\n    promise.then(publicAPI.parse);\n    return promise;\n  };\n\n  publicAPI.parse = function (content) {\n    if (typeof content === 'string') {\n      publicAPI.parseAsText(content);\n    } else {\n      publicAPI.parseAsArrayBuffer(content);\n    }\n  };\n\n  publicAPI.parseAsArrayBuffer = function (content) {\n    if (!content) {\n      return;\n    }\n\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    } // Header\n\n\n    var text = BinaryHelper.arrayBufferToString(content);\n    var header = parseHeader(text); // ascii/binary detection\n\n    var isBinary = header.format !== PLYFormats.ASCII; // Check if ascii format\n\n    if (!isBinary) {\n      publicAPI.parseAsText(content);\n      return;\n    }\n\n    model.parseData = content; // Binary parsing\n\n    var buffer = {\n      indices: [],\n      vertices: [],\n      normals: [],\n      uvs: [],\n      faceVertexUvs: [],\n      colors: []\n    };\n    var littleEndian = header.format === PLYFormats.BINARY_LITTLE_ENDIAN;\n    var arraybuffer = content instanceof ArrayBuffer ? content : content.buffer;\n    var body = new DataView(arraybuffer, header.headerLength);\n    var result;\n    var loc = 0;\n\n    for (var elem = 0; elem < header.elements.length; elem++) {\n      for (var idx = 0; idx < header.elements[elem].count; idx++) {\n        result = binaryReadElement(body, loc, header.elements[elem].properties, littleEndian);\n        loc += result[1];\n        var element = result[0];\n        handleElement(buffer, header.elements[elem].name, element);\n      }\n    }\n\n    var polydata = postProcess(buffer, header.elements); // Add new output\n\n    model.output[0] = polydata;\n  };\n\n  publicAPI.parseAsText = function (content) {\n    if (!content) {\n      return;\n    }\n\n    if (content !== model.parseData) {\n      publicAPI.modified();\n    } else {\n      return;\n    }\n\n    model.parseData = content; // Header\n\n    var text = BinaryHelper.arrayBufferToString(content);\n    var header = parseHeader(text); // ascii/binary detection\n\n    var isBinary = header.format !== PLYFormats.ASCII; // Check if ascii format\n\n    if (isBinary) {\n      publicAPI.parseAsArrayBuffer(content);\n      return;\n    } // Text parsing\n\n\n    var buffer = {\n      indices: [],\n      vertices: [],\n      normals: [],\n      uvs: [],\n      faceVertexUvs: [],\n      colors: []\n    };\n    var result = patterns.patternBody.exec(text);\n    var body = '';\n\n    if (result !== null) {\n      body = result[1];\n    }\n\n    var lines = body.split('\\n');\n    var elem = 0;\n    var idx = 0;\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line !== '') {\n        if (idx >= header.elements[elem].count) {\n          elem++;\n          idx = 0;\n        }\n\n        var element = parseElement(header.elements[elem].properties, line);\n        handleElement(buffer, header.elements[elem].name, element);\n        idx++;\n      }\n    }\n\n    var polydata = postProcess(buffer, header.elements); // Add new output\n\n    model.output[0] = polydata;\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    publicAPI.parse(model.parseData);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {// baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1); // vtkPLYReader methods\n\n  vtkPLYReader(publicAPI, model); // To support destructuring\n\n  if (!model.compression) {\n    model.compression = null;\n  }\n\n  if (!model.progressCallback) {\n    model.progressCallback = null;\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPLYReader'); // ----------------------------------------------------------------------------\n\nvar vtkPLYReader$1 = {\n  extend: extend,\n  newInstance: newInstance\n};\n\nexport { vtkPLYReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}