{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { mat3, mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkBufferObject from './BufferObject.js';\nimport vtkHardwareSelector from './HardwareSelector.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkOpenGLPolyDataMapper from './PolyDataMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar Representation = vtkProperty.Representation;\nvar ObjectType = vtkBufferObject.ObjectType;\nvar PassTypes = vtkHardwareSelector.PassTypes;\nvar StartEvent = {\n  type: 'StartEvent'\n};\nvar EndEvent = {\n  type: 'EndEvent'\n}; // ----------------------------------------------------------------------------\n// vtkOpenGLSphereMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLGlyph3DMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLGlyph3DMapper'); // Capture 'parentClass' api for internal use\n\n  var superClass = _objectSpread({}, publicAPI);\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData(1);\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    } // if there are no points then we are done\n\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    } // apply faceCulling\n\n    var gl = model.context;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.hardwareSupport = true;\n      model.extension = null;\n    } else if (!model.extension) {\n      model.extension = model.context.getExtension('ANGLE_instanced_arrays');\n      model.hardwareSupport = !!model.extension;\n    } // to test without extension support uncomment the next two lines\n    // model.extension = null;\n    // model.hardwareSupport = !!model.extension;\n\n    var backfaceCulling = actor.getProperty().getBackfaceCulling();\n    var frontfaceCulling = actor.getProperty().getFrontfaceCulling();\n    if (!backfaceCulling && !frontfaceCulling) {\n      model._openGLRenderWindow.disableCullFace();\n    } else if (frontfaceCulling) {\n      model._openGLRenderWindow.enableCullFace();\n      gl.cullFace(gl.FRONT);\n    } else {\n      model._openGLRenderWindow.enableCullFace();\n      gl.cullFace(gl.BACK);\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.multiply4x4WithOffset = function (out, a, b, off) {\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    var a30 = a[12];\n    var a31 = a[13];\n    var a32 = a[14];\n    var a33 = a[15]; // Cache only the current line of the second matrix\n\n    var b0 = b[off];\n    var b1 = b[off + 1];\n    var b2 = b[off + 2];\n    var b3 = b[off + 3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 4];\n    b1 = b[off + 5];\n    b2 = b[off + 6];\n    b3 = b[off + 7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 8];\n    b1 = b[off + 9];\n    b2 = b[off + 10];\n    b3 = b[off + 11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 12];\n    b1 = b[off + 13];\n    b2 = b[off + 14];\n    b3 = b[off + 15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  };\n  publicAPI.replaceShaderNormal = function (shaders, ren, actor) {\n    if (model.hardwareSupport) {\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n      if (lastLightComplexity > 0) {\n        var VSSource = shaders.Vertex;\n        if (model.lastBoundBO.getCABO().getNormalOffset()) {\n          VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'attribute mat3 gNormal;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;\n          VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * gNormal * normalMC;']).result;\n        }\n        shaders.Vertex = VSSource;\n      }\n    }\n    superClass.replaceShaderNormal(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderColor = function (shaders, ren, actor) {\n    if (model.hardwareSupport && model.renderable.getColorArray()) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity'); // create the material/color property declarations, and VS implementation\n      // these are always defined\n\n      var colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity']; // add more for specular\n\n      if (lastLightComplexity) {\n        colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);\n      } // now handle the more complex fragment shader implementation\n      // the following are always defined variables.  We start\n      // by assigning a default value from the uniform\n\n      var colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];\n      if (lastLightComplexity) {\n        colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);\n      }\n      colorImpl = colorImpl.concat(['  opacity = opacityUniform;']);\n      if (lastLightComplexity) {\n        colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);\n      }\n      if (!model.drawingEdges) {\n        colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 gColor;', 'varying vec4 vertexColorVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput = gColor;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;\n        colorImpl = colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;']);\n      }\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', colorDec).result;\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n    superClass.replaceShaderColor(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {\n    if (model.hardwareSupport) {\n      var VSSource = shaders.Vertex; // do we need the vertex in the shader in View Coordinates\n\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n      if (lastLightComplexity > 0) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vec4 gVertexMC = gMatrix * vertexMC;', 'vertexVCVSOutput = MCVCMatrix * gVertexMC;', '  gl_Position = MCPCMatrix * gVertexMC;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['attribute mat4 gMatrix;', 'uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;\n      } else {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['attribute mat4 gMatrix;', 'uniform mat4 MCPCMatrix;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vec4 gVertexMC = gMatrix * vertexMC;', '  gl_Position = MCPCMatrix * gVertexMC;']).result;\n      }\n      shaders.Vertex = VSSource;\n    }\n    superClass.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {\n    if (model.hardwareSupport) {\n      var FSSource = shaders.Fragment;\n      var VSSource = shaders.Vertex;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Dec', ['attribute vec3 mapperIndexVS;', 'varying vec3 mapperIndexVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Impl', '  mapperIndexVSOutput = mapperIndexVS;').result;\n      shaders.Vertex = VSSource;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['varying vec3 mapperIndexVSOutput;', 'uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', ['  vec4 pickColor = picking == 2 ? vec4(mapperIndexVSOutput,1.0) : vec4(mapperIndex,1.0);', '  gl_FragData[0] = picking != 0 ? pickColor : gl_FragData[0];']).result;\n      shaders.Fragment = FSSource;\n    } else {\n      superClass.replaceShaderPicking(shaders, ren, actor);\n    }\n  };\n  publicAPI.updateGlyphShaderParameters = function (normalMatrixUsed, mcvcMatrixUsed, cellBO, carray, garray, narray, p, selector) {\n    var program = cellBO.getProgram();\n    if (normalMatrixUsed) {\n      var a = model.normalMatrix;\n      var b = narray;\n      var ofs = p * 9;\n      var out = model.tmpMat3;\n      var a00 = a[0];\n      var a01 = a[1];\n      var a02 = a[2];\n      var a10 = a[3];\n      var a11 = a[4];\n      var a12 = a[5];\n      var a20 = a[6];\n      var a21 = a[7];\n      var a22 = a[8];\n      var b00 = b[ofs];\n      var b01 = b[ofs + 1];\n      var b02 = b[ofs + 2];\n      var b10 = b[ofs + 3];\n      var b11 = b[ofs + 4];\n      var b12 = b[ofs + 5];\n      var b20 = b[ofs + 6];\n      var b21 = b[ofs + 7];\n      var b22 = b[ofs + 8];\n      out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n      out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n      out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n      out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n      out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n      out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n      out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n      out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n      out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n      program.setUniformMatrix3x3('normalMatrix', model.tmpMat3);\n    }\n    publicAPI.multiply4x4WithOffset(model.tmpMat4, model.mcpcMatrix, garray, p * 16);\n    program.setUniformMatrix('MCPCMatrix', model.tmpMat4);\n    if (mcvcMatrixUsed) {\n      publicAPI.multiply4x4WithOffset(model.tmpMat4, model.mcvcMatrix, garray, p * 16);\n      program.setUniformMatrix('MCVCMatrix', model.tmpMat4);\n    } // set color\n\n    if (carray) {\n      var cdata = carray.getData();\n      model.tmpColor[0] = cdata[p * 4] / 255.0;\n      model.tmpColor[1] = cdata[p * 4 + 1] / 255.0;\n      model.tmpColor[2] = cdata[p * 4 + 2] / 255.0;\n      program.setUniform3fArray('ambientColorUniform', model.tmpColor);\n      program.setUniform3fArray('diffuseColorUniform', model.tmpColor);\n    }\n    if (selector) {\n      program.setUniform3fArray('mapperIndex', selector.getPropColorValue());\n    }\n  };\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var representation = actor.getProperty().getRepresentation();\n    var gl = model.context;\n    var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE; // [WMVP]C == {world, model, view, projection} coordinates\n    // E.g., WCPC == world to projection coordinate transformation\n\n    var keyMats = model.openGLCamera.getKeyMatrices(ren);\n    var actMats = model.openGLActor.getKeyMatrices(); // precompute the actor+camera mats once\n\n    mat3.multiply(model.normalMatrix, keyMats.normalMatrix, actMats.normalMatrix);\n    mat4.multiply(model.mcpcMatrix, keyMats.wcpc, actMats.mcwc);\n    mat4.multiply(model.mcvcMatrix, keyMats.wcvc, actMats.mcwc);\n    var garray = model.renderable.getMatrixArray();\n    var narray = model.renderable.getNormalArray();\n    var carray = model.renderable.getColorArray();\n    var numPts = garray.length / 16;\n    var compositePass = false;\n    if (model._openGLRenderer.getSelector()) {\n      if (model._openGLRenderer.getSelector().getCurrentPass() === PassTypes.COMPOSITE_INDEX_PASS) {\n        compositePass = true;\n      }\n    } // for every primitive type\n\n    for (var i = model.primTypes.Start; i < model.primTypes.End; i++) {\n      // if there are entries\n      var cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        // are we drawing edges\n        model.drawingEdges = drawSurfaceWithEdges && (i === model.primTypes.TrisEdges || i === model.primTypes.TriStripsEdges);\n        model.lastBoundBO = model.primitives[i];\n        model.primitives[i].updateShaders(ren, actor, publicAPI);\n        var program = model.primitives[i].getProgram();\n        var mode = model.primitives[i].getOpenGLMode(representation);\n        var normalMatrixUsed = program.isUniformUsed('normalMatrix');\n        var mcvcMatrixUsed = program.isUniformUsed('MCVCMatrix');\n        if (model.hardwareSupport) {\n          if (model.extension) {\n            model.extension.drawArraysInstancedANGLE(mode, 0, cabo.getElementCount(), numPts);\n          } else {\n            gl.drawArraysInstanced(mode, 0, cabo.getElementCount(), numPts);\n          }\n        } else {\n          // draw the array multiple times with different cam matrix\n          for (var p = 0; p < numPts; ++p) {\n            if (compositePass) {\n              model._openGLRenderer.getSelector().renderCompositeIndex(p);\n            }\n            publicAPI.updateGlyphShaderParameters(normalMatrixUsed, mcvcMatrixUsed, model.primitives[i], carray, garray, narray, p, compositePass ? model._openGLRenderer.getSelector() : null);\n            gl.drawArrays(mode, 0, cabo.getElementCount());\n          }\n        }\n      }\n    }\n  };\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    if (cellBO.getCABO().getElementCount() && (model.glyphBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (cellBO.getProgram().isAttributeUsed('gMatrix')) {\n        if (!cellBO.getVAO().addAttributeMatrixWithDivisor(cellBO.getProgram(), model.matrixBuffer, 'gMatrix', 0, 64, model.context.FLOAT, 4, false, 1)) {\n          vtkErrorMacro('Error setting gMatrix in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gMatrix');\n      }\n      if (cellBO.getProgram().isAttributeUsed('gNormal')) {\n        if (!cellBO.getVAO().addAttributeMatrixWithDivisor(cellBO.getProgram(), model.normalBuffer, 'gNormal', 0, 36, model.context.FLOAT, 3, false, 1)) {\n          vtkErrorMacro('Error setting gNormal in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gNormal');\n      }\n      if (cellBO.getProgram().isAttributeUsed('gColor')) {\n        if (!cellBO.getVAO().addAttributeArrayWithDivisor(cellBO.getProgram(), model.colorBuffer, 'gColor', 0, 4, model.context.UNSIGNED_BYTE, 4, true, 1, false)) {\n          vtkErrorMacro('Error setting gColor in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gColor');\n      }\n      if (cellBO.getProgram().isAttributeUsed('mapperIndexVS')) {\n        if (!cellBO.getVAO().addAttributeArrayWithDivisor(cellBO.getProgram(), model.pickBuffer, 'mapperIndexVS', 0, 4, model.context.UNSIGNED_BYTE, 4, true, 1, false)) {\n          vtkErrorMacro('Error setting mapperIndexVS in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('mapperIndexVS');\n      }\n      superClass.setMapperShaderParameters(cellBO, ren, actor);\n      cellBO.getAttributeUpdateTime().modified();\n      return;\n    }\n    superClass.setMapperShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    model.renderable.buildArrays(); // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n\n    var vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < model.renderable.getBuildTime().getMTime()) {\n      return true;\n    }\n    return superClass.getNeedToRebuildBufferObjects(ren, actor);\n  };\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    if (superClass.getNeedToRebuildShaders(cellBO, ren, actor) || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    if (model.hardwareSupport) {\n      // update the buffer objects if needed\n      var garray = model.renderable.getMatrixArray();\n      var narray = model.renderable.getNormalArray();\n      var carray = model.renderable.getColorArray();\n      if (!model.matrixBuffer) {\n        model.matrixBuffer = vtkBufferObject.newInstance();\n        model.matrixBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.normalBuffer = vtkBufferObject.newInstance();\n        model.normalBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.colorBuffer = vtkBufferObject.newInstance();\n        model.colorBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.pickBuffer = vtkBufferObject.newInstance();\n        model.pickBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n      if (model.renderable.getBuildTime().getMTime() > model.glyphBOBuildTime.getMTime()) {\n        model.matrixBuffer.upload(garray, ObjectType.ARRAY_BUFFER);\n        model.normalBuffer.upload(narray, ObjectType.ARRAY_BUFFER);\n        if (carray) {\n          model.colorBuffer.upload(carray.getData(), ObjectType.ARRAY_BUFFER);\n        } else {\n          model.colorBuffer.releaseGraphicsResources();\n        }\n        var numPts = garray.length / 16;\n        var parray = new Uint8Array(4 * numPts);\n        for (var i = 0; i < numPts; ++i) {\n          var value = i + 1;\n          var offset = i * 4;\n          parray[offset] = value % 256;\n          value -= parray[offset];\n          value /= 256;\n          parray[offset + 1] = value % 256;\n          value -= parray[offset + 1];\n          value /= 256;\n          parray[offset + 2] = value % 256;\n          parray[offset + 3] = 255;\n        }\n        model.pickBuffer.upload(parray, ObjectType.ARRAY_BUFFER);\n        model.glyphBOBuildTime.modified();\n      }\n    }\n    return superClass.buildBufferObjects(ren, actor);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  normalMatrix: null,\n  mcpcMatrix: null,\n  mcwcMatrix: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkOpenGLPolyDataMapper.extend(publicAPI, model, initialValues);\n  model.tmpMat3 = mat3.identity(new Float64Array(9));\n  model.normalMatrix = mat3.identity(new Float64Array(9));\n  model.mcpcMatrix = mat4.identity(new Float64Array(16));\n  model.mcvcMatrix = mat4.identity(new Float64Array(16));\n  model.tmpColor = [];\n  model.glyphBOBuildTime = {};\n  obj(model.glyphBOBuildTime, {\n    mtime: 0\n  }); // Object methods\n\n  vtkOpenGLGlyph3DMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLGlyph3DMapper'); // ----------------------------------------------------------------------------\n\nvar vtkGlyph3DMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkGlyph3DMapper', newInstance);\nexport { vtkGlyph3DMapper as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","mat3","mat4","newInstance","newInstance$1","obj","vtkErrorMacro","vtkErrorMacro$1","vtkBufferObject","vtkHardwareSelector","vtkProperty","vtkOpenGLPolyDataMapper","vtkShaderProgram","registerOverride","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Representation","ObjectType","PassTypes","StartEvent","type","EndEvent","vtkOpenGLGlyph3DMapper","publicAPI","model","classHierarchy","superClass","renderPiece","ren","actor","invokeEvent","renderable","getStatic","update","currentInput","getInputData","getPoints","getNumberOfValues","gl","context","_openGLRenderWindow","getWebgl2","hardwareSupport","extension","getExtension","backfaceCulling","getProperty","getBackfaceCulling","frontfaceCulling","getFrontfaceCulling","disableCullFace","enableCullFace","cullFace","FRONT","BACK","renderPieceStart","renderPieceDraw","renderPieceFinish","multiply4x4WithOffset","out","a","b","off","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","replaceShaderNormal","shaders","lastLightComplexity","lastBoundBO","getReferenceByName","VSSource","Vertex","getCABO","getNormalOffset","substitute","result","replaceShaderColor","getColorArray","GSSource","Geometry","FSSource","Fragment","colorDec","concat","colorImpl","drawingEdges","replaceShaderPositionVC","replaceShaderPicking","updateGlyphShaderParameters","normalMatrixUsed","mcvcMatrixUsed","cellBO","carray","garray","narray","p","selector","program","getProgram","normalMatrix","ofs","tmpMat3","b00","b01","b02","b10","b11","b12","b20","b21","b22","setUniformMatrix3x3","tmpMat4","mcpcMatrix","setUniformMatrix","mcvcMatrix","cdata","getData","tmpColor","setUniform3fArray","getPropColorValue","representation","getRepresentation","drawSurfaceWithEdges","getEdgeVisibility","SURFACE","keyMats","openGLCamera","getKeyMatrices","actMats","openGLActor","multiply","wcpc","mcwc","wcvc","getMatrixArray","getNormalArray","numPts","compositePass","_openGLRenderer","getSelector","getCurrentPass","COMPOSITE_INDEX_PASS","primTypes","Start","End","cabo","primitives","getElementCount","TrisEdges","TriStripsEdges","updateShaders","mode","getOpenGLMode","isUniformUsed","drawArraysInstancedANGLE","drawArraysInstanced","renderCompositeIndex","drawArrays","setMapperShaderParameters","glyphBOBuildTime","getMTime","getAttributeUpdateTime","getShaderSourceTime","isAttributeUsed","getVAO","addAttributeMatrixWithDivisor","matrixBuffer","FLOAT","removeAttributeArray","normalBuffer","addAttributeArrayWithDivisor","colorBuffer","UNSIGNED_BYTE","pickBuffer","modified","getNeedToRebuildBufferObjects","buildArrays","vmtime","VBOBuildTime","getBuildTime","getNeedToRebuildShaders","buildBufferObjects","setOpenGLRenderWindow","upload","ARRAY_BUFFER","releaseGraphicsResources","parray","Uint8Array","value","offset","DEFAULT_VALUES","mcwcMatrix","extend","initialValues","undefined","assign","identity","Float64Array","mtime","vtkGlyph3DMapper","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/Glyph3DMapper.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { mat3, mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, obj, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkBufferObject from './BufferObject.js';\nimport vtkHardwareSelector from './HardwareSelector.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkOpenGLPolyDataMapper from './PolyDataMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar Representation = vtkProperty.Representation;\nvar ObjectType = vtkBufferObject.ObjectType;\nvar PassTypes = vtkHardwareSelector.PassTypes;\nvar StartEvent = {\n  type: 'StartEvent'\n};\nvar EndEvent = {\n  type: 'EndEvent'\n}; // ----------------------------------------------------------------------------\n// vtkOpenGLSphereMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLGlyph3DMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLGlyph3DMapper'); // Capture 'parentClass' api for internal use\n\n  var superClass = _objectSpread({}, publicAPI);\n\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent(StartEvent);\n\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n\n    model.currentInput = model.renderable.getInputData(1);\n    publicAPI.invokeEvent(EndEvent);\n\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    } // if there are no points then we are done\n\n\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    } // apply faceCulling\n\n\n    var gl = model.context;\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.hardwareSupport = true;\n      model.extension = null;\n    } else if (!model.extension) {\n      model.extension = model.context.getExtension('ANGLE_instanced_arrays');\n      model.hardwareSupport = !!model.extension;\n    } // to test without extension support uncomment the next two lines\n    // model.extension = null;\n    // model.hardwareSupport = !!model.extension;\n\n\n    var backfaceCulling = actor.getProperty().getBackfaceCulling();\n    var frontfaceCulling = actor.getProperty().getFrontfaceCulling();\n\n    if (!backfaceCulling && !frontfaceCulling) {\n      model._openGLRenderWindow.disableCullFace();\n    } else if (frontfaceCulling) {\n      model._openGLRenderWindow.enableCullFace();\n\n      gl.cullFace(gl.FRONT);\n    } else {\n      model._openGLRenderWindow.enableCullFace();\n\n      gl.cullFace(gl.BACK);\n    }\n\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n\n  publicAPI.multiply4x4WithOffset = function (out, a, b, off) {\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    var a30 = a[12];\n    var a31 = a[13];\n    var a32 = a[14];\n    var a33 = a[15]; // Cache only the current line of the second matrix\n\n    var b0 = b[off];\n    var b1 = b[off + 1];\n    var b2 = b[off + 2];\n    var b3 = b[off + 3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 4];\n    b1 = b[off + 5];\n    b2 = b[off + 6];\n    b3 = b[off + 7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 8];\n    b1 = b[off + 9];\n    b2 = b[off + 10];\n    b3 = b[off + 11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = b[off + 12];\n    b1 = b[off + 13];\n    b2 = b[off + 14];\n    b3 = b[off + 15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  };\n\n  publicAPI.replaceShaderNormal = function (shaders, ren, actor) {\n    if (model.hardwareSupport) {\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n      if (lastLightComplexity > 0) {\n        var VSSource = shaders.Vertex;\n\n        if (model.lastBoundBO.getCABO().getNormalOffset()) {\n          VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'attribute mat3 gNormal;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;\n          VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * gNormal * normalMC;']).result;\n        }\n\n        shaders.Vertex = VSSource;\n      }\n    }\n\n    superClass.replaceShaderNormal(shaders, ren, actor);\n  };\n\n  publicAPI.replaceShaderColor = function (shaders, ren, actor) {\n    if (model.hardwareSupport && model.renderable.getColorArray()) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity'); // create the material/color property declarations, and VS implementation\n      // these are always defined\n\n      var colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity']; // add more for specular\n\n      if (lastLightComplexity) {\n        colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);\n      } // now handle the more complex fragment shader implementation\n      // the following are always defined variables.  We start\n      // by assigning a default value from the uniform\n\n\n      var colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];\n\n      if (lastLightComplexity) {\n        colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);\n      }\n\n      colorImpl = colorImpl.concat(['  opacity = opacityUniform;']);\n\n      if (lastLightComplexity) {\n        colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);\n      }\n\n      if (!model.drawingEdges) {\n        colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 gColor;', 'varying vec4 vertexColorVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput = gColor;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;\n        colorImpl = colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;']);\n      }\n\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', colorDec).result;\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n\n    superClass.replaceShaderColor(shaders, ren, actor);\n  };\n\n  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {\n    if (model.hardwareSupport) {\n      var VSSource = shaders.Vertex; // do we need the vertex in the shader in View Coordinates\n\n      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');\n\n      if (lastLightComplexity > 0) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vec4 gVertexMC = gMatrix * vertexMC;', 'vertexVCVSOutput = MCVCMatrix * gVertexMC;', '  gl_Position = MCPCMatrix * gVertexMC;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['attribute mat4 gMatrix;', 'uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;\n      } else {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Camera::Dec', ['attribute mat4 gMatrix;', 'uniform mat4 MCPCMatrix;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::PositionVC::Impl', ['vec4 gVertexMC = gMatrix * vertexMC;', '  gl_Position = MCPCMatrix * gVertexMC;']).result;\n      }\n\n      shaders.Vertex = VSSource;\n    }\n\n    superClass.replaceShaderPositionVC(shaders, ren, actor);\n  };\n\n  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {\n    if (model.hardwareSupport) {\n      var FSSource = shaders.Fragment;\n      var VSSource = shaders.Vertex;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Dec', ['attribute vec3 mapperIndexVS;', 'varying vec3 mapperIndexVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Picking::Impl', '  mapperIndexVSOutput = mapperIndexVS;').result;\n      shaders.Vertex = VSSource;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['varying vec3 mapperIndexVSOutput;', 'uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', ['  vec4 pickColor = picking == 2 ? vec4(mapperIndexVSOutput,1.0) : vec4(mapperIndex,1.0);', '  gl_FragData[0] = picking != 0 ? pickColor : gl_FragData[0];']).result;\n      shaders.Fragment = FSSource;\n    } else {\n      superClass.replaceShaderPicking(shaders, ren, actor);\n    }\n  };\n\n  publicAPI.updateGlyphShaderParameters = function (normalMatrixUsed, mcvcMatrixUsed, cellBO, carray, garray, narray, p, selector) {\n    var program = cellBO.getProgram();\n\n    if (normalMatrixUsed) {\n      var a = model.normalMatrix;\n      var b = narray;\n      var ofs = p * 9;\n      var out = model.tmpMat3;\n      var a00 = a[0];\n      var a01 = a[1];\n      var a02 = a[2];\n      var a10 = a[3];\n      var a11 = a[4];\n      var a12 = a[5];\n      var a20 = a[6];\n      var a21 = a[7];\n      var a22 = a[8];\n      var b00 = b[ofs];\n      var b01 = b[ofs + 1];\n      var b02 = b[ofs + 2];\n      var b10 = b[ofs + 3];\n      var b11 = b[ofs + 4];\n      var b12 = b[ofs + 5];\n      var b20 = b[ofs + 6];\n      var b21 = b[ofs + 7];\n      var b22 = b[ofs + 8];\n      out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n      out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n      out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n      out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n      out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n      out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n      out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n      out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n      out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n      program.setUniformMatrix3x3('normalMatrix', model.tmpMat3);\n    }\n\n    publicAPI.multiply4x4WithOffset(model.tmpMat4, model.mcpcMatrix, garray, p * 16);\n    program.setUniformMatrix('MCPCMatrix', model.tmpMat4);\n\n    if (mcvcMatrixUsed) {\n      publicAPI.multiply4x4WithOffset(model.tmpMat4, model.mcvcMatrix, garray, p * 16);\n      program.setUniformMatrix('MCVCMatrix', model.tmpMat4);\n    } // set color\n\n\n    if (carray) {\n      var cdata = carray.getData();\n      model.tmpColor[0] = cdata[p * 4] / 255.0;\n      model.tmpColor[1] = cdata[p * 4 + 1] / 255.0;\n      model.tmpColor[2] = cdata[p * 4 + 2] / 255.0;\n      program.setUniform3fArray('ambientColorUniform', model.tmpColor);\n      program.setUniform3fArray('diffuseColorUniform', model.tmpColor);\n    }\n\n    if (selector) {\n      program.setUniform3fArray('mapperIndex', selector.getPropColorValue());\n    }\n  };\n\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var representation = actor.getProperty().getRepresentation();\n    var gl = model.context;\n    var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE; // [WMVP]C == {world, model, view, projection} coordinates\n    // E.g., WCPC == world to projection coordinate transformation\n\n    var keyMats = model.openGLCamera.getKeyMatrices(ren);\n    var actMats = model.openGLActor.getKeyMatrices(); // precompute the actor+camera mats once\n\n    mat3.multiply(model.normalMatrix, keyMats.normalMatrix, actMats.normalMatrix);\n    mat4.multiply(model.mcpcMatrix, keyMats.wcpc, actMats.mcwc);\n    mat4.multiply(model.mcvcMatrix, keyMats.wcvc, actMats.mcwc);\n    var garray = model.renderable.getMatrixArray();\n    var narray = model.renderable.getNormalArray();\n    var carray = model.renderable.getColorArray();\n    var numPts = garray.length / 16;\n    var compositePass = false;\n\n    if (model._openGLRenderer.getSelector()) {\n      if (model._openGLRenderer.getSelector().getCurrentPass() === PassTypes.COMPOSITE_INDEX_PASS) {\n        compositePass = true;\n      }\n    } // for every primitive type\n\n\n    for (var i = model.primTypes.Start; i < model.primTypes.End; i++) {\n      // if there are entries\n      var cabo = model.primitives[i].getCABO();\n\n      if (cabo.getElementCount()) {\n        // are we drawing edges\n        model.drawingEdges = drawSurfaceWithEdges && (i === model.primTypes.TrisEdges || i === model.primTypes.TriStripsEdges);\n        model.lastBoundBO = model.primitives[i];\n        model.primitives[i].updateShaders(ren, actor, publicAPI);\n        var program = model.primitives[i].getProgram();\n        var mode = model.primitives[i].getOpenGLMode(representation);\n        var normalMatrixUsed = program.isUniformUsed('normalMatrix');\n        var mcvcMatrixUsed = program.isUniformUsed('MCVCMatrix');\n\n        if (model.hardwareSupport) {\n          if (model.extension) {\n            model.extension.drawArraysInstancedANGLE(mode, 0, cabo.getElementCount(), numPts);\n          } else {\n            gl.drawArraysInstanced(mode, 0, cabo.getElementCount(), numPts);\n          }\n        } else {\n          // draw the array multiple times with different cam matrix\n          for (var p = 0; p < numPts; ++p) {\n            if (compositePass) {\n              model._openGLRenderer.getSelector().renderCompositeIndex(p);\n            }\n\n            publicAPI.updateGlyphShaderParameters(normalMatrixUsed, mcvcMatrixUsed, model.primitives[i], carray, garray, narray, p, compositePass ? model._openGLRenderer.getSelector() : null);\n            gl.drawArrays(mode, 0, cabo.getElementCount());\n          }\n        }\n      }\n    }\n  };\n\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    if (cellBO.getCABO().getElementCount() && (model.glyphBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (cellBO.getProgram().isAttributeUsed('gMatrix')) {\n        if (!cellBO.getVAO().addAttributeMatrixWithDivisor(cellBO.getProgram(), model.matrixBuffer, 'gMatrix', 0, 64, model.context.FLOAT, 4, false, 1)) {\n          vtkErrorMacro('Error setting gMatrix in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gMatrix');\n      }\n\n      if (cellBO.getProgram().isAttributeUsed('gNormal')) {\n        if (!cellBO.getVAO().addAttributeMatrixWithDivisor(cellBO.getProgram(), model.normalBuffer, 'gNormal', 0, 36, model.context.FLOAT, 3, false, 1)) {\n          vtkErrorMacro('Error setting gNormal in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gNormal');\n      }\n\n      if (cellBO.getProgram().isAttributeUsed('gColor')) {\n        if (!cellBO.getVAO().addAttributeArrayWithDivisor(cellBO.getProgram(), model.colorBuffer, 'gColor', 0, 4, model.context.UNSIGNED_BYTE, 4, true, 1, false)) {\n          vtkErrorMacro('Error setting gColor in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('gColor');\n      }\n\n      if (cellBO.getProgram().isAttributeUsed('mapperIndexVS')) {\n        if (!cellBO.getVAO().addAttributeArrayWithDivisor(cellBO.getProgram(), model.pickBuffer, 'mapperIndexVS', 0, 4, model.context.UNSIGNED_BYTE, 4, true, 1, false)) {\n          vtkErrorMacro('Error setting mapperIndexVS in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('mapperIndexVS');\n      }\n\n      superClass.setMapperShaderParameters(cellBO, ren, actor);\n      cellBO.getAttributeUpdateTime().modified();\n      return;\n    }\n\n    superClass.setMapperShaderParameters(cellBO, ren, actor);\n  };\n\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    model.renderable.buildArrays(); // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n\n    var vmtime = model.VBOBuildTime.getMTime();\n\n    if (vmtime < model.renderable.getBuildTime().getMTime()) {\n      return true;\n    }\n\n    return superClass.getNeedToRebuildBufferObjects(ren, actor);\n  };\n\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    if (superClass.getNeedToRebuildShaders(cellBO, ren, actor) || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    if (model.hardwareSupport) {\n      // update the buffer objects if needed\n      var garray = model.renderable.getMatrixArray();\n      var narray = model.renderable.getNormalArray();\n      var carray = model.renderable.getColorArray();\n\n      if (!model.matrixBuffer) {\n        model.matrixBuffer = vtkBufferObject.newInstance();\n        model.matrixBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.normalBuffer = vtkBufferObject.newInstance();\n        model.normalBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.colorBuffer = vtkBufferObject.newInstance();\n        model.colorBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.pickBuffer = vtkBufferObject.newInstance();\n        model.pickBuffer.setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n\n      if (model.renderable.getBuildTime().getMTime() > model.glyphBOBuildTime.getMTime()) {\n        model.matrixBuffer.upload(garray, ObjectType.ARRAY_BUFFER);\n        model.normalBuffer.upload(narray, ObjectType.ARRAY_BUFFER);\n\n        if (carray) {\n          model.colorBuffer.upload(carray.getData(), ObjectType.ARRAY_BUFFER);\n        } else {\n          model.colorBuffer.releaseGraphicsResources();\n        }\n\n        var numPts = garray.length / 16;\n        var parray = new Uint8Array(4 * numPts);\n\n        for (var i = 0; i < numPts; ++i) {\n          var value = i + 1;\n          var offset = i * 4;\n          parray[offset] = value % 256;\n          value -= parray[offset];\n          value /= 256;\n          parray[offset + 1] = value % 256;\n          value -= parray[offset + 1];\n          value /= 256;\n          parray[offset + 2] = value % 256;\n          parray[offset + 3] = 255;\n        }\n\n        model.pickBuffer.upload(parray, ObjectType.ARRAY_BUFFER);\n        model.glyphBOBuildTime.modified();\n      }\n    }\n\n    return superClass.buildBufferObjects(ren, actor);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  normalMatrix: null,\n  mcpcMatrix: null,\n  mcwcMatrix: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkOpenGLPolyDataMapper.extend(publicAPI, model, initialValues);\n  model.tmpMat3 = mat3.identity(new Float64Array(9));\n  model.normalMatrix = mat3.identity(new Float64Array(9));\n  model.mcpcMatrix = mat4.identity(new Float64Array(16));\n  model.mcvcMatrix = mat4.identity(new Float64Array(16));\n  model.tmpColor = [];\n  model.glyphBOBuildTime = {};\n  obj(model.glyphBOBuildTime, {\n    mtime: 0\n  }); // Object methods\n\n  vtkOpenGLGlyph3DMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLGlyph3DMapper'); // ----------------------------------------------------------------------------\n\nvar vtkGlyph3DMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkGlyph3DMapper', newInstance);\n\nexport { vtkGlyph3DMapper as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}