{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkImageData from '../../Common/DataModel/ImageData.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkScalarToRGBA methods\n// ----------------------------------------------------------------------------\n\nfunction vtkScalarToRGBA(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarToRGBA');\n  publicAPI.requestData = function (inData, outData) {\n    // implement requestData\n    var input = inData[0];\n    if (!input) {\n      vtkErrorMacro('Invalid or missing input');\n      return;\n    }\n    var scalars = input.getPointData().getScalars();\n    if (!scalars) {\n      vtkErrorMacro('No scalars from input');\n      return;\n    }\n    if (!model.lookupTable) {\n      vtkErrorMacro('No lookupTable available');\n      return;\n    }\n    if (!model.piecewiseFunction) {\n      vtkErrorMacro('No piecewiseFunction available');\n      return;\n    }\n    var rgba = [0, 0, 0, 0];\n    var data = scalars.getData();\n    var rgbaArray = new Uint8Array(data.length * 4);\n    var offset = 0;\n    for (var idx = 0; idx < data.length; idx++) {\n      var x = data[idx];\n      model.lookupTable.getColor(x, rgba);\n      rgba[3] = model.piecewiseFunction.getValue(x);\n      rgbaArray[offset++] = 255 * rgba[0];\n      rgbaArray[offset++] = 255 * rgba[1];\n      rgbaArray[offset++] = 255 * rgba[2];\n      rgbaArray[offset++] = 255 * rgba[3];\n    }\n    var colorArray = vtkDataArray.newInstance({\n      name: 'rgba',\n      numberOfComponents: 4,\n      values: rgbaArray\n    });\n    var datasetDefinition = input.get('extent', 'spacing', 'origin', 'direction');\n    var output = vtkImageData.newInstance(datasetDefinition);\n    output.getPointData().setScalars(colorArray);\n    outData[0] = output;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Make this a VTK object\n\n  macro.obj(publicAPI, model); // Also make it an algorithm with one input and one output\n\n  macro.algo(publicAPI, model, 1, 1);\n  macro.setGet(publicAPI, model, ['lookupTable', 'piecewiseFunction']); // Object specific methods\n\n  vtkScalarToRGBA(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkScalarToRGBA'); // ----------------------------------------------------------------------------\n\nvar vtkScalarToRGBA$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkScalarToRGBA$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkImageData","vtkDataArray","vtkErrorMacro","vtkScalarToRGBA","publicAPI","model","classHierarchy","push","requestData","inData","outData","input","scalars","getPointData","getScalars","lookupTable","piecewiseFunction","rgba","data","getData","rgbaArray","Uint8Array","length","offset","idx","x","getColor","getValue","colorArray","newInstance","name","numberOfComponents","values","datasetDefinition","get","output","setScalars","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","algo","setGet","vtkScalarToRGBA$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/General/ScalarToRGBA.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkImageData from '../../Common/DataModel/ImageData.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkScalarToRGBA methods\n// ----------------------------------------------------------------------------\n\nfunction vtkScalarToRGBA(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarToRGBA');\n\n  publicAPI.requestData = function (inData, outData) {\n    // implement requestData\n    var input = inData[0];\n\n    if (!input) {\n      vtkErrorMacro('Invalid or missing input');\n      return;\n    }\n\n    var scalars = input.getPointData().getScalars();\n\n    if (!scalars) {\n      vtkErrorMacro('No scalars from input');\n      return;\n    }\n\n    if (!model.lookupTable) {\n      vtkErrorMacro('No lookupTable available');\n      return;\n    }\n\n    if (!model.piecewiseFunction) {\n      vtkErrorMacro('No piecewiseFunction available');\n      return;\n    }\n\n    var rgba = [0, 0, 0, 0];\n    var data = scalars.getData();\n    var rgbaArray = new Uint8Array(data.length * 4);\n    var offset = 0;\n\n    for (var idx = 0; idx < data.length; idx++) {\n      var x = data[idx];\n      model.lookupTable.getColor(x, rgba);\n      rgba[3] = model.piecewiseFunction.getValue(x);\n      rgbaArray[offset++] = 255 * rgba[0];\n      rgbaArray[offset++] = 255 * rgba[1];\n      rgbaArray[offset++] = 255 * rgba[2];\n      rgbaArray[offset++] = 255 * rgba[3];\n    }\n\n    var colorArray = vtkDataArray.newInstance({\n      name: 'rgba',\n      numberOfComponents: 4,\n      values: rgbaArray\n    });\n    var datasetDefinition = input.get('extent', 'spacing', 'origin', 'direction');\n    var output = vtkImageData.newInstance(datasetDefinition);\n    output.getPointData().setScalars(colorArray);\n    outData[0] = output;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Make this a VTK object\n\n  macro.obj(publicAPI, model); // Also make it an algorithm with one input and one output\n\n  macro.algo(publicAPI, model, 1, 1);\n  macro.setGet(publicAPI, model, ['lookupTable', 'piecewiseFunction']); // Object specific methods\n\n  vtkScalarToRGBA(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkScalarToRGBA'); // ----------------------------------------------------------------------------\n\nvar vtkScalarToRGBA$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkScalarToRGBA$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}