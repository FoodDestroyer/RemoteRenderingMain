{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\nvar Representation = vtkProperty.Representation;\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  var substituteRes = vtkShaderProgram.substitute(shaders.Fragment, '//VTK::RenderPassFragmentShader::Impl', \"\\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\\n      gl_FragData[1].r = weight;\\n    \", false);\n  shaders.Fragment = substituteRes.result;\n}\nvar oitpFragTemplate = \"//VTK::System::Dec\\n\\nin vec2 tcoord;\\n\\nuniform sampler2D translucentRTexture;\\nuniform sampler2D translucentRGBATexture;\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\nvoid main()\\n{\\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\\n  float t2Color = texture(translucentRTexture, tcoord).r;\\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\\n}\\n\";\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass'); // build vertices etc\n\n  publicAPI.createVertexBuffer = function () {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    var ptsArray = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1]); // 4 corresponding corner points in texture space in order (x, y)\n\n    var tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]); // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n\n    var cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n    var points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray\n    });\n    points.setName('points');\n    var tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray\n    });\n    tcoords.setName('tcoords');\n    var cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points: points,\n      tcoords: tcoords,\n      cellOffset: 0\n    });\n    model.VBOBuildTime.modified();\n  };\n  publicAPI.createFramebuffer = function (viewNode) {\n    var _model$framebuffer;\n    var size = viewNode.getSize();\n    var gl = viewNode.getContext();\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n    (_model$framebuffer = model.framebuffer).create.apply(_model$framebuffer, _toConsumableArray(size));\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(size[0], size[1], 4, 'Float32Array', null);\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(size[0], size[1], 1, 'Float32Array', null);\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(size[0], size[1], 'Float32Array', null);\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n  publicAPI.createCopyShader = function (viewNode) {\n    model.copyShader = viewNode.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'attribute vec2 tcoordTC;', 'varying vec2 tcoord;', 'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }'].join('\\n'), oitpFragTemplate, '');\n  };\n  publicAPI.createVBO = function (viewNode) {\n    var gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n    var program = model.copyShader; // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 3, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'tcoordTC', model.tris.getCABO().getTCoordOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 2, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n  publicAPI.traverse = function (viewNode, renNode, forwardPass) {\n    if (model.deleted) {\n      return;\n    }\n    var size = viewNode.getSize();\n    var gl = viewNode.getContext(); // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n\n    model._supported = false;\n    if (renNode.getSelector() || !gl || !viewNode.getWebgl2() || !gl.getExtension('EXT_color_buffer_half_float') && !gl.getExtension('EXT_color_buffer_float')) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n    model._supported = true; // prepare framebuffer // allocate framebuffer if needed and bind it\n\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      var fbSize = model.framebuffer.getSize();\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n    gl.colorMask(false, false, false, false); // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      // Don't use zBufferPass as it will also render the depth of translucent actors\n      forwardPass.setCurrentOperation('opaqueZBufferPass');\n      renNode.traverse(forwardPass);\n    }\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]); // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND); // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA); // now do the translucent rendering\n\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers(); // gl.drawBuffers([gl.BACK]);\n    // make sure the copy shader is ready\n\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    } // make sure we have a VAO\n\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n    model.copyVAO.bind(); // make sure the VBO is up to date\n\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]); // activate texture\n\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi('translucentRGBATexture', model.translucentRGBATexture.getTextureUnit());\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi('translucentRTexture', model.translucentRTexture.getTextureUnit()); // render quad\n\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n  };\n  publicAPI.getShaderReplacement = function () {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n    return null;\n  };\n  publicAPI.releaseGraphicsResources = function (viewNode) {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n    publicAPI.modified();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  macro.get(publicAPI, model, ['framebuffer']); // Object methods\n\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkOpenGLOrderIndependentTranslucentPass'); // ----------------------------------------------------------------------------\n\nvar vtkOpenGLOrderIndependentTranslucentPass$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkOpenGLOrderIndependentTranslucentPass$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkOpenGLTexture","vtkOpenGLFramebuffer","vtkRenderPass","vtkDataArray","vtkHelper","vtkProperty","vtkShaderProgram","vtkVertexArrayObject","Representation","vtkErrorMacro","translucentShaderReplacement","shaders","substituteRes","substitute","Fragment","result","oitpFragTemplate","vtkOpenGLOrderIndependentTranslucentPass","publicAPI","model","classHierarchy","push","createVertexBuffer","ptsArray","Float32Array","tcoordArray","cellArray","Uint16Array","points","newInstance","numberOfComponents","values","setName","tcoords","cells","tris","getCABO","createVBO","SURFACE","cellOffset","VBOBuildTime","modified","createFramebuffer","viewNode","_model$framebuffer","size","getSize","gl","getContext","framebuffer","setOpenGLRenderWindow","create","apply","saveCurrentBindingsAndBuffers","bind","translucentRGBATexture","setInternalFormat","RGBA16F","setFormat","RGBA","setOpenGLDataType","HALF_FLOAT","create2DFromRaw","translucentRTexture","R16F","RED","translucentZTexture","createDepthFromRaw","setColorBuffer","setDepthBuffer","createCopyShader","copyShader","getShaderCache","readyShaderProgramArray","join","program","copyVAO","addAttributeArray","getVertexOffset","getStride","FLOAT","FALSE","getTCoordOffset","traverse","renNode","forwardPass","deleted","_supported","getSelector","getWebgl2","getExtension","setCurrentOperation","fbSize","releaseGraphicsResources","drawBuffers","COLOR_ATTACHMENT0","clearBufferfv","COLOR","DEPTH","colorMask","getOpaqueActorCount","COLOR_ATTACHMENT1","viewport","scissor","enable","DEPTH_TEST","BLEND","blendFuncSeparate","ONE","ZERO","ONE_MINUS_SRC_ALPHA","NONE","restorePreviousBindingsAndBuffers","readyShaderProgram","getMTime","SRC_ALPHA","depthMask","depthFunc","ALWAYS","activate","setUniformi","getTextureUnit","drawArrays","TRIANGLES","getElementCount","LEQUAL","deactivate","getShaderReplacement","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","mtime","get","vtkOpenGLOrderIndependentTranslucentPass$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/OrderIndependentTranslucentPass.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkHelper from './Helper.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\n\nvar Representation = vtkProperty.Representation;\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n\nfunction translucentShaderReplacement(shaders) {\n  var substituteRes = vtkShaderProgram.substitute(shaders.Fragment, '//VTK::RenderPassFragmentShader::Impl', \"\\n      float weight = gl_FragData[0].a * pow(max(1.1 - gl_FragCoord.z, 0.0), 2.0);\\n      gl_FragData[0] = vec4(gl_FragData[0].rgb*weight, gl_FragData[0].a);\\n      gl_FragData[1].r = weight;\\n    \", false);\n  shaders.Fragment = substituteRes.result;\n}\n\nvar oitpFragTemplate = \"//VTK::System::Dec\\n\\nin vec2 tcoord;\\n\\nuniform sampler2D translucentRTexture;\\nuniform sampler2D translucentRGBATexture;\\n\\n// the output of this shader\\n//VTK::Output::Dec\\n\\nvoid main()\\n{\\n  vec4 t1Color = texture(translucentRGBATexture, tcoord);\\n  float t2Color = texture(translucentRTexture, tcoord).r;\\n  gl_FragData[0] = vec4(t1Color.rgb/max(t2Color,0.01), 1.0 - t1Color.a);\\n}\\n\";\n\nfunction vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLOrderIndependentTranslucentPass'); // build vertices etc\n\n  publicAPI.createVertexBuffer = function () {\n    // 4 corner points in clipping space in order (x, y, z) where z is always set to -1\n    // prettier-ignore\n    var ptsArray = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1]); // 4 corresponding corner points in texture space in order (x, y)\n\n    var tcoordArray = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]); // a square defined as cell relation ship in order (cell_size, v1, v2, v3, v4)\n\n    var cellArray = new Uint16Array([4, 0, 1, 3, 2]);\n    var points = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: ptsArray\n    });\n    points.setName('points');\n    var tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoordArray\n    });\n    tcoords.setName('tcoords');\n    var cells = vtkDataArray.newInstance({\n      numberOfComponents: 1,\n      values: cellArray\n    });\n    model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n      points: points,\n      tcoords: tcoords,\n      cellOffset: 0\n    });\n    model.VBOBuildTime.modified();\n  };\n\n  publicAPI.createFramebuffer = function (viewNode) {\n    var _model$framebuffer;\n\n    var size = viewNode.getSize();\n    var gl = viewNode.getContext();\n    model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n    model.framebuffer.setOpenGLRenderWindow(viewNode);\n\n    (_model$framebuffer = model.framebuffer).create.apply(_model$framebuffer, _toConsumableArray(size));\n\n    model.framebuffer.saveCurrentBindingsAndBuffers();\n    model.framebuffer.bind();\n    model.translucentRGBATexture = vtkOpenGLTexture.newInstance();\n    model.translucentRGBATexture.setInternalFormat(gl.RGBA16F);\n    model.translucentRGBATexture.setFormat(gl.RGBA);\n    model.translucentRGBATexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRGBATexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRGBATexture.create2DFromRaw(size[0], size[1], 4, 'Float32Array', null);\n    model.translucentRTexture = vtkOpenGLTexture.newInstance();\n    model.translucentRTexture.setInternalFormat(gl.R16F);\n    model.translucentRTexture.setFormat(gl.RED);\n    model.translucentRTexture.setOpenGLDataType(gl.HALF_FLOAT);\n    model.translucentRTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentRTexture.create2DFromRaw(size[0], size[1], 1, 'Float32Array', null);\n    model.translucentZTexture = vtkOpenGLTexture.newInstance();\n    model.translucentZTexture.setOpenGLRenderWindow(viewNode);\n    model.translucentZTexture.createDepthFromRaw(size[0], size[1], 'Float32Array', null);\n    model.framebuffer.setColorBuffer(model.translucentRGBATexture, 0);\n    model.framebuffer.setColorBuffer(model.translucentRTexture, 1);\n    model.framebuffer.setDepthBuffer(model.translucentZTexture);\n  };\n\n  publicAPI.createCopyShader = function (viewNode) {\n    model.copyShader = viewNode.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'attribute vec2 tcoordTC;', 'varying vec2 tcoord;', 'void main() { tcoord = tcoordTC; gl_Position = vertexDC; }'].join('\\n'), oitpFragTemplate, '');\n  };\n\n  publicAPI.createVBO = function (viewNode) {\n    var gl = viewNode.getContext();\n    model.tris.setOpenGLRenderWindow(viewNode);\n    publicAPI.createVertexBuffer();\n    var program = model.copyShader; // prepare the vertex and triangle data for the image plane to render to\n\n    model.tris.getCABO().bind();\n\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 3, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n\n    if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'tcoordTC', model.tris.getCABO().getTCoordOffset(), model.tris.getCABO().getStride(), gl.FLOAT, 2, gl.FALSE)) {\n      vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n    }\n  };\n\n  publicAPI.traverse = function (viewNode, renNode, forwardPass) {\n    if (model.deleted) {\n      return;\n    }\n\n    var size = viewNode.getSize();\n    var gl = viewNode.getContext(); // if we lack the webgl2 and half floatsupport just do\n    // basic alpha blending\n\n    model._supported = false;\n\n    if (renNode.getSelector() || !gl || !viewNode.getWebgl2() || !gl.getExtension('EXT_color_buffer_half_float') && !gl.getExtension('EXT_color_buffer_float')) {\n      publicAPI.setCurrentOperation('translucentPass');\n      renNode.traverse(publicAPI);\n      return;\n    }\n\n    model._supported = true; // prepare framebuffer // allocate framebuffer if needed and bind it\n\n    if (model.framebuffer === null) {\n      publicAPI.createFramebuffer(viewNode);\n    } else {\n      var fbSize = model.framebuffer.getSize();\n\n      if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n        model.framebuffer.releaseGraphicsResources();\n        model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n        model.translucentRTexture.releaseGraphicsResources(viewNode);\n        model.translucentZTexture.releaseGraphicsResources(viewNode);\n        publicAPI.createFramebuffer(viewNode);\n      } else {\n        // store framebuffer bindings to restore them later\n        model.framebuffer.saveCurrentBindingsAndBuffers();\n        model.framebuffer.bind();\n      }\n    }\n\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 0.0]);\n    gl.clearBufferfv(gl.DEPTH, 0, [1.0]);\n    gl.colorMask(false, false, false, false); // rerender the opaque pass to set the depth buffer\n    // TODO remove when webgl1 is deprecated and instead\n    // have the forward pass use a texture backed zbuffer\n\n    if (forwardPass.getOpaqueActorCount() > 0) {\n      // Don't use zBufferPass as it will also render the depth of translucent actors\n      forwardPass.setCurrentOperation('opaqueZBufferPass');\n      renNode.traverse(forwardPass);\n    }\n\n    gl.colorMask(true, true, true, true);\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0, gl.COLOR_ATTACHMENT1]); // make sure to clear the entire framebuffer as we will\n    // be blitting the entire thing all of it needs good initial values\n\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]);\n    gl.clearBufferfv(gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);\n    gl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 0.0]);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND); // basic gist is we accumulate color into RGB We compute final opacity\n    // into A We store accumulated opacity into R of the R texture.\n\n    gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA); // now do the translucent rendering\n\n    publicAPI.setCurrentOperation('translucentPass');\n    renNode.traverse(publicAPI);\n    gl.drawBuffers([gl.NONE]);\n    model.framebuffer.restorePreviousBindingsAndBuffers(); // gl.drawBuffers([gl.BACK]);\n    // make sure the copy shader is ready\n\n    if (model.copyShader === null) {\n      publicAPI.createCopyShader(viewNode);\n    } else {\n      viewNode.getShaderCache().readyShaderProgram(model.copyShader);\n    } // make sure we have a VAO\n\n\n    if (!model.copyVAO) {\n      model.copyVAO = vtkVertexArrayObject.newInstance();\n      model.copyVAO.setOpenGLRenderWindow(viewNode);\n    }\n\n    model.copyVAO.bind(); // make sure the VBO is up to date\n\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime()) {\n      publicAPI.createVBO(viewNode);\n    }\n\n    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.depthMask(false);\n    gl.depthFunc(gl.ALWAYS);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.scissor(0, 0, size[0], size[1]); // activate texture\n\n    model.translucentRGBATexture.activate();\n    model.copyShader.setUniformi('translucentRGBATexture', model.translucentRGBATexture.getTextureUnit());\n    model.translucentRTexture.activate();\n    model.copyShader.setUniformi('translucentRTexture', model.translucentRTexture.getTextureUnit()); // render quad\n\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    gl.depthMask(true);\n    gl.depthFunc(gl.LEQUAL);\n    model.translucentRGBATexture.deactivate();\n    model.translucentRTexture.deactivate();\n  };\n\n  publicAPI.getShaderReplacement = function () {\n    if (model._supported) {\n      return translucentShaderReplacement;\n    }\n\n    return null;\n  };\n\n  publicAPI.releaseGraphicsResources = function (viewNode) {\n    if (model.framebuffer) {\n      model.framebuffer.releaseGraphicsResources(viewNode);\n      model.framebuffer = null;\n    }\n\n    if (model.translucentRGBATexture) {\n      model.translucentRGBATexture.releaseGraphicsResources(viewNode);\n      model.translucentRGBATexture = null;\n    }\n\n    if (model.translucentRTexture) {\n      model.translucentRTexture.releaseGraphicsResources(viewNode);\n      model.translucentRTexture = null;\n    }\n\n    if (model.translucentZTexture) {\n      model.translucentZTexture.releaseGraphicsResources(viewNode);\n      model.translucentZTexture = null;\n    }\n\n    if (model.copyVAO) {\n      model.copyVAO.releaseGraphicsResources(viewNode);\n      model.copyVAO = null;\n    }\n\n    if (model.copyShader) {\n      model.copyShader.releaseGraphicsResources(viewNode);\n      model.copyShader = null;\n    }\n\n    if (model.tris) {\n      model.tris.releaseGraphicsResources(viewNode);\n      model.tris = null;\n    }\n\n    publicAPI.modified();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  framebuffer: null,\n  copyShader: null,\n  tris: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  macro.obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  macro.get(publicAPI, model, ['framebuffer']); // Object methods\n\n  vtkOpenGLOrderIndependentTranslucentPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkOpenGLOrderIndependentTranslucentPass'); // ----------------------------------------------------------------------------\n\nvar vtkOpenGLOrderIndependentTranslucentPass$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkOpenGLOrderIndependentTranslucentPass$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}