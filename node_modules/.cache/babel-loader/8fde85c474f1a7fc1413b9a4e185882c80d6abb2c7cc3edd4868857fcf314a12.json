{"ast":null,"code":"var _jsxFileName = \"/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/src/VTKClient.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkWSLinkClient from '@kitware/vtk.js/IO/Core/WSLinkClient';\nimport vtkHttpSceneLoader from '@kitware/vtk.js/IO/Core/HttpSceneLoader';\nimport vtkVolumeController from '@kitware/vtk.js/Interaction/UI/VolumeController';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VTKClient = () => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    // Create VTK.js full-screen renderer\n    const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n      container: containerRef.current\n    });\n\n    // Initialize WebSocket connection to VTK server\n    const wsClient = vtkWSLinkClient.newInstance();\n    wsClient.connect('ws://localhost:7500/ws');\n\n    // Create volume controller\n    const volumeController = vtkVolumeController.newInstance({\n      renderWindow: fullScreenRenderer.getRenderWindow(),\n      wsLink: wsClient.getConnection(),\n      useShadow: true\n    });\n\n    // Load the remote scene\n    const sceneLoader = vtkHttpSceneLoader.newInstance({\n      wsLink: wsClient\n    });\n    sceneLoader.setRenderer(fullScreenRenderer.getRenderer());\n    sceneLoader.loadScene().then(() => {\n      const view = sceneLoader.getViews()[0]; // Assuming there's only one view loaded\n      view.getReferenceByName('VolumeController').setController(volumeController);\n    });\n\n    // Set mouse interaction style\n    fullScreenRenderer.setInteractorStyle(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"vtk-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 12\n  }, this);\n};\n_s(VTKClient, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = VTKClient;\nexport default VTKClient;\nvar _c;\n$RefreshReg$(_c, \"VTKClient\");","map":{"version":3,"names":["React","vtkFullScreenRenderWindow","vtkWSLinkClient","vtkHttpSceneLoader","vtkVolumeController","jsxDEV","_jsxDEV","VTKClient","_s","containerRef","useRef","useEffect","fullScreenRenderer","newInstance","container","current","wsClient","connect","volumeController","renderWindow","getRenderWindow","wsLink","getConnection","useShadow","sceneLoader","setRenderer","getRenderer","loadScene","then","view","getViews","getReferenceByName","setController","setInteractorStyle","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/src/VTKClient.js"],"sourcesContent":["import React  from 'react';\nimport vtkFullScreenRenderWindow from '@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow';\nimport vtkWSLinkClient from '@kitware/vtk.js/IO/Core/WSLinkClient';\nimport vtkHttpSceneLoader from '@kitware/vtk.js/IO/Core/HttpSceneLoader';\nimport vtkVolumeController from '@kitware/vtk.js/Interaction/UI/VolumeController';\n\nconst VTKClient = () => {\n    const containerRef = useRef(null);\n  \n    useEffect(() => {\n      // Create VTK.js full-screen renderer\n      const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n        container: containerRef.current,\n      });\n  \n      // Initialize WebSocket connection to VTK server\n      const wsClient = vtkWSLinkClient.newInstance();\n      wsClient.connect('ws://localhost:7500/ws');\n  \n      // Create volume controller\n      const volumeController = vtkVolumeController.newInstance({\n        renderWindow: fullScreenRenderer.getRenderWindow(),\n        wsLink: wsClient.getConnection(),\n        useShadow: true,\n      });\n  \n      // Load the remote scene\n      const sceneLoader = vtkHttpSceneLoader.newInstance({ wsLink: wsClient });\n      sceneLoader.setRenderer(fullScreenRenderer.getRenderer());\n  \n      sceneLoader.loadScene().then(() => {\n        const view = sceneLoader.getViews()[0]; // Assuming there's only one view loaded\n        view.getReferenceByName('VolumeController').setController(volumeController);\n      });\n  \n      // Set mouse interaction style\n      fullScreenRenderer.setInteractorStyle(null);\n    }, []);\n  \n    return <div ref={containerRef} className=\"vtk-container\" />;\n  };\n  \n  export default VTKClient;"],"mappings":";;AAAA,OAAOA,KAAK,MAAO,OAAO;AAC1B,OAAOC,yBAAyB,MAAM,uDAAuD;AAC7F,OAAOC,eAAe,MAAM,sCAAsC;AAClE,OAAOC,kBAAkB,MAAM,yCAAyC;AACxE,OAAOC,mBAAmB,MAAM,iDAAiD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElF,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,YAAY,GAAGC,MAAM,CAAC,IAAI,CAAC;EAEjCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMC,kBAAkB,GAAGX,yBAAyB,CAACY,WAAW,CAAC;MAC/DC,SAAS,EAAEL,YAAY,CAACM;IAC1B,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAGd,eAAe,CAACW,WAAW,CAAC,CAAC;IAC9CG,QAAQ,CAACC,OAAO,CAAC,wBAAwB,CAAC;;IAE1C;IACA,MAAMC,gBAAgB,GAAGd,mBAAmB,CAACS,WAAW,CAAC;MACvDM,YAAY,EAAEP,kBAAkB,CAACQ,eAAe,CAAC,CAAC;MAClDC,MAAM,EAAEL,QAAQ,CAACM,aAAa,CAAC,CAAC;MAChCC,SAAS,EAAE;IACb,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAGrB,kBAAkB,CAACU,WAAW,CAAC;MAAEQ,MAAM,EAAEL;IAAS,CAAC,CAAC;IACxEQ,WAAW,CAACC,WAAW,CAACb,kBAAkB,CAACc,WAAW,CAAC,CAAC,CAAC;IAEzDF,WAAW,CAACG,SAAS,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACjC,MAAMC,IAAI,GAAGL,WAAW,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxCD,IAAI,CAACE,kBAAkB,CAAC,kBAAkB,CAAC,CAACC,aAAa,CAACd,gBAAgB,CAAC;IAC7E,CAAC,CAAC;;IAEF;IACAN,kBAAkB,CAACqB,kBAAkB,CAAC,IAAI,CAAC;EAC7C,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO3B,OAAA;IAAK4B,GAAG,EAAEzB,YAAa;IAAC0B,SAAS,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7D,CAAC;AAAC/B,EAAA,CAlCED,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAoCb,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}