{"ast":null,"code":"import macro from '../../macros.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n\nvar getRemoteFileSize = function getRemoteFileSize(url) {\n  return (\n    // This function only works if the server provides a 'Content-Length'.\n    // For some reason, the 'Content-Length' header does not appear to be\n    // given for CORS HEAD requests on firefox. So this will not work on\n    // firefox if the images do not have the same origin as the html file.\n    // TODO: figure out how to make this work for CORS requests on firefox.\n    new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('HEAD', url, true);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var size = xhr.getResponseHeader('Content-Length');\n            resolve(size);\n          } else {\n            console.log('Failed to get remote file size of', url);\n            reject(xhr);\n          }\n        }\n      };\n      xhr.send();\n    })\n  );\n}; // ----------------------------------------------------------------------------\n// vtkTextureLODsDownloader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkTextureLODsDownloader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkTextureLODsDownloader');\n  var internal = {\n    downloadStack: []\n  }; //--------------------------------------------------------------------------\n\n  publicAPI.startDownloads = function () {\n    if (!model.texture) {\n      vtkErrorMacro('Texture was not set.');\n      return;\n    }\n    if (!model.files || model.files.length === 0) {\n      vtkErrorMacro('No files set.');\n      return;\n    }\n    var baseUrl = model.baseUrl;\n    if (baseUrl && !baseUrl.endsWith('/')) {\n      baseUrl += '/';\n    } // Create the download stack\n\n    internal.downloadStack = [];\n    model.files.forEach(function (file) {\n      return internal.downloadStack.push(\"\".concat(baseUrl).concat(file));\n    });\n    var downloadNextTexture = function downloadNextTexture() {\n      if (internal.downloadStack.length === 0) {\n        return;\n      } // For later use\n\n      var asyncDownloadNextTexture = function asyncDownloadNextTexture() {\n        setTimeout(downloadNextTexture, model.waitTimeBetweenDownloads);\n      };\n      var img = new Image();\n      if (model.crossOrigin) {\n        img.crossOrigin = model.crossOrigin;\n      }\n      var url = internal.downloadStack.shift();\n      getRemoteFileSize(url).then(function (size) {\n        if (!size || size / 1024 > model.maxTextureLODSize) {\n          if (!size) {\n            console.log('Failed to get image size');\n          } else {\n            console.log('Skipping image', url, ', because it is larger', 'than the max texture size:', model.maxTextureLODSize, 'KiB');\n          }\n          asyncDownloadNextTexture();\n          return;\n        }\n        img.src = url; // Decode the image asynchronously in an attempt to prevent a\n        // freeze during rendering.\n        // In theory, this should help, but my profiling indicates that\n        // it does not help much... maybe it is running in the main\n        // thread anyways?\n\n        img.decode().then(function () {\n          model.texture.setImage(img);\n          if (model.stepFinishedCallback) {\n            model.stepFinishedCallback();\n          }\n          asyncDownloadNextTexture();\n        }).catch(function (encodingError) {\n          console.log('Failed to decode image:', img.src);\n          console.log('Error is:', encodingError);\n          asyncDownloadNextTexture();\n        });\n      }).catch(function (xhr) {\n        console.log('Failed to get size of:', url);\n        console.log('status was:', xhr.status);\n        console.log('statusText was:', xhr.statusText);\n        asyncDownloadNextTexture();\n      });\n    };\n    setTimeout(downloadNextTexture, model.waitTimeToStart);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  baseUrl: '',\n  files: [],\n  texture: null,\n  crossOrigin: undefined,\n  // The max texture LOD file size in KiB\n  maxTextureLODSize: 50000,\n  stepFinishedCallback: null,\n  // These are in milliseconds\n  waitTimeToStart: 4000,\n  waitTimeBetweenDownloads: 0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model); // Create get-set macros\n\n  macro.setGet(publicAPI, model, ['baseUrl', 'files', 'texture', 'crossOrigin', 'maxTextureLODSize', 'stepFinishedCallback', 'waitTimeToStart', 'waitTimeBetweenDownloads']); // Object specific methods\n\n  vtkTextureLODsDownloader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkTextureLODsDownloader'); // ----------------------------------------------------------------------------\n\nvar vtkTextureLODsDownloader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkTextureLODsDownloader$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkErrorMacro","getRemoteFileSize","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","size","getResponseHeader","console","log","send","vtkTextureLODsDownloader","publicAPI","model","classHierarchy","push","internal","downloadStack","startDownloads","texture","files","length","baseUrl","endsWith","forEach","file","concat","downloadNextTexture","asyncDownloadNextTexture","setTimeout","waitTimeBetweenDownloads","img","Image","crossOrigin","shift","then","maxTextureLODSize","src","decode","setImage","stepFinishedCallback","catch","encodingError","statusText","waitTimeToStart","DEFAULT_VALUES","undefined","extend","initialValues","arguments","Object","assign","obj","setGet","newInstance","vtkTextureLODsDownloader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Misc/TextureLODsDownloader.js"],"sourcesContent":["import macro from '../../macros.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n\nvar getRemoteFileSize = function getRemoteFileSize(url) {\n  return (// This function only works if the server provides a 'Content-Length'.\n    // For some reason, the 'Content-Length' header does not appear to be\n    // given for CORS HEAD requests on firefox. So this will not work on\n    // firefox if the images do not have the same origin as the html file.\n    // TODO: figure out how to make this work for CORS requests on firefox.\n    new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('HEAD', url, true);\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var size = xhr.getResponseHeader('Content-Length');\n            resolve(size);\n          } else {\n            console.log('Failed to get remote file size of', url);\n            reject(xhr);\n          }\n        }\n      };\n\n      xhr.send();\n    })\n  );\n}; // ----------------------------------------------------------------------------\n// vtkTextureLODsDownloader methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkTextureLODsDownloader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkTextureLODsDownloader');\n  var internal = {\n    downloadStack: []\n  }; //--------------------------------------------------------------------------\n\n  publicAPI.startDownloads = function () {\n    if (!model.texture) {\n      vtkErrorMacro('Texture was not set.');\n      return;\n    }\n\n    if (!model.files || model.files.length === 0) {\n      vtkErrorMacro('No files set.');\n      return;\n    }\n\n    var baseUrl = model.baseUrl;\n\n    if (baseUrl && !baseUrl.endsWith('/')) {\n      baseUrl += '/';\n    } // Create the download stack\n\n\n    internal.downloadStack = [];\n    model.files.forEach(function (file) {\n      return internal.downloadStack.push(\"\".concat(baseUrl).concat(file));\n    });\n\n    var downloadNextTexture = function downloadNextTexture() {\n      if (internal.downloadStack.length === 0) {\n        return;\n      } // For later use\n\n\n      var asyncDownloadNextTexture = function asyncDownloadNextTexture() {\n        setTimeout(downloadNextTexture, model.waitTimeBetweenDownloads);\n      };\n\n      var img = new Image();\n\n      if (model.crossOrigin) {\n        img.crossOrigin = model.crossOrigin;\n      }\n\n      var url = internal.downloadStack.shift();\n      getRemoteFileSize(url).then(function (size) {\n        if (!size || size / 1024 > model.maxTextureLODSize) {\n          if (!size) {\n            console.log('Failed to get image size');\n          } else {\n            console.log('Skipping image', url, ', because it is larger', 'than the max texture size:', model.maxTextureLODSize, 'KiB');\n          }\n\n          asyncDownloadNextTexture();\n          return;\n        }\n\n        img.src = url; // Decode the image asynchronously in an attempt to prevent a\n        // freeze during rendering.\n        // In theory, this should help, but my profiling indicates that\n        // it does not help much... maybe it is running in the main\n        // thread anyways?\n\n        img.decode().then(function () {\n          model.texture.setImage(img);\n\n          if (model.stepFinishedCallback) {\n            model.stepFinishedCallback();\n          }\n\n          asyncDownloadNextTexture();\n        }).catch(function (encodingError) {\n          console.log('Failed to decode image:', img.src);\n          console.log('Error is:', encodingError);\n          asyncDownloadNextTexture();\n        });\n      }).catch(function (xhr) {\n        console.log('Failed to get size of:', url);\n        console.log('status was:', xhr.status);\n        console.log('statusText was:', xhr.statusText);\n        asyncDownloadNextTexture();\n      });\n    };\n\n    setTimeout(downloadNextTexture, model.waitTimeToStart);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  baseUrl: '',\n  files: [],\n  texture: null,\n  crossOrigin: undefined,\n  // The max texture LOD file size in KiB\n  maxTextureLODSize: 50000,\n  stepFinishedCallback: null,\n  // These are in milliseconds\n  waitTimeToStart: 4000,\n  waitTimeBetweenDownloads: 0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model); // Create get-set macros\n\n  macro.setGet(publicAPI, model, ['baseUrl', 'files', 'texture', 'crossOrigin', 'maxTextureLODSize', 'stepFinishedCallback', 'waitTimeToStart', 'waitTimeBetweenDownloads']); // Object specific methods\n\n  vtkTextureLODsDownloader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkTextureLODsDownloader'); // ----------------------------------------------------------------------------\n\nvar vtkTextureLODsDownloader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkTextureLODsDownloader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}