{"ast":null,"code":"import vtkStateBuilder from '../../Core/StateBuilder.js';\nimport { AXES, handleTypeFromName } from './helpers.js';\nfunction build() {\n  // create our state builder\n  var builder = vtkStateBuilder.createBuilder(); // add image data description fields\n\n  builder.addField({\n    name: 'indexToWorldT',\n    initialValue: Array(16).fill(0)\n  }).addField({\n    name: 'worldToIndexT',\n    initialValue: Array(16).fill(0)\n  }); // make cropping planes a sub-state so we can listen to it\n  // separately from the rest of the widget state.\n\n  var croppingState = vtkStateBuilder.createBuilder().addField({\n    name: 'planes',\n    // index space\n    initialValue: [0, 1, 0, 1, 0, 1]\n  }).build(); // add cropping planes state to our primary state\n\n  builder.addStateFromInstance({\n    labels: ['croppingPlanes'],\n    name: 'croppingPlanes',\n    instance: croppingState\n  }); // add all handle states\n  // default bounds is [-1, 1] in all dimensions\n\n  for (var i = -1; i < 2; i++) {\n    for (var j = -1; j < 2; j++) {\n      for (var k = -1; k < 2; k++) {\n        // skip center of box\n        if (i !== 0 || j !== 0 || k !== 0) {\n          var name = AXES[i + 1] + AXES[j + 1] + AXES[k + 1];\n          var type = handleTypeFromName(name); // since handle states are rendered via vtkSphereHandleRepresentation,\n          // we can dictate the handle origin, size (scale1), color, and visibility.\n\n          builder.addStateFromMixin({\n            labels: ['handles', name, type],\n            mixins: ['name', 'origin', 'color', 'scale1', 'visible', 'manipulator'],\n            name: name,\n            initialValues: {\n              scale1: 30,\n              origin: [i, j, k],\n              visible: true,\n              name: name\n            }\n          });\n        }\n      }\n    }\n  }\n  return builder.build();\n}\nexport { build as default };","map":{"version":3,"names":["vtkStateBuilder","AXES","handleTypeFromName","build","builder","createBuilder","addField","name","initialValue","Array","fill","croppingState","addStateFromInstance","labels","instance","i","j","k","type","addStateFromMixin","mixins","initialValues","scale1","origin","visible","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/ImageCroppingWidget/state.js"],"sourcesContent":["import vtkStateBuilder from '../../Core/StateBuilder.js';\nimport { AXES, handleTypeFromName } from './helpers.js';\n\nfunction build() {\n  // create our state builder\n  var builder = vtkStateBuilder.createBuilder(); // add image data description fields\n\n  builder.addField({\n    name: 'indexToWorldT',\n    initialValue: Array(16).fill(0)\n  }).addField({\n    name: 'worldToIndexT',\n    initialValue: Array(16).fill(0)\n  }); // make cropping planes a sub-state so we can listen to it\n  // separately from the rest of the widget state.\n\n  var croppingState = vtkStateBuilder.createBuilder().addField({\n    name: 'planes',\n    // index space\n    initialValue: [0, 1, 0, 1, 0, 1]\n  }).build(); // add cropping planes state to our primary state\n\n  builder.addStateFromInstance({\n    labels: ['croppingPlanes'],\n    name: 'croppingPlanes',\n    instance: croppingState\n  }); // add all handle states\n  // default bounds is [-1, 1] in all dimensions\n\n  for (var i = -1; i < 2; i++) {\n    for (var j = -1; j < 2; j++) {\n      for (var k = -1; k < 2; k++) {\n        // skip center of box\n        if (i !== 0 || j !== 0 || k !== 0) {\n          var name = AXES[i + 1] + AXES[j + 1] + AXES[k + 1];\n          var type = handleTypeFromName(name); // since handle states are rendered via vtkSphereHandleRepresentation,\n          // we can dictate the handle origin, size (scale1), color, and visibility.\n\n          builder.addStateFromMixin({\n            labels: ['handles', name, type],\n            mixins: ['name', 'origin', 'color', 'scale1', 'visible', 'manipulator'],\n            name: name,\n            initialValues: {\n              scale1: 30,\n              origin: [i, j, k],\n              visible: true,\n              name: name\n            }\n          });\n        }\n      }\n    }\n  }\n\n  return builder.build();\n}\n\nexport { build as default };\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,4BAA4B;AACxD,SAASC,IAAI,EAAEC,kBAAkB,QAAQ,cAAc;AAEvD,SAASC,KAAKA,CAAA,EAAG;EACf;EACA,IAAIC,OAAO,GAAGJ,eAAe,CAACK,aAAa,CAAC,CAAC,CAAC,CAAC;;EAE/CD,OAAO,CAACE,QAAQ,CAAC;IACfC,IAAI,EAAE,eAAe;IACrBC,YAAY,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,CAACJ,QAAQ,CAAC;IACVC,IAAI,EAAE,eAAe;IACrBC,YAAY,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,IAAIC,aAAa,GAAGX,eAAe,CAACK,aAAa,CAAC,CAAC,CAACC,QAAQ,CAAC;IAC3DC,IAAI,EAAE,QAAQ;IACd;IACAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;EACjC,CAAC,CAAC,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEZC,OAAO,CAACQ,oBAAoB,CAAC;IAC3BC,MAAM,EAAE,CAAC,gBAAgB,CAAC;IAC1BN,IAAI,EAAE,gBAAgB;IACtBO,QAAQ,EAAEH;EACZ,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,KAAK,IAAII,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3B;QACA,IAAIF,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,EAAE;UACjC,IAAIV,IAAI,GAAGN,IAAI,CAACc,CAAC,GAAG,CAAC,CAAC,GAAGd,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGf,IAAI,CAACgB,CAAC,GAAG,CAAC,CAAC;UAClD,IAAIC,IAAI,GAAGhB,kBAAkB,CAACK,IAAI,CAAC,CAAC,CAAC;UACrC;;UAEAH,OAAO,CAACe,iBAAiB,CAAC;YACxBN,MAAM,EAAE,CAAC,SAAS,EAAEN,IAAI,EAAEW,IAAI,CAAC;YAC/BE,MAAM,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC;YACvEb,IAAI,EAAEA,IAAI;YACVc,aAAa,EAAE;cACbC,MAAM,EAAE,EAAE;cACVC,MAAM,EAAE,CAACR,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;cACjBO,OAAO,EAAE,IAAI;cACbjB,IAAI,EAAEA;YACR;UACF,CAAC,CAAC;QACJ;MACF;IACF;EACF;EAEA,OAAOH,OAAO,CAACD,KAAK,CAAC,CAAC;AACxB;AAEA,SAASA,KAAK,IAAIsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}