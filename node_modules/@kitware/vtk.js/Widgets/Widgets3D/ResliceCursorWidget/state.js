import _defineProperty from '@babel/runtime/helpers/defineProperty';
import vtkStateBuilder from '../../Core/StateBuilder.js';
import { planeNameToViewType, ScrollingMethods, planeNames } from './Constants.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var defaultPlanes = {
  X: {
    normal: [1, 0, 0],
    viewUp: [0, 0, 1],
    color3: [255, 0, 0]
  },
  Y: {
    normal: [0, -1, 0],
    viewUp: [0, 0, 1],
    color3: [0, 255, 0]
  },
  Z: {
    normal: [0, 0, -1],
    viewUp: [0, -1, 0],
    color3: [0, 0, 255]
  }
};
var viewsColor3 = {
  X: [255, 0, 0],
  // red
  Y: [0, 255, 0],
  // green
  Z: [0, 0, 255] // blue

};
function generateState() {
  var planes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : planeNames;
  var state = vtkStateBuilder.createBuilder().addField({
    name: 'center',
    initialValue: [0, 0, 0]
  }).addField({
    name: 'image',
    initialValue: null
  }).addField({
    name: 'activeViewType',
    initialValue: null
  }).addField({
    name: 'planes',
    initialValue: planes.reduce(function (res, planeName) {
      return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, planeNameToViewType[planeName], {
        normal: defaultPlanes[planeName].normal,
        viewUp: defaultPlanes[planeName].viewUp
      }));
    }, {})
  }).addField({
    name: 'scrollingMethod',
    initialValue: ScrollingMethods.MIDDLE_MOUSE_BUTTON
  }).addField({
    name: 'cameraOffsets',
    initialValue: {}
  }).addField({
    name: 'viewUpFromViewType',
    initialValue: {}
  }).addStateFromMixin({
    labels: ['handles', 'sphere', 'center'],
    mixins: ['origin', 'color3', 'scale1', 'visible', 'manipulator'],
    name: 'centerHandle',
    initialValues: {
      scale1: 30,
      color3: [255, 255, 255]
    }
  });
  planes.reduce(function (viewState, view) {
    return planes.filter(function (v) {
      return v !== view;
    }).reduce(function (axisState, axis) {
      // Line handle
      axisState.addStateFromMixin({
        labels: ['handles', 'line', "lineIn".concat(view), "".concat(axis, "in").concat(view)],
        mixins: ['origin', 'color3', 'scale3', // scale3[2] will be automatically overwritten
        'orientation', 'visible', 'manipulator'],
        name: "axis".concat(axis, "in").concat(view),
        initialValues: {
          scale3: [4, 4, 4],
          color3: viewsColor3[axis]
        }
      }); // Rotation handle

      for (var rotationHandle = 0; rotationHandle < 2; ++rotationHandle) {
        axisState.addStateFromMixin({
          labels: ['handles', 'sphere', 'rotation', "rotationIn".concat(view), "".concat(axis, "in").concat(view), "point".concat(rotationHandle)],
          mixins: ['origin', 'color3', 'scale1', 'visible', 'manipulator'],
          name: "rotationHandle".concat(axis, "in").concat(view).concat(rotationHandle),
          initialValues: {
            scale1: 30,
            color3: viewsColor3[axis]
          }
        });
      }

      return axisState;
    }, viewState);
  }, state);
  return state.build();
}

export { generateState as default };
