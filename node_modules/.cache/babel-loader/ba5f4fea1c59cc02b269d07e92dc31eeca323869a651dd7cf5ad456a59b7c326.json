{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport macro from '../../macros.js';\nimport vtkMolecule from '../../Common/DataModel/Molecule.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport { A as ATOMS } from '../../Utilities/XMLConverter/chemistry-mapper/elements.json.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkPDBReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPDBReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPDBReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n  function fetchPDB(url, option) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, option);\n  } // Set DataSet url\n\n  publicAPI.setUrl = function (url, option) {\n    if (url.indexOf('.pdb') === -1) {\n      model.baseURL = url;\n      model.url = \"\".concat(url); // `${url}/index.pdb`;\n    } else {\n      model.url = url; // Remove the file in the URL\n\n      var path = url.split('/');\n      path.pop();\n      model.baseURL = path.join('/');\n    } // Fetch metadata\n\n    return publicAPI.loadData(option);\n  }; // Fetch the actual data arrays\n\n  publicAPI.loadData = function (option) {\n    return fetchPDB(model.url, option).then(publicAPI.parseAsText);\n  };\n  publicAPI.parseAsText = function (txt) {\n    model.pdb = txt;\n    model.molecule = [];\n    model.molecule = model.pdb.split('\\n');\n    publicAPI.modified();\n    return true;\n  };\n  publicAPI.requestData = function (inData, outData) {\n    var moleculedata = vtkMolecule.newInstance();\n    if (model.molecule) {\n      var jSize = model.molecule.length; // atom position\n\n      var pointValues = []; // atomicNumber\n\n      var atomicNumber = [];\n      model.numberOfAtoms = 0;\n      var j = 0;\n      while (j < jSize && model.molecule[j] !== 'END') {\n        var iSize = model.molecule[j].length;\n        var linebuf = model.molecule[j];\n        var command = linebuf.substr(0, 6).replace(/\\s+/g, '');\n        command.toUpperCase(); // Parse lines\n\n        if (command === 'ATOM' || command === 'HETATM') {\n          var dum1 = linebuf.substr(12, 4).replace(/\\s+/g, ''); // const dum2 = (linebuf.substr(17, 3)).replace(/\\s+/g, '');\n          // const chain = (linebuf.substr(21, 1)).replace(/\\s+/g, '');\n          // const resi = ((linebuf.substr(22, 8)).replace(/\\s+/g, '')).replace(/\\D/g, '');\n\n          var x = linebuf.substr(30, 8).replace(/\\s+/g, '');\n          var y = linebuf.substr(38, 8).replace(/\\s+/g, '');\n          var z = linebuf.substr(46, 8).replace(/\\s+/g, '');\n          var elem = '';\n          if (iSize >= 78) {\n            elem = linebuf.substr(76, 2).replace(/\\s+/g, '');\n          }\n          if (elem === '') {\n            // if element symbol was not specified, just use the \"Atom name\".\n            elem = dum1.substr(0, 2).replace(/\\d/g, '');\n          } // fill polydata\n          // atoms position\n\n          pointValues.push(x);\n          pointValues.push(y);\n          pointValues.push(z); // fetch data from the element database elements.json\n\n          var _ATOMS$elem = _slicedToArray(ATOMS[elem], 1),\n            atomicNumberData = _ATOMS$elem[0]; // atoms atomicNumber\n\n          atomicNumber.push(atomicNumberData); // residue.push(resi);\n          // chain.push(chain);\n          // atomType.push(elem);\n          // atomTypeStrings.push(dum1);\n          // isHetatm.push(command === 'HETATM');\n\n          model.numberOfAtoms++;\n        } // if atom or hetatm\n\n        /*\n        else if (command === 'SHEET') {\n          const startChain = (linebuf.substr(21,1)).replace(/\\s+/g, '');\n          const startResi = (linebuf.substr(22,4)).replace(/\\s+/g, '').replace(/\\D/g, '');\n          const endChain = (linebuf.substr(32,1)).replace(/\\s+/g, '');\n          const endResi = (linebuf.substr(33,4)).replace(/\\s+/g, '').replace(/\\D/g, '');;\n          const tuple = { startChain, startResi, endChain, endResi };\n          sheets.push(tuple);\n        }\n        else if (command === 'HELIX') {\n          const startChain = (linebuf.substr(19,2)).replace(/\\s+/g, '');\n          const startResi = (linebuf.substr(21,4)).replace(/\\s+/g, '').replace(/\\D/g, '');;\n          const endChain = (linebuf.substr(31,2)).replace(/\\s+/g, '');\n          const endResi = (linebuf.substr(33,4)).replace(/\\s+/g, '').replace(/\\D/g, '');;\n          const tuple = { startChain, startResi, endChain, endResi };\n          helix.push(tuple);\n        }\n        */\n\n        j++;\n      } // lines loop (j)\n      // fill molecule class\n\n      moleculedata.getAtoms().elements = {};\n      moleculedata.getAtoms().elements.number = Int8Array.from(atomicNumber);\n      moleculedata.getAtoms().coords = {};\n      moleculedata.getAtoms().coords['3d'] = Float32Array.from(pointValues);\n    } // if model.molecule\n\n    model.output[0] = moleculedata;\n  }; // return Busy state\n\n  publicAPI.isBusy = function () {\n    return !!model.requestCount;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  numberOfAtoms: 0,\n  requestCount: 0 // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL', 'numberOfAtoms', 'requestCount']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy'); // Object methods\n\n  vtkPDBReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPDBReader'); // ----------------------------------------------------------------------------\n\nvar vtkPDBReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkPDBReader$1 as default, extend, newInstance };","map":{"version":3,"names":["_slicedToArray","macro","vtkMolecule","DataAccessHelper","A","ATOMS","vtkPDBReader","publicAPI","model","classHierarchy","push","dataAccessHelper","get","fetchPDB","url","option","fetchText","setUrl","indexOf","baseURL","concat","path","split","pop","join","loadData","then","parseAsText","txt","pdb","molecule","modified","requestData","inData","outData","moleculedata","newInstance","jSize","length","pointValues","atomicNumber","numberOfAtoms","j","iSize","linebuf","command","substr","replace","toUpperCase","dum1","x","y","z","elem","_ATOMS$elem","atomicNumberData","getAtoms","elements","number","Int8Array","from","coords","Float32Array","output","isBusy","requestCount","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","setGet","algo","event","vtkPDBReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Misc/PDBReader.js"],"sourcesContent":["import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport macro from '../../macros.js';\nimport vtkMolecule from '../../Common/DataModel/Molecule.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport { A as ATOMS } from '../../Utilities/XMLConverter/chemistry-mapper/elements.json.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkPDBReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkPDBReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkPDBReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n\n  function fetchPDB(url, option) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, option);\n  } // Set DataSet url\n\n\n  publicAPI.setUrl = function (url, option) {\n    if (url.indexOf('.pdb') === -1) {\n      model.baseURL = url;\n      model.url = \"\".concat(url); // `${url}/index.pdb`;\n    } else {\n      model.url = url; // Remove the file in the URL\n\n      var path = url.split('/');\n      path.pop();\n      model.baseURL = path.join('/');\n    } // Fetch metadata\n\n\n    return publicAPI.loadData(option);\n  }; // Fetch the actual data arrays\n\n\n  publicAPI.loadData = function (option) {\n    return fetchPDB(model.url, option).then(publicAPI.parseAsText);\n  };\n\n  publicAPI.parseAsText = function (txt) {\n    model.pdb = txt;\n    model.molecule = [];\n    model.molecule = model.pdb.split('\\n');\n    publicAPI.modified();\n    return true;\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    var moleculedata = vtkMolecule.newInstance();\n\n    if (model.molecule) {\n      var jSize = model.molecule.length; // atom position\n\n      var pointValues = []; // atomicNumber\n\n      var atomicNumber = [];\n      model.numberOfAtoms = 0;\n      var j = 0;\n\n      while (j < jSize && model.molecule[j] !== 'END') {\n        var iSize = model.molecule[j].length;\n        var linebuf = model.molecule[j];\n        var command = linebuf.substr(0, 6).replace(/\\s+/g, '');\n        command.toUpperCase(); // Parse lines\n\n        if (command === 'ATOM' || command === 'HETATM') {\n          var dum1 = linebuf.substr(12, 4).replace(/\\s+/g, ''); // const dum2 = (linebuf.substr(17, 3)).replace(/\\s+/g, '');\n          // const chain = (linebuf.substr(21, 1)).replace(/\\s+/g, '');\n          // const resi = ((linebuf.substr(22, 8)).replace(/\\s+/g, '')).replace(/\\D/g, '');\n\n          var x = linebuf.substr(30, 8).replace(/\\s+/g, '');\n          var y = linebuf.substr(38, 8).replace(/\\s+/g, '');\n          var z = linebuf.substr(46, 8).replace(/\\s+/g, '');\n          var elem = '';\n\n          if (iSize >= 78) {\n            elem = linebuf.substr(76, 2).replace(/\\s+/g, '');\n          }\n\n          if (elem === '') {\n            // if element symbol was not specified, just use the \"Atom name\".\n            elem = dum1.substr(0, 2).replace(/\\d/g, '');\n          } // fill polydata\n          // atoms position\n\n\n          pointValues.push(x);\n          pointValues.push(y);\n          pointValues.push(z); // fetch data from the element database elements.json\n\n          var _ATOMS$elem = _slicedToArray(ATOMS[elem], 1),\n              atomicNumberData = _ATOMS$elem[0]; // atoms atomicNumber\n\n\n          atomicNumber.push(atomicNumberData); // residue.push(resi);\n          // chain.push(chain);\n          // atomType.push(elem);\n          // atomTypeStrings.push(dum1);\n          // isHetatm.push(command === 'HETATM');\n\n          model.numberOfAtoms++;\n        } // if atom or hetatm\n\n        /*\n        else if (command === 'SHEET') {\n          const startChain = (linebuf.substr(21,1)).replace(/\\s+/g, '');\n          const startResi = (linebuf.substr(22,4)).replace(/\\s+/g, '').replace(/\\D/g, '');\n          const endChain = (linebuf.substr(32,1)).replace(/\\s+/g, '');\n          const endResi = (linebuf.substr(33,4)).replace(/\\s+/g, '').replace(/\\D/g, '');;\n          const tuple = { startChain, startResi, endChain, endResi };\n          sheets.push(tuple);\n        }\n        else if (command === 'HELIX') {\n          const startChain = (linebuf.substr(19,2)).replace(/\\s+/g, '');\n          const startResi = (linebuf.substr(21,4)).replace(/\\s+/g, '').replace(/\\D/g, '');;\n          const endChain = (linebuf.substr(31,2)).replace(/\\s+/g, '');\n          const endResi = (linebuf.substr(33,4)).replace(/\\s+/g, '').replace(/\\D/g, '');;\n          const tuple = { startChain, startResi, endChain, endResi };\n          helix.push(tuple);\n        }\n        */\n\n\n        j++;\n      } // lines loop (j)\n      // fill molecule class\n\n\n      moleculedata.getAtoms().elements = {};\n      moleculedata.getAtoms().elements.number = Int8Array.from(atomicNumber);\n      moleculedata.getAtoms().coords = {};\n      moleculedata.getAtoms().coords['3d'] = Float32Array.from(pointValues);\n    } // if model.molecule\n\n\n    model.output[0] = moleculedata;\n  }; // return Busy state\n\n\n  publicAPI.isBusy = function () {\n    return !!model.requestCount;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  numberOfAtoms: 0,\n  requestCount: 0 // baseURL: null,\n  // dataAccessHelper: null,\n  // url: null,\n\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url', 'baseURL', 'numberOfAtoms', 'requestCount']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy'); // Object methods\n\n  vtkPDBReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPDBReader'); // ----------------------------------------------------------------------------\n\nvar vtkPDBReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkPDBReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}