{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkAbstractWidgetFactory from '../Core/AbstractWidgetFactory.js';\nimport vtkPlane from '../../Common/DataModel/Plane.js';\nimport vtkPlaneSource from '../../Filters/Sources/PlaneSource.js';\nimport vtkPlanePointManipulator from '../Manipulators/PlaneManipulator.js';\nimport vtkLineHandleRepresentation from '../Representations/LineHandleRepresentation.js';\nimport vtkSphereHandleRepresentation from '../Representations/SphereHandleRepresentation.js';\nimport { e as distance2BetweenPoints, m as multiplyAccumulate, s as subtract, l as normalize, w as multiplyScalar, k as add } from '../../Common/Core/Math/index.js';\nimport widgetBehavior from './ResliceCursorWidget/behavior.js';\nimport generateState from './ResliceCursorWidget/state.js';\nimport { updateState, transformPlane, boundPlane } from './ResliceCursorWidget/helpers.js';\nimport { viewTypeToPlaneName } from './ResliceCursorWidget/Constants.js';\nimport { ViewTypes } from '../Core/WidgetManager/Constants.js';\nimport { mat4 } from 'gl-matrix';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar VTK_INT_MAX = 2147483647;\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// Factory\n// ----------------------------------------------------------------------------\n\nfunction vtkResliceCursorWidget(publicAPI, model) {\n  model.classHierarchy.push('vtkResliceCursorWidget');\n  model.methodsToLink = ['scaleInPixels']; // --------------------------------------------------------------------------\n  // Private methods\n  // --------------------------------------------------------------------------\n\n  /**\n   * Compute the origin of the reslice plane prior to transformations\n   * It does not take into account the current view normal. (always axis aligned)\n   * @param {*} viewType axial, coronal or sagittal\n   */\n\n  function computeReslicePlaneOrigin(viewType) {\n    var bounds = model.widgetState.getImage().getBounds();\n    var center = publicAPI.getWidgetState().getCenter();\n    var imageCenter = model.widgetState.getImage().getCenter(); // Offset based on the center of the image and how far from it the\n    // reslice cursor is. This allows us to capture the whole image even\n    // if we resliced in awkward places.\n\n    var offset = [];\n    for (var i = 0; i < 3; i++) {\n      offset[i] = -Math.abs(center[i] - imageCenter[i]);\n      offset[i] *= 2; // give us room\n    } // Now set the size of the plane based on the location of the cursor so as to\n    // at least completely cover the viewed region\n\n    var planeSource = vtkPlaneSource.newInstance();\n    if (viewType === ViewTypes.XZ_PLANE) {\n      planeSource.setOrigin(bounds[0] + offset[0], center[1], bounds[4] + offset[2]);\n      planeSource.setPoint1(bounds[1] - offset[0], center[1], bounds[4] + offset[2]);\n      planeSource.setPoint2(bounds[0] + offset[0], center[1], bounds[5] - offset[2]);\n    } else if (viewType === ViewTypes.XY_PLANE) {\n      planeSource.setOrigin(bounds[0] + offset[0], bounds[2] + offset[1], center[2]);\n      planeSource.setPoint1(bounds[1] - offset[0], bounds[2] + offset[1], center[2]);\n      planeSource.setPoint2(bounds[0] + offset[0], bounds[3] - offset[1], center[2]);\n    } else if (viewType === ViewTypes.YZ_PLANE) {\n      planeSource.setOrigin(center[0], bounds[2] + offset[1], bounds[4] + offset[2]);\n      planeSource.setPoint1(center[0], bounds[3] - offset[1], bounds[4] + offset[2]);\n      planeSource.setPoint2(center[0], bounds[2] + offset[1], bounds[5] - offset[2]);\n    }\n    return planeSource;\n  }\n  /**\n   * Compute the offset between display reslice cursor position and\n   * display focal point position\n   * This will be used to keep the same offset between reslice cursor\n   * center and focal point when needed.\n   */\n\n  function computeFocalPointOffsetFromResliceCursorCenter(viewType, renderer) {\n    var worldFocalPoint = renderer.getActiveCamera().getFocalPoint();\n    var worldResliceCenter = model.widgetState.getCenter();\n    var view = renderer.getRenderWindow().getViews()[0];\n    var dims = view.getViewportSize(renderer);\n    var aspect = dims[0] / dims[1];\n    var displayFocalPoint = renderer.worldToNormalizedDisplay.apply(renderer, _toConsumableArray(worldFocalPoint).concat([aspect]));\n    var displayResliceCenter = renderer.worldToNormalizedDisplay.apply(renderer, _toConsumableArray(worldResliceCenter).concat([aspect]));\n    var newOffset = subtract(displayFocalPoint, displayResliceCenter, [0, 0, 0]);\n    var cameraOffsets = model.widgetState.getCameraOffsets();\n    cameraOffsets[viewType] = newOffset;\n    model.widgetState.setCameraOffsets(cameraOffsets);\n  }\n  function updateCamera(renderer, normal, viewType, resetFocalPoint, keepCenterFocalDistance) {\n    // When the reslice plane is changed, update the camera to look at the\n    // normal to the reslice plane.\n    var focalPoint = renderer.getActiveCamera().getFocalPoint();\n    var distance = renderer.getActiveCamera().getDistance();\n    var estimatedCameraPosition = multiplyAccumulate(focalPoint, normal, distance, [0, 0, 0]);\n    var newFocalPoint = focalPoint;\n    if (resetFocalPoint) {\n      // intersect with the plane to get updated focal point\n      var intersection = vtkPlane.intersectWithLine(focalPoint, estimatedCameraPosition, model.widgetState.getCenter(),\n      // reslice cursor center\n      normal);\n      newFocalPoint = intersection.x;\n    } // Update the estimated focal point so that it will be at the same\n    // distance from the reslice center\n\n    if (keepCenterFocalDistance) {\n      var worldResliceCenter = model.widgetState.getCenter();\n      var view = renderer.getRenderWindow().getViews()[0];\n      var dims = view.getViewportSize(renderer);\n      var aspect = dims[0] / dims[1];\n      var displayResliceCenter = renderer.worldToNormalizedDisplay.apply(renderer, _toConsumableArray(worldResliceCenter).concat([aspect]));\n      var realOffset = model.widgetState.getCameraOffsets()[viewType];\n      var displayFocal = add(displayResliceCenter, realOffset, [0, 0, 0]);\n      var worldFocal = renderer.normalizedDisplayToWorld.apply(renderer, _toConsumableArray(displayFocal).concat([aspect])); // Reproject focal point on slice in order to keep it on the\n      // same plane as the reslice cursor center\n\n      var intersection2 = vtkPlane.intersectWithLine(worldFocal, estimatedCameraPosition, worldResliceCenter, normal);\n      newFocalPoint[0] = intersection2.x[0];\n      newFocalPoint[1] = intersection2.x[1];\n      newFocalPoint[2] = intersection2.x[2];\n    }\n    renderer.getActiveCamera().setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);\n    var newCameraPosition = multiplyAccumulate(newFocalPoint, normal, distance, [0, 0, 0]);\n    renderer.getActiveCamera().setPosition(newCameraPosition[0], newCameraPosition[1], newCameraPosition[2]); // Don't clip away any part of the data.\n    // Renderer may not have yet actor bounds\n\n    var bounds = model.widgetState.getImage().getBounds();\n    if (resetFocalPoint) {\n      renderer.resetCamera(bounds);\n    }\n    renderer.resetCameraClippingRange(bounds);\n  }\n  /**\n   * Convenient function to return the widget for a given viewType\n   * @param {string} viewType\n   * @returns the widget instanced in the given viewType.\n   */\n\n  function findWidgetForViewType(viewType) {\n    return publicAPI.getViewIds().map(function (viewId) {\n      return publicAPI.getWidgetForView({\n        viewId: viewId\n      });\n    }).find(function (widget) {\n      return widget.getViewType() === viewType;\n    });\n  }\n  /**\n   * Convenient function to return the ResliceCursorRepresentation for a given viewType\n   * @param {string} viewType\n   * @returns an array of 3 representations (for line handles, rotation handles, center handle)\n   * or an empty array if the widget has not yet been added to the view type.\n   */\n\n  function findRepresentationsForViewType(viewType) {\n    var widgetForViewType = findWidgetForViewType(viewType);\n    return widgetForViewType ? widgetForViewType.getRepresentations() : [];\n  } // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n  publicAPI.getRepresentationsForViewType = function (viewType) {\n    switch (viewType) {\n      case ViewTypes.XY_PLANE:\n      case ViewTypes.XZ_PLANE:\n      case ViewTypes.YZ_PLANE:\n        return [{\n          builder: vtkLineHandleRepresentation,\n          labels: [\"lineIn\".concat(viewTypeToPlaneName[viewType])],\n          initialValues: {\n            useActiveColor: false,\n            scaleInPixels: model.scaleInPixels\n          }\n        }, {\n          builder: vtkSphereHandleRepresentation,\n          labels: [\"rotationIn\".concat(viewTypeToPlaneName[viewType])],\n          initialValues: {\n            useActiveColor: false,\n            scaleInPixels: model.scaleInPixels\n          }\n        }, {\n          builder: vtkSphereHandleRepresentation,\n          labels: ['center'],\n          initialValues: {\n            useActiveColor: false,\n            scaleInPixels: model.scaleInPixels\n          }\n        }];\n      case ViewTypes.DEFAULT:\n      case ViewTypes.GEOMETRY:\n      case ViewTypes.SLICE:\n      case ViewTypes.VOLUME:\n      default:\n        return [];\n    }\n  };\n  publicAPI.setImage = function (image) {\n    model.widgetState.setImage(image);\n    var center = image.getCenter();\n    model.widgetState.setCenter(center);\n    updateState(model.widgetState, model.scaleInPixels, model.rotationHandlePosition);\n  };\n  publicAPI.setCenter = function (center) {\n    model.widgetState.setCenter(center);\n    updateState(model.widgetState, model.scaleInPixels, model.rotationHandlePosition);\n    publicAPI.modified();\n  }; // --------------------------------------------------------------------------\n  // Methods\n  // --------------------------------------------------------------------------\n\n  publicAPI.updateCameraPoints = function (renderer, viewType, resetFocalPoint, keepCenterFocalDistance, computeFocalPointOffset) {\n    publicAPI.resetCamera(renderer, viewType, resetFocalPoint, keepCenterFocalDistance);\n    if (computeFocalPointOffset) {\n      computeFocalPointOffsetFromResliceCursorCenter(viewType, renderer);\n    }\n  };\n  /**\n   *\n   * @param {*} renderer\n   * @param {*} viewType\n   * @param {*} resetFocalPoint Defines if the focal point is reset to the image center\n   * @param {*} keepCenterFocalDistance Defines if the estimated focal point has to be updated\n   * in order to keep the same distance to the center (according to the computed focal point\n   * shift)\n   */\n\n  publicAPI.resetCamera = function (renderer, viewType, resetFocalPoint, keepCenterFocalDistance) {\n    var _renderer$getActiveCa, _renderer$getActiveCa2;\n    var center = model.widgetState.getImage().getCenter();\n    var focalPoint = renderer.getActiveCamera().getFocalPoint();\n    var position = renderer.getActiveCamera().getPosition(); // Distance is preserved\n\n    var distance = Math.sqrt(distance2BetweenPoints(position, focalPoint));\n    var normal = publicAPI.getPlaneNormalFromViewType(viewType); // ResetFocalPoint will reset focal point to the center of the image\n\n    var estimatedFocalPoint = resetFocalPoint ? center : focalPoint;\n    var estimatedCameraPosition = multiplyAccumulate(estimatedFocalPoint, normal, distance, [0, 0, 0]);\n    (_renderer$getActiveCa = renderer.getActiveCamera()).setFocalPoint.apply(_renderer$getActiveCa, _toConsumableArray(estimatedFocalPoint));\n    (_renderer$getActiveCa2 = renderer.getActiveCamera()).setPosition.apply(_renderer$getActiveCa2, _toConsumableArray(estimatedCameraPosition));\n    renderer.getActiveCamera().setViewUp(model.widgetState.getPlanes()[viewType].viewUp); // Project focalPoint onto image plane and preserve distance\n\n    updateCamera(renderer, normal, viewType, resetFocalPoint, keepCenterFocalDistance);\n  };\n  publicAPI.getPlaneSource = function (viewType) {\n    // Compute original (i.e. before rotation) plane (i.e. origin, p1, p2)\n    // centered on cursor center.\n    var planeSource = computeReslicePlaneOrigin(viewType);\n    var _model$widgetState$ge = model.widgetState.getPlanes()[viewType],\n      normal = _model$widgetState$ge.normal,\n      viewUp = _model$widgetState$ge.viewUp; // Adapt plane orientation in order to fit the correct viewUp\n    // so that the rotations will be more understandable than now.\n\n    transformPlane(planeSource, model.widgetState.getCenter(), normal, viewUp); // Clip to bounds\n\n    var boundedOrigin = _toConsumableArray(planeSource.getOrigin());\n    var boundedP1 = _toConsumableArray(planeSource.getPoint1());\n    var boundedP2 = _toConsumableArray(planeSource.getPoint2());\n    boundPlane(model.widgetState.getImage().getBounds(), boundedOrigin, boundedP1, boundedP2);\n    planeSource.setOrigin.apply(planeSource, _toConsumableArray(boundedOrigin));\n    planeSource.setPoint1.apply(planeSource, _toConsumableArray(boundedP1));\n    planeSource.setPoint2.apply(planeSource, _toConsumableArray(boundedP2));\n    return planeSource;\n  };\n  publicAPI.getResliceAxes = function (viewType) {\n    // Compute original (i.e. before rotation) plane (i.e. origin, p1, p2)\n    // centered on cursor center.\n    var planeSource = publicAPI.getPlaneSource(viewType); // TBD: use normal from planeSource ?\n\n    var normal = model.widgetState.getPlanes()[viewType].normal;\n    var planeOrigin = planeSource.getOrigin();\n    var p1 = planeSource.getPoint1();\n    var planeAxis1 = [];\n    subtract(p1, planeOrigin, planeAxis1);\n    normalize(planeAxis1);\n    var p2 = planeSource.getPoint2();\n    var planeAxis2 = [];\n    subtract(p2, planeOrigin, planeAxis2);\n    normalize(planeAxis2);\n    var newResliceAxes = mat4.identity(new Float64Array(16));\n    for (var i = 0; i < 3; i++) {\n      newResliceAxes[i] = planeAxis1[i];\n      newResliceAxes[4 + i] = planeAxis2[i];\n      newResliceAxes[8 + i] = normal[i];\n      newResliceAxes[12 + i] = planeOrigin[i];\n    }\n    return newResliceAxes;\n  };\n  publicAPI.updateReslicePlane = function (imageReslice, viewType) {\n    // Calculate appropriate pixel spacing for the reslicing\n    var spacing = model.widgetState.getImage().getSpacing();\n    var planeSource = publicAPI.getPlaneSource(viewType);\n    var newResliceAxes = publicAPI.getResliceAxes(viewType);\n    var planeOrigin = planeSource.getOrigin();\n    var p1 = planeSource.getPoint1();\n    var planeAxis1 = subtract(p1, planeOrigin, []);\n    var planeSizeX = normalize(planeAxis1);\n    var p2 = planeSource.getPoint2();\n    var planeAxis2 = subtract(p2, planeOrigin, []);\n    var planeSizeY = normalize(planeAxis2);\n    var spacingX = Math.abs(planeAxis1[0] * spacing[0]) + Math.abs(planeAxis1[1] * spacing[1]) + Math.abs(planeAxis1[2] * spacing[2]);\n    var spacingY = Math.abs(planeAxis2[0] * spacing[0]) + Math.abs(planeAxis2[1] * spacing[1]) + Math.abs(planeAxis2[2] * spacing[2]); // Compute a new set of resliced extents\n\n    var extentX = 0;\n    var extentY = 0; // Pad extent up to a power of two for efficient texture mapping\n    // make sure we're working with valid values\n\n    var realExtentX = spacingX === 0 ? Number.MAX_SAFE_INTEGER : planeSizeX / spacingX; // Sanity check the input data:\n    // * if realExtentX is too large, extentX will wrap\n    // * if spacingX is 0, things will blow up.\n\n    var value = VTK_INT_MAX >> 1; // eslint-disable-line no-bitwise\n\n    if (realExtentX > value) {\n      vtkErrorMacro('Invalid X extent: ', realExtentX, ' on view type : ', viewType);\n      extentX = 0;\n    } else {\n      extentX = 1;\n      while (extentX < realExtentX) {\n        extentX <<= 1; // eslint-disable-line no-bitwise\n      }\n    } // make sure extentY doesn't wrap during padding\n\n    var realExtentY = spacingY === 0 ? Number.MAX_SAFE_INTEGER : planeSizeY / spacingY;\n    if (realExtentY > value) {\n      vtkErrorMacro('Invalid Y extent:', realExtentY, ' on view type : ', viewType);\n      extentY = 0;\n    } else {\n      extentY = 1;\n      while (extentY < realExtentY) {\n        extentY <<= 1; // eslint-disable-line no-bitwise\n      }\n    }\n\n    var outputSpacingX = extentX === 0 ? 1.0 : planeSizeX / extentX;\n    var outputSpacingY = extentY === 0 ? 1.0 : planeSizeY / extentY;\n    var modified = imageReslice.setResliceAxes(newResliceAxes);\n    modified = imageReslice.setOutputSpacing([outputSpacingX, outputSpacingY, 1]) || modified;\n    modified = imageReslice.setOutputOrigin([0.5 * outputSpacingX, 0.5 * outputSpacingY, 0]) || modified;\n    modified = imageReslice.setOutputExtent([0, extentX - 1, 0, extentY - 1, 0, 0]) || modified;\n    return modified;\n  };\n  /**\n   * Returns a plane source with origin at cursor center and\n   * normal from the view.\n   * @param {ViewType} type: Axial, Coronal or Sagittal\n   */\n\n  publicAPI.getPlaneSourceFromViewType = function (type) {\n    var planeSource = vtkPlaneSource.newInstance();\n    var origin = publicAPI.getWidgetState().getCenter();\n    var planeNormal = publicAPI.getPlaneNormalFromViewType(type);\n    planeSource.setNormal(planeNormal);\n    planeSource.setOrigin(origin);\n    return planeSource;\n  };\n  publicAPI.getPlaneNormalFromViewType = function (viewType) {\n    return publicAPI.getWidgetState().getPlanes()[viewType].normal;\n  };\n  /**\n   * Returns the normals of the planes that are not viewType.\n   * @param {ViewType} viewType ViewType to extract other normals\n   */\n\n  publicAPI.getOtherPlaneNormals = function (viewType) {\n    return [ViewTypes.YZ_PLANE, ViewTypes.XZ_PLANE, ViewTypes.XY_PLANE].filter(function (vt) {\n      return vt !== viewType;\n    }).map(function (vt) {\n      return publicAPI.getPlaneNormalFromViewType(vt);\n    });\n  };\n  /**\n   * Return the reslice cursor matrix built as such: [YZ, XZ, XY, center]\n   */\n\n  publicAPI.getResliceMatrix = function () {\n    var _vtkMatrixBuilder$bui, _vtkMatrixBuilder$bui2;\n    var resliceMatrix = mat4.identity(new Float64Array(16));\n    for (var i = 0; i < 3; i++) {\n      resliceMatrix[4 * i + 0] = publicAPI.getPlaneNormalFromViewType(ViewTypes.YZ_PLANE)[i];\n      resliceMatrix[4 * i + 1] = publicAPI.getPlaneNormalFromViewType(ViewTypes.XZ_PLANE)[i];\n      resliceMatrix[4 * i + 2] = publicAPI.getPlaneNormalFromViewType(ViewTypes.XY_PLANE)[i];\n    }\n    var origin = publicAPI.getWidgetState().getCenter();\n    var m = (_vtkMatrixBuilder$bui = (_vtkMatrixBuilder$bui2 = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui2, _toConsumableArray(origin)).multiply(resliceMatrix)).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(multiplyScalar(_toConsumableArray(origin), -1))).getMatrix();\n    return m;\n  };\n  publicAPI.getDisplayScaleParams = function () {\n    return [ViewTypes.YZ_PLANE, ViewTypes.XZ_PLANE, ViewTypes.XY_PLANE].reduce(function (res, viewType) {\n      var _findRepresentationsF, _findRepresentationsF2;\n      res[viewType] = (_findRepresentationsF = findRepresentationsForViewType(viewType)[0]) === null || _findRepresentationsF === void 0 ? void 0 : (_findRepresentationsF2 = _findRepresentationsF.getDisplayScaleParams) === null || _findRepresentationsF2 === void 0 ? void 0 : _findRepresentationsF2.call(_findRepresentationsF);\n      return res;\n    }, {});\n  };\n  publicAPI.setScaleInPixels = macro.chain(publicAPI.setScaleInPixels, function (scale) {\n    publicAPI.getViewWidgets().forEach(function (w) {\n      return w.setScaleInPixels(scale);\n    });\n    updateState(model.widgetState, model.scaleInPixels, model.rotationHandlePosition);\n  });\n} // ----------------------------------------------------------------------------\n\n/**\n * Initializes the model.\n * @param {*} initialValues optional object of member variables. initialValues.planes is an optional list of axis names (e.g. ['X', 'Y'])\n * @returns the initial model object\n */\n\nvar defaultValues = function defaultValues(initialValues) {\n  return _objectSpread({\n    behavior: widgetBehavior,\n    widgetState: generateState(initialValues.planes),\n    rotationHandlePosition: 0.5,\n    scaleInPixels: true,\n    manipulator: vtkPlanePointManipulator.newInstance()\n  }, initialValues);\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  vtkAbstractWidgetFactory.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['scaleInPixels', 'rotationHandlePosition', 'manipulator']);\n  vtkResliceCursorWidget(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkResliceCursorWidget'); // ----------------------------------------------------------------------------\n\nvar vtkResliceCursorWidget$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkResliceCursorWidget$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","_toConsumableArray","macro","vtkAbstractWidgetFactory","vtkPlane","vtkPlaneSource","vtkPlanePointManipulator","vtkLineHandleRepresentation","vtkSphereHandleRepresentation","e","distance2BetweenPoints","m","multiplyAccumulate","s","subtract","l","normalize","w","multiplyScalar","k","add","widgetBehavior","generateState","updateState","transformPlane","boundPlane","viewTypeToPlaneName","ViewTypes","mat4","vtkMatrixBuilder","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","VTK_INT_MAX","vtkErrorMacro","vtkResliceCursorWidget","publicAPI","model","classHierarchy","methodsToLink","computeReslicePlaneOrigin","viewType","bounds","widgetState","getImage","getBounds","center","getWidgetState","getCenter","imageCenter","offset","Math","abs","planeSource","newInstance","XZ_PLANE","setOrigin","setPoint1","setPoint2","XY_PLANE","YZ_PLANE","computeFocalPointOffsetFromResliceCursorCenter","renderer","worldFocalPoint","getActiveCamera","getFocalPoint","worldResliceCenter","view","getRenderWindow","getViews","dims","getViewportSize","aspect","displayFocalPoint","worldToNormalizedDisplay","concat","displayResliceCenter","newOffset","cameraOffsets","getCameraOffsets","setCameraOffsets","updateCamera","normal","resetFocalPoint","keepCenterFocalDistance","focalPoint","distance","getDistance","estimatedCameraPosition","newFocalPoint","intersection","intersectWithLine","x","realOffset","displayFocal","worldFocal","normalizedDisplayToWorld","intersection2","setFocalPoint","newCameraPosition","setPosition","resetCamera","resetCameraClippingRange","findWidgetForViewType","getViewIds","map","viewId","getWidgetForView","find","widget","getViewType","findRepresentationsForViewType","widgetForViewType","getRepresentations","getRepresentationsForViewType","builder","labels","initialValues","useActiveColor","scaleInPixels","DEFAULT","GEOMETRY","SLICE","VOLUME","setImage","image","setCenter","rotationHandlePosition","modified","updateCameraPoints","computeFocalPointOffset","_renderer$getActiveCa","_renderer$getActiveCa2","position","getPosition","sqrt","getPlaneNormalFromViewType","estimatedFocalPoint","setViewUp","getPlanes","viewUp","getPlaneSource","_model$widgetState$ge","boundedOrigin","getOrigin","boundedP1","getPoint1","boundedP2","getPoint2","getResliceAxes","planeOrigin","p1","planeAxis1","p2","planeAxis2","newResliceAxes","identity","Float64Array","updateReslicePlane","imageReslice","spacing","getSpacing","planeSizeX","planeSizeY","spacingX","spacingY","extentX","extentY","realExtentX","Number","MAX_SAFE_INTEGER","value","realExtentY","outputSpacingX","outputSpacingY","setResliceAxes","setOutputSpacing","setOutputOrigin","setOutputExtent","getPlaneSourceFromViewType","type","origin","planeNormal","setNormal","getOtherPlaneNormals","vt","getResliceMatrix","_vtkMatrixBuilder$bui","_vtkMatrixBuilder$bui2","resliceMatrix","buildFromRadian","translate","multiply","getMatrix","getDisplayScaleParams","reduce","res","_findRepresentationsF","_findRepresentationsF2","call","setScaleInPixels","chain","scale","getViewWidgets","defaultValues","behavior","planes","manipulator","extend","undefined","assign","setGet","vtkResliceCursorWidget$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/ResliceCursorWidget.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkAbstractWidgetFactory from '../Core/AbstractWidgetFactory.js';\nimport vtkPlane from '../../Common/DataModel/Plane.js';\nimport vtkPlaneSource from '../../Filters/Sources/PlaneSource.js';\nimport vtkPlanePointManipulator from '../Manipulators/PlaneManipulator.js';\nimport vtkLineHandleRepresentation from '../Representations/LineHandleRepresentation.js';\nimport vtkSphereHandleRepresentation from '../Representations/SphereHandleRepresentation.js';\nimport { e as distance2BetweenPoints, m as multiplyAccumulate, s as subtract, l as normalize, w as multiplyScalar, k as add } from '../../Common/Core/Math/index.js';\nimport widgetBehavior from './ResliceCursorWidget/behavior.js';\nimport generateState from './ResliceCursorWidget/state.js';\nimport { updateState, transformPlane, boundPlane } from './ResliceCursorWidget/helpers.js';\nimport { viewTypeToPlaneName } from './ResliceCursorWidget/Constants.js';\nimport { ViewTypes } from '../Core/WidgetManager/Constants.js';\nimport { mat4 } from 'gl-matrix';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar VTK_INT_MAX = 2147483647;\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// Factory\n// ----------------------------------------------------------------------------\n\nfunction vtkResliceCursorWidget(publicAPI, model) {\n  model.classHierarchy.push('vtkResliceCursorWidget');\n  model.methodsToLink = ['scaleInPixels']; // --------------------------------------------------------------------------\n  // Private methods\n  // --------------------------------------------------------------------------\n\n  /**\n   * Compute the origin of the reslice plane prior to transformations\n   * It does not take into account the current view normal. (always axis aligned)\n   * @param {*} viewType axial, coronal or sagittal\n   */\n\n  function computeReslicePlaneOrigin(viewType) {\n    var bounds = model.widgetState.getImage().getBounds();\n    var center = publicAPI.getWidgetState().getCenter();\n    var imageCenter = model.widgetState.getImage().getCenter(); // Offset based on the center of the image and how far from it the\n    // reslice cursor is. This allows us to capture the whole image even\n    // if we resliced in awkward places.\n\n    var offset = [];\n\n    for (var i = 0; i < 3; i++) {\n      offset[i] = -Math.abs(center[i] - imageCenter[i]);\n      offset[i] *= 2; // give us room\n    } // Now set the size of the plane based on the location of the cursor so as to\n    // at least completely cover the viewed region\n\n\n    var planeSource = vtkPlaneSource.newInstance();\n\n    if (viewType === ViewTypes.XZ_PLANE) {\n      planeSource.setOrigin(bounds[0] + offset[0], center[1], bounds[4] + offset[2]);\n      planeSource.setPoint1(bounds[1] - offset[0], center[1], bounds[4] + offset[2]);\n      planeSource.setPoint2(bounds[0] + offset[0], center[1], bounds[5] - offset[2]);\n    } else if (viewType === ViewTypes.XY_PLANE) {\n      planeSource.setOrigin(bounds[0] + offset[0], bounds[2] + offset[1], center[2]);\n      planeSource.setPoint1(bounds[1] - offset[0], bounds[2] + offset[1], center[2]);\n      planeSource.setPoint2(bounds[0] + offset[0], bounds[3] - offset[1], center[2]);\n    } else if (viewType === ViewTypes.YZ_PLANE) {\n      planeSource.setOrigin(center[0], bounds[2] + offset[1], bounds[4] + offset[2]);\n      planeSource.setPoint1(center[0], bounds[3] - offset[1], bounds[4] + offset[2]);\n      planeSource.setPoint2(center[0], bounds[2] + offset[1], bounds[5] - offset[2]);\n    }\n\n    return planeSource;\n  }\n  /**\n   * Compute the offset between display reslice cursor position and\n   * display focal point position\n   * This will be used to keep the same offset between reslice cursor\n   * center and focal point when needed.\n   */\n\n\n  function computeFocalPointOffsetFromResliceCursorCenter(viewType, renderer) {\n    var worldFocalPoint = renderer.getActiveCamera().getFocalPoint();\n    var worldResliceCenter = model.widgetState.getCenter();\n    var view = renderer.getRenderWindow().getViews()[0];\n    var dims = view.getViewportSize(renderer);\n    var aspect = dims[0] / dims[1];\n    var displayFocalPoint = renderer.worldToNormalizedDisplay.apply(renderer, _toConsumableArray(worldFocalPoint).concat([aspect]));\n    var displayResliceCenter = renderer.worldToNormalizedDisplay.apply(renderer, _toConsumableArray(worldResliceCenter).concat([aspect]));\n    var newOffset = subtract(displayFocalPoint, displayResliceCenter, [0, 0, 0]);\n    var cameraOffsets = model.widgetState.getCameraOffsets();\n    cameraOffsets[viewType] = newOffset;\n    model.widgetState.setCameraOffsets(cameraOffsets);\n  }\n\n  function updateCamera(renderer, normal, viewType, resetFocalPoint, keepCenterFocalDistance) {\n    // When the reslice plane is changed, update the camera to look at the\n    // normal to the reslice plane.\n    var focalPoint = renderer.getActiveCamera().getFocalPoint();\n    var distance = renderer.getActiveCamera().getDistance();\n    var estimatedCameraPosition = multiplyAccumulate(focalPoint, normal, distance, [0, 0, 0]);\n    var newFocalPoint = focalPoint;\n\n    if (resetFocalPoint) {\n      // intersect with the plane to get updated focal point\n      var intersection = vtkPlane.intersectWithLine(focalPoint, estimatedCameraPosition, model.widgetState.getCenter(), // reslice cursor center\n      normal);\n      newFocalPoint = intersection.x;\n    } // Update the estimated focal point so that it will be at the same\n    // distance from the reslice center\n\n\n    if (keepCenterFocalDistance) {\n      var worldResliceCenter = model.widgetState.getCenter();\n      var view = renderer.getRenderWindow().getViews()[0];\n      var dims = view.getViewportSize(renderer);\n      var aspect = dims[0] / dims[1];\n      var displayResliceCenter = renderer.worldToNormalizedDisplay.apply(renderer, _toConsumableArray(worldResliceCenter).concat([aspect]));\n      var realOffset = model.widgetState.getCameraOffsets()[viewType];\n      var displayFocal = add(displayResliceCenter, realOffset, [0, 0, 0]);\n      var worldFocal = renderer.normalizedDisplayToWorld.apply(renderer, _toConsumableArray(displayFocal).concat([aspect])); // Reproject focal point on slice in order to keep it on the\n      // same plane as the reslice cursor center\n\n      var intersection2 = vtkPlane.intersectWithLine(worldFocal, estimatedCameraPosition, worldResliceCenter, normal);\n      newFocalPoint[0] = intersection2.x[0];\n      newFocalPoint[1] = intersection2.x[1];\n      newFocalPoint[2] = intersection2.x[2];\n    }\n\n    renderer.getActiveCamera().setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);\n    var newCameraPosition = multiplyAccumulate(newFocalPoint, normal, distance, [0, 0, 0]);\n    renderer.getActiveCamera().setPosition(newCameraPosition[0], newCameraPosition[1], newCameraPosition[2]); // Don't clip away any part of the data.\n    // Renderer may not have yet actor bounds\n\n    var bounds = model.widgetState.getImage().getBounds();\n\n    if (resetFocalPoint) {\n      renderer.resetCamera(bounds);\n    }\n\n    renderer.resetCameraClippingRange(bounds);\n  }\n  /**\n   * Convenient function to return the widget for a given viewType\n   * @param {string} viewType\n   * @returns the widget instanced in the given viewType.\n   */\n\n\n  function findWidgetForViewType(viewType) {\n    return publicAPI.getViewIds().map(function (viewId) {\n      return publicAPI.getWidgetForView({\n        viewId: viewId\n      });\n    }).find(function (widget) {\n      return widget.getViewType() === viewType;\n    });\n  }\n  /**\n   * Convenient function to return the ResliceCursorRepresentation for a given viewType\n   * @param {string} viewType\n   * @returns an array of 3 representations (for line handles, rotation handles, center handle)\n   * or an empty array if the widget has not yet been added to the view type.\n   */\n\n\n  function findRepresentationsForViewType(viewType) {\n    var widgetForViewType = findWidgetForViewType(viewType);\n    return widgetForViewType ? widgetForViewType.getRepresentations() : [];\n  } // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.getRepresentationsForViewType = function (viewType) {\n    switch (viewType) {\n      case ViewTypes.XY_PLANE:\n      case ViewTypes.XZ_PLANE:\n      case ViewTypes.YZ_PLANE:\n        return [{\n          builder: vtkLineHandleRepresentation,\n          labels: [\"lineIn\".concat(viewTypeToPlaneName[viewType])],\n          initialValues: {\n            useActiveColor: false,\n            scaleInPixels: model.scaleInPixels\n          }\n        }, {\n          builder: vtkSphereHandleRepresentation,\n          labels: [\"rotationIn\".concat(viewTypeToPlaneName[viewType])],\n          initialValues: {\n            useActiveColor: false,\n            scaleInPixels: model.scaleInPixels\n          }\n        }, {\n          builder: vtkSphereHandleRepresentation,\n          labels: ['center'],\n          initialValues: {\n            useActiveColor: false,\n            scaleInPixels: model.scaleInPixels\n          }\n        }];\n\n      case ViewTypes.DEFAULT:\n      case ViewTypes.GEOMETRY:\n      case ViewTypes.SLICE:\n      case ViewTypes.VOLUME:\n      default:\n        return [];\n    }\n  };\n\n  publicAPI.setImage = function (image) {\n    model.widgetState.setImage(image);\n    var center = image.getCenter();\n    model.widgetState.setCenter(center);\n    updateState(model.widgetState, model.scaleInPixels, model.rotationHandlePosition);\n  };\n\n  publicAPI.setCenter = function (center) {\n    model.widgetState.setCenter(center);\n    updateState(model.widgetState, model.scaleInPixels, model.rotationHandlePosition);\n    publicAPI.modified();\n  }; // --------------------------------------------------------------------------\n  // Methods\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.updateCameraPoints = function (renderer, viewType, resetFocalPoint, keepCenterFocalDistance, computeFocalPointOffset) {\n    publicAPI.resetCamera(renderer, viewType, resetFocalPoint, keepCenterFocalDistance);\n\n    if (computeFocalPointOffset) {\n      computeFocalPointOffsetFromResliceCursorCenter(viewType, renderer);\n    }\n  };\n  /**\n   *\n   * @param {*} renderer\n   * @param {*} viewType\n   * @param {*} resetFocalPoint Defines if the focal point is reset to the image center\n   * @param {*} keepCenterFocalDistance Defines if the estimated focal point has to be updated\n   * in order to keep the same distance to the center (according to the computed focal point\n   * shift)\n   */\n\n\n  publicAPI.resetCamera = function (renderer, viewType, resetFocalPoint, keepCenterFocalDistance) {\n    var _renderer$getActiveCa, _renderer$getActiveCa2;\n\n    var center = model.widgetState.getImage().getCenter();\n    var focalPoint = renderer.getActiveCamera().getFocalPoint();\n    var position = renderer.getActiveCamera().getPosition(); // Distance is preserved\n\n    var distance = Math.sqrt(distance2BetweenPoints(position, focalPoint));\n    var normal = publicAPI.getPlaneNormalFromViewType(viewType); // ResetFocalPoint will reset focal point to the center of the image\n\n    var estimatedFocalPoint = resetFocalPoint ? center : focalPoint;\n    var estimatedCameraPosition = multiplyAccumulate(estimatedFocalPoint, normal, distance, [0, 0, 0]);\n\n    (_renderer$getActiveCa = renderer.getActiveCamera()).setFocalPoint.apply(_renderer$getActiveCa, _toConsumableArray(estimatedFocalPoint));\n\n    (_renderer$getActiveCa2 = renderer.getActiveCamera()).setPosition.apply(_renderer$getActiveCa2, _toConsumableArray(estimatedCameraPosition));\n\n    renderer.getActiveCamera().setViewUp(model.widgetState.getPlanes()[viewType].viewUp); // Project focalPoint onto image plane and preserve distance\n\n    updateCamera(renderer, normal, viewType, resetFocalPoint, keepCenterFocalDistance);\n  };\n\n  publicAPI.getPlaneSource = function (viewType) {\n    // Compute original (i.e. before rotation) plane (i.e. origin, p1, p2)\n    // centered on cursor center.\n    var planeSource = computeReslicePlaneOrigin(viewType);\n    var _model$widgetState$ge = model.widgetState.getPlanes()[viewType],\n        normal = _model$widgetState$ge.normal,\n        viewUp = _model$widgetState$ge.viewUp; // Adapt plane orientation in order to fit the correct viewUp\n    // so that the rotations will be more understandable than now.\n\n    transformPlane(planeSource, model.widgetState.getCenter(), normal, viewUp); // Clip to bounds\n\n    var boundedOrigin = _toConsumableArray(planeSource.getOrigin());\n\n    var boundedP1 = _toConsumableArray(planeSource.getPoint1());\n\n    var boundedP2 = _toConsumableArray(planeSource.getPoint2());\n\n    boundPlane(model.widgetState.getImage().getBounds(), boundedOrigin, boundedP1, boundedP2);\n    planeSource.setOrigin.apply(planeSource, _toConsumableArray(boundedOrigin));\n    planeSource.setPoint1.apply(planeSource, _toConsumableArray(boundedP1));\n    planeSource.setPoint2.apply(planeSource, _toConsumableArray(boundedP2));\n    return planeSource;\n  };\n\n  publicAPI.getResliceAxes = function (viewType) {\n    // Compute original (i.e. before rotation) plane (i.e. origin, p1, p2)\n    // centered on cursor center.\n    var planeSource = publicAPI.getPlaneSource(viewType); // TBD: use normal from planeSource ?\n\n    var normal = model.widgetState.getPlanes()[viewType].normal;\n    var planeOrigin = planeSource.getOrigin();\n    var p1 = planeSource.getPoint1();\n    var planeAxis1 = [];\n    subtract(p1, planeOrigin, planeAxis1);\n    normalize(planeAxis1);\n    var p2 = planeSource.getPoint2();\n    var planeAxis2 = [];\n    subtract(p2, planeOrigin, planeAxis2);\n    normalize(planeAxis2);\n    var newResliceAxes = mat4.identity(new Float64Array(16));\n\n    for (var i = 0; i < 3; i++) {\n      newResliceAxes[i] = planeAxis1[i];\n      newResliceAxes[4 + i] = planeAxis2[i];\n      newResliceAxes[8 + i] = normal[i];\n      newResliceAxes[12 + i] = planeOrigin[i];\n    }\n\n    return newResliceAxes;\n  };\n\n  publicAPI.updateReslicePlane = function (imageReslice, viewType) {\n    // Calculate appropriate pixel spacing for the reslicing\n    var spacing = model.widgetState.getImage().getSpacing();\n    var planeSource = publicAPI.getPlaneSource(viewType);\n    var newResliceAxes = publicAPI.getResliceAxes(viewType);\n    var planeOrigin = planeSource.getOrigin();\n    var p1 = planeSource.getPoint1();\n    var planeAxis1 = subtract(p1, planeOrigin, []);\n    var planeSizeX = normalize(planeAxis1);\n    var p2 = planeSource.getPoint2();\n    var planeAxis2 = subtract(p2, planeOrigin, []);\n    var planeSizeY = normalize(planeAxis2);\n    var spacingX = Math.abs(planeAxis1[0] * spacing[0]) + Math.abs(planeAxis1[1] * spacing[1]) + Math.abs(planeAxis1[2] * spacing[2]);\n    var spacingY = Math.abs(planeAxis2[0] * spacing[0]) + Math.abs(planeAxis2[1] * spacing[1]) + Math.abs(planeAxis2[2] * spacing[2]); // Compute a new set of resliced extents\n\n    var extentX = 0;\n    var extentY = 0; // Pad extent up to a power of two for efficient texture mapping\n    // make sure we're working with valid values\n\n    var realExtentX = spacingX === 0 ? Number.MAX_SAFE_INTEGER : planeSizeX / spacingX; // Sanity check the input data:\n    // * if realExtentX is too large, extentX will wrap\n    // * if spacingX is 0, things will blow up.\n\n    var value = VTK_INT_MAX >> 1; // eslint-disable-line no-bitwise\n\n    if (realExtentX > value) {\n      vtkErrorMacro('Invalid X extent: ', realExtentX, ' on view type : ', viewType);\n      extentX = 0;\n    } else {\n      extentX = 1;\n\n      while (extentX < realExtentX) {\n        extentX <<= 1; // eslint-disable-line no-bitwise\n      }\n    } // make sure extentY doesn't wrap during padding\n\n\n    var realExtentY = spacingY === 0 ? Number.MAX_SAFE_INTEGER : planeSizeY / spacingY;\n\n    if (realExtentY > value) {\n      vtkErrorMacro('Invalid Y extent:', realExtentY, ' on view type : ', viewType);\n      extentY = 0;\n    } else {\n      extentY = 1;\n\n      while (extentY < realExtentY) {\n        extentY <<= 1; // eslint-disable-line no-bitwise\n      }\n    }\n\n    var outputSpacingX = extentX === 0 ? 1.0 : planeSizeX / extentX;\n    var outputSpacingY = extentY === 0 ? 1.0 : planeSizeY / extentY;\n    var modified = imageReslice.setResliceAxes(newResliceAxes);\n    modified = imageReslice.setOutputSpacing([outputSpacingX, outputSpacingY, 1]) || modified;\n    modified = imageReslice.setOutputOrigin([0.5 * outputSpacingX, 0.5 * outputSpacingY, 0]) || modified;\n    modified = imageReslice.setOutputExtent([0, extentX - 1, 0, extentY - 1, 0, 0]) || modified;\n    return modified;\n  };\n  /**\n   * Returns a plane source with origin at cursor center and\n   * normal from the view.\n   * @param {ViewType} type: Axial, Coronal or Sagittal\n   */\n\n\n  publicAPI.getPlaneSourceFromViewType = function (type) {\n    var planeSource = vtkPlaneSource.newInstance();\n    var origin = publicAPI.getWidgetState().getCenter();\n    var planeNormal = publicAPI.getPlaneNormalFromViewType(type);\n    planeSource.setNormal(planeNormal);\n    planeSource.setOrigin(origin);\n    return planeSource;\n  };\n\n  publicAPI.getPlaneNormalFromViewType = function (viewType) {\n    return publicAPI.getWidgetState().getPlanes()[viewType].normal;\n  };\n  /**\n   * Returns the normals of the planes that are not viewType.\n   * @param {ViewType} viewType ViewType to extract other normals\n   */\n\n\n  publicAPI.getOtherPlaneNormals = function (viewType) {\n    return [ViewTypes.YZ_PLANE, ViewTypes.XZ_PLANE, ViewTypes.XY_PLANE].filter(function (vt) {\n      return vt !== viewType;\n    }).map(function (vt) {\n      return publicAPI.getPlaneNormalFromViewType(vt);\n    });\n  };\n  /**\n   * Return the reslice cursor matrix built as such: [YZ, XZ, XY, center]\n   */\n\n\n  publicAPI.getResliceMatrix = function () {\n    var _vtkMatrixBuilder$bui, _vtkMatrixBuilder$bui2;\n\n    var resliceMatrix = mat4.identity(new Float64Array(16));\n\n    for (var i = 0; i < 3; i++) {\n      resliceMatrix[4 * i + 0] = publicAPI.getPlaneNormalFromViewType(ViewTypes.YZ_PLANE)[i];\n      resliceMatrix[4 * i + 1] = publicAPI.getPlaneNormalFromViewType(ViewTypes.XZ_PLANE)[i];\n      resliceMatrix[4 * i + 2] = publicAPI.getPlaneNormalFromViewType(ViewTypes.XY_PLANE)[i];\n    }\n\n    var origin = publicAPI.getWidgetState().getCenter();\n\n    var m = (_vtkMatrixBuilder$bui = (_vtkMatrixBuilder$bui2 = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui2, _toConsumableArray(origin)).multiply(resliceMatrix)).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(multiplyScalar(_toConsumableArray(origin), -1))).getMatrix();\n\n    return m;\n  };\n\n  publicAPI.getDisplayScaleParams = function () {\n    return [ViewTypes.YZ_PLANE, ViewTypes.XZ_PLANE, ViewTypes.XY_PLANE].reduce(function (res, viewType) {\n      var _findRepresentationsF, _findRepresentationsF2;\n\n      res[viewType] = (_findRepresentationsF = findRepresentationsForViewType(viewType)[0]) === null || _findRepresentationsF === void 0 ? void 0 : (_findRepresentationsF2 = _findRepresentationsF.getDisplayScaleParams) === null || _findRepresentationsF2 === void 0 ? void 0 : _findRepresentationsF2.call(_findRepresentationsF);\n      return res;\n    }, {});\n  };\n\n  publicAPI.setScaleInPixels = macro.chain(publicAPI.setScaleInPixels, function (scale) {\n    publicAPI.getViewWidgets().forEach(function (w) {\n      return w.setScaleInPixels(scale);\n    });\n    updateState(model.widgetState, model.scaleInPixels, model.rotationHandlePosition);\n  });\n} // ----------------------------------------------------------------------------\n\n/**\n * Initializes the model.\n * @param {*} initialValues optional object of member variables. initialValues.planes is an optional list of axis names (e.g. ['X', 'Y'])\n * @returns the initial model object\n */\n\n\nvar defaultValues = function defaultValues(initialValues) {\n  return _objectSpread({\n    behavior: widgetBehavior,\n    widgetState: generateState(initialValues.planes),\n    rotationHandlePosition: 0.5,\n    scaleInPixels: true,\n    manipulator: vtkPlanePointManipulator.newInstance()\n  }, initialValues);\n}; // ----------------------------------------------------------------------------\n\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  vtkAbstractWidgetFactory.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['scaleInPixels', 'rotationHandlePosition', 'manipulator']);\n  vtkResliceCursorWidget(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkResliceCursorWidget'); // ----------------------------------------------------------------------------\n\nvar vtkResliceCursorWidget$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkResliceCursorWidget$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}