{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nvar METHOD_MAPPING = {\n  POINTS: 'getPoints',\n  VERTICES: 'getVerts',\n  LINES: 'getLines',\n  TRIANGLE_STRIPS: 'getStrips',\n  POLYGONS: 'getPolys',\n  POINT_DATA: 'getPointData',\n  CELL_DATA: 'getCellData',\n  FIELD: 'getFieldData'\n};\nvar DATATYPES = {\n  bit: Uint8Array,\n  unsigned_char: Uint8Array,\n  char: Int8Array,\n  unsigned_short: Uint16Array,\n  short: Int16Array,\n  unsigned_int: Uint32Array,\n  int: Int32Array,\n  unsigned_long: Uint32Array,\n  long: Int32Array,\n  float: Float32Array,\n  double: Float64Array\n};\nvar REGISTER_MAPPING = {\n  SCALARS: 'addArray',\n  COLOR_SCALARS: 'addArray',\n  VECTORS: 'setVectors',\n  NORMALS: 'setNormals',\n  TEXTURE_COORDINATES: 'setTCoords',\n  TENSORS: 'setTensors',\n  FIELD: 'addArray'\n};\nfunction createArrayHandler(array, setData, nbComponents) {\n  var offset = 0;\n  function fillWith(line) {\n    line.split(' ').forEach(function (token) {\n      if (token.length) {\n        array[offset++] = Number(token);\n      }\n    });\n    if (offset < array.length) {\n      return true;\n    }\n    setData(array, nbComponents);\n    return false;\n  }\n  return fillWith;\n}\nvar GENERIC_CELL_HANDLER = {\n  init: function init(line, dataModel) {\n    var _line$split = line.split(' '),\n      _line$split2 = _slicedToArray(_line$split, 3),\n      name = _line$split2[0],\n      nbCells = _line$split2[1],\n      nbValues = _line$split2[2];\n    var cellArray = dataModel.dataset[METHOD_MAPPING[name]]();\n    cellArray.set({\n      numberOfCells: Number(nbCells)\n    }, true); // Force numberOfCells update\n\n    dataModel.arrayHandler = createArrayHandler(new Uint32Array(Number(nbValues)), cellArray.setData, 1);\n    return true;\n  },\n  parse: function parse(line, dataModel) {\n    return dataModel.arrayHandler(line);\n  }\n};\nvar TYPE_PARSER = {\n  DATASET: {\n    init: function init(line, datamodel) {\n      var type = line.split(' ')[1];\n      switch (type) {\n        case 'POLYDATA':\n          datamodel.dataset = vtkPolyData.newInstance();\n          break;\n        default:\n          console.error(\"Dataset of type \".concat(type, \" not supported\"));\n      }\n      return false;\n    },\n    parse: function parse(line, datamodel) {\n      return false;\n    }\n  },\n  POINTS: {\n    init: function init(line, dataModel) {\n      var _line$split3 = line.split(' '),\n        _line$split4 = _slicedToArray(_line$split3, 3),\n        name = _line$split4[0],\n        size = _line$split4[1],\n        type = _line$split4[2];\n      var array = type === 'float' ? new Float32Array(3 * Number(size)) : new Float64Array(3 * Number(size));\n      var dataArray = dataModel.dataset.getPoints();\n      dataArray.setName(name);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  METADATA: {\n    init: function init(line, dataModel) {\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return !!line.length;\n    }\n  },\n  VERTICES: GENERIC_CELL_HANDLER,\n  LINES: GENERIC_CELL_HANDLER,\n  TRIANGLE_STRIPS: GENERIC_CELL_HANDLER,\n  POLYGONS: GENERIC_CELL_HANDLER,\n  POINT_DATA: {\n    init: function init(line, dataModel) {\n      dataModel.POINT_DATA = Number(line.split(' ')[1]);\n      dataModel.activeFieldLocation = 'POINT_DATA';\n      return false;\n    },\n    parse: function parse(line, dataModel) {\n      return false;\n    }\n  },\n  CELL_DATA: {\n    init: function init(line, dataModel) {\n      dataModel.CELL_DATA = Number(line.split(' ')[1]);\n      dataModel.activeFieldLocation = 'CELL_DATA';\n      return false;\n    },\n    parse: function parse(line, dataModel) {\n      return false;\n    }\n  },\n  SCALARS: {\n    init: function init(line, dataModel) {\n      var _line$split5 = line.split(' '),\n        _line$split6 = _slicedToArray(_line$split5, 4),\n        type = _line$split6[0],\n        name = _line$split6[1],\n        dataType = _line$split6[2],\n        numComp = _line$split6[3];\n      var numOfComp = Number(numComp) > 0 ? Number(numComp) : 1;\n      var size = dataModel[dataModel.activeFieldLocation] * numOfComp;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, numOfComp);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      if (line.split(' ')[0] === 'LOOKUP_TABLE') {\n        return true;\n      }\n      return dataModel.arrayHandler(line);\n    }\n  },\n  COLOR_SCALARS: {\n    init: function init(line, dataModel) {\n      var _line$split7 = line.split(' '),\n        _line$split8 = _slicedToArray(_line$split7, 3),\n        type = _line$split8[0],\n        name = _line$split8[1],\n        numComp = _line$split8[2];\n      var numOfComp = Number(numComp) > 0 ? Number(numComp) : 1;\n      var size = dataModel[dataModel.activeFieldLocation] * numOfComp;\n      var array = new Uint8Array(size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, numOfComp);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      if (line.split(' ')[0] === 'LOOKUP_TABLE') {\n        return true;\n      }\n      return dataModel.arrayHandler(line);\n    }\n  },\n  VECTORS: {\n    init: function init(line, dataModel) {\n      var _line$split9 = line.split(' '),\n        _line$split10 = _slicedToArray(_line$split9, 3),\n        type = _line$split10[0],\n        name = _line$split10[1],\n        dataType = _line$split10[2];\n      var size = dataModel[dataModel.activeFieldLocation] * 3;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  NORMALS: {\n    init: function init(line, dataModel) {\n      var _line$split11 = line.split(' '),\n        _line$split12 = _slicedToArray(_line$split11, 2),\n        type = _line$split12[0],\n        name = _line$split12[1];\n      var size = dataModel[dataModel.activeFieldLocation] * 3;\n      var array = new Float32Array(size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  TEXTURE_COORDINATES: {\n    init: function init(line, dataModel) {\n      var _line$split13 = line.split(' '),\n        _line$split14 = _slicedToArray(_line$split13, 4),\n        type = _line$split14[0],\n        name = _line$split14[1],\n        numberOfComponents = _line$split14[2],\n        dataType = _line$split14[3];\n      var size = dataModel[dataModel.activeFieldLocation] * Number(numberOfComponents);\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  TENSORS: {\n    init: function init(line, dataModel) {\n      var _line$split15 = line.split(' '),\n        _line$split16 = _slicedToArray(_line$split15, 3),\n        type = _line$split16[0],\n        name = _line$split16[1],\n        dataType = _line$split16[2];\n      var size = dataModel[dataModel.activeFieldLocation] * 9;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 9);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  }\n};\nfunction getParser(line, dataModel) {\n  var tokens = line.split(' ');\n  return TYPE_PARSER[tokens[0]];\n}\nfunction parseLegacyASCII(content) {\n  var dataModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parser = null;\n  var separatorRegExp = /\\r?\\n/;\n  var separatorRes = separatorRegExp.exec(content);\n  var separator = separatorRes !== null ? separatorRes[0] : null;\n  content.split(separator).forEach(function (line, index) {\n    if (index < 2) {\n      return;\n    }\n    if (!parser) {\n      parser = getParser(line);\n      if (!parser) {\n        return;\n      }\n      parser = parser.init(line, dataModel) ? parser : null;\n      return;\n    }\n    if (parser && !parser.parse(line, dataModel)) {\n      parser = null;\n    }\n  });\n  return dataModel;\n}\nvar vtkLegacyAsciiParser = {\n  parseLegacyASCII: parseLegacyASCII\n};\nexport { vtkLegacyAsciiParser as default };","map":{"version":3,"names":["_slicedToArray","vtkDataArray","vtkPolyData","METHOD_MAPPING","POINTS","VERTICES","LINES","TRIANGLE_STRIPS","POLYGONS","POINT_DATA","CELL_DATA","FIELD","DATATYPES","bit","Uint8Array","unsigned_char","char","Int8Array","unsigned_short","Uint16Array","short","Int16Array","unsigned_int","Uint32Array","int","Int32Array","unsigned_long","long","float","Float32Array","double","Float64Array","REGISTER_MAPPING","SCALARS","COLOR_SCALARS","VECTORS","NORMALS","TEXTURE_COORDINATES","TENSORS","createArrayHandler","array","setData","nbComponents","offset","fillWith","line","split","forEach","token","length","Number","GENERIC_CELL_HANDLER","init","dataModel","_line$split","_line$split2","name","nbCells","nbValues","cellArray","dataset","set","numberOfCells","arrayHandler","parse","TYPE_PARSER","DATASET","datamodel","type","newInstance","console","error","concat","_line$split3","_line$split4","size","dataArray","getPoints","setName","METADATA","activeFieldLocation","_line$split5","_line$split6","dataType","numComp","numOfComp","empty","_line$split7","_line$split8","_line$split9","_line$split10","_line$split11","_line$split12","_line$split13","_line$split14","numberOfComponents","_line$split15","_line$split16","getParser","tokens","parseLegacyASCII","content","arguments","undefined","parser","separatorRegExp","separatorRes","exec","separator","index","vtkLegacyAsciiParser","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Legacy/LegacyAsciiParser.js"],"sourcesContent":["import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nvar METHOD_MAPPING = {\n  POINTS: 'getPoints',\n  VERTICES: 'getVerts',\n  LINES: 'getLines',\n  TRIANGLE_STRIPS: 'getStrips',\n  POLYGONS: 'getPolys',\n  POINT_DATA: 'getPointData',\n  CELL_DATA: 'getCellData',\n  FIELD: 'getFieldData'\n};\nvar DATATYPES = {\n  bit: Uint8Array,\n  unsigned_char: Uint8Array,\n  char: Int8Array,\n  unsigned_short: Uint16Array,\n  short: Int16Array,\n  unsigned_int: Uint32Array,\n  int: Int32Array,\n  unsigned_long: Uint32Array,\n  long: Int32Array,\n  float: Float32Array,\n  double: Float64Array\n};\nvar REGISTER_MAPPING = {\n  SCALARS: 'addArray',\n  COLOR_SCALARS: 'addArray',\n  VECTORS: 'setVectors',\n  NORMALS: 'setNormals',\n  TEXTURE_COORDINATES: 'setTCoords',\n  TENSORS: 'setTensors',\n  FIELD: 'addArray'\n};\n\nfunction createArrayHandler(array, setData, nbComponents) {\n  var offset = 0;\n\n  function fillWith(line) {\n    line.split(' ').forEach(function (token) {\n      if (token.length) {\n        array[offset++] = Number(token);\n      }\n    });\n\n    if (offset < array.length) {\n      return true;\n    }\n\n    setData(array, nbComponents);\n    return false;\n  }\n\n  return fillWith;\n}\n\nvar GENERIC_CELL_HANDLER = {\n  init: function init(line, dataModel) {\n    var _line$split = line.split(' '),\n        _line$split2 = _slicedToArray(_line$split, 3),\n        name = _line$split2[0],\n        nbCells = _line$split2[1],\n        nbValues = _line$split2[2];\n\n    var cellArray = dataModel.dataset[METHOD_MAPPING[name]]();\n    cellArray.set({\n      numberOfCells: Number(nbCells)\n    }, true); // Force numberOfCells update\n\n    dataModel.arrayHandler = createArrayHandler(new Uint32Array(Number(nbValues)), cellArray.setData, 1);\n    return true;\n  },\n  parse: function parse(line, dataModel) {\n    return dataModel.arrayHandler(line);\n  }\n};\nvar TYPE_PARSER = {\n  DATASET: {\n    init: function init(line, datamodel) {\n      var type = line.split(' ')[1];\n\n      switch (type) {\n        case 'POLYDATA':\n          datamodel.dataset = vtkPolyData.newInstance();\n          break;\n\n        default:\n          console.error(\"Dataset of type \".concat(type, \" not supported\"));\n      }\n\n      return false;\n    },\n    parse: function parse(line, datamodel) {\n      return false;\n    }\n  },\n  POINTS: {\n    init: function init(line, dataModel) {\n      var _line$split3 = line.split(' '),\n          _line$split4 = _slicedToArray(_line$split3, 3),\n          name = _line$split4[0],\n          size = _line$split4[1],\n          type = _line$split4[2];\n\n      var array = type === 'float' ? new Float32Array(3 * Number(size)) : new Float64Array(3 * Number(size));\n      var dataArray = dataModel.dataset.getPoints();\n      dataArray.setName(name);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  METADATA: {\n    init: function init(line, dataModel) {\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return !!line.length;\n    }\n  },\n  VERTICES: GENERIC_CELL_HANDLER,\n  LINES: GENERIC_CELL_HANDLER,\n  TRIANGLE_STRIPS: GENERIC_CELL_HANDLER,\n  POLYGONS: GENERIC_CELL_HANDLER,\n  POINT_DATA: {\n    init: function init(line, dataModel) {\n      dataModel.POINT_DATA = Number(line.split(' ')[1]);\n      dataModel.activeFieldLocation = 'POINT_DATA';\n      return false;\n    },\n    parse: function parse(line, dataModel) {\n      return false;\n    }\n  },\n  CELL_DATA: {\n    init: function init(line, dataModel) {\n      dataModel.CELL_DATA = Number(line.split(' ')[1]);\n      dataModel.activeFieldLocation = 'CELL_DATA';\n      return false;\n    },\n    parse: function parse(line, dataModel) {\n      return false;\n    }\n  },\n  SCALARS: {\n    init: function init(line, dataModel) {\n      var _line$split5 = line.split(' '),\n          _line$split6 = _slicedToArray(_line$split5, 4),\n          type = _line$split6[0],\n          name = _line$split6[1],\n          dataType = _line$split6[2],\n          numComp = _line$split6[3];\n\n      var numOfComp = Number(numComp) > 0 ? Number(numComp) : 1;\n      var size = dataModel[dataModel.activeFieldLocation] * numOfComp;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, numOfComp);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      if (line.split(' ')[0] === 'LOOKUP_TABLE') {\n        return true;\n      }\n\n      return dataModel.arrayHandler(line);\n    }\n  },\n  COLOR_SCALARS: {\n    init: function init(line, dataModel) {\n      var _line$split7 = line.split(' '),\n          _line$split8 = _slicedToArray(_line$split7, 3),\n          type = _line$split8[0],\n          name = _line$split8[1],\n          numComp = _line$split8[2];\n\n      var numOfComp = Number(numComp) > 0 ? Number(numComp) : 1;\n      var size = dataModel[dataModel.activeFieldLocation] * numOfComp;\n      var array = new Uint8Array(size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, numOfComp);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      if (line.split(' ')[0] === 'LOOKUP_TABLE') {\n        return true;\n      }\n\n      return dataModel.arrayHandler(line);\n    }\n  },\n  VECTORS: {\n    init: function init(line, dataModel) {\n      var _line$split9 = line.split(' '),\n          _line$split10 = _slicedToArray(_line$split9, 3),\n          type = _line$split10[0],\n          name = _line$split10[1],\n          dataType = _line$split10[2];\n\n      var size = dataModel[dataModel.activeFieldLocation] * 3;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  NORMALS: {\n    init: function init(line, dataModel) {\n      var _line$split11 = line.split(' '),\n          _line$split12 = _slicedToArray(_line$split11, 2),\n          type = _line$split12[0],\n          name = _line$split12[1];\n\n      var size = dataModel[dataModel.activeFieldLocation] * 3;\n      var array = new Float32Array(size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  TEXTURE_COORDINATES: {\n    init: function init(line, dataModel) {\n      var _line$split13 = line.split(' '),\n          _line$split14 = _slicedToArray(_line$split13, 4),\n          type = _line$split14[0],\n          name = _line$split14[1],\n          numberOfComponents = _line$split14[2],\n          dataType = _line$split14[3];\n\n      var size = dataModel[dataModel.activeFieldLocation] * Number(numberOfComponents);\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 3);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  },\n  TENSORS: {\n    init: function init(line, dataModel) {\n      var _line$split15 = line.split(' '),\n          _line$split16 = _slicedToArray(_line$split15, 3),\n          type = _line$split16[0],\n          name = _line$split16[1],\n          dataType = _line$split16[2];\n\n      var size = dataModel[dataModel.activeFieldLocation] * 9;\n      var array = new DATATYPES[dataType](size);\n      var dataArray = vtkDataArray.newInstance({\n        name: name,\n        empty: true\n      });\n      dataModel.dataset[METHOD_MAPPING[dataModel.activeFieldLocation]]()[REGISTER_MAPPING[type]](dataArray);\n      dataModel.arrayHandler = createArrayHandler(array, dataArray.setData, 9);\n      return true;\n    },\n    parse: function parse(line, dataModel) {\n      return dataModel.arrayHandler(line);\n    }\n  }\n};\n\nfunction getParser(line, dataModel) {\n  var tokens = line.split(' ');\n  return TYPE_PARSER[tokens[0]];\n}\n\nfunction parseLegacyASCII(content) {\n  var dataModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parser = null;\n  var separatorRegExp = /\\r?\\n/;\n  var separatorRes = separatorRegExp.exec(content);\n  var separator = separatorRes !== null ? separatorRes[0] : null;\n  content.split(separator).forEach(function (line, index) {\n    if (index < 2) {\n      return;\n    }\n\n    if (!parser) {\n      parser = getParser(line);\n\n      if (!parser) {\n        return;\n      }\n\n      parser = parser.init(line, dataModel) ? parser : null;\n      return;\n    }\n\n    if (parser && !parser.parse(line, dataModel)) {\n      parser = null;\n    }\n  });\n  return dataModel;\n}\n\nvar vtkLegacyAsciiParser = {\n  parseLegacyASCII: parseLegacyASCII\n};\n\nexport { vtkLegacyAsciiParser as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}