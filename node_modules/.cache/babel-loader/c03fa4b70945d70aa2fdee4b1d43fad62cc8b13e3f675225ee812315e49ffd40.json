{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\nvar LINE_ARRAY = [2, 0, 1, 2, 2, 3, 2, 4, 5, 2, 6, 7, 2, 0, 2, 2, 1, 3, 2, 4, 6, 2, 5, 7, 2, 0, 4, 2, 1, 5, 2, 2, 6, 2, 3, 7]; // prettier-ignore\n\nvar POLY_ARRAY = [4, 0, 1, 3, 2, 4, 4, 6, 7, 5, 4, 8, 10, 11, 9, 4, 12, 13, 15, 14, 4, 16, 18, 19, 17, 4, 20, 21, 23, 22]; // ----------------------------------------------------------------------------\n// vtkCubeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCubeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeSource');\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    var polyData = vtkPolyData.newInstance();\n    outData[0] = polyData;\n    var numberOfPoints = 24; // Define points\n\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    polyData.getPoints().setData(points, 3);\n    var normals = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    var normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    polyData.getPointData().setNormals(normalArray);\n    var tcdim = 2;\n    if (model.generate3DTextureCoordinates === true) {\n      tcdim = 3;\n    }\n    var textureCoords = macro.newTypedArray(model.pointType, numberOfPoints * tcdim);\n    var tcoords = vtkDataArray.newInstance({\n      name: 'TextureCoordinates',\n      values: textureCoords,\n      numberOfComponents: tcdim\n    });\n    polyData.getPointData().setTCoords(tcoords);\n    var x = [0.0, 0.0, 0.0];\n    var n = [0.0, 0.0, 0.0];\n    var tc = [0.0, 0.0];\n    var pointIndex = 0;\n    x[0] = -model.xLength / 2.0;\n    n[0] = -1.0;\n    n[1] = 0.0;\n    n[2] = 0.0;\n    for (var i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n      for (var j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[2] = -model.zLength / 2.0;\n        for (var k = 0; k < 2; k++) {\n          tc[0] = (x[2] + 0.5) * (1 - 2 * i);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[0] += model.xLength;\n      n[0] += 2.0;\n    }\n    x[1] = -model.yLength / 2.0;\n    n[1] = -1.0;\n    n[0] = 0.0;\n    n[2] = 0.0;\n    for (var _i = 0; _i < 2; _i++) {\n      x[0] = -model.xLength / 2.0;\n      for (var _j = 0; _j < 2; _j++) {\n        tc[0] = (x[0] + 0.5) * (2 * _i - 1);\n        x[2] = -model.zLength / 2.0;\n        for (var _k = 0; _k < 2; _k++) {\n          tc[1] = (x[2] + 0.5) * -1;\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * _j - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * _i - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * _k - 1;\n          }\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n        x[0] += model.xLength;\n      }\n      x[1] += model.yLength;\n      n[1] += 2.0;\n    }\n    x[2] = -model.zLength / 2.0;\n    n[2] = -1.0;\n    n[0] = 0.0;\n    n[1] = 0.0;\n    for (var _i2 = 0; _i2 < 2; _i2++) {\n      x[1] = -model.yLength / 2.0;\n      for (var _j2 = 0; _j2 < 2; _j2++) {\n        tc[1] = x[1] + 0.5;\n        x[0] = -model.xLength / 2.0;\n        for (var _k2 = 0; _k2 < 2; _k2++) {\n          tc[0] = (x[0] + 0.5) * (2 * _i2 - 1);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * _k2 - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * _j2 - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * _i2 - 1;\n          }\n          pointIndex++;\n          x[0] += model.xLength;\n        }\n        x[1] += model.yLength;\n      }\n      x[2] += model.zLength;\n      n[2] += 2.0;\n    } // Apply rotation to the points coordinates and normals\n\n    if (model.rotations) {\n      vtkMatrixBuilder.buildFromDegree().rotateX(model.rotations[0]).rotateY(model.rotations[1]).rotateZ(model.rotations[2]).apply(points).apply(normals);\n    } // Apply transformation to the points coordinates\n\n    if (model.center) {\n      var _vtkMatrixBuilder$bui;\n      (_vtkMatrixBuilder$bui = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center)).apply(points);\n    } // Apply optional additionally specified matrix transformation\n\n    if (model.matrix) {\n      vtkMatrixBuilder.buildFromRadian().setMatrix(model.matrix).apply(points); // prettier-ignore\n\n      var rotMatrix = [model.matrix[0], model.matrix[1], model.matrix[2], 0, model.matrix[4], model.matrix[5], model.matrix[6], 0, model.matrix[8], model.matrix[9], model.matrix[10], 0, 0, 0, 0, 1];\n      vtkMatrixBuilder.buildFromRadian().setMatrix(rotMatrix).apply(normals);\n    } // Lastly, generate the necessary cell arrays.\n\n    if (model.generateFaces) {\n      polyData.getPolys().deepCopy(model._polys);\n    } else {\n      polyData.getPolys().initialize();\n    }\n    if (model.generateLines) {\n      polyData.getLines().deepCopy(model._lineCells); // only set normals for faces, not for lines.\n\n      polyData.getPointData().setNormals(null);\n    } else {\n      polyData.getLines().initialize();\n    }\n    polyData.modified();\n  }\n  publicAPI.setBounds = function () {\n    var boundsArray = [];\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      boundsArray = arguments.length <= 0 ? undefined : arguments[0];\n    } else {\n      for (var i = 0; i < arguments.length; i++) {\n        boundsArray.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    }\n    if (boundsArray.length !== 6) {\n      return;\n    }\n    publicAPI.setXLength(boundsArray[1] - boundsArray[0]);\n    publicAPI.setYLength(boundsArray[3] - boundsArray[2]);\n    publicAPI.setZLength(boundsArray[5] - boundsArray[4]);\n    publicAPI.setCenter([(boundsArray[0] + boundsArray[1]) / 2.0, (boundsArray[2] + boundsArray[3]) / 2.0, (boundsArray[4] + boundsArray[5]) / 2.0]);\n  }; // Expose methods\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  xLength: 1.0,\n  yLength: 1.0,\n  zLength: 1.0,\n  pointType: 'Float64Array',\n  generate3DTextureCoordinates: false,\n  generateFaces: true,\n  generateLines: false\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['xLength', 'yLength', 'zLength', 'generate3DTextureCoordinates', 'generateFaces', 'generateLines']);\n  macro.setGetArray(publicAPI, model, ['center', 'rotations'], 3);\n  macro.setGetArray(publicAPI, model, ['matrix'], 16); // Internal persistent/static objects\n\n  model._polys = vtkCellArray.newInstance({\n    values: Uint16Array.from(POLY_ARRAY)\n  });\n  model._lineCells = vtkCellArray.newInstance({\n    values: Uint16Array.from(LINE_ARRAY)\n  });\n  macro.moveToProtected(publicAPI, model, ['polys', 'lineCells']);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCubeSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCubeSource'); // ----------------------------------------------------------------------------\n\nvar vtkCubeSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkCubeSource$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkCellArray","vtkDataArray","vtkPolyData","vtkMatrixBuilder","LINE_ARRAY","POLY_ARRAY","vtkCubeSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","deleted","polyData","newInstance","numberOfPoints","points","newTypedArray","pointType","getPoints","setData","normals","normalArray","name","values","numberOfComponents","getPointData","setNormals","tcdim","generate3DTextureCoordinates","textureCoords","tcoords","setTCoords","x","n","tc","pointIndex","xLength","i","yLength","j","zLength","k","_i","_j","_k","_i2","_j2","_k2","rotations","buildFromDegree","rotateX","rotateY","rotateZ","apply","center","_vtkMatrixBuilder$bui","buildFromRadian","translate","matrix","setMatrix","rotMatrix","generateFaces","getPolys","deepCopy","_polys","initialize","generateLines","getLines","_lineCells","modified","setBounds","boundsArray","Array","isArray","arguments","length","undefined","setXLength","setYLength","setZLength","setCenter","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","setGet","setGetArray","Uint16Array","from","moveToProtected","algo","vtkCubeSource$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/Sources/CubeSource.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\nvar LINE_ARRAY = [2, 0, 1, 2, 2, 3, 2, 4, 5, 2, 6, 7, 2, 0, 2, 2, 1, 3, 2, 4, 6, 2, 5, 7, 2, 0, 4, 2, 1, 5, 2, 2, 6, 2, 3, 7]; // prettier-ignore\n\nvar POLY_ARRAY = [4, 0, 1, 3, 2, 4, 4, 6, 7, 5, 4, 8, 10, 11, 9, 4, 12, 13, 15, 14, 4, 16, 18, 19, 17, 4, 20, 21, 23, 22]; // ----------------------------------------------------------------------------\n// vtkCubeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCubeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCubeSource');\n\n  function requestData(inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n\n    var polyData = vtkPolyData.newInstance();\n    outData[0] = polyData;\n    var numberOfPoints = 24; // Define points\n\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    polyData.getPoints().setData(points, 3);\n    var normals = macro.newTypedArray(model.pointType, numberOfPoints * 3);\n    var normalArray = vtkDataArray.newInstance({\n      name: 'Normals',\n      values: normals,\n      numberOfComponents: 3\n    });\n    polyData.getPointData().setNormals(normalArray);\n    var tcdim = 2;\n\n    if (model.generate3DTextureCoordinates === true) {\n      tcdim = 3;\n    }\n\n    var textureCoords = macro.newTypedArray(model.pointType, numberOfPoints * tcdim);\n    var tcoords = vtkDataArray.newInstance({\n      name: 'TextureCoordinates',\n      values: textureCoords,\n      numberOfComponents: tcdim\n    });\n    polyData.getPointData().setTCoords(tcoords);\n    var x = [0.0, 0.0, 0.0];\n    var n = [0.0, 0.0, 0.0];\n    var tc = [0.0, 0.0];\n    var pointIndex = 0;\n    x[0] = -model.xLength / 2.0;\n    n[0] = -1.0;\n    n[1] = 0.0;\n    n[2] = 0.0;\n\n    for (var i = 0; i < 2; i++) {\n      x[1] = -model.yLength / 2.0;\n\n      for (var j = 0; j < 2; j++) {\n        tc[1] = x[1] + 0.5;\n        x[2] = -model.zLength / 2.0;\n\n        for (var k = 0; k < 2; k++) {\n          tc[0] = (x[2] + 0.5) * (1 - 2 * i);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * i - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;\n          }\n\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n\n        x[1] += model.yLength;\n      }\n\n      x[0] += model.xLength;\n      n[0] += 2.0;\n    }\n\n    x[1] = -model.yLength / 2.0;\n    n[1] = -1.0;\n    n[0] = 0.0;\n    n[2] = 0.0;\n\n    for (var _i = 0; _i < 2; _i++) {\n      x[0] = -model.xLength / 2.0;\n\n      for (var _j = 0; _j < 2; _j++) {\n        tc[0] = (x[0] + 0.5) * (2 * _i - 1);\n        x[2] = -model.zLength / 2.0;\n\n        for (var _k = 0; _k < 2; _k++) {\n          tc[1] = (x[2] + 0.5) * -1;\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * _j - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * _i - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * _k - 1;\n          }\n\n          pointIndex++;\n          x[2] += model.zLength;\n        }\n\n        x[0] += model.xLength;\n      }\n\n      x[1] += model.yLength;\n      n[1] += 2.0;\n    }\n\n    x[2] = -model.zLength / 2.0;\n    n[2] = -1.0;\n    n[0] = 0.0;\n    n[1] = 0.0;\n\n    for (var _i2 = 0; _i2 < 2; _i2++) {\n      x[1] = -model.yLength / 2.0;\n\n      for (var _j2 = 0; _j2 < 2; _j2++) {\n        tc[1] = x[1] + 0.5;\n        x[0] = -model.xLength / 2.0;\n\n        for (var _k2 = 0; _k2 < 2; _k2++) {\n          tc[0] = (x[0] + 0.5) * (2 * _i2 - 1);\n          points[pointIndex * 3] = x[0];\n          points[pointIndex * 3 + 1] = x[1];\n          points[pointIndex * 3 + 2] = x[2];\n          normals[pointIndex * 3] = n[0];\n          normals[pointIndex * 3 + 1] = n[1];\n          normals[pointIndex * 3 + 2] = n[2];\n\n          if (tcdim === 2) {\n            textureCoords[pointIndex * tcdim] = tc[0];\n            textureCoords[pointIndex * tcdim + 1] = tc[1];\n          } else {\n            textureCoords[pointIndex * tcdim] = 2 * _k2 - 1;\n            textureCoords[pointIndex * tcdim + 1] = 2 * _j2 - 1;\n            textureCoords[pointIndex * tcdim + 2] = 2 * _i2 - 1;\n          }\n\n          pointIndex++;\n          x[0] += model.xLength;\n        }\n\n        x[1] += model.yLength;\n      }\n\n      x[2] += model.zLength;\n      n[2] += 2.0;\n    } // Apply rotation to the points coordinates and normals\n\n\n    if (model.rotations) {\n      vtkMatrixBuilder.buildFromDegree().rotateX(model.rotations[0]).rotateY(model.rotations[1]).rotateZ(model.rotations[2]).apply(points).apply(normals);\n    } // Apply transformation to the points coordinates\n\n\n    if (model.center) {\n      var _vtkMatrixBuilder$bui;\n\n      (_vtkMatrixBuilder$bui = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center)).apply(points);\n    } // Apply optional additionally specified matrix transformation\n\n\n    if (model.matrix) {\n      vtkMatrixBuilder.buildFromRadian().setMatrix(model.matrix).apply(points); // prettier-ignore\n\n      var rotMatrix = [model.matrix[0], model.matrix[1], model.matrix[2], 0, model.matrix[4], model.matrix[5], model.matrix[6], 0, model.matrix[8], model.matrix[9], model.matrix[10], 0, 0, 0, 0, 1];\n      vtkMatrixBuilder.buildFromRadian().setMatrix(rotMatrix).apply(normals);\n    } // Lastly, generate the necessary cell arrays.\n\n\n    if (model.generateFaces) {\n      polyData.getPolys().deepCopy(model._polys);\n    } else {\n      polyData.getPolys().initialize();\n    }\n\n    if (model.generateLines) {\n      polyData.getLines().deepCopy(model._lineCells); // only set normals for faces, not for lines.\n\n      polyData.getPointData().setNormals(null);\n    } else {\n      polyData.getLines().initialize();\n    }\n\n    polyData.modified();\n  }\n\n  publicAPI.setBounds = function () {\n    var boundsArray = [];\n\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      boundsArray = arguments.length <= 0 ? undefined : arguments[0];\n    } else {\n      for (var i = 0; i < arguments.length; i++) {\n        boundsArray.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    }\n\n    if (boundsArray.length !== 6) {\n      return;\n    }\n\n    publicAPI.setXLength(boundsArray[1] - boundsArray[0]);\n    publicAPI.setYLength(boundsArray[3] - boundsArray[2]);\n    publicAPI.setZLength(boundsArray[5] - boundsArray[4]);\n    publicAPI.setCenter([(boundsArray[0] + boundsArray[1]) / 2.0, (boundsArray[2] + boundsArray[3]) / 2.0, (boundsArray[4] + boundsArray[5]) / 2.0]);\n  }; // Expose methods\n\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  xLength: 1.0,\n  yLength: 1.0,\n  zLength: 1.0,\n  pointType: 'Float64Array',\n  generate3DTextureCoordinates: false,\n  generateFaces: true,\n  generateLines: false\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['xLength', 'yLength', 'zLength', 'generate3DTextureCoordinates', 'generateFaces', 'generateLines']);\n  macro.setGetArray(publicAPI, model, ['center', 'rotations'], 3);\n  macro.setGetArray(publicAPI, model, ['matrix'], 16); // Internal persistent/static objects\n\n  model._polys = vtkCellArray.newInstance({\n    values: Uint16Array.from(POLY_ARRAY)\n  });\n  model._lineCells = vtkCellArray.newInstance({\n    values: Uint16Array.from(LINE_ARRAY)\n  });\n  macro.moveToProtected(publicAPI, model, ['polys', 'lineCells']);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCubeSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCubeSource'); // ----------------------------------------------------------------------------\n\nvar vtkCubeSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkCubeSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}