{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport Constants from './Texture/Constants.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport { newInstance as newInstance$1, obj, set, setGet, get, moveToProtected, newTypedArray, vtkDebugMacro as vtkDebugMacro$1, vtkErrorMacro as vtkErrorMacro$1, vtkWarningMacro as vtkWarningMacro$1 } from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { Q as isPowerOfTwo, N as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar Wrap = Constants.Wrap,\n  Filter = Constants.Filter;\nvar VtkDataTypes = vtkDataArray.VtkDataTypes;\nvar vtkDebugMacro = vtkDebugMacro$1,\n  vtkErrorMacro = vtkErrorMacro$1,\n  vtkWarningMacro = vtkWarningMacro$1;\nvar toHalf = HalfFloat.toHalf; // ----------------------------------------------------------------------------\n// vtkOpenGLTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTexture'); // Renders myself\n\n  publicAPI.render = function () {\n    var renWin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (renWin) {\n      model._openGLRenderWindow = renWin;\n    } else {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer'); // sync renderable properties\n\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n    }\n    model.context = model._openGLRenderWindow.getContext();\n    if (model.renderable.getInterpolate()) {\n      if (model.generateMipmap) {\n        publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n      } else {\n        publicAPI.setMinificationFilter(Filter.LINEAR);\n      }\n      publicAPI.setMagnificationFilter(Filter.LINEAR);\n    } else {\n      publicAPI.setMinificationFilter(Filter.NEAREST);\n      publicAPI.setMagnificationFilter(Filter.NEAREST);\n    }\n    if (model.renderable.getRepeat()) {\n      publicAPI.setWrapR(Wrap.REPEAT);\n      publicAPI.setWrapS(Wrap.REPEAT);\n      publicAPI.setWrapT(Wrap.REPEAT);\n    } // clear image if input data is set\n\n    if (model.renderable.getInputData()) {\n      model.renderable.setImage(null);\n    } // create the texture if it is not done already\n\n    if (!model.handle || model.renderable.getMTime() > model.textureBuildTime.getMTime()) {\n      // if we have an Image\n      if (model.renderable.getImage() !== null) {\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        } // Have an Image which may not be complete\n\n        if (model.renderable.getImage() && model.renderable.getImageLoaded()) {\n          publicAPI.create2DFromImage(model.renderable.getImage());\n          publicAPI.activate();\n          publicAPI.sendParameters();\n          model.textureBuildTime.modified();\n        }\n      } // if we have a canvas\n\n      if (model.renderable.getCanvas() !== null) {\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        var canvas = model.renderable.getCanvas();\n        publicAPI.create2DFromRaw(canvas.width, canvas.height, 4, VtkDataTypes.UNSIGNED_CHAR, canvas, true);\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      } // if we have jsImageData\n\n      if (model.renderable.getJsImageData() !== null) {\n        var jsid = model.renderable.getJsImageData();\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        publicAPI.create2DFromRaw(jsid.width, jsid.height, 4, VtkDataTypes.UNSIGNED_CHAR, jsid.data, true);\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      } // if we have InputData\n\n      var input = model.renderable.getInputData(0);\n      if (input && input.getPointData().getScalars()) {\n        var ext = input.getExtent();\n        var inScalars = input.getPointData().getScalars(); // do we have a cube map? Six inputs\n\n        var data = [];\n        for (var i = 0; i < model.renderable.getNumberOfInputPorts(); ++i) {\n          var indata = model.renderable.getInputData(i);\n          var scalars = indata ? indata.getPointData().getScalars().getData() : null;\n          if (scalars) {\n            data.push(scalars);\n          }\n        }\n        if (model.renderable.getInterpolate() && inScalars.getNumberOfComponents() === 4) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n        if (data.length % 6 === 0) {\n          publicAPI.createCubeFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), data);\n        } else {\n          publicAPI.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());\n        }\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      }\n    }\n    if (model.handle) {\n      publicAPI.activate();\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.destroyTexture = function () {\n    // deactivate it first\n    publicAPI.deactivate();\n    if (model.context && model.handle) {\n      model.context.deleteTexture(model.handle);\n    }\n    model.handle = 0;\n    model.numberOfDimensions = 0;\n    model.target = 0;\n    model.components = 0;\n    model.width = 0;\n    model.height = 0;\n    model.depth = 0;\n    publicAPI.resetFormatAndType();\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.createTexture = function () {\n    // reuse the existing handle if we have one\n    if (!model.handle) {\n      model.handle = model.context.createTexture();\n      if (model.target) {\n        model.context.bindTexture(model.target, model.handle); // See: http://www.openmodel.context..org/wiki/Common_Mistakes#Creating_a_complete_texture\n        // turn off mip map filter or set the base and max level correctly. here\n        // both are done.\n\n        model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));\n        model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));\n        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));\n        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));\n        if (model._openGLRenderWindow.getWebgl2()) {\n          model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));\n        }\n        model.context.bindTexture(model.target, null);\n      }\n    }\n  }; //---------------------------------------------------------------------------\n\n  publicAPI.getTextureUnit = function () {\n    if (model._openGLRenderWindow) {\n      return model._openGLRenderWindow.getTextureUnitForTexture(publicAPI);\n    }\n    return -1;\n  }; //---------------------------------------------------------------------------\n\n  publicAPI.activate = function () {\n    // activate a free texture unit for this texture\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.bind();\n  }; //---------------------------------------------------------------------------\n\n  publicAPI.deactivate = function () {\n    if (model._openGLRenderWindow) {\n      model._openGLRenderWindow.deactivateTexture(publicAPI);\n    }\n  }; //---------------------------------------------------------------------------\n\n  publicAPI.releaseGraphicsResources = function (rwin) {\n    if (rwin && model.handle) {\n      rwin.activateTexture(publicAPI);\n      rwin.deactivateTexture(publicAPI);\n      model.context.deleteTexture(model.handle);\n      model.handle = 0;\n      model.numberOfDimensions = 0;\n      model.target = 0;\n      model.internalFormat = 0;\n      model.format = 0;\n      model.openGLDataType = 0;\n      model.components = 0;\n      model.width = 0;\n      model.height = 0;\n      model.depth = 0;\n    }\n    if (model.shaderProgram) {\n      model.shaderProgram.releaseGraphicsResources(rwin);\n      model.shaderProgram = null;\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.bind = function () {\n    model.context.bindTexture(model.target, model.handle);\n    if (model.autoParameters && publicAPI.getMTime() > model.sendParametersTime.getMTime()) {\n      publicAPI.sendParameters();\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.isBound = function () {\n    var result = false;\n    if (model.context && model.handle) {\n      var target = 0;\n      switch (model.target) {\n        case model.context.TEXTURE_2D:\n          target = model.context.TEXTURE_BINDING_2D;\n          break;\n        default:\n          vtkWarningMacro('impossible case');\n          break;\n      }\n      var oid = model.context.getIntegerv(target);\n      result = oid === model.handle;\n    }\n    return result;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.sendParameters = function () {\n    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));\n    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));\n    }\n    model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));\n    model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.context.texParameteri(model.target, model.context.TEXTURE_BASE_LEVEL, model.baseLevel);\n      model.context.texParameteri(model.target, model.context.TEXTURE_MAX_LEVEL, model.maxLevel);\n    } // model.context.texParameterf(model.target, model.context.TEXTURE_MIN_LOD, model.minLOD);\n    // model.context.texParameterf(model.target, model.context.TEXTURE_MAX_LOD, model.maxLOD);\n\n    model.sendParametersTime.modified();\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getInternalFormat = function (vtktype, numComps) {\n    if (!model._forceInternalFormat) {\n      model.internalFormat = publicAPI.getDefaultInternalFormat(vtktype, numComps);\n    }\n    if (!model.internalFormat) {\n      vtkDebugMacro(\"Unable to find suitable internal format for T=\".concat(vtktype, \" NC= \").concat(numComps));\n    }\n    return model.internalFormat;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getDefaultInternalFormat = function (vtktype, numComps) {\n    var result = 0; // try default next\n\n    result = model._openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, model.oglNorm16Ext, model.useHalfFloat);\n    if (result) {\n      return result;\n    }\n    if (!result) {\n      vtkDebugMacro('Unsupported internal texture type!');\n      vtkDebugMacro(\"Unable to find suitable internal format for T=\".concat(vtktype, \" NC= \").concat(numComps));\n    }\n    return result;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.setInternalFormat = function (iFormat) {\n    model._forceInternalFormat = true;\n    if (iFormat !== model.internalFormat) {\n      model.internalFormat = iFormat;\n      publicAPI.modified();\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getFormat = function (vtktype, numComps) {\n    model.format = publicAPI.getDefaultFormat(vtktype, numComps);\n    return model.format;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getDefaultFormat = function (vtktype, numComps) {\n    if (model._openGLRenderWindow.getWebgl2()) {\n      switch (numComps) {\n        case 1:\n          return model.context.RED;\n        case 2:\n          return model.context.RG;\n        case 3:\n          return model.context.RGB;\n        case 4:\n          return model.context.RGBA;\n        default:\n          return model.context.RGB;\n      }\n    } else {\n      // webgl1\n      switch (numComps) {\n        case 1:\n          return model.context.LUMINANCE;\n        case 2:\n          return model.context.LUMINANCE_ALPHA;\n        case 3:\n          return model.context.RGB;\n        case 4:\n          return model.context.RGBA;\n        default:\n          return model.context.RGB;\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.resetFormatAndType = function () {\n    model.format = 0;\n    model.internalFormat = 0;\n    model._forceInternalFormat = false;\n    model.openGLDataType = 0;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getDefaultDataType = function (vtkScalarType) {\n    // DON'T DEAL with VTK_CHAR as this is platform dependent.\n    if (model._openGLRenderWindow.getWebgl2()) {\n      switch (vtkScalarType) {\n        // case VtkDataTypes.SIGNED_CHAR:\n        //   return model.context.BYTE;\n        case VtkDataTypes.UNSIGNED_CHAR:\n          return model.context.UNSIGNED_BYTE;\n        // prefer norm16 since that is accurate compared to\n        // half float which is not\n\n        case model.oglNorm16Ext && !model.useHalfFloat && VtkDataTypes.SHORT:\n          return model.context.SHORT;\n        case model.oglNorm16Ext && !model.useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          return model.context.UNSIGNED_SHORT;\n        // use half float type\n\n        case model.useHalfFloat && VtkDataTypes.SHORT:\n          return model.context.HALF_FLOAT;\n        case model.useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          return model.context.HALF_FLOAT;\n        // case VtkDataTypes.INT:\n        //   return model.context.INT;\n        // case VtkDataTypes.UNSIGNED_INT:\n        //   return model.context.UNSIGNED_INT;\n\n        case VtkDataTypes.FLOAT:\n        case VtkDataTypes.VOID: // used for depth component textures.\n\n        default:\n          return model.context.FLOAT;\n      }\n    }\n    switch (vtkScalarType) {\n      // case VtkDataTypes.SIGNED_CHAR:\n      //   return model.context.BYTE;\n      case VtkDataTypes.UNSIGNED_CHAR:\n        return model.context.UNSIGNED_BYTE;\n      // case VtkDataTypes.SHORT:\n      //   return model.context.SHORT;\n      // case VtkDataTypes.UNSIGNED_SHORT:\n      //   return model.context.UNSIGNED_SHORT;\n      // case VtkDataTypes.INT:\n      //   return model.context.INT;\n      // case VtkDataTypes.UNSIGNED_INT:\n      //   return model.context.UNSIGNED_INT;\n\n      case VtkDataTypes.FLOAT:\n      case VtkDataTypes.VOID: // used for depth component textures.\n\n      default:\n        if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n          return model.context.FLOAT;\n        }\n        {\n          var halfFloat = model.context.getExtension('OES_texture_half_float');\n          if (halfFloat && model.context.getExtension('OES_texture_half_float_linear')) {\n            return halfFloat.HALF_FLOAT_OES;\n          }\n        }\n        return model.context.UNSIGNED_BYTE;\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getOpenGLDataType = function (vtkScalarType) {\n    var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!model.openGLDataType || forceUpdate) {\n      model.openGLDataType = publicAPI.getDefaultDataType(vtkScalarType);\n    }\n    return model.openGLDataType;\n  };\n  publicAPI.getShiftAndScale = function () {\n    var shift = 0.0;\n    var scale = 1.0; // for all float type internal formats\n\n    switch (model.openGLDataType) {\n      case model.context.BYTE:\n        scale = 127.5;\n        shift = scale - 128.0;\n        break;\n      case model.context.UNSIGNED_BYTE:\n        scale = 255.0;\n        shift = 0.0;\n        break;\n      case model.context.SHORT:\n        scale = 32767.5;\n        shift = scale - 32768.0;\n        break;\n      case model.context.UNSIGNED_SHORT:\n        scale = 65536.0;\n        shift = 0.0;\n        break;\n      case model.context.INT:\n        scale = 2147483647.5;\n        shift = scale - 2147483648.0;\n        break;\n      case model.context.UNSIGNED_INT:\n        scale = 4294967295.0;\n        shift = 0.0;\n        break;\n      case model.context.FLOAT:\n    }\n    return {\n      shift: shift,\n      scale: scale\n    };\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getOpenGLFilterMode = function (emode) {\n    switch (emode) {\n      case Filter.NEAREST:\n        return model.context.NEAREST;\n      case Filter.LINEAR:\n        return model.context.LINEAR;\n      case Filter.NEAREST_MIPMAP_NEAREST:\n        return model.context.NEAREST_MIPMAP_NEAREST;\n      case Filter.NEAREST_MIPMAP_LINEAR:\n        return model.context.NEAREST_MIPMAP_LINEAR;\n      case Filter.LINEAR_MIPMAP_NEAREST:\n        return model.context.LINEAR_MIPMAP_NEAREST;\n      case Filter.LINEAR_MIPMAP_LINEAR:\n        return model.context.LINEAR_MIPMAP_LINEAR;\n      default:\n        return model.context.NEAREST;\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getOpenGLWrapMode = function (vtktype) {\n    switch (vtktype) {\n      case Wrap.CLAMP_TO_EDGE:\n        return model.context.CLAMP_TO_EDGE;\n      case Wrap.REPEAT:\n        return model.context.REPEAT;\n      case Wrap.MIRRORED_REPEAT:\n        return model.context.MIRRORED_REPEAT;\n      default:\n        return model.context.CLAMP_TO_EDGE;\n    }\n  }; //----------------------------------------------------------------------------\n\n  function updateArrayDataType(dataType, data) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var pixData = [];\n    var pixCount = model.width * model.height * model.components;\n    if (depth) {\n      pixCount *= model.depth;\n    } // if the opengl data type is float\n    // then the data array must be float\n\n    if (dataType !== VtkDataTypes.FLOAT && model.openGLDataType === model.context.FLOAT) {\n      for (var idx = 0; idx < data.length; idx++) {\n        if (data[idx]) {\n          var dataArrayToCopy = data[idx].length > pixCount ? data[idx].subarray(0, pixCount) : data[idx];\n          pixData.push(new Float32Array(dataArrayToCopy));\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // if the opengl data type is ubyte\n    // then the data array must be u8, we currently simply truncate the data\n\n    if (dataType !== VtkDataTypes.UNSIGNED_CHAR && model.openGLDataType === model.context.UNSIGNED_BYTE) {\n      for (var _idx = 0; _idx < data.length; _idx++) {\n        if (data[_idx]) {\n          var _dataArrayToCopy = data[_idx].length > pixCount ? data[_idx].subarray(0, pixCount) : data[_idx];\n          pixData.push(new Uint8Array(_dataArrayToCopy));\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // if the opengl data type is half float\n    // then the data array must be u16\n\n    var halfFloat = false;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      halfFloat = model.openGLDataType === model.context.HALF_FLOAT;\n    } else {\n      var halfFloatExt = model.context.getExtension('OES_texture_half_float');\n      halfFloat = halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;\n    }\n    if (halfFloat) {\n      for (var _idx2 = 0; _idx2 < data.length; _idx2++) {\n        if (data[_idx2]) {\n          var newArray = new Uint16Array(pixCount);\n          var src = data[_idx2];\n          for (var i = 0; i < pixCount; i++) {\n            newArray[i] = toHalf(src[i]);\n          }\n          pixData.push(newArray);\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // The output has to be filled\n\n    if (pixData.length === 0) {\n      for (var _i = 0; _i < data.length; _i++) {\n        pixData.push(data[_i]);\n      }\n    }\n    return pixData;\n  } //----------------------------------------------------------------------------\n\n  function scaleTextureToHighestPowerOfTwo(data) {\n    if (model._openGLRenderWindow.getWebgl2()) {\n      // No need if webGL2\n      return data;\n    }\n    var pixData = [];\n    var width = model.width;\n    var height = model.height;\n    var numComps = model.components;\n    if (data && (!isPowerOfTwo(width) || !isPowerOfTwo(height))) {\n      // Scale up the texture to the next highest power of two dimensions.\n      var halfFloat = model.context.getExtension('OES_texture_half_float');\n      var newWidth = nearestPowerOfTwo(width);\n      var newHeight = nearestPowerOfTwo(height);\n      var pixCount = newWidth * newHeight * model.components;\n      for (var idx = 0; idx < data.length; idx++) {\n        if (data[idx] !== null) {\n          var newArray = null;\n          var jFactor = height / newHeight;\n          var iFactor = width / newWidth;\n          var usingHalf = false;\n          if (model.openGLDataType === model.context.FLOAT) {\n            newArray = new Float32Array(pixCount);\n          } else if (halfFloat && model.openGLDataType === halfFloat.HALF_FLOAT_OES) {\n            newArray = new Uint16Array(pixCount);\n            usingHalf = true;\n          } else {\n            newArray = new Uint8Array(pixCount);\n          }\n          for (var j = 0; j < newHeight; j++) {\n            var joff = j * newWidth * numComps;\n            var jidx = j * jFactor;\n            var jlow = Math.floor(jidx);\n            var jhi = Math.ceil(jidx);\n            if (jhi >= height) {\n              jhi = height - 1;\n            }\n            var jmix = jidx - jlow;\n            var jmix1 = 1.0 - jmix;\n            jlow = jlow * width * numComps;\n            jhi = jhi * width * numComps;\n            for (var i = 0; i < newWidth; i++) {\n              var ioff = i * numComps;\n              var iidx = i * iFactor;\n              var ilow = Math.floor(iidx);\n              var ihi = Math.ceil(iidx);\n              if (ihi >= width) {\n                ihi = width - 1;\n              }\n              var imix = iidx - ilow;\n              ilow *= numComps;\n              ihi *= numComps;\n              for (var c = 0; c < numComps; c++) {\n                if (usingHalf) {\n                  newArray[joff + ioff + c] = HalfFloat.toHalf(HalfFloat.fromHalf(data[idx][jlow + ilow + c]) * jmix1 * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jlow + ihi + c]) * jmix1 * imix + HalfFloat.fromHalf(data[idx][jhi + ilow + c]) * jmix * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jhi + ihi + c]) * jmix * imix);\n                } else {\n                  newArray[joff + ioff + c] = data[idx][jlow + ilow + c] * jmix1 * (1.0 - imix) + data[idx][jlow + ihi + c] * jmix1 * imix + data[idx][jhi + ilow + c] * jmix * (1.0 - imix) + data[idx][jhi + ihi + c] * jmix * imix;\n                }\n              }\n            }\n          }\n          pixData.push(newArray);\n          model.width = newWidth;\n          model.height = newHeight;\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // The output has to be filled\n\n    if (pixData.length === 0) {\n      for (var _i2 = 0; _i2 < data.length; _i2++) {\n        pixData.push(data[_i2]);\n      }\n    }\n    return pixData;\n  } //----------------------------------------------------------------------------\n\n  function useTexStorage(dataType) {\n    if (model._openGLRenderWindow) {\n      var _model$renderable;\n      if (model.resizable || (_model$renderable = model.renderable) !== null && _model$renderable !== void 0 && _model$renderable.getResizable()) {\n        // Cannot use texStorage if the texture is supposed to be resizable.\n        return false;\n      }\n      if (model._openGLRenderWindow.getWebgl2()) {\n        var webGLInfo = model._openGLRenderWindow.getGLInformations();\n        if (webGLInfo.RENDERER.value.match(/WebKit/gi) && navigator.platform.match(/Mac/gi) && model.oglNorm16Ext && (dataType === VtkDataTypes.UNSIGNED_SHORT || dataType === VtkDataTypes.SHORT)) {\n          // Cannot use texStorage with EXT_texture_norm16 textures on Mac M1 GPU.\n          // No errors reported but the texture is unusable.\n          return false;\n        } // Use texStorage for WebGL2\n\n        return true;\n      }\n      return false;\n    }\n    return false;\n  } //----------------------------------------------------------------------------\n\n  publicAPI.create2DFromRaw = function (width, height, numComps, dataType, data) {\n    var flip = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType, true);\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_2D;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind(); // Create an array of texture with one texture\n\n    var dataArray = [data];\n    var pixData = updateArrayDataType(dataType, dataArray);\n    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.\n\n    model.context.pixelStorei(model.context.UNPACK_FLIP_Y_WEBGL, flip);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (scaledData[0] != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, scaledData[0]);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, scaledData[0]);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    } // always reset the flip\n\n    if (flip) {\n      model.context.pixelStorei(model.context.UNPACK_FLIP_Y_WEBGL, false);\n    }\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.createCubeFromRaw = function (width, height, numComps, dataType, data) {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType);\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_CUBE_MAP;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    model.maxLevel = data.length / 6 - 1;\n    publicAPI.createTexture();\n    publicAPI.bind();\n    var pixData = updateArrayDataType(dataType, data);\n    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // invert the data because opengl is messed up with cube maps\n    // and uses the old renderman standard with Y going down\n    // even though it is completely at odds with OpenGL standards\n\n    var invertedData = [];\n    var widthLevel = model.width;\n    var heightLevel = model.height;\n    for (var i = 0; i < scaledData.length; i++) {\n      if (i % 6 === 0 && i !== 0) {\n        widthLevel /= 2;\n        heightLevel /= 2;\n      }\n      invertedData[i] = newTypedArray(dataType, heightLevel * widthLevel * model.components);\n      for (var y = 0; y < heightLevel; ++y) {\n        var row1 = y * widthLevel * model.components;\n        var row2 = (heightLevel - y - 1) * widthLevel * model.components;\n        invertedData[i].set(scaledData[i].slice(row2, row2 + widthLevel * model.components), row1);\n      }\n    } // Source texture data from the PBO.\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 6, model.internalFormat, model.width, model.height);\n    } // We get the 6 images\n\n    for (var _i3 = 0; _i3 < 6; _i3++) {\n      // For each mipmap level\n      var j = 0;\n      var w = model.width;\n      var h = model.height;\n      while (w >= 1 && h >= 1) {\n        // In webgl 1, all levels need to be defined. So if the latest level size is\n        // 8x8, we have to add 3 more null textures (4x4, 2x2, 1x1)\n        // In webgl 2, the attribute maxLevel will be use.\n        var tempData = null;\n        if (j <= model.maxLevel) {\n          tempData = invertedData[6 * j + _i3];\n        }\n        if (useTexStorage(dataType)) {\n          if (tempData != null) {\n            model.context.texSubImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + _i3, j, 0, 0, w, h, model.format, model.openGLDataType, tempData);\n          }\n        } else {\n          model.context.texImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + _i3, j, model.internalFormat, w, h, 0, model.format, model.openGLDataType, tempData);\n        }\n        j++;\n        w /= 2;\n        h /= 2;\n      }\n    } // generateMipmap must not be called here because we manually upload all levels\n    // if it is called, all levels will be overwritten\n\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.createDepthFromRaw = function (width, height, dataType, data) {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType);\n    model.format = model.context.DEPTH_COMPONENT;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      if (dataType === VtkDataTypes.FLOAT) {\n        model.internalFormat = model.context.DEPTH_COMPONENT32F;\n      } else {\n        model.internalFormat = model.context.DEPTH_COMPONENT16;\n      }\n    } else {\n      model.internalFormat = model.context.DEPTH_COMPONENT;\n    }\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_2D;\n    model.components = 1;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind(); // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (data != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, data);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, data);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.create2DFromImage = function (image) {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(VtkDataTypes.UNSIGNED_CHAR);\n    publicAPI.getInternalFormat(VtkDataTypes.UNSIGNED_CHAR, 4);\n    publicAPI.getFormat(VtkDataTypes.UNSIGNED_CHAR, 4);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_2D;\n    model.components = 4;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind(); // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // Scale up the texture to the next highest power of two dimensions (if needed) and flip y.\n\n    var needNearestPowerOfTwo = !model._openGLRenderWindow.getWebgl2() && (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height));\n    var canvas = document.createElement('canvas');\n    canvas.width = needNearestPowerOfTwo ? nearestPowerOfTwo(image.width) : image.width;\n    canvas.height = needNearestPowerOfTwo ? nearestPowerOfTwo(image.height) : image.height;\n    model.width = canvas.width;\n    model.height = canvas.height;\n    var ctx = canvas.getContext('2d');\n    ctx.translate(0, canvas.height);\n    ctx.scale(1, -1);\n    ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n    var safeImage = canvas;\n    if (useTexStorage(VtkDataTypes.UNSIGNED_CHAR)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (safeImage != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, safeImage);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, safeImage);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    publicAPI.deactivate();\n    return true;\n  }; // Compute scale and offset per component from min and max per component\n\n  function computeScaleOffsets(min, max, numComps) {\n    var offset = new Array(numComps);\n    var scale = new Array(numComps);\n    for (var c = 0; c < numComps; ++c) {\n      offset[c] = min[c];\n      scale[c] = max[c] - min[c] || 1.0;\n    }\n    return {\n      scale: scale,\n      offset: offset\n    };\n  } // HalfFloat only represents numbers between [-2048, 2048] exactly accurate,\n  // for numbers outside of this range there is a precision limitation\n\n  function hasExactHalfFloat(offset, scale) {\n    // Per Component\n    for (var c = 0; c < offset.length; c++) {\n      var min = offset[c];\n      var max = scale[c] + min;\n      if (min < -2048 || min > 2048 || max < -2048 || max > 2048) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function setUseHalfFloat(dataType, offset, scale, preferSizeOverAccuracy) {\n    publicAPI.getOpenGLDataType(dataType);\n    var useHalfFloat = false;\n    if (model._openGLRenderWindow.getWebgl2()) {\n      useHalfFloat = model.openGLDataType === model.context.HALF_FLOAT;\n    } else {\n      var halfFloatExt = model.context.getExtension('OES_texture_half_float');\n      useHalfFloat = halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;\n    } // Don't consider halfFloat and convert back to Float when the range of data does not generate an accurate halfFloat\n    // AND it is not preferable to have a smaller texture than an exact texture.\n\n    var isHalfFloat = useHalfFloat && (hasExactHalfFloat(offset, scale) || preferSizeOverAccuracy);\n    model.useHalfFloat = isHalfFloat;\n  }\n  function processDataArray(dataArray, preferSizeOverAccuracy) {\n    var numComps = dataArray.getNumberOfComponents();\n    var dataType = dataArray.getDataType();\n    var data = dataArray.getData(); // Compute min max from array\n    // Using the vtkDataArray.getRange() enables caching\n\n    var minArray = new Array(numComps);\n    var maxArray = new Array(numComps);\n    for (var c = 0; c < numComps; ++c) {\n      var _dataArray$getRange = dataArray.getRange(c),\n        _dataArray$getRange2 = _slicedToArray(_dataArray$getRange, 2),\n        min = _dataArray$getRange2[0],\n        max = _dataArray$getRange2[1];\n      minArray[c] = min;\n      maxArray[c] = max;\n    }\n    var scaleOffsets = computeScaleOffsets(minArray, maxArray, numComps); // preferSizeOverAccuracy will override norm16 due to bug with norm16 implementation\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1408247\n\n    setUseHalfFloat(dataType, scaleOffsets.offset, scaleOffsets.scale, preferSizeOverAccuracy); // since our default is to use half float, in case that we can't use it\n    // we need to use another type\n\n    if (!model.useHalfFloat) {\n      publicAPI.getOpenGLDataType(dataType, true);\n    }\n    return {\n      numComps: numComps,\n      dataType: dataType,\n      data: data,\n      scaleOffsets: scaleOffsets\n    };\n  }\n  publicAPI.create2DFilterableFromRaw = function (width, height, numberOfComponents, dataType, values) {\n    var preferSizeOverAccuracy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    return publicAPI.create2DFilterableFromDataArray(width, height, vtkDataArray.newInstance({\n      numberOfComponents: numberOfComponents,\n      dataType: dataType,\n      values: values\n    }), preferSizeOverAccuracy);\n  };\n  publicAPI.create2DFilterableFromDataArray = function (width, height, dataArray) {\n    var preferSizeOverAccuracy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var _processDataArray = processDataArray(dataArray, preferSizeOverAccuracy),\n      numComps = _processDataArray.numComps,\n      dataType = _processDataArray.dataType,\n      data = _processDataArray.data;\n    publicAPI.create2DFromRaw(width, height, numComps, dataType, data);\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.create3DFromRaw = function (width, height, depth, numComps, dataType, data) {\n    // Permit OpenGLDataType to be half float, if applicable, for 3D\n    publicAPI.getOpenGLDataType(dataType); // Now determine the texture parameters using the arguments.\n\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n    model.target = model.context.TEXTURE_3D;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = depth;\n    model.numberOfDimensions = 3;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind(); // Create an array of texture with one texture\n\n    var dataArray = [data];\n    var is3DArray = true;\n    var pixData = updateArrayDataType(dataType, dataArray, is3DArray);\n    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // openGLDataType\n\n    if (useTexStorage(dataType)) {\n      model.context.texStorage3D(model.target, 1, model.internalFormat, model.width, model.height, model.depth);\n      if (scaledData[0] != null) {\n        model.context.texSubImage3D(model.target, 0, 0, 0, 0, model.width, model.height, model.depth, model.format, model.openGLDataType, scaledData[0]);\n      }\n    } else {\n      model.context.texImage3D(model.target, 0, model.internalFormat, model.width, model.height, model.depth, 0, model.format, model.openGLDataType, scaledData[0]);\n    }\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n  // This method simulates a 3D texture using 2D\n  // Prefer create3DFilterableFromDataArray to enable caching of min and max values\n\n  publicAPI.create3DFilterableFromRaw = function (width, height, depth, numberOfComponents, dataType, values) {\n    var preferSizeOverAccuracy = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    return publicAPI.create3DFilterableFromDataArray(width, height, depth, vtkDataArray.newInstance({\n      numberOfComponents: numberOfComponents,\n      dataType: dataType,\n      values: values\n    }), preferSizeOverAccuracy);\n  }; //----------------------------------------------------------------------------\n  // This method create a 3D texture from dimensions and a DataArray\n\n  publicAPI.create3DFilterableFromDataArray = function (width, height, depth, dataArray) {\n    var preferSizeOverAccuracy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var _processDataArray2 = processDataArray(dataArray, preferSizeOverAccuracy),\n      numComps = _processDataArray2.numComps,\n      dataType = _processDataArray2.dataType,\n      data = _processDataArray2.data,\n      scaleOffsets = _processDataArray2.scaleOffsets;\n    var numPixelsIn = width * height * depth;\n    var offset = [];\n    var scale = [];\n    for (var c = 0; c < numComps; ++c) {\n      offset[c] = 0.0;\n      scale[c] = 1.0;\n    } // store the information, we will need it later\n    // offset and scale are the offset and scale required to get\n    // the texture value back to data values ala\n    // data = texture * scale + offset\n    // and texture = (data - offset)/scale\n\n    model.volumeInfo = {\n      scale: scale,\n      offset: offset,\n      dataComputedScale: scaleOffsets.scale,\n      dataComputedOffset: scaleOffsets.offset,\n      width: width,\n      height: height,\n      depth: depth\n    }; // Create a copy of scale and offset to avoid aliasing issues\n    // Original is read only, copy is read/write\n    // Use the copy as volumeInfo.scale and volumeInfo.offset\n\n    var scaleOffsetsCopy = structuredClone(scaleOffsets); // WebGL2 path, we have 3d textures etc\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      if (model.oglNorm16Ext && !model.useHalfFloat && dataType === VtkDataTypes.SHORT) {\n        for (var _c = 0; _c < numComps; ++_c) {\n          model.volumeInfo.scale[_c] = 32767.0;\n        }\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      }\n      if (model.oglNorm16Ext && !model.useHalfFloat && dataType === VtkDataTypes.UNSIGNED_SHORT) {\n        for (var _c2 = 0; _c2 < numComps; ++_c2) {\n          model.volumeInfo.scale[_c2] = 65535.0;\n        }\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      }\n      if (dataType === VtkDataTypes.FLOAT || model.useHalfFloat && (dataType === VtkDataTypes.SHORT || dataType === VtkDataTypes.UNSIGNED_SHORT)) {\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      }\n      if (dataType === VtkDataTypes.UNSIGNED_CHAR) {\n        for (var _c3 = 0; _c3 < numComps; ++_c3) {\n          model.volumeInfo.scale[_c3] = 255.0;\n        }\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      } // otherwise convert to float\n\n      var _newArray = new Float32Array(numPixelsIn * numComps); // use computed scale and offset\n\n      model.volumeInfo.offset = scaleOffsetsCopy.offset;\n      model.volumeInfo.scale = scaleOffsetsCopy.scale;\n      var count = 0;\n      var scaleInverse = scaleOffsetsCopy.scale.map(function (s) {\n        return 1 / s;\n      });\n      for (var i = 0; i < numPixelsIn; i++) {\n        for (var nc = 0; nc < numComps; nc++) {\n          _newArray[count] = (data[count] - scaleOffsetsCopy.offset[nc]) * scaleInverse[nc];\n          count++;\n        }\n      }\n      return publicAPI.create3DFromRaw(width, height, depth, numComps, VtkDataTypes.FLOAT, _newArray);\n    } // not webgl2, deal with webgl1, no 3d textures\n    // and maybe no float textures\n\n    var volCopyData = function volCopyData(outArray, outIdx, inValue, smin, smax) {\n      outArray[outIdx] = inValue;\n    };\n    var dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR; // unsigned char gets used as is\n\n    if (dataType === VtkDataTypes.UNSIGNED_CHAR) {\n      for (var _c4 = 0; _c4 < numComps; ++_c4) {\n        scaleOffsetsCopy.offset[_c4] = 0.0;\n        scaleOffsetsCopy.scale[_c4] = 255.0;\n      }\n    } else if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n      // use float textures scaled to 0.0 to 1.0\n      dataTypeToUse = VtkDataTypes.FLOAT;\n      volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {\n        outArray[outIdx] = (inValue - soffset) / sscale;\n      };\n    } else {\n      // worst case, scale data to uchar\n      dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR;\n      volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {\n        outArray[outIdx] = 255.0 * (inValue - soffset) / sscale;\n      };\n    } // Now determine the texture parameters using the arguments.\n\n    publicAPI.getOpenGLDataType(dataTypeToUse);\n    publicAPI.getInternalFormat(dataTypeToUse, numComps);\n    publicAPI.getFormat(dataTypeToUse, numComps);\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    } // have to pack this 3D texture into pot 2D texture\n\n    model.target = model.context.TEXTURE_2D;\n    model.components = numComps;\n    model.depth = 1;\n    model.numberOfDimensions = 2; // MAX_TEXTURE_SIZE gives the max dimensions that can be supported by the GPU,\n    // but it doesn't mean it will fit in memory. If we have to use a float data type\n    // or 4 components, there are good chances that the texture size will blow up\n    // and could not fit in the GPU memory. Use a smaller texture size in that case,\n    // which will force a downsampling of the dataset.\n    // That problem does not occur when using webGL2 since we can pack the data in\n    // denser textures based on our data type.\n    // TODO: try to fit in the biggest supported texture, catch the gl error if it\n    // does not fix (OUT_OF_MEMORY), then attempt with smaller texture\n\n    var maxTexDim = model.context.getParameter(model.context.MAX_TEXTURE_SIZE);\n    if (maxTexDim > 4096 && (dataTypeToUse === VtkDataTypes.FLOAT || numComps >= 3)) {\n      maxTexDim = 4096;\n    } // compute estimate for XY subsample\n\n    var xstride = 1;\n    var ystride = 1;\n    if (numPixelsIn > maxTexDim * maxTexDim) {\n      xstride = Math.ceil(Math.sqrt(numPixelsIn / (maxTexDim * maxTexDim)));\n      ystride = xstride;\n    }\n    var targetWidth = Math.sqrt(numPixelsIn) / xstride;\n    targetWidth = nearestPowerOfTwo(targetWidth); // determine X reps\n\n    var xreps = Math.floor(targetWidth * xstride / width);\n    var yreps = Math.ceil(depth / xreps);\n    var targetHeight = nearestPowerOfTwo(height * yreps / ystride);\n    model.width = targetWidth;\n    model.height = targetHeight;\n    model._openGLRenderWindow.activateTexture(publicAPI);\n    publicAPI.createTexture();\n    publicAPI.bind(); // store the information, we will need it later\n\n    model.volumeInfo.xreps = xreps;\n    model.volumeInfo.yreps = yreps;\n    model.volumeInfo.xstride = xstride;\n    model.volumeInfo.ystride = ystride;\n    model.volumeInfo.offset = scaleOffsetsCopy.offset;\n    model.volumeInfo.scale = scaleOffsetsCopy.scale; // OK stuff the data into the 2d TEXTURE\n    // first allocate the new texture\n\n    var newArray;\n    var pixCount = targetWidth * targetHeight * numComps;\n    if (dataTypeToUse === VtkDataTypes.FLOAT) {\n      newArray = new Float32Array(pixCount);\n    } else {\n      newArray = new Uint8Array(pixCount);\n    } // then stuff the data into it, nothing fancy right now\n    // for stride\n\n    var outIdx = 0;\n    var tileWidth = Math.floor(width / xstride);\n    var tileHeight = Math.floor(height / ystride);\n    for (var yRep = 0; yRep < yreps; yRep++) {\n      var xrepsThisRow = Math.min(xreps, depth - yRep * xreps);\n      var outXContIncr = numComps * (model.width - xrepsThisRow * Math.floor(width / xstride));\n      for (var tileY = 0; tileY < tileHeight; tileY++) {\n        for (var xRep = 0; xRep < xrepsThisRow; xRep++) {\n          var inOffset = numComps * ((yRep * xreps + xRep) * width * height + ystride * tileY * width);\n          for (var tileX = 0; tileX < tileWidth; tileX++) {\n            // copy value\n            for (var _nc = 0; _nc < numComps; _nc++) {\n              volCopyData(newArray, outIdx, data[inOffset + xstride * tileX * numComps + _nc], scaleOffsetsCopy.offset[_nc], scaleOffsetsCopy.scale[_nc]);\n              outIdx++;\n            }\n          }\n        }\n        outIdx += outXContIncr;\n      }\n    } // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n    if (useTexStorage(dataTypeToUse)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n      if (newArray != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, newArray);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, newArray);\n    }\n    publicAPI.deactivate();\n    return true;\n  };\n  publicAPI.setOpenGLRenderWindow = function (rw) {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.getMaximumTextureSize = function (ctx) {\n    if (ctx && ctx.isCurrent()) {\n      return ctx.getIntegerv(ctx.MAX_TEXTURE_SIZE);\n    }\n    return -1;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  _openGLRenderWindow: null,\n  _forceInternalFormat: false,\n  context: null,\n  handle: 0,\n  sendParametersTime: null,\n  textureBuildTime: null,\n  numberOfDimensions: 0,\n  target: 0,\n  format: 0,\n  openGLDataType: 0,\n  components: 0,\n  width: 0,\n  height: 0,\n  depth: 0,\n  autoParameters: true,\n  wrapS: Wrap.CLAMP_TO_EDGE,\n  wrapT: Wrap.CLAMP_TO_EDGE,\n  wrapR: Wrap.CLAMP_TO_EDGE,\n  minificationFilter: Filter.NEAREST,\n  magnificationFilter: Filter.NEAREST,\n  minLOD: -1000.0,\n  maxLOD: 1000.0,\n  baseLevel: 0,\n  maxLevel: 1000,\n  generateMipmap: false,\n  // use half float by default, but it will get set\n  // to false if the context does not support it or\n  // the voxel intensity range is out of the accurate\n  // range of half float\n  useHalfFloat: true,\n  oglNorm16Ext: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.sendParametersTime = {};\n  obj(model.sendParametersTime, {\n    mtime: 0\n  });\n  model.textureBuildTime = {};\n  obj(model.textureBuildTime, {\n    mtime: 0\n  }); // Build VTK API\n\n  set(publicAPI, model, ['format', 'openGLDataType']);\n  setGet(publicAPI, model, ['keyMatrixTime', 'minificationFilter', 'magnificationFilter', 'wrapS', 'wrapT', 'wrapR', 'generateMipmap', 'oglNorm16Ext']);\n  get(publicAPI, model, ['width', 'height', 'volumeInfo', 'components', 'handle', 'target']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']); // Object methods\n\n  vtkOpenGLTexture(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLTexture'); // ----------------------------------------------------------------------------\n\nvar vtkOpenGLTexture$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants); // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkTexture', newInstance);\nexport { vtkOpenGLTexture$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","_slicedToArray","Constants","HalfFloat","newInstance","newInstance$1","obj","set","setGet","get","moveToProtected","newTypedArray","vtkDebugMacro","vtkDebugMacro$1","vtkErrorMacro","vtkErrorMacro$1","vtkWarningMacro","vtkWarningMacro$1","vtkDataArray","Q","isPowerOfTwo","N","nearestPowerOfTwo","vtkViewNode","registerOverride","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Wrap","Filter","VtkDataTypes","toHalf","vtkOpenGLTexture","publicAPI","model","classHierarchy","render","renWin","undefined","_openGLRenderWindow","_openGLRenderer","getFirstAncestorOfType","getParent","context","getContext","renderable","getInterpolate","generateMipmap","setMinificationFilter","LINEAR_MIPMAP_LINEAR","LINEAR","setMagnificationFilter","NEAREST","getRepeat","setWrapR","REPEAT","setWrapS","setWrapT","getInputData","setImage","handle","getMTime","textureBuildTime","getImage","getImageLoaded","create2DFromImage","activate","sendParameters","modified","getCanvas","canvas","create2DFromRaw","width","height","UNSIGNED_CHAR","getJsImageData","jsid","data","input","getPointData","getScalars","ext","getExtent","inScalars","getNumberOfInputPorts","indata","scalars","getData","getNumberOfComponents","createCubeFromRaw","getDataType","destroyTexture","deactivate","deleteTexture","numberOfDimensions","components","depth","resetFormatAndType","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","getOpenGLFilterMode","minificationFilter","TEXTURE_MAG_FILTER","magnificationFilter","TEXTURE_WRAP_S","getOpenGLWrapMode","wrapS","TEXTURE_WRAP_T","wrapT","getWebgl2","TEXTURE_WRAP_R","wrapR","getTextureUnit","getTextureUnitForTexture","activateTexture","bind","deactivateTexture","releaseGraphicsResources","rwin","internalFormat","format","openGLDataType","shaderProgram","autoParameters","sendParametersTime","isBound","result","TEXTURE_2D","TEXTURE_BINDING_2D","oid","getIntegerv","TEXTURE_BASE_LEVEL","baseLevel","TEXTURE_MAX_LEVEL","maxLevel","getInternalFormat","vtktype","numComps","_forceInternalFormat","getDefaultInternalFormat","concat","getDefaultTextureInternalFormat","oglNorm16Ext","useHalfFloat","setInternalFormat","iFormat","getFormat","getDefaultFormat","RED","RG","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","getDefaultDataType","vtkScalarType","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","HALF_FLOAT","FLOAT","VOID","getExtension","halfFloat","HALF_FLOAT_OES","getOpenGLDataType","forceUpdate","getShiftAndScale","shift","scale","BYTE","INT","UNSIGNED_INT","emode","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","CLAMP_TO_EDGE","MIRRORED_REPEAT","updateArrayDataType","dataType","pixData","pixCount","idx","dataArrayToCopy","subarray","Float32Array","_idx","_dataArrayToCopy","Uint8Array","halfFloatExt","_idx2","newArray","Uint16Array","src","_i","scaleTextureToHighestPowerOfTwo","newWidth","newHeight","jFactor","iFactor","usingHalf","j","joff","jidx","jlow","Math","floor","jhi","ceil","jmix","jmix1","ioff","iidx","ilow","ihi","imix","c","fromHalf","_i2","useTexStorage","_model$renderable","resizable","getResizable","webGLInfo","getGLInformations","RENDERER","value","match","navigator","platform","flip","dataArray","scaledData","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_ALIGNMENT","texStorage2D","texSubImage2D","texImage2D","TEXTURE_CUBE_MAP","invertedData","widthLevel","heightLevel","y","row1","row2","slice","_i3","w","h","tempData","TEXTURE_CUBE_MAP_POSITIVE_X","createDepthFromRaw","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","image","needNearestPowerOfTwo","document","createElement","ctx","translate","drawImage","safeImage","computeScaleOffsets","min","max","offset","Array","hasExactHalfFloat","setUseHalfFloat","preferSizeOverAccuracy","isHalfFloat","processDataArray","minArray","maxArray","_dataArray$getRange","getRange","_dataArray$getRange2","scaleOffsets","create2DFilterableFromRaw","numberOfComponents","values","create2DFilterableFromDataArray","_processDataArray","create3DFromRaw","TEXTURE_3D","is3DArray","texStorage3D","texSubImage3D","texImage3D","create3DFilterableFromRaw","create3DFilterableFromDataArray","_processDataArray2","numPixelsIn","volumeInfo","dataComputedScale","dataComputedOffset","scaleOffsetsCopy","structuredClone","_c","_c2","_c3","_newArray","count","scaleInverse","map","s","nc","volCopyData","outArray","outIdx","inValue","smin","smax","dataTypeToUse","_c4","soffset","sscale","maxTexDim","getParameter","MAX_TEXTURE_SIZE","xstride","ystride","sqrt","targetWidth","xreps","yreps","targetHeight","tileWidth","tileHeight","yRep","xrepsThisRow","outXContIncr","tileY","xRep","inOffset","tileX","_nc","setOpenGLRenderWindow","rw","getMaximumTextureSize","isCurrent","DEFAULT_VALUES","minLOD","maxLOD","extend","initialValues","assign","mtime","vtkOpenGLTexture$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport Constants from './Texture/Constants.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport { newInstance as newInstance$1, obj, set, setGet, get, moveToProtected, newTypedArray, vtkDebugMacro as vtkDebugMacro$1, vtkErrorMacro as vtkErrorMacro$1, vtkWarningMacro as vtkWarningMacro$1 } from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { Q as isPowerOfTwo, N as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar Wrap = Constants.Wrap,\n    Filter = Constants.Filter;\nvar VtkDataTypes = vtkDataArray.VtkDataTypes;\nvar vtkDebugMacro = vtkDebugMacro$1,\n    vtkErrorMacro = vtkErrorMacro$1,\n    vtkWarningMacro = vtkWarningMacro$1;\nvar toHalf = HalfFloat.toHalf; // ----------------------------------------------------------------------------\n// vtkOpenGLTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTexture'); // Renders myself\n\n  publicAPI.render = function () {\n    var renWin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (renWin) {\n      model._openGLRenderWindow = renWin;\n    } else {\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer'); // sync renderable properties\n\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n    }\n\n    model.context = model._openGLRenderWindow.getContext();\n\n    if (model.renderable.getInterpolate()) {\n      if (model.generateMipmap) {\n        publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n      } else {\n        publicAPI.setMinificationFilter(Filter.LINEAR);\n      }\n\n      publicAPI.setMagnificationFilter(Filter.LINEAR);\n    } else {\n      publicAPI.setMinificationFilter(Filter.NEAREST);\n      publicAPI.setMagnificationFilter(Filter.NEAREST);\n    }\n\n    if (model.renderable.getRepeat()) {\n      publicAPI.setWrapR(Wrap.REPEAT);\n      publicAPI.setWrapS(Wrap.REPEAT);\n      publicAPI.setWrapT(Wrap.REPEAT);\n    } // clear image if input data is set\n\n\n    if (model.renderable.getInputData()) {\n      model.renderable.setImage(null);\n    } // create the texture if it is not done already\n\n\n    if (!model.handle || model.renderable.getMTime() > model.textureBuildTime.getMTime()) {\n      // if we have an Image\n      if (model.renderable.getImage() !== null) {\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        } // Have an Image which may not be complete\n\n\n        if (model.renderable.getImage() && model.renderable.getImageLoaded()) {\n          publicAPI.create2DFromImage(model.renderable.getImage());\n          publicAPI.activate();\n          publicAPI.sendParameters();\n          model.textureBuildTime.modified();\n        }\n      } // if we have a canvas\n\n\n      if (model.renderable.getCanvas() !== null) {\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n\n        var canvas = model.renderable.getCanvas();\n        publicAPI.create2DFromRaw(canvas.width, canvas.height, 4, VtkDataTypes.UNSIGNED_CHAR, canvas, true);\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      } // if we have jsImageData\n\n\n      if (model.renderable.getJsImageData() !== null) {\n        var jsid = model.renderable.getJsImageData();\n\n        if (model.renderable.getInterpolate()) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n\n        publicAPI.create2DFromRaw(jsid.width, jsid.height, 4, VtkDataTypes.UNSIGNED_CHAR, jsid.data, true);\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      } // if we have InputData\n\n\n      var input = model.renderable.getInputData(0);\n\n      if (input && input.getPointData().getScalars()) {\n        var ext = input.getExtent();\n        var inScalars = input.getPointData().getScalars(); // do we have a cube map? Six inputs\n\n        var data = [];\n\n        for (var i = 0; i < model.renderable.getNumberOfInputPorts(); ++i) {\n          var indata = model.renderable.getInputData(i);\n          var scalars = indata ? indata.getPointData().getScalars().getData() : null;\n\n          if (scalars) {\n            data.push(scalars);\n          }\n        }\n\n        if (model.renderable.getInterpolate() && inScalars.getNumberOfComponents() === 4) {\n          model.generateMipmap = true;\n          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);\n        }\n\n        if (data.length % 6 === 0) {\n          publicAPI.createCubeFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), data);\n        } else {\n          publicAPI.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());\n        }\n\n        publicAPI.activate();\n        publicAPI.sendParameters();\n        model.textureBuildTime.modified();\n      }\n    }\n\n    if (model.handle) {\n      publicAPI.activate();\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.destroyTexture = function () {\n    // deactivate it first\n    publicAPI.deactivate();\n\n    if (model.context && model.handle) {\n      model.context.deleteTexture(model.handle);\n    }\n\n    model.handle = 0;\n    model.numberOfDimensions = 0;\n    model.target = 0;\n    model.components = 0;\n    model.width = 0;\n    model.height = 0;\n    model.depth = 0;\n    publicAPI.resetFormatAndType();\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.createTexture = function () {\n    // reuse the existing handle if we have one\n    if (!model.handle) {\n      model.handle = model.context.createTexture();\n\n      if (model.target) {\n        model.context.bindTexture(model.target, model.handle); // See: http://www.openmodel.context..org/wiki/Common_Mistakes#Creating_a_complete_texture\n        // turn off mip map filter or set the base and max level correctly. here\n        // both are done.\n\n        model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));\n        model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));\n        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));\n        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));\n\n        if (model._openGLRenderWindow.getWebgl2()) {\n          model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));\n        }\n\n        model.context.bindTexture(model.target, null);\n      }\n    }\n  }; //---------------------------------------------------------------------------\n\n\n  publicAPI.getTextureUnit = function () {\n    if (model._openGLRenderWindow) {\n      return model._openGLRenderWindow.getTextureUnitForTexture(publicAPI);\n    }\n\n    return -1;\n  }; //---------------------------------------------------------------------------\n\n\n  publicAPI.activate = function () {\n    // activate a free texture unit for this texture\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    publicAPI.bind();\n  }; //---------------------------------------------------------------------------\n\n\n  publicAPI.deactivate = function () {\n    if (model._openGLRenderWindow) {\n      model._openGLRenderWindow.deactivateTexture(publicAPI);\n    }\n  }; //---------------------------------------------------------------------------\n\n\n  publicAPI.releaseGraphicsResources = function (rwin) {\n    if (rwin && model.handle) {\n      rwin.activateTexture(publicAPI);\n      rwin.deactivateTexture(publicAPI);\n      model.context.deleteTexture(model.handle);\n      model.handle = 0;\n      model.numberOfDimensions = 0;\n      model.target = 0;\n      model.internalFormat = 0;\n      model.format = 0;\n      model.openGLDataType = 0;\n      model.components = 0;\n      model.width = 0;\n      model.height = 0;\n      model.depth = 0;\n    }\n\n    if (model.shaderProgram) {\n      model.shaderProgram.releaseGraphicsResources(rwin);\n      model.shaderProgram = null;\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.bind = function () {\n    model.context.bindTexture(model.target, model.handle);\n\n    if (model.autoParameters && publicAPI.getMTime() > model.sendParametersTime.getMTime()) {\n      publicAPI.sendParameters();\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.isBound = function () {\n    var result = false;\n\n    if (model.context && model.handle) {\n      var target = 0;\n\n      switch (model.target) {\n        case model.context.TEXTURE_2D:\n          target = model.context.TEXTURE_BINDING_2D;\n          break;\n\n        default:\n          vtkWarningMacro('impossible case');\n          break;\n      }\n\n      var oid = model.context.getIntegerv(target);\n      result = oid === model.handle;\n    }\n\n    return result;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.sendParameters = function () {\n    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));\n    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));\n    }\n\n    model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));\n    model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      model.context.texParameteri(model.target, model.context.TEXTURE_BASE_LEVEL, model.baseLevel);\n      model.context.texParameteri(model.target, model.context.TEXTURE_MAX_LEVEL, model.maxLevel);\n    } // model.context.texParameterf(model.target, model.context.TEXTURE_MIN_LOD, model.minLOD);\n    // model.context.texParameterf(model.target, model.context.TEXTURE_MAX_LOD, model.maxLOD);\n\n\n    model.sendParametersTime.modified();\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getInternalFormat = function (vtktype, numComps) {\n    if (!model._forceInternalFormat) {\n      model.internalFormat = publicAPI.getDefaultInternalFormat(vtktype, numComps);\n    }\n\n    if (!model.internalFormat) {\n      vtkDebugMacro(\"Unable to find suitable internal format for T=\".concat(vtktype, \" NC= \").concat(numComps));\n    }\n\n    return model.internalFormat;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getDefaultInternalFormat = function (vtktype, numComps) {\n    var result = 0; // try default next\n\n    result = model._openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, model.oglNorm16Ext, model.useHalfFloat);\n\n    if (result) {\n      return result;\n    }\n\n    if (!result) {\n      vtkDebugMacro('Unsupported internal texture type!');\n      vtkDebugMacro(\"Unable to find suitable internal format for T=\".concat(vtktype, \" NC= \").concat(numComps));\n    }\n\n    return result;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.setInternalFormat = function (iFormat) {\n    model._forceInternalFormat = true;\n\n    if (iFormat !== model.internalFormat) {\n      model.internalFormat = iFormat;\n      publicAPI.modified();\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getFormat = function (vtktype, numComps) {\n    model.format = publicAPI.getDefaultFormat(vtktype, numComps);\n    return model.format;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getDefaultFormat = function (vtktype, numComps) {\n    if (model._openGLRenderWindow.getWebgl2()) {\n      switch (numComps) {\n        case 1:\n          return model.context.RED;\n\n        case 2:\n          return model.context.RG;\n\n        case 3:\n          return model.context.RGB;\n\n        case 4:\n          return model.context.RGBA;\n\n        default:\n          return model.context.RGB;\n      }\n    } else {\n      // webgl1\n      switch (numComps) {\n        case 1:\n          return model.context.LUMINANCE;\n\n        case 2:\n          return model.context.LUMINANCE_ALPHA;\n\n        case 3:\n          return model.context.RGB;\n\n        case 4:\n          return model.context.RGBA;\n\n        default:\n          return model.context.RGB;\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.resetFormatAndType = function () {\n    model.format = 0;\n    model.internalFormat = 0;\n    model._forceInternalFormat = false;\n    model.openGLDataType = 0;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getDefaultDataType = function (vtkScalarType) {\n    // DON'T DEAL with VTK_CHAR as this is platform dependent.\n    if (model._openGLRenderWindow.getWebgl2()) {\n      switch (vtkScalarType) {\n        // case VtkDataTypes.SIGNED_CHAR:\n        //   return model.context.BYTE;\n        case VtkDataTypes.UNSIGNED_CHAR:\n          return model.context.UNSIGNED_BYTE;\n        // prefer norm16 since that is accurate compared to\n        // half float which is not\n\n        case model.oglNorm16Ext && !model.useHalfFloat && VtkDataTypes.SHORT:\n          return model.context.SHORT;\n\n        case model.oglNorm16Ext && !model.useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          return model.context.UNSIGNED_SHORT;\n        // use half float type\n\n        case model.useHalfFloat && VtkDataTypes.SHORT:\n          return model.context.HALF_FLOAT;\n\n        case model.useHalfFloat && VtkDataTypes.UNSIGNED_SHORT:\n          return model.context.HALF_FLOAT;\n        // case VtkDataTypes.INT:\n        //   return model.context.INT;\n        // case VtkDataTypes.UNSIGNED_INT:\n        //   return model.context.UNSIGNED_INT;\n\n        case VtkDataTypes.FLOAT:\n        case VtkDataTypes.VOID: // used for depth component textures.\n\n        default:\n          return model.context.FLOAT;\n      }\n    }\n\n    switch (vtkScalarType) {\n      // case VtkDataTypes.SIGNED_CHAR:\n      //   return model.context.BYTE;\n      case VtkDataTypes.UNSIGNED_CHAR:\n        return model.context.UNSIGNED_BYTE;\n      // case VtkDataTypes.SHORT:\n      //   return model.context.SHORT;\n      // case VtkDataTypes.UNSIGNED_SHORT:\n      //   return model.context.UNSIGNED_SHORT;\n      // case VtkDataTypes.INT:\n      //   return model.context.INT;\n      // case VtkDataTypes.UNSIGNED_INT:\n      //   return model.context.UNSIGNED_INT;\n\n      case VtkDataTypes.FLOAT:\n      case VtkDataTypes.VOID: // used for depth component textures.\n\n      default:\n        if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n          return model.context.FLOAT;\n        }\n\n        {\n          var halfFloat = model.context.getExtension('OES_texture_half_float');\n\n          if (halfFloat && model.context.getExtension('OES_texture_half_float_linear')) {\n            return halfFloat.HALF_FLOAT_OES;\n          }\n        }\n        return model.context.UNSIGNED_BYTE;\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getOpenGLDataType = function (vtkScalarType) {\n    var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!model.openGLDataType || forceUpdate) {\n      model.openGLDataType = publicAPI.getDefaultDataType(vtkScalarType);\n    }\n\n    return model.openGLDataType;\n  };\n\n  publicAPI.getShiftAndScale = function () {\n    var shift = 0.0;\n    var scale = 1.0; // for all float type internal formats\n\n    switch (model.openGLDataType) {\n      case model.context.BYTE:\n        scale = 127.5;\n        shift = scale - 128.0;\n        break;\n\n      case model.context.UNSIGNED_BYTE:\n        scale = 255.0;\n        shift = 0.0;\n        break;\n\n      case model.context.SHORT:\n        scale = 32767.5;\n        shift = scale - 32768.0;\n        break;\n\n      case model.context.UNSIGNED_SHORT:\n        scale = 65536.0;\n        shift = 0.0;\n        break;\n\n      case model.context.INT:\n        scale = 2147483647.5;\n        shift = scale - 2147483648.0;\n        break;\n\n      case model.context.UNSIGNED_INT:\n        scale = 4294967295.0;\n        shift = 0.0;\n        break;\n\n      case model.context.FLOAT:\n    }\n\n    return {\n      shift: shift,\n      scale: scale\n    };\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getOpenGLFilterMode = function (emode) {\n    switch (emode) {\n      case Filter.NEAREST:\n        return model.context.NEAREST;\n\n      case Filter.LINEAR:\n        return model.context.LINEAR;\n\n      case Filter.NEAREST_MIPMAP_NEAREST:\n        return model.context.NEAREST_MIPMAP_NEAREST;\n\n      case Filter.NEAREST_MIPMAP_LINEAR:\n        return model.context.NEAREST_MIPMAP_LINEAR;\n\n      case Filter.LINEAR_MIPMAP_NEAREST:\n        return model.context.LINEAR_MIPMAP_NEAREST;\n\n      case Filter.LINEAR_MIPMAP_LINEAR:\n        return model.context.LINEAR_MIPMAP_LINEAR;\n\n      default:\n        return model.context.NEAREST;\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getOpenGLWrapMode = function (vtktype) {\n    switch (vtktype) {\n      case Wrap.CLAMP_TO_EDGE:\n        return model.context.CLAMP_TO_EDGE;\n\n      case Wrap.REPEAT:\n        return model.context.REPEAT;\n\n      case Wrap.MIRRORED_REPEAT:\n        return model.context.MIRRORED_REPEAT;\n\n      default:\n        return model.context.CLAMP_TO_EDGE;\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  function updateArrayDataType(dataType, data) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var pixData = [];\n    var pixCount = model.width * model.height * model.components;\n\n    if (depth) {\n      pixCount *= model.depth;\n    } // if the opengl data type is float\n    // then the data array must be float\n\n\n    if (dataType !== VtkDataTypes.FLOAT && model.openGLDataType === model.context.FLOAT) {\n      for (var idx = 0; idx < data.length; idx++) {\n        if (data[idx]) {\n          var dataArrayToCopy = data[idx].length > pixCount ? data[idx].subarray(0, pixCount) : data[idx];\n          pixData.push(new Float32Array(dataArrayToCopy));\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // if the opengl data type is ubyte\n    // then the data array must be u8, we currently simply truncate the data\n\n\n    if (dataType !== VtkDataTypes.UNSIGNED_CHAR && model.openGLDataType === model.context.UNSIGNED_BYTE) {\n      for (var _idx = 0; _idx < data.length; _idx++) {\n        if (data[_idx]) {\n          var _dataArrayToCopy = data[_idx].length > pixCount ? data[_idx].subarray(0, pixCount) : data[_idx];\n\n          pixData.push(new Uint8Array(_dataArrayToCopy));\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // if the opengl data type is half float\n    // then the data array must be u16\n\n\n    var halfFloat = false;\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      halfFloat = model.openGLDataType === model.context.HALF_FLOAT;\n    } else {\n      var halfFloatExt = model.context.getExtension('OES_texture_half_float');\n      halfFloat = halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;\n    }\n\n    if (halfFloat) {\n      for (var _idx2 = 0; _idx2 < data.length; _idx2++) {\n        if (data[_idx2]) {\n          var newArray = new Uint16Array(pixCount);\n          var src = data[_idx2];\n\n          for (var i = 0; i < pixCount; i++) {\n            newArray[i] = toHalf(src[i]);\n          }\n\n          pixData.push(newArray);\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // The output has to be filled\n\n\n    if (pixData.length === 0) {\n      for (var _i = 0; _i < data.length; _i++) {\n        pixData.push(data[_i]);\n      }\n    }\n\n    return pixData;\n  } //----------------------------------------------------------------------------\n\n\n  function scaleTextureToHighestPowerOfTwo(data) {\n    if (model._openGLRenderWindow.getWebgl2()) {\n      // No need if webGL2\n      return data;\n    }\n\n    var pixData = [];\n    var width = model.width;\n    var height = model.height;\n    var numComps = model.components;\n\n    if (data && (!isPowerOfTwo(width) || !isPowerOfTwo(height))) {\n      // Scale up the texture to the next highest power of two dimensions.\n      var halfFloat = model.context.getExtension('OES_texture_half_float');\n      var newWidth = nearestPowerOfTwo(width);\n      var newHeight = nearestPowerOfTwo(height);\n      var pixCount = newWidth * newHeight * model.components;\n\n      for (var idx = 0; idx < data.length; idx++) {\n        if (data[idx] !== null) {\n          var newArray = null;\n          var jFactor = height / newHeight;\n          var iFactor = width / newWidth;\n          var usingHalf = false;\n\n          if (model.openGLDataType === model.context.FLOAT) {\n            newArray = new Float32Array(pixCount);\n          } else if (halfFloat && model.openGLDataType === halfFloat.HALF_FLOAT_OES) {\n            newArray = new Uint16Array(pixCount);\n            usingHalf = true;\n          } else {\n            newArray = new Uint8Array(pixCount);\n          }\n\n          for (var j = 0; j < newHeight; j++) {\n            var joff = j * newWidth * numComps;\n            var jidx = j * jFactor;\n            var jlow = Math.floor(jidx);\n            var jhi = Math.ceil(jidx);\n\n            if (jhi >= height) {\n              jhi = height - 1;\n            }\n\n            var jmix = jidx - jlow;\n            var jmix1 = 1.0 - jmix;\n            jlow = jlow * width * numComps;\n            jhi = jhi * width * numComps;\n\n            for (var i = 0; i < newWidth; i++) {\n              var ioff = i * numComps;\n              var iidx = i * iFactor;\n              var ilow = Math.floor(iidx);\n              var ihi = Math.ceil(iidx);\n\n              if (ihi >= width) {\n                ihi = width - 1;\n              }\n\n              var imix = iidx - ilow;\n              ilow *= numComps;\n              ihi *= numComps;\n\n              for (var c = 0; c < numComps; c++) {\n                if (usingHalf) {\n                  newArray[joff + ioff + c] = HalfFloat.toHalf(HalfFloat.fromHalf(data[idx][jlow + ilow + c]) * jmix1 * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jlow + ihi + c]) * jmix1 * imix + HalfFloat.fromHalf(data[idx][jhi + ilow + c]) * jmix * (1.0 - imix) + HalfFloat.fromHalf(data[idx][jhi + ihi + c]) * jmix * imix);\n                } else {\n                  newArray[joff + ioff + c] = data[idx][jlow + ilow + c] * jmix1 * (1.0 - imix) + data[idx][jlow + ihi + c] * jmix1 * imix + data[idx][jhi + ilow + c] * jmix * (1.0 - imix) + data[idx][jhi + ihi + c] * jmix * imix;\n                }\n              }\n            }\n          }\n\n          pixData.push(newArray);\n          model.width = newWidth;\n          model.height = newHeight;\n        } else {\n          pixData.push(null);\n        }\n      }\n    } // The output has to be filled\n\n\n    if (pixData.length === 0) {\n      for (var _i2 = 0; _i2 < data.length; _i2++) {\n        pixData.push(data[_i2]);\n      }\n    }\n\n    return pixData;\n  } //----------------------------------------------------------------------------\n\n\n  function useTexStorage(dataType) {\n    if (model._openGLRenderWindow) {\n      var _model$renderable;\n\n      if (model.resizable || (_model$renderable = model.renderable) !== null && _model$renderable !== void 0 && _model$renderable.getResizable()) {\n        // Cannot use texStorage if the texture is supposed to be resizable.\n        return false;\n      }\n\n      if (model._openGLRenderWindow.getWebgl2()) {\n        var webGLInfo = model._openGLRenderWindow.getGLInformations();\n\n        if (webGLInfo.RENDERER.value.match(/WebKit/gi) && navigator.platform.match(/Mac/gi) && model.oglNorm16Ext && (dataType === VtkDataTypes.UNSIGNED_SHORT || dataType === VtkDataTypes.SHORT)) {\n          // Cannot use texStorage with EXT_texture_norm16 textures on Mac M1 GPU.\n          // No errors reported but the texture is unusable.\n          return false;\n        } // Use texStorage for WebGL2\n\n\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  } //----------------------------------------------------------------------------\n\n\n  publicAPI.create2DFromRaw = function (width, height, numComps, dataType, data) {\n    var flip = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType, true);\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n\n    model.target = model.context.TEXTURE_2D;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    publicAPI.createTexture();\n    publicAPI.bind(); // Create an array of texture with one texture\n\n    var dataArray = [data];\n    var pixData = updateArrayDataType(dataType, dataArray);\n    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.\n\n    model.context.pixelStorei(model.context.UNPACK_FLIP_Y_WEBGL, flip);\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n\n      if (scaledData[0] != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, scaledData[0]);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, scaledData[0]);\n    }\n\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    } // always reset the flip\n\n\n    if (flip) {\n      model.context.pixelStorei(model.context.UNPACK_FLIP_Y_WEBGL, false);\n    }\n\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.createCubeFromRaw = function (width, height, numComps, dataType, data) {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType);\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n\n    model.target = model.context.TEXTURE_CUBE_MAP;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    model.maxLevel = data.length / 6 - 1;\n    publicAPI.createTexture();\n    publicAPI.bind();\n    var pixData = updateArrayDataType(dataType, data);\n    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // invert the data because opengl is messed up with cube maps\n    // and uses the old renderman standard with Y going down\n    // even though it is completely at odds with OpenGL standards\n\n    var invertedData = [];\n    var widthLevel = model.width;\n    var heightLevel = model.height;\n\n    for (var i = 0; i < scaledData.length; i++) {\n      if (i % 6 === 0 && i !== 0) {\n        widthLevel /= 2;\n        heightLevel /= 2;\n      }\n\n      invertedData[i] = newTypedArray(dataType, heightLevel * widthLevel * model.components);\n\n      for (var y = 0; y < heightLevel; ++y) {\n        var row1 = y * widthLevel * model.components;\n        var row2 = (heightLevel - y - 1) * widthLevel * model.components;\n        invertedData[i].set(scaledData[i].slice(row2, row2 + widthLevel * model.components), row1);\n      }\n    } // Source texture data from the PBO.\n\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 6, model.internalFormat, model.width, model.height);\n    } // We get the 6 images\n\n\n    for (var _i3 = 0; _i3 < 6; _i3++) {\n      // For each mipmap level\n      var j = 0;\n      var w = model.width;\n      var h = model.height;\n\n      while (w >= 1 && h >= 1) {\n        // In webgl 1, all levels need to be defined. So if the latest level size is\n        // 8x8, we have to add 3 more null textures (4x4, 2x2, 1x1)\n        // In webgl 2, the attribute maxLevel will be use.\n        var tempData = null;\n\n        if (j <= model.maxLevel) {\n          tempData = invertedData[6 * j + _i3];\n        }\n\n        if (useTexStorage(dataType)) {\n          if (tempData != null) {\n            model.context.texSubImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + _i3, j, 0, 0, w, h, model.format, model.openGLDataType, tempData);\n          }\n        } else {\n          model.context.texImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + _i3, j, model.internalFormat, w, h, 0, model.format, model.openGLDataType, tempData);\n        }\n\n        j++;\n        w /= 2;\n        h /= 2;\n      }\n    } // generateMipmap must not be called here because we manually upload all levels\n    // if it is called, all levels will be overwritten\n\n\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.createDepthFromRaw = function (width, height, dataType, data) {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(dataType);\n    model.format = model.context.DEPTH_COMPONENT;\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      if (dataType === VtkDataTypes.FLOAT) {\n        model.internalFormat = model.context.DEPTH_COMPONENT32F;\n      } else {\n        model.internalFormat = model.context.DEPTH_COMPONENT16;\n      }\n    } else {\n      model.internalFormat = model.context.DEPTH_COMPONENT;\n    }\n\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n\n    model.target = model.context.TEXTURE_2D;\n    model.components = 1;\n    model.width = width;\n    model.height = height;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    publicAPI.createTexture();\n    publicAPI.bind(); // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n\n    if (useTexStorage(dataType)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n\n      if (data != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, data);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, data);\n    }\n\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.create2DFromImage = function (image) {\n    // Now determine the texture parameters using the arguments.\n    publicAPI.getOpenGLDataType(VtkDataTypes.UNSIGNED_CHAR);\n    publicAPI.getInternalFormat(VtkDataTypes.UNSIGNED_CHAR, 4);\n    publicAPI.getFormat(VtkDataTypes.UNSIGNED_CHAR, 4);\n\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n\n    model.target = model.context.TEXTURE_2D;\n    model.components = 4;\n    model.depth = 1;\n    model.numberOfDimensions = 2;\n\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    publicAPI.createTexture();\n    publicAPI.bind(); // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // Scale up the texture to the next highest power of two dimensions (if needed) and flip y.\n\n    var needNearestPowerOfTwo = !model._openGLRenderWindow.getWebgl2() && (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height));\n    var canvas = document.createElement('canvas');\n    canvas.width = needNearestPowerOfTwo ? nearestPowerOfTwo(image.width) : image.width;\n    canvas.height = needNearestPowerOfTwo ? nearestPowerOfTwo(image.height) : image.height;\n    model.width = canvas.width;\n    model.height = canvas.height;\n    var ctx = canvas.getContext('2d');\n    ctx.translate(0, canvas.height);\n    ctx.scale(1, -1);\n    ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n    var safeImage = canvas;\n\n    if (useTexStorage(VtkDataTypes.UNSIGNED_CHAR)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n\n      if (safeImage != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, safeImage);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, safeImage);\n    }\n\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n\n    publicAPI.deactivate();\n    return true;\n  }; // Compute scale and offset per component from min and max per component\n\n\n  function computeScaleOffsets(min, max, numComps) {\n    var offset = new Array(numComps);\n    var scale = new Array(numComps);\n\n    for (var c = 0; c < numComps; ++c) {\n      offset[c] = min[c];\n      scale[c] = max[c] - min[c] || 1.0;\n    }\n\n    return {\n      scale: scale,\n      offset: offset\n    };\n  } // HalfFloat only represents numbers between [-2048, 2048] exactly accurate,\n  // for numbers outside of this range there is a precision limitation\n\n\n  function hasExactHalfFloat(offset, scale) {\n    // Per Component\n    for (var c = 0; c < offset.length; c++) {\n      var min = offset[c];\n      var max = scale[c] + min;\n\n      if (min < -2048 || min > 2048 || max < -2048 || max > 2048) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function setUseHalfFloat(dataType, offset, scale, preferSizeOverAccuracy) {\n    publicAPI.getOpenGLDataType(dataType);\n    var useHalfFloat = false;\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      useHalfFloat = model.openGLDataType === model.context.HALF_FLOAT;\n    } else {\n      var halfFloatExt = model.context.getExtension('OES_texture_half_float');\n      useHalfFloat = halfFloatExt && model.openGLDataType === halfFloatExt.HALF_FLOAT_OES;\n    } // Don't consider halfFloat and convert back to Float when the range of data does not generate an accurate halfFloat\n    // AND it is not preferable to have a smaller texture than an exact texture.\n\n\n    var isHalfFloat = useHalfFloat && (hasExactHalfFloat(offset, scale) || preferSizeOverAccuracy);\n    model.useHalfFloat = isHalfFloat;\n  }\n\n  function processDataArray(dataArray, preferSizeOverAccuracy) {\n    var numComps = dataArray.getNumberOfComponents();\n    var dataType = dataArray.getDataType();\n    var data = dataArray.getData(); // Compute min max from array\n    // Using the vtkDataArray.getRange() enables caching\n\n    var minArray = new Array(numComps);\n    var maxArray = new Array(numComps);\n\n    for (var c = 0; c < numComps; ++c) {\n      var _dataArray$getRange = dataArray.getRange(c),\n          _dataArray$getRange2 = _slicedToArray(_dataArray$getRange, 2),\n          min = _dataArray$getRange2[0],\n          max = _dataArray$getRange2[1];\n\n      minArray[c] = min;\n      maxArray[c] = max;\n    }\n\n    var scaleOffsets = computeScaleOffsets(minArray, maxArray, numComps); // preferSizeOverAccuracy will override norm16 due to bug with norm16 implementation\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1408247\n\n    setUseHalfFloat(dataType, scaleOffsets.offset, scaleOffsets.scale, preferSizeOverAccuracy); // since our default is to use half float, in case that we can't use it\n    // we need to use another type\n\n    if (!model.useHalfFloat) {\n      publicAPI.getOpenGLDataType(dataType, true);\n    }\n\n    return {\n      numComps: numComps,\n      dataType: dataType,\n      data: data,\n      scaleOffsets: scaleOffsets\n    };\n  }\n\n  publicAPI.create2DFilterableFromRaw = function (width, height, numberOfComponents, dataType, values) {\n    var preferSizeOverAccuracy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    return publicAPI.create2DFilterableFromDataArray(width, height, vtkDataArray.newInstance({\n      numberOfComponents: numberOfComponents,\n      dataType: dataType,\n      values: values\n    }), preferSizeOverAccuracy);\n  };\n\n  publicAPI.create2DFilterableFromDataArray = function (width, height, dataArray) {\n    var preferSizeOverAccuracy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    var _processDataArray = processDataArray(dataArray, preferSizeOverAccuracy),\n        numComps = _processDataArray.numComps,\n        dataType = _processDataArray.dataType,\n        data = _processDataArray.data;\n\n    publicAPI.create2DFromRaw(width, height, numComps, dataType, data);\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.create3DFromRaw = function (width, height, depth, numComps, dataType, data) {\n    // Permit OpenGLDataType to be half float, if applicable, for 3D\n    publicAPI.getOpenGLDataType(dataType); // Now determine the texture parameters using the arguments.\n\n    publicAPI.getInternalFormat(dataType, numComps);\n    publicAPI.getFormat(dataType, numComps);\n\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    }\n\n    model.target = model.context.TEXTURE_3D;\n    model.components = numComps;\n    model.width = width;\n    model.height = height;\n    model.depth = depth;\n    model.numberOfDimensions = 3;\n\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    publicAPI.createTexture();\n    publicAPI.bind(); // Create an array of texture with one texture\n\n    var dataArray = [data];\n    var is3DArray = true;\n    var pixData = updateArrayDataType(dataType, dataArray, is3DArray);\n    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // openGLDataType\n\n    if (useTexStorage(dataType)) {\n      model.context.texStorage3D(model.target, 1, model.internalFormat, model.width, model.height, model.depth);\n\n      if (scaledData[0] != null) {\n        model.context.texSubImage3D(model.target, 0, 0, 0, 0, model.width, model.height, model.depth, model.format, model.openGLDataType, scaledData[0]);\n      }\n    } else {\n      model.context.texImage3D(model.target, 0, model.internalFormat, model.width, model.height, model.depth, 0, model.format, model.openGLDataType, scaledData[0]);\n    }\n\n    if (model.generateMipmap) {\n      model.context.generateMipmap(model.target);\n    }\n\n    publicAPI.deactivate();\n    return true;\n  }; //----------------------------------------------------------------------------\n  // This method simulates a 3D texture using 2D\n  // Prefer create3DFilterableFromDataArray to enable caching of min and max values\n\n\n  publicAPI.create3DFilterableFromRaw = function (width, height, depth, numberOfComponents, dataType, values) {\n    var preferSizeOverAccuracy = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    return publicAPI.create3DFilterableFromDataArray(width, height, depth, vtkDataArray.newInstance({\n      numberOfComponents: numberOfComponents,\n      dataType: dataType,\n      values: values\n    }), preferSizeOverAccuracy);\n  }; //----------------------------------------------------------------------------\n  // This method create a 3D texture from dimensions and a DataArray\n\n\n  publicAPI.create3DFilterableFromDataArray = function (width, height, depth, dataArray) {\n    var preferSizeOverAccuracy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    var _processDataArray2 = processDataArray(dataArray, preferSizeOverAccuracy),\n        numComps = _processDataArray2.numComps,\n        dataType = _processDataArray2.dataType,\n        data = _processDataArray2.data,\n        scaleOffsets = _processDataArray2.scaleOffsets;\n\n    var numPixelsIn = width * height * depth;\n    var offset = [];\n    var scale = [];\n\n    for (var c = 0; c < numComps; ++c) {\n      offset[c] = 0.0;\n      scale[c] = 1.0;\n    } // store the information, we will need it later\n    // offset and scale are the offset and scale required to get\n    // the texture value back to data values ala\n    // data = texture * scale + offset\n    // and texture = (data - offset)/scale\n\n\n    model.volumeInfo = {\n      scale: scale,\n      offset: offset,\n      dataComputedScale: scaleOffsets.scale,\n      dataComputedOffset: scaleOffsets.offset,\n      width: width,\n      height: height,\n      depth: depth\n    }; // Create a copy of scale and offset to avoid aliasing issues\n    // Original is read only, copy is read/write\n    // Use the copy as volumeInfo.scale and volumeInfo.offset\n\n    var scaleOffsetsCopy = structuredClone(scaleOffsets); // WebGL2 path, we have 3d textures etc\n\n    if (model._openGLRenderWindow.getWebgl2()) {\n      if (model.oglNorm16Ext && !model.useHalfFloat && dataType === VtkDataTypes.SHORT) {\n        for (var _c = 0; _c < numComps; ++_c) {\n          model.volumeInfo.scale[_c] = 32767.0;\n        }\n\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      }\n\n      if (model.oglNorm16Ext && !model.useHalfFloat && dataType === VtkDataTypes.UNSIGNED_SHORT) {\n        for (var _c2 = 0; _c2 < numComps; ++_c2) {\n          model.volumeInfo.scale[_c2] = 65535.0;\n        }\n\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      }\n\n      if (dataType === VtkDataTypes.FLOAT || model.useHalfFloat && (dataType === VtkDataTypes.SHORT || dataType === VtkDataTypes.UNSIGNED_SHORT)) {\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      }\n\n      if (dataType === VtkDataTypes.UNSIGNED_CHAR) {\n        for (var _c3 = 0; _c3 < numComps; ++_c3) {\n          model.volumeInfo.scale[_c3] = 255.0;\n        }\n\n        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);\n      } // otherwise convert to float\n\n\n      var _newArray = new Float32Array(numPixelsIn * numComps); // use computed scale and offset\n\n\n      model.volumeInfo.offset = scaleOffsetsCopy.offset;\n      model.volumeInfo.scale = scaleOffsetsCopy.scale;\n      var count = 0;\n      var scaleInverse = scaleOffsetsCopy.scale.map(function (s) {\n        return 1 / s;\n      });\n\n      for (var i = 0; i < numPixelsIn; i++) {\n        for (var nc = 0; nc < numComps; nc++) {\n          _newArray[count] = (data[count] - scaleOffsetsCopy.offset[nc]) * scaleInverse[nc];\n          count++;\n        }\n      }\n\n      return publicAPI.create3DFromRaw(width, height, depth, numComps, VtkDataTypes.FLOAT, _newArray);\n    } // not webgl2, deal with webgl1, no 3d textures\n    // and maybe no float textures\n\n\n    var volCopyData = function volCopyData(outArray, outIdx, inValue, smin, smax) {\n      outArray[outIdx] = inValue;\n    };\n\n    var dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR; // unsigned char gets used as is\n\n    if (dataType === VtkDataTypes.UNSIGNED_CHAR) {\n      for (var _c4 = 0; _c4 < numComps; ++_c4) {\n        scaleOffsetsCopy.offset[_c4] = 0.0;\n        scaleOffsetsCopy.scale[_c4] = 255.0;\n      }\n    } else if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n      // use float textures scaled to 0.0 to 1.0\n      dataTypeToUse = VtkDataTypes.FLOAT;\n\n      volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {\n        outArray[outIdx] = (inValue - soffset) / sscale;\n      };\n    } else {\n      // worst case, scale data to uchar\n      dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR;\n\n      volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {\n        outArray[outIdx] = 255.0 * (inValue - soffset) / sscale;\n      };\n    } // Now determine the texture parameters using the arguments.\n\n\n    publicAPI.getOpenGLDataType(dataTypeToUse);\n    publicAPI.getInternalFormat(dataTypeToUse, numComps);\n    publicAPI.getFormat(dataTypeToUse, numComps);\n\n    if (!model.internalFormat || !model.format || !model.openGLDataType) {\n      vtkErrorMacro('Failed to determine texture parameters.');\n      return false;\n    } // have to pack this 3D texture into pot 2D texture\n\n\n    model.target = model.context.TEXTURE_2D;\n    model.components = numComps;\n    model.depth = 1;\n    model.numberOfDimensions = 2; // MAX_TEXTURE_SIZE gives the max dimensions that can be supported by the GPU,\n    // but it doesn't mean it will fit in memory. If we have to use a float data type\n    // or 4 components, there are good chances that the texture size will blow up\n    // and could not fit in the GPU memory. Use a smaller texture size in that case,\n    // which will force a downsampling of the dataset.\n    // That problem does not occur when using webGL2 since we can pack the data in\n    // denser textures based on our data type.\n    // TODO: try to fit in the biggest supported texture, catch the gl error if it\n    // does not fix (OUT_OF_MEMORY), then attempt with smaller texture\n\n    var maxTexDim = model.context.getParameter(model.context.MAX_TEXTURE_SIZE);\n\n    if (maxTexDim > 4096 && (dataTypeToUse === VtkDataTypes.FLOAT || numComps >= 3)) {\n      maxTexDim = 4096;\n    } // compute estimate for XY subsample\n\n\n    var xstride = 1;\n    var ystride = 1;\n\n    if (numPixelsIn > maxTexDim * maxTexDim) {\n      xstride = Math.ceil(Math.sqrt(numPixelsIn / (maxTexDim * maxTexDim)));\n      ystride = xstride;\n    }\n\n    var targetWidth = Math.sqrt(numPixelsIn) / xstride;\n    targetWidth = nearestPowerOfTwo(targetWidth); // determine X reps\n\n    var xreps = Math.floor(targetWidth * xstride / width);\n    var yreps = Math.ceil(depth / xreps);\n    var targetHeight = nearestPowerOfTwo(height * yreps / ystride);\n    model.width = targetWidth;\n    model.height = targetHeight;\n\n    model._openGLRenderWindow.activateTexture(publicAPI);\n\n    publicAPI.createTexture();\n    publicAPI.bind(); // store the information, we will need it later\n\n    model.volumeInfo.xreps = xreps;\n    model.volumeInfo.yreps = yreps;\n    model.volumeInfo.xstride = xstride;\n    model.volumeInfo.ystride = ystride;\n    model.volumeInfo.offset = scaleOffsetsCopy.offset;\n    model.volumeInfo.scale = scaleOffsetsCopy.scale; // OK stuff the data into the 2d TEXTURE\n    // first allocate the new texture\n\n    var newArray;\n    var pixCount = targetWidth * targetHeight * numComps;\n\n    if (dataTypeToUse === VtkDataTypes.FLOAT) {\n      newArray = new Float32Array(pixCount);\n    } else {\n      newArray = new Uint8Array(pixCount);\n    } // then stuff the data into it, nothing fancy right now\n    // for stride\n\n\n    var outIdx = 0;\n    var tileWidth = Math.floor(width / xstride);\n    var tileHeight = Math.floor(height / ystride);\n\n    for (var yRep = 0; yRep < yreps; yRep++) {\n      var xrepsThisRow = Math.min(xreps, depth - yRep * xreps);\n      var outXContIncr = numComps * (model.width - xrepsThisRow * Math.floor(width / xstride));\n\n      for (var tileY = 0; tileY < tileHeight; tileY++) {\n        for (var xRep = 0; xRep < xrepsThisRow; xRep++) {\n          var inOffset = numComps * ((yRep * xreps + xRep) * width * height + ystride * tileY * width);\n\n          for (var tileX = 0; tileX < tileWidth; tileX++) {\n            // copy value\n            for (var _nc = 0; _nc < numComps; _nc++) {\n              volCopyData(newArray, outIdx, data[inOffset + xstride * tileX * numComps + _nc], scaleOffsetsCopy.offset[_nc], scaleOffsetsCopy.scale[_nc]);\n              outIdx++;\n            }\n          }\n        }\n\n        outIdx += outXContIncr;\n      }\n    } // Source texture data from the PBO.\n    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n\n    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);\n\n    if (useTexStorage(dataTypeToUse)) {\n      model.context.texStorage2D(model.target, 1, model.internalFormat, model.width, model.height);\n\n      if (newArray != null) {\n        model.context.texSubImage2D(model.target, 0, 0, 0, model.width, model.height, model.format, model.openGLDataType, newArray);\n      }\n    } else {\n      model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, newArray);\n    }\n\n    publicAPI.deactivate();\n    return true;\n  };\n\n  publicAPI.setOpenGLRenderWindow = function (rw) {\n    if (model._openGLRenderWindow === rw) {\n      return;\n    }\n\n    publicAPI.releaseGraphicsResources();\n    model._openGLRenderWindow = rw;\n    model.context = null;\n\n    if (rw) {\n      model.context = model._openGLRenderWindow.getContext();\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.getMaximumTextureSize = function (ctx) {\n    if (ctx && ctx.isCurrent()) {\n      return ctx.getIntegerv(ctx.MAX_TEXTURE_SIZE);\n    }\n\n    return -1;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  _openGLRenderWindow: null,\n  _forceInternalFormat: false,\n  context: null,\n  handle: 0,\n  sendParametersTime: null,\n  textureBuildTime: null,\n  numberOfDimensions: 0,\n  target: 0,\n  format: 0,\n  openGLDataType: 0,\n  components: 0,\n  width: 0,\n  height: 0,\n  depth: 0,\n  autoParameters: true,\n  wrapS: Wrap.CLAMP_TO_EDGE,\n  wrapT: Wrap.CLAMP_TO_EDGE,\n  wrapR: Wrap.CLAMP_TO_EDGE,\n  minificationFilter: Filter.NEAREST,\n  magnificationFilter: Filter.NEAREST,\n  minLOD: -1000.0,\n  maxLOD: 1000.0,\n  baseLevel: 0,\n  maxLevel: 1000,\n  generateMipmap: false,\n  // use half float by default, but it will get set\n  // to false if the context does not support it or\n  // the voxel intensity range is out of the accurate\n  // range of half float\n  useHalfFloat: true,\n  oglNorm16Ext: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.sendParametersTime = {};\n  obj(model.sendParametersTime, {\n    mtime: 0\n  });\n  model.textureBuildTime = {};\n  obj(model.textureBuildTime, {\n    mtime: 0\n  }); // Build VTK API\n\n  set(publicAPI, model, ['format', 'openGLDataType']);\n  setGet(publicAPI, model, ['keyMatrixTime', 'minificationFilter', 'magnificationFilter', 'wrapS', 'wrapT', 'wrapR', 'generateMipmap', 'oglNorm16Ext']);\n  get(publicAPI, model, ['width', 'height', 'volumeInfo', 'components', 'handle', 'target']);\n  moveToProtected(publicAPI, model, ['openGLRenderWindow']); // Object methods\n\n  vtkOpenGLTexture(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLTexture'); // ----------------------------------------------------------------------------\n\nvar vtkOpenGLTexture$1 = _objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, Constants); // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkTexture', newInstance);\n\nexport { vtkOpenGLTexture$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}