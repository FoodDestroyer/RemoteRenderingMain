{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkElevationReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkJSONNucleoReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkJSONNucleoReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n  function fetchText(url, options) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, options);\n  } // Set DataSet url\n\n  publicAPI.setUrl = function (url, options) {\n    model.url = url; // Fetch metadata\n\n    return publicAPI.loadData(options);\n  }; // Fetch the actual data arrays\n\n  publicAPI.loadData = function (options) {\n    return fetchText(model.url, options).then(function (csv) {\n      publicAPI.parseAsText(csv);\n      return true;\n    });\n  };\n  publicAPI.parseAsText = function (jsonAsTxt) {\n    var _JSON$parse = JSON.parse(jsonAsTxt),\n      vertices = _JSON$parse.vertices,\n      indices = _JSON$parse.indices;\n    var nbIndices = indices.length;\n    var nbTriangles = nbIndices / 3;\n    var nbCellsValues = nbTriangles + nbIndices;\n    model.points = Float32Array.from(vertices);\n    model.polys = nbCellsValues < 65535 ? new Uint16Array(nbCellsValues) : new Uint32Array(nbCellsValues);\n    var srcOffset = 0;\n    var destOffset = 0;\n    while (destOffset < model.polys.length) {\n      model.polys[destOffset++] = 3;\n      model.polys[destOffset++] = indices[srcOffset++];\n      model.polys[destOffset++] = indices[srcOffset++];\n      model.polys[destOffset++] = indices[srcOffset++];\n    }\n    publicAPI.modified();\n  };\n  publicAPI.requestData = function (inData, outData) {\n    var polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(model.points, 3);\n    polydata.getPolys().setData(model.polys);\n    model.output[0] = polydata;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {// dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1); // Object methods\n\n  vtkJSONNucleoReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkJSONNucleoReader'); // ----------------------------------------------------------------------------\n\nvar vtkJSONNucleoReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkJSONNucleoReader$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkPolyData","DataAccessHelper","vtkJSONNucleoReader","publicAPI","model","classHierarchy","push","dataAccessHelper","get","fetchText","url","options","setUrl","loadData","then","csv","parseAsText","jsonAsTxt","_JSON$parse","JSON","parse","vertices","indices","nbIndices","length","nbTriangles","nbCellsValues","points","Float32Array","from","polys","Uint16Array","Uint32Array","srcOffset","destOffset","modified","requestData","inData","outData","polydata","newInstance","getPoints","setData","getPolys","output","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","setGet","algo","vtkJSONNucleoReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Misc/JSONNucleoReader.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkElevationReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkJSONNucleoReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkJSONNucleoReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n\n  function fetchText(url, options) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, options);\n  } // Set DataSet url\n\n\n  publicAPI.setUrl = function (url, options) {\n    model.url = url; // Fetch metadata\n\n    return publicAPI.loadData(options);\n  }; // Fetch the actual data arrays\n\n\n  publicAPI.loadData = function (options) {\n    return fetchText(model.url, options).then(function (csv) {\n      publicAPI.parseAsText(csv);\n      return true;\n    });\n  };\n\n  publicAPI.parseAsText = function (jsonAsTxt) {\n    var _JSON$parse = JSON.parse(jsonAsTxt),\n        vertices = _JSON$parse.vertices,\n        indices = _JSON$parse.indices;\n\n    var nbIndices = indices.length;\n    var nbTriangles = nbIndices / 3;\n    var nbCellsValues = nbTriangles + nbIndices;\n    model.points = Float32Array.from(vertices);\n    model.polys = nbCellsValues < 65535 ? new Uint16Array(nbCellsValues) : new Uint32Array(nbCellsValues);\n    var srcOffset = 0;\n    var destOffset = 0;\n\n    while (destOffset < model.polys.length) {\n      model.polys[destOffset++] = 3;\n      model.polys[destOffset++] = indices[srcOffset++];\n      model.polys[destOffset++] = indices[srcOffset++];\n      model.polys[destOffset++] = indices[srcOffset++];\n    }\n\n    publicAPI.modified();\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    var polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(model.points, 3);\n    polydata.getPolys().setData(model.polys);\n    model.output[0] = polydata;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {// dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper']);\n  macro.algo(publicAPI, model, 0, 1); // Object methods\n\n  vtkJSONNucleoReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkJSONNucleoReader'); // ----------------------------------------------------------------------------\n\nvar vtkJSONNucleoReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkJSONNucleoReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}