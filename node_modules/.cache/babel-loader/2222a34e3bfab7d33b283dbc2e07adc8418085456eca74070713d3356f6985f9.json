{"ast":null,"code":"import { newInstance as newInstance$1, setGet, get } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor2D'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes(); // we store textures and mapper\n\n      model.ogltextures = null;\n      model.activeTextures = null;\n      for (var index = 0; index < model.children.length; index++) {\n        var child = model.children[index];\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n      renderPass.incrementOverlayActorCount();\n    }\n  }; // we draw textures, then mapper, then post pass textures\n\n  publicAPI.traverseOpaquePass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n  publicAPI.traverseTranslucentPass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.traverseOverlayPass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable) {\n      return;\n    }\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n  publicAPI.activateTextures = function () {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n    model.activeTextures = [];\n    for (var index = 0; index < model.ogltextures.length; index++) {\n      var child = model.ogltextures[index];\n      child.render();\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  }; // Renders myself\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n  publicAPI.translucentPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n  publicAPI.overlayPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  context: null,\n  activeTextures: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Build VTK API\n\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']); // Object methods\n\n  vtkOpenGLActor2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend); // ----------------------------------------------------------------------------\n\nvar vtkActor2D = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkActor2D', newInstance);\nexport { vtkActor2D as default, extend, newInstance };","map":{"version":3,"names":["newInstance","newInstance$1","setGet","get","vtkViewNode","registerOverride","vtkOpenGLActor2D","publicAPI","model","classHierarchy","push","buildPass","prepass","renderable","_openGLRenderWindow","getFirstAncestorOfType","_openGLRenderer","context","getContext","prepareNodes","addMissingNodes","getTextures","addMissingNode","getMapper","removeUnusedNodes","ogltextures","activeTextures","index","children","length","child","isA","oglmapper","queryPass","renderPass","getVisibility","incrementOverlayActorCount","traverseOpaquePass","getNestedVisibility","getIsOpaque","getSelector","getNestedPickable","apply","traverse","traverseTranslucentPass","traverseOverlayPass","activateTextures","render","getHandle","opaquePass","depthMask","deactivate","translucentPass","overlayPass","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","vtkActor2D","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor2D.js"],"sourcesContent":["import { newInstance as newInstance$1, setGet, get } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// vtkOpenGLActor methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLActor2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLActor2D'); // Builds myself.\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      if (!model.renderable) {\n        return;\n      }\n\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model.context = model._openGLRenderWindow.getContext();\n      publicAPI.prepareNodes();\n      publicAPI.addMissingNodes(model.renderable.getTextures());\n      publicAPI.addMissingNode(model.renderable.getMapper());\n      publicAPI.removeUnusedNodes(); // we store textures and mapper\n\n      model.ogltextures = null;\n      model.activeTextures = null;\n\n      for (var index = 0; index < model.children.length; index++) {\n        var child = model.children[index];\n\n        if (child.isA('vtkOpenGLTexture')) {\n          if (!model.ogltextures) {\n            model.ogltextures = [];\n          }\n\n          model.ogltextures.push(child);\n        } else {\n          model.oglmapper = child;\n        }\n      }\n    }\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (!model.renderable || !model.renderable.getVisibility()) {\n        return;\n      }\n\n      renderPass.incrementOverlayActorCount();\n    }\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseOpaquePass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  }; // we draw textures, then mapper, then post pass textures\n\n\n  publicAPI.traverseTranslucentPass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.traverseOverlayPass = function (renderPass) {\n    if (!model.oglmapper || !model.renderable || !model.renderable.getNestedVisibility() || model._openGLRenderer.getSelector() && !model.renderable.getNestedPickable) {\n      return;\n    }\n\n    publicAPI.apply(renderPass, true);\n    model.oglmapper.traverse(renderPass);\n    publicAPI.apply(renderPass, false);\n  };\n\n  publicAPI.activateTextures = function () {\n    // always traverse textures first, then mapper\n    if (!model.ogltextures) {\n      return;\n    }\n\n    model.activeTextures = [];\n\n    for (var index = 0; index < model.ogltextures.length; index++) {\n      var child = model.ogltextures[index];\n      child.render();\n\n      if (child.getHandle()) {\n        model.activeTextures.push(child);\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.translucentPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(false);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  }; // Renders myself\n\n\n  publicAPI.overlayPass = function (prepass, renderPass) {\n    if (prepass) {\n      model.context.depthMask(true);\n      publicAPI.activateTextures();\n    } else if (model.activeTextures) {\n      // deactivate textures\n      for (var index = 0; index < model.activeTextures.length; index++) {\n        model.activeTextures[index].deactivate();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  activeTextures: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Build VTK API\n\n  setGet(publicAPI, model, ['context']);\n  get(publicAPI, model, ['activeTextures']); // Object methods\n\n  vtkOpenGLActor2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend); // ----------------------------------------------------------------------------\n\nvar vtkActor2D = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkActor2D', newInstance);\n\nexport { vtkActor2D as default, extend, newInstance };\n"],"mappings":"AAAA,SAASA,WAAW,IAAIC,aAAa,EAAEC,MAAM,EAAEC,GAAG,QAAQ,iBAAiB;AAC3E,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,sBAAsB;;AAEvD;AACA;;AAEA,SAASC,gBAAgBA,CAACC,SAAS,EAAEC,KAAK,EAAE;EAC1C;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;;EAE/CH,SAAS,CAACI,SAAS,GAAG,UAAUC,OAAO,EAAE;IACvC,IAAIA,OAAO,EAAE;MACX,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE;QACrB;MACF;MAEAL,KAAK,CAACM,mBAAmB,GAAGP,SAAS,CAACQ,sBAAsB,CAAC,uBAAuB,CAAC;MACrFP,KAAK,CAACQ,eAAe,GAAGT,SAAS,CAACQ,sBAAsB,CAAC,mBAAmB,CAAC;MAC7EP,KAAK,CAACS,OAAO,GAAGT,KAAK,CAACM,mBAAmB,CAACI,UAAU,CAAC,CAAC;MACtDX,SAAS,CAACY,YAAY,CAAC,CAAC;MACxBZ,SAAS,CAACa,eAAe,CAACZ,KAAK,CAACK,UAAU,CAACQ,WAAW,CAAC,CAAC,CAAC;MACzDd,SAAS,CAACe,cAAc,CAACd,KAAK,CAACK,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC;MACtDhB,SAAS,CAACiB,iBAAiB,CAAC,CAAC,CAAC,CAAC;;MAE/BhB,KAAK,CAACiB,WAAW,GAAG,IAAI;MACxBjB,KAAK,CAACkB,cAAc,GAAG,IAAI;MAE3B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGnB,KAAK,CAACoB,QAAQ,CAACC,MAAM,EAAEF,KAAK,EAAE,EAAE;QAC1D,IAAIG,KAAK,GAAGtB,KAAK,CAACoB,QAAQ,CAACD,KAAK,CAAC;QAEjC,IAAIG,KAAK,CAACC,GAAG,CAAC,kBAAkB,CAAC,EAAE;UACjC,IAAI,CAACvB,KAAK,CAACiB,WAAW,EAAE;YACtBjB,KAAK,CAACiB,WAAW,GAAG,EAAE;UACxB;UAEAjB,KAAK,CAACiB,WAAW,CAACf,IAAI,CAACoB,KAAK,CAAC;QAC/B,CAAC,MAAM;UACLtB,KAAK,CAACwB,SAAS,GAAGF,KAAK;QACzB;MACF;IACF;EACF,CAAC;EAEDvB,SAAS,CAAC0B,SAAS,GAAG,UAAUrB,OAAO,EAAEsB,UAAU,EAAE;IACnD,IAAItB,OAAO,EAAE;MACX,IAAI,CAACJ,KAAK,CAACK,UAAU,IAAI,CAACL,KAAK,CAACK,UAAU,CAACsB,aAAa,CAAC,CAAC,EAAE;QAC1D;MACF;MAEAD,UAAU,CAACE,0BAA0B,CAAC,CAAC;IACzC;EACF,CAAC,CAAC,CAAC;;EAGH7B,SAAS,CAAC8B,kBAAkB,GAAG,UAAUH,UAAU,EAAE;IACnD,IAAI,CAAC1B,KAAK,CAACwB,SAAS,IAAI,CAACxB,KAAK,CAACK,UAAU,IAAI,CAACL,KAAK,CAACK,UAAU,CAACyB,mBAAmB,CAAC,CAAC,IAAI,CAAC9B,KAAK,CAACK,UAAU,CAAC0B,WAAW,CAAC,CAAC,IAAI/B,KAAK,CAACQ,eAAe,CAACwB,WAAW,CAAC,CAAC,IAAI,CAAChC,KAAK,CAACK,UAAU,CAAC4B,iBAAiB,CAAC,CAAC,EAAE;MACvM;IACF;IAEAlC,SAAS,CAACmC,KAAK,CAACR,UAAU,EAAE,IAAI,CAAC;IACjC1B,KAAK,CAACwB,SAAS,CAACW,QAAQ,CAACT,UAAU,CAAC;IACpC3B,SAAS,CAACmC,KAAK,CAACR,UAAU,EAAE,KAAK,CAAC;EACpC,CAAC,CAAC,CAAC;;EAGH3B,SAAS,CAACqC,uBAAuB,GAAG,UAAUV,UAAU,EAAE;IACxD,IAAI,CAAC1B,KAAK,CAACwB,SAAS,IAAI,CAACxB,KAAK,CAACK,UAAU,IAAI,CAACL,KAAK,CAACK,UAAU,CAACyB,mBAAmB,CAAC,CAAC,IAAI9B,KAAK,CAACK,UAAU,CAAC0B,WAAW,CAAC,CAAC,IAAI/B,KAAK,CAACQ,eAAe,CAACwB,WAAW,CAAC,CAAC,IAAI,CAAChC,KAAK,CAACK,UAAU,CAAC4B,iBAAiB,CAAC,CAAC,EAAE;MACtM;IACF;IAEAlC,SAAS,CAACmC,KAAK,CAACR,UAAU,EAAE,IAAI,CAAC;IACjC1B,KAAK,CAACwB,SAAS,CAACW,QAAQ,CAACT,UAAU,CAAC;IACpC3B,SAAS,CAACmC,KAAK,CAACR,UAAU,EAAE,KAAK,CAAC;EACpC,CAAC;EAED3B,SAAS,CAACsC,mBAAmB,GAAG,UAAUX,UAAU,EAAE;IACpD,IAAI,CAAC1B,KAAK,CAACwB,SAAS,IAAI,CAACxB,KAAK,CAACK,UAAU,IAAI,CAACL,KAAK,CAACK,UAAU,CAACyB,mBAAmB,CAAC,CAAC,IAAI9B,KAAK,CAACQ,eAAe,CAACwB,WAAW,CAAC,CAAC,IAAI,CAAChC,KAAK,CAACK,UAAU,CAAC4B,iBAAiB,EAAE;MAClK;IACF;IAEAlC,SAAS,CAACmC,KAAK,CAACR,UAAU,EAAE,IAAI,CAAC;IACjC1B,KAAK,CAACwB,SAAS,CAACW,QAAQ,CAACT,UAAU,CAAC;IACpC3B,SAAS,CAACmC,KAAK,CAACR,UAAU,EAAE,KAAK,CAAC;EACpC,CAAC;EAED3B,SAAS,CAACuC,gBAAgB,GAAG,YAAY;IACvC;IACA,IAAI,CAACtC,KAAK,CAACiB,WAAW,EAAE;MACtB;IACF;IAEAjB,KAAK,CAACkB,cAAc,GAAG,EAAE;IAEzB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGnB,KAAK,CAACiB,WAAW,CAACI,MAAM,EAAEF,KAAK,EAAE,EAAE;MAC7D,IAAIG,KAAK,GAAGtB,KAAK,CAACiB,WAAW,CAACE,KAAK,CAAC;MACpCG,KAAK,CAACiB,MAAM,CAAC,CAAC;MAEd,IAAIjB,KAAK,CAACkB,SAAS,CAAC,CAAC,EAAE;QACrBxC,KAAK,CAACkB,cAAc,CAAChB,IAAI,CAACoB,KAAK,CAAC;MAClC;IACF;EACF,CAAC,CAAC,CAAC;;EAGHvB,SAAS,CAAC0C,UAAU,GAAG,UAAUrC,OAAO,EAAEsB,UAAU,EAAE;IACpD,IAAItB,OAAO,EAAE;MACXJ,KAAK,CAACS,OAAO,CAACiC,SAAS,CAAC,IAAI,CAAC;MAC7B3C,SAAS,CAACuC,gBAAgB,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAItC,KAAK,CAACkB,cAAc,EAAE;MAC/B;MACA,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGnB,KAAK,CAACkB,cAAc,CAACG,MAAM,EAAEF,KAAK,EAAE,EAAE;QAChEnB,KAAK,CAACkB,cAAc,CAACC,KAAK,CAAC,CAACwB,UAAU,CAAC,CAAC;MAC1C;IACF;EACF,CAAC,CAAC,CAAC;;EAGH5C,SAAS,CAAC6C,eAAe,GAAG,UAAUxC,OAAO,EAAEsB,UAAU,EAAE;IACzD,IAAItB,OAAO,EAAE;MACXJ,KAAK,CAACS,OAAO,CAACiC,SAAS,CAAC,KAAK,CAAC;MAC9B3C,SAAS,CAACuC,gBAAgB,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAItC,KAAK,CAACkB,cAAc,EAAE;MAC/B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGnB,KAAK,CAACkB,cAAc,CAACG,MAAM,EAAEF,KAAK,EAAE,EAAE;QAChEnB,KAAK,CAACkB,cAAc,CAACC,KAAK,CAAC,CAACwB,UAAU,CAAC,CAAC;MAC1C;IACF;EACF,CAAC,CAAC,CAAC;;EAGH5C,SAAS,CAAC8C,WAAW,GAAG,UAAUzC,OAAO,EAAEsB,UAAU,EAAE;IACrD,IAAItB,OAAO,EAAE;MACXJ,KAAK,CAACS,OAAO,CAACiC,SAAS,CAAC,IAAI,CAAC;MAC7B3C,SAAS,CAACuC,gBAAgB,CAAC,CAAC;IAC9B,CAAC,MAAM,IAAItC,KAAK,CAACkB,cAAc,EAAE;MAC/B;MACA,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGnB,KAAK,CAACkB,cAAc,CAACG,MAAM,EAAEF,KAAK,EAAE,EAAE;QAChEnB,KAAK,CAACkB,cAAc,CAACC,KAAK,CAAC,CAACwB,UAAU,CAAC,CAAC;MAC1C;IACF;EACF,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,IAAIG,cAAc,GAAG;EACnBrC,OAAO,EAAE,IAAI;EACbS,cAAc,EAAE;AAClB,CAAC,CAAC,CAAC;;AAEH,SAAS6B,MAAMA,CAAChD,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAIgD,aAAa,GAAGC,SAAS,CAAC5B,MAAM,GAAG,CAAC,IAAI4B,SAAS,CAAC,CAAC,CAAC,KAAKC,SAAS,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FE,MAAM,CAACC,MAAM,CAACpD,KAAK,EAAE8C,cAAc,EAAEE,aAAa,CAAC,CAAC,CAAC;;EAErDpD,WAAW,CAACmD,MAAM,CAAChD,SAAS,EAAEC,KAAK,EAAEgD,aAAa,CAAC,CAAC,CAAC;;EAErDtD,MAAM,CAACK,SAAS,EAAEC,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC;EACrCL,GAAG,CAACI,SAAS,EAAEC,KAAK,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;;EAE3CF,gBAAgB,CAACC,SAAS,EAAEC,KAAK,CAAC;AACpC,CAAC,CAAC;;AAEF,IAAIR,WAAW,GAAGC,aAAa,CAACsD,MAAM,CAAC,CAAC,CAAC;;AAEzC,IAAIM,UAAU,GAAG;EACf7D,WAAW,EAAEA,WAAW;EACxBuD,MAAM,EAAEA;AACV,CAAC,CAAC,CAAC;;AAEHlD,gBAAgB,CAAC,YAAY,EAAEL,WAAW,CAAC;AAE3C,SAAS6D,UAAU,IAAIC,OAAO,EAAEP,MAAM,EAAEvD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}