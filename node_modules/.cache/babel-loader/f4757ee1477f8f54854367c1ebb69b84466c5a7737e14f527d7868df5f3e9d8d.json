{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkCompositeCameraManipulator from './CompositeCameraManipulator.js';\nimport vtkCompositeMouseManipulator from './CompositeMouseManipulator.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport vtkMouseCameraUnicamRotateManipulator from './MouseCameraUnicamRotateManipulator.js';\nimport macro from '../../macros.js';\nimport { s as subtract, w as multiplyScalar, l as normalize, d as dot, r as radiansFromDegrees, j as cross } from '../../Common/Core/Math/index.js';\nvar States = vtkInteractorStyleConstants.States; // ----------------------------------------------------------------------------\n// vtkMouseCameraUnicamManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMouseCameraUnicamManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkMouseCameraUnicamManipulator');\n  model.state = States.IS_NONE;\n  model.rotateManipulator = vtkMouseCameraUnicamRotateManipulator.newInstance({\n    button: model.button,\n    shift: model.shift,\n    control: model.control,\n    alt: model.alt,\n    dragEnabled: model.dragEnabled,\n    scrollEnabled: model.scrollEnabled,\n    displayFocusSphereOnButtonDown: false\n  }); //----------------------------------------------------------------------------\n\n  var normalize$1 = function normalize(position, interactor) {\n    var renderer = interactor.findPokedRenderer();\n    var _interactor$getView$g = interactor.getView().getViewportSize(renderer),\n      _interactor$getView$g2 = _slicedToArray(_interactor$getView$g, 2),\n      width = _interactor$getView$g2[0],\n      height = _interactor$getView$g2[1];\n    var nx = -1.0 + 2.0 * position.x / width;\n    var ny = -1.0 + 2.0 * position.y / height;\n    return {\n      x: nx,\n      y: ny\n    };\n  }; // Given a 3D point & a vtkCamera, compute the vectors that extend\n  // from the projection of the center of projection to the center of\n  // the right-edge and the center of the top-edge onto the plane\n  // containing the 3D point & with normal parallel to the camera's\n  // projection plane.\n\n  var getRightVAndUpV = function getRightVAndUpV(downPoint, interactor) {\n    // Compute the horizontal & vertical scaling ('scalex' and 'scaley')\n    // factors as function of the down point & camera params.\n    var camera = interactor.findPokedRenderer().getActiveCamera();\n    var cameraPosition = camera.getPosition();\n    var cameraToPointVec = [0, 0, 0]; // Construct a vector from the viewing position to the picked point\n\n    subtract(downPoint, cameraPosition, cameraToPointVec);\n    if (camera.getParallelProjection()) {\n      multiplyScalar(cameraToPointVec, camera.getParallelScale());\n    } // Get shortest distance 'l' between the viewing position and\n    // plane parallel to the projection plane that contains the 'downPoint'.\n\n    var atV = camera.getViewPlaneNormal();\n    normalize(atV);\n    var l = dot(cameraToPointVec, atV);\n    var viewAngle = radiansFromDegrees(camera.getViewAngle());\n    var renderer = interactor.findPokedRenderer();\n    var _interactor$getView$g3 = interactor.getView().getViewportSize(renderer),\n      _interactor$getView$g4 = _slicedToArray(_interactor$getView$g3, 2),\n      width = _interactor$getView$g4[0],\n      height = _interactor$getView$g4[1];\n    var scaleX = width / height * (2 * l * Math.tan(viewAngle / 2) / 2);\n    var scaleY = 2 * l * Math.tan(viewAngle / 2) / 2; // Construct the camera offset vector as function of delta mouse X & Y.\n\n    var upV = camera.getViewUp();\n    var rightV = [];\n    cross(upV, atV, rightV); // (Make sure 'upV' is orthogonal to 'atV' & 'rightV')\n\n    cross(atV, rightV, upV);\n    normalize(rightV);\n    normalize(upV);\n    multiplyScalar(rightV, scaleX);\n    multiplyScalar(upV, scaleY);\n    return {\n      rightV: rightV,\n      upV: upV\n    };\n  }; //----------------------------------------------------------------------------\n\n  var choose = function choose(interactor, position) {\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var delta = {\n      x: normalizedPosition.x - normalizedPreviousPosition.x,\n      y: normalizedPosition.y - normalizedPreviousPosition.y\n    };\n    model.previousPosition = position;\n    var deltaT = Date.now() / 1000 - model.time;\n    model.dist += Math.sqrt(Math.pow(delta.x, 2) + Math.pow(delta.y, 2));\n    var sDelta = {\n      x: position.x - model.startPosition.x,\n      y: position.y - model.startPosition.y\n    };\n    var len = Math.sqrt(Math.pow(sDelta.x, 2) + Math.pow(sDelta.y, 2));\n    if (Math.abs(sDelta.y) / len > 0.9 && deltaT > 0.05) {\n      model.state = States.IS_DOLLY;\n    } else if (deltaT >= 0.1 || model.dist >= 0.03) {\n      if (Math.abs(sDelta.x) / len > 0.6) {\n        model.state = States.IS_PAN;\n      } else {\n        model.state = States.IS_DOLLY;\n      }\n    }\n  }; //----------------------------------------------------------------------------\n  // Transform mouse horizontal & vertical movements to a world\n  // space offset for the camera that maintains pick correlation.\n\n  var pan = function pan(interactor, position) {\n    var renderer = interactor.findPokedRenderer();\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var delta = {\n      x: normalizedPosition.x - normalizedPreviousPosition.x,\n      y: normalizedPosition.y - normalizedPreviousPosition.y\n    };\n    var camera = renderer.getActiveCamera();\n    model.previousPosition = position;\n    var _getRightVAndUpV = getRightVAndUpV(model.downPoint, interactor),\n      rightV = _getRightVAndUpV.rightV,\n      upV = _getRightVAndUpV.upV;\n    var offset = [];\n    for (var index = 0; index < 3; index++) {\n      offset[index] = delta.x * rightV[index] + delta.y * upV[index];\n    }\n    camera.translate.apply(camera, offset);\n    renderer.resetCameraClippingRange();\n    interactor.render();\n  }; //----------------------------------------------------------------------------\n\n  var dolly = function dolly(interactor, position) {\n    var renderer = interactor.findPokedRenderer();\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var delta = {\n      x: normalizedPosition.x - normalizedPreviousPosition.x,\n      y: normalizedPosition.y - normalizedPreviousPosition.y\n    };\n    var camera = renderer.getActiveCamera();\n    var cameraPosition = camera.getPosition(); // 1. Handle dollying\n\n    if (camera.getParallelProjection()) {\n      camera.zoom(1 - delta.y);\n    } else {\n      var offset1 = [];\n      subtract(model.downPoint, cameraPosition, offset1);\n      multiplyScalar(offset1, delta.y * -4);\n      camera.translate.apply(camera, offset1);\n    } // 2. Now handle side-to-side panning\n\n    var _getRightVAndUpV2 = getRightVAndUpV(model.downPoint, interactor),\n      offset2 = _getRightVAndUpV2.rightV;\n    multiplyScalar(offset2, delta.x);\n    camera.translate.apply(camera, _toConsumableArray(offset2));\n    renderer.resetCameraClippingRange();\n    interactor.render();\n  }; //----------------------------------------------------------------------------\n  // Public API methods\n  //----------------------------------------------------------------------------\n\n  publicAPI.onButtonDown = function (interactor, renderer, position) {\n    model.buttonPressed = true;\n    model.startPosition = position;\n    model.previousPosition = position;\n    model.time = Date.now() / 1000.0;\n    model.dist = 0; // Picking is delegated to the rotate manipulator\n\n    model.rotateManipulator.onButtonDown(interactor, renderer, position);\n    model.downPoint = model.rotateManipulator.getDownPoint();\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.onMouseMove = function (interactor, renderer, position) {\n    if (!model.buttonPressed) {\n      return;\n    }\n    if (model.rotateManipulator.getState() === States.IS_ROTATE) {\n      model.rotateManipulator.onMouseMove(interactor, renderer, position);\n    } else {\n      switch (model.state) {\n        case States.IS_NONE:\n          choose(interactor, position);\n          break;\n        case States.IS_PAN:\n          pan(interactor, position);\n          break;\n        case States.IS_DOLLY:\n          dolly(interactor, position);\n          break;\n      }\n    }\n    model.previousPosition = position;\n  }; //--------------------------------------------------------------------------\n\n  publicAPI.onButtonUp = function (interactor) {\n    model.buttonPressed = false;\n    if (model.state === States.IS_NONE) {\n      model.rotateManipulator.onButtonUp(interactor);\n    }\n    model.state = States.IS_NONE;\n  };\n  publicAPI.getUseWorldUpVec = function () {\n    return model.rotateManipulator.getUseWorldUpVec();\n  };\n  publicAPI.setUseWorldUpVec = function (useWorldUpVec) {\n    model.rotateManipulator.setUseWorldUpVec(useWorldUpVec);\n  };\n  publicAPI.getWorldUpVec = function () {\n    return model.rotateManipulator.getWorldUpVec();\n  };\n  publicAPI.setWorldUpVec = function (x, y, z) {\n    model.rotateManipulator.setWorldUpVec(x, y, z);\n  };\n  publicAPI.getUseHardwareSelector = function () {\n    return model.rotateManipulator.getUseHardwareSelector();\n  };\n  publicAPI.setUseHardwareSelector = function (useHardwareSelector) {\n    model.rotateManipulator.setUseHardwareSelector(useHardwareSelector);\n  };\n  publicAPI.getFocusSphereColor = function () {\n    model.rotateManipulator.getFocusSphereColor();\n  };\n  publicAPI.setFocusSphereColor = function (r, g, b) {\n    model.rotateManipulator.setFocusSphereColor(r, g, b);\n  };\n  publicAPI.getFocusSphereRadiusFactor = function () {\n    return model.rotateManipulator.getFocusSphereRadiusFactor();\n  };\n  publicAPI.setFocusSphereRadiusFactor = function (focusSphereRadiusFactor) {\n    model.rotateManipulator.setFocusSphereRadiusFactor(focusSphereRadiusFactor);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  vtkCompositeCameraManipulator.extend(publicAPI, model, initialValues);\n  vtkCompositeMouseManipulator.extend(publicAPI, model, initialValues); // Object specific methods\n\n  vtkMouseCameraUnicamManipulator(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMouseCameraUnicamManipulator'); // ----------------------------------------------------------------------------\n\nvar vtkMouseCameraUnicamManipulator$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkMouseCameraUnicamManipulator$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","_slicedToArray","vtkCompositeCameraManipulator","vtkCompositeMouseManipulator","vtkInteractorStyleConstants","vtkMouseCameraUnicamRotateManipulator","macro","s","subtract","w","multiplyScalar","l","normalize","d","dot","r","radiansFromDegrees","j","cross","States","vtkMouseCameraUnicamManipulator","publicAPI","model","classHierarchy","push","state","IS_NONE","rotateManipulator","newInstance","button","shift","control","alt","dragEnabled","scrollEnabled","displayFocusSphereOnButtonDown","normalize$1","position","interactor","renderer","findPokedRenderer","_interactor$getView$g","getView","getViewportSize","_interactor$getView$g2","width","height","nx","x","ny","y","getRightVAndUpV","downPoint","camera","getActiveCamera","cameraPosition","getPosition","cameraToPointVec","getParallelProjection","getParallelScale","atV","getViewPlaneNormal","viewAngle","getViewAngle","_interactor$getView$g3","_interactor$getView$g4","scaleX","Math","tan","scaleY","upV","getViewUp","rightV","choose","normalizedPosition","normalizedPreviousPosition","previousPosition","delta","deltaT","Date","now","time","dist","sqrt","pow","sDelta","startPosition","len","abs","IS_DOLLY","IS_PAN","pan","_getRightVAndUpV","offset","index","translate","apply","resetCameraClippingRange","render","dolly","zoom","offset1","_getRightVAndUpV2","offset2","onButtonDown","buttonPressed","getDownPoint","onMouseMove","getState","IS_ROTATE","onButtonUp","getUseWorldUpVec","setUseWorldUpVec","useWorldUpVec","getWorldUpVec","setWorldUpVec","z","getUseHardwareSelector","setUseHardwareSelector","useHardwareSelector","getFocusSphereColor","setFocusSphereColor","g","b","getFocusSphereRadiusFactor","setFocusSphereRadiusFactor","focusSphereRadiusFactor","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","vtkMouseCameraUnicamManipulator$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamManipulator.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkCompositeCameraManipulator from './CompositeCameraManipulator.js';\nimport vtkCompositeMouseManipulator from './CompositeMouseManipulator.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport vtkMouseCameraUnicamRotateManipulator from './MouseCameraUnicamRotateManipulator.js';\nimport macro from '../../macros.js';\nimport { s as subtract, w as multiplyScalar, l as normalize, d as dot, r as radiansFromDegrees, j as cross } from '../../Common/Core/Math/index.js';\n\nvar States = vtkInteractorStyleConstants.States; // ----------------------------------------------------------------------------\n// vtkMouseCameraUnicamManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMouseCameraUnicamManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkMouseCameraUnicamManipulator');\n  model.state = States.IS_NONE;\n  model.rotateManipulator = vtkMouseCameraUnicamRotateManipulator.newInstance({\n    button: model.button,\n    shift: model.shift,\n    control: model.control,\n    alt: model.alt,\n    dragEnabled: model.dragEnabled,\n    scrollEnabled: model.scrollEnabled,\n    displayFocusSphereOnButtonDown: false\n  }); //----------------------------------------------------------------------------\n\n  var normalize$1 = function normalize(position, interactor) {\n    var renderer = interactor.findPokedRenderer();\n\n    var _interactor$getView$g = interactor.getView().getViewportSize(renderer),\n        _interactor$getView$g2 = _slicedToArray(_interactor$getView$g, 2),\n        width = _interactor$getView$g2[0],\n        height = _interactor$getView$g2[1];\n\n    var nx = -1.0 + 2.0 * position.x / width;\n    var ny = -1.0 + 2.0 * position.y / height;\n    return {\n      x: nx,\n      y: ny\n    };\n  }; // Given a 3D point & a vtkCamera, compute the vectors that extend\n  // from the projection of the center of projection to the center of\n  // the right-edge and the center of the top-edge onto the plane\n  // containing the 3D point & with normal parallel to the camera's\n  // projection plane.\n\n\n  var getRightVAndUpV = function getRightVAndUpV(downPoint, interactor) {\n    // Compute the horizontal & vertical scaling ('scalex' and 'scaley')\n    // factors as function of the down point & camera params.\n    var camera = interactor.findPokedRenderer().getActiveCamera();\n    var cameraPosition = camera.getPosition();\n    var cameraToPointVec = [0, 0, 0]; // Construct a vector from the viewing position to the picked point\n\n    subtract(downPoint, cameraPosition, cameraToPointVec);\n\n    if (camera.getParallelProjection()) {\n      multiplyScalar(cameraToPointVec, camera.getParallelScale());\n    } // Get shortest distance 'l' between the viewing position and\n    // plane parallel to the projection plane that contains the 'downPoint'.\n\n\n    var atV = camera.getViewPlaneNormal();\n    normalize(atV);\n    var l = dot(cameraToPointVec, atV);\n    var viewAngle = radiansFromDegrees(camera.getViewAngle());\n    var renderer = interactor.findPokedRenderer();\n\n    var _interactor$getView$g3 = interactor.getView().getViewportSize(renderer),\n        _interactor$getView$g4 = _slicedToArray(_interactor$getView$g3, 2),\n        width = _interactor$getView$g4[0],\n        height = _interactor$getView$g4[1];\n\n    var scaleX = width / height * (2 * l * Math.tan(viewAngle / 2) / 2);\n    var scaleY = 2 * l * Math.tan(viewAngle / 2) / 2; // Construct the camera offset vector as function of delta mouse X & Y.\n\n    var upV = camera.getViewUp();\n    var rightV = [];\n    cross(upV, atV, rightV); // (Make sure 'upV' is orthogonal to 'atV' & 'rightV')\n\n    cross(atV, rightV, upV);\n    normalize(rightV);\n    normalize(upV);\n    multiplyScalar(rightV, scaleX);\n    multiplyScalar(upV, scaleY);\n    return {\n      rightV: rightV,\n      upV: upV\n    };\n  }; //----------------------------------------------------------------------------\n\n\n  var choose = function choose(interactor, position) {\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var delta = {\n      x: normalizedPosition.x - normalizedPreviousPosition.x,\n      y: normalizedPosition.y - normalizedPreviousPosition.y\n    };\n    model.previousPosition = position;\n    var deltaT = Date.now() / 1000 - model.time;\n    model.dist += Math.sqrt(Math.pow(delta.x, 2) + Math.pow(delta.y, 2));\n    var sDelta = {\n      x: position.x - model.startPosition.x,\n      y: position.y - model.startPosition.y\n    };\n    var len = Math.sqrt(Math.pow(sDelta.x, 2) + Math.pow(sDelta.y, 2));\n\n    if (Math.abs(sDelta.y) / len > 0.9 && deltaT > 0.05) {\n      model.state = States.IS_DOLLY;\n    } else if (deltaT >= 0.1 || model.dist >= 0.03) {\n      if (Math.abs(sDelta.x) / len > 0.6) {\n        model.state = States.IS_PAN;\n      } else {\n        model.state = States.IS_DOLLY;\n      }\n    }\n  }; //----------------------------------------------------------------------------\n  // Transform mouse horizontal & vertical movements to a world\n  // space offset for the camera that maintains pick correlation.\n\n\n  var pan = function pan(interactor, position) {\n    var renderer = interactor.findPokedRenderer();\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var delta = {\n      x: normalizedPosition.x - normalizedPreviousPosition.x,\n      y: normalizedPosition.y - normalizedPreviousPosition.y\n    };\n    var camera = renderer.getActiveCamera();\n    model.previousPosition = position;\n\n    var _getRightVAndUpV = getRightVAndUpV(model.downPoint, interactor),\n        rightV = _getRightVAndUpV.rightV,\n        upV = _getRightVAndUpV.upV;\n\n    var offset = [];\n\n    for (var index = 0; index < 3; index++) {\n      offset[index] = delta.x * rightV[index] + delta.y * upV[index];\n    }\n\n    camera.translate.apply(camera, offset);\n    renderer.resetCameraClippingRange();\n    interactor.render();\n  }; //----------------------------------------------------------------------------\n\n\n  var dolly = function dolly(interactor, position) {\n    var renderer = interactor.findPokedRenderer();\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var delta = {\n      x: normalizedPosition.x - normalizedPreviousPosition.x,\n      y: normalizedPosition.y - normalizedPreviousPosition.y\n    };\n    var camera = renderer.getActiveCamera();\n    var cameraPosition = camera.getPosition(); // 1. Handle dollying\n\n    if (camera.getParallelProjection()) {\n      camera.zoom(1 - delta.y);\n    } else {\n      var offset1 = [];\n      subtract(model.downPoint, cameraPosition, offset1);\n      multiplyScalar(offset1, delta.y * -4);\n      camera.translate.apply(camera, offset1);\n    } // 2. Now handle side-to-side panning\n\n\n    var _getRightVAndUpV2 = getRightVAndUpV(model.downPoint, interactor),\n        offset2 = _getRightVAndUpV2.rightV;\n\n    multiplyScalar(offset2, delta.x);\n    camera.translate.apply(camera, _toConsumableArray(offset2));\n    renderer.resetCameraClippingRange();\n    interactor.render();\n  }; //----------------------------------------------------------------------------\n  // Public API methods\n  //----------------------------------------------------------------------------\n\n\n  publicAPI.onButtonDown = function (interactor, renderer, position) {\n    model.buttonPressed = true;\n    model.startPosition = position;\n    model.previousPosition = position;\n    model.time = Date.now() / 1000.0;\n    model.dist = 0; // Picking is delegated to the rotate manipulator\n\n    model.rotateManipulator.onButtonDown(interactor, renderer, position);\n    model.downPoint = model.rotateManipulator.getDownPoint();\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.onMouseMove = function (interactor, renderer, position) {\n    if (!model.buttonPressed) {\n      return;\n    }\n\n    if (model.rotateManipulator.getState() === States.IS_ROTATE) {\n      model.rotateManipulator.onMouseMove(interactor, renderer, position);\n    } else {\n      switch (model.state) {\n        case States.IS_NONE:\n          choose(interactor, position);\n          break;\n\n        case States.IS_PAN:\n          pan(interactor, position);\n          break;\n\n        case States.IS_DOLLY:\n          dolly(interactor, position);\n          break;\n      }\n    }\n\n    model.previousPosition = position;\n  }; //--------------------------------------------------------------------------\n\n\n  publicAPI.onButtonUp = function (interactor) {\n    model.buttonPressed = false;\n\n    if (model.state === States.IS_NONE) {\n      model.rotateManipulator.onButtonUp(interactor);\n    }\n\n    model.state = States.IS_NONE;\n  };\n\n  publicAPI.getUseWorldUpVec = function () {\n    return model.rotateManipulator.getUseWorldUpVec();\n  };\n\n  publicAPI.setUseWorldUpVec = function (useWorldUpVec) {\n    model.rotateManipulator.setUseWorldUpVec(useWorldUpVec);\n  };\n\n  publicAPI.getWorldUpVec = function () {\n    return model.rotateManipulator.getWorldUpVec();\n  };\n\n  publicAPI.setWorldUpVec = function (x, y, z) {\n    model.rotateManipulator.setWorldUpVec(x, y, z);\n  };\n\n  publicAPI.getUseHardwareSelector = function () {\n    return model.rotateManipulator.getUseHardwareSelector();\n  };\n\n  publicAPI.setUseHardwareSelector = function (useHardwareSelector) {\n    model.rotateManipulator.setUseHardwareSelector(useHardwareSelector);\n  };\n\n  publicAPI.getFocusSphereColor = function () {\n    model.rotateManipulator.getFocusSphereColor();\n  };\n\n  publicAPI.setFocusSphereColor = function (r, g, b) {\n    model.rotateManipulator.setFocusSphereColor(r, g, b);\n  };\n\n  publicAPI.getFocusSphereRadiusFactor = function () {\n    return model.rotateManipulator.getFocusSphereRadiusFactor();\n  };\n\n  publicAPI.setFocusSphereRadiusFactor = function (focusSphereRadiusFactor) {\n    model.rotateManipulator.setFocusSphereRadiusFactor(focusSphereRadiusFactor);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  vtkCompositeCameraManipulator.extend(publicAPI, model, initialValues);\n  vtkCompositeMouseManipulator.extend(publicAPI, model, initialValues); // Object specific methods\n\n  vtkMouseCameraUnicamManipulator(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMouseCameraUnicamManipulator'); // ----------------------------------------------------------------------------\n\nvar vtkMouseCameraUnicamManipulator$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkMouseCameraUnicamManipulator$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}