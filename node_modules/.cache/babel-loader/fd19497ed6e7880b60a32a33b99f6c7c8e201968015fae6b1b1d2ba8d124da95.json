{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkCell from './Cell.js';\nimport vtkLine from './Line.js';\nimport { vec3 } from 'gl-matrix';\nfunction vtkPolyLine(publicAPI, model) {\n  model.classHierarchy.push('vtkPolyLine');\n  var line = vtkLine.newInstance();\n  line.getPoints().setNumberOfPoints(2);\n  publicAPI.getCellDimension = function () {\n    return 1;\n  };\n  publicAPI.intersectWithLine = function (t1, t2, p1, p2, tol, x, pcoords) {\n    var outObj = {\n      intersect: 0,\n      t: Number.MAX_VALUE,\n      subId: 0,\n      betweenPoints: null\n    };\n    var numLines = publicAPI.getNumberOfPoints() - 1;\n    var pDistMin = Number.MAX_VALUE;\n    for (var subId = 0; subId < numLines; subId++) {\n      var pCoords = [0, 0, 0];\n      line.getPoints().getData().set(model.points.getData().subarray(3 * subId, 3 * (subId + 2)));\n      var lineIntersected = line.intersectWithLine(p1, p2, tol, x, pcoords);\n      if (lineIntersected.intersect === 1 && lineIntersected.t <= outObj.t + tol && lineIntersected.t >= t1 && lineIntersected.t <= t2) {\n        outObj.intersect = 1;\n        var pDist = line.getParametricDistance(pCoords);\n        if (pDist < pDistMin || pDist === pDistMin && lineIntersected.t < outObj.t) {\n          outObj.subId = subId;\n          outObj.t = lineIntersected.t;\n          pDistMin = pDist;\n        }\n      }\n    }\n    return outObj;\n  };\n  publicAPI.evaluateLocation = function (subId, pcoords, x, weights) {\n    line.getPoints().getData().set(model.points.getData().subarray(3 * subId, 3 * (subId + 2)));\n    return line.evaluateLocation(pcoords, x, weights);\n  };\n  publicAPI.evaluateOrientation = function (subId, pcoords, q, weights) {\n    if (model.orientations) {\n      line.setOrientations([model.orientations[subId], model.orientations[subId + 1]]);\n    } else {\n      line.setOrientations(null);\n    }\n    return line.evaluateOrientation(pcoords, q, weights);\n  };\n  publicAPI.getDistancesToFirstPoint = function () {\n    var dTime = model.distancesTime.getMTime();\n    if (dTime < model.points.getMTime() || dTime < publicAPI.getMTime()) {\n      var numPoints = publicAPI.getNumberOfPoints();\n      if (!model.distances) {\n        model.distances = new Array(numPoints);\n      } else {\n        model.distances.length = numPoints;\n      }\n      if (numPoints > 0) {\n        var previousPoint = new Array(3);\n        var currentPoint = new Array(3);\n        var totalDistance = 0;\n        model.distances[0] = totalDistance;\n        model.points.getPoint(0, previousPoint);\n        for (var i = 1; i < numPoints; ++i) {\n          model.points.getPoint(i, currentPoint);\n          totalDistance += model.distanceFunction(previousPoint, currentPoint);\n          model.distances[i] = totalDistance;\n          vec3.copy(previousPoint, currentPoint);\n        }\n      }\n      model.distancesTime.modified();\n    }\n    return model.distances;\n  };\n  publicAPI.findPointIdAtDistanceFromFirstPoint = function (distance) {\n    var distances = publicAPI.getDistancesToFirstPoint(); // At least two points to return an ID\n\n    if (distances.length < 2) {\n      return -1;\n    } // Binary search in the distance array\n\n    var minId = 0;\n    var maxId = distances.length - 1;\n    if (distance < distances[minId] || distance > distances[maxId] || distances[maxId] === 0) {\n      return -1;\n    }\n    while (maxId - minId > 1) {\n      var midId = Math.floor((minId + maxId) / 2);\n      if (distances[midId] <= distance) {\n        minId = midId;\n      } else {\n        maxId = midId;\n      }\n    }\n    return minId;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  orientations: null,\n  // an array of quat or null\n  distanceFunction: vec3.dist\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkCell.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['orientations', 'distanceFunction']);\n  model.distancesTime = {};\n  macro.obj(model.distancesTime, {\n    mtime: 0\n  });\n  vtkPolyLine(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyLine'); // ----------------------------------------------------------------------------\n\nvar vtkPolyLine$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkPolyLine$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkCell","vtkLine","vec3","vtkPolyLine","publicAPI","model","classHierarchy","push","line","newInstance","getPoints","setNumberOfPoints","getCellDimension","intersectWithLine","t1","t2","p1","p2","tol","x","pcoords","outObj","intersect","t","Number","MAX_VALUE","subId","betweenPoints","numLines","getNumberOfPoints","pDistMin","pCoords","getData","set","points","subarray","lineIntersected","pDist","getParametricDistance","evaluateLocation","weights","evaluateOrientation","q","orientations","setOrientations","getDistancesToFirstPoint","dTime","distancesTime","getMTime","numPoints","distances","Array","length","previousPoint","currentPoint","totalDistance","getPoint","i","distanceFunction","copy","modified","findPointIdAtDistanceFromFirstPoint","distance","minId","maxId","midId","Math","floor","DEFAULT_VALUES","dist","extend","initialValues","arguments","undefined","Object","assign","setGet","obj","mtime","vtkPolyLine$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Common/DataModel/PolyLine.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkCell from './Cell.js';\nimport vtkLine from './Line.js';\nimport { vec3 } from 'gl-matrix';\n\nfunction vtkPolyLine(publicAPI, model) {\n  model.classHierarchy.push('vtkPolyLine');\n  var line = vtkLine.newInstance();\n  line.getPoints().setNumberOfPoints(2);\n\n  publicAPI.getCellDimension = function () {\n    return 1;\n  };\n\n  publicAPI.intersectWithLine = function (t1, t2, p1, p2, tol, x, pcoords) {\n    var outObj = {\n      intersect: 0,\n      t: Number.MAX_VALUE,\n      subId: 0,\n      betweenPoints: null\n    };\n    var numLines = publicAPI.getNumberOfPoints() - 1;\n    var pDistMin = Number.MAX_VALUE;\n\n    for (var subId = 0; subId < numLines; subId++) {\n      var pCoords = [0, 0, 0];\n      line.getPoints().getData().set(model.points.getData().subarray(3 * subId, 3 * (subId + 2)));\n      var lineIntersected = line.intersectWithLine(p1, p2, tol, x, pcoords);\n\n      if (lineIntersected.intersect === 1 && lineIntersected.t <= outObj.t + tol && lineIntersected.t >= t1 && lineIntersected.t <= t2) {\n        outObj.intersect = 1;\n        var pDist = line.getParametricDistance(pCoords);\n\n        if (pDist < pDistMin || pDist === pDistMin && lineIntersected.t < outObj.t) {\n          outObj.subId = subId;\n          outObj.t = lineIntersected.t;\n          pDistMin = pDist;\n        }\n      }\n    }\n\n    return outObj;\n  };\n\n  publicAPI.evaluateLocation = function (subId, pcoords, x, weights) {\n    line.getPoints().getData().set(model.points.getData().subarray(3 * subId, 3 * (subId + 2)));\n    return line.evaluateLocation(pcoords, x, weights);\n  };\n\n  publicAPI.evaluateOrientation = function (subId, pcoords, q, weights) {\n    if (model.orientations) {\n      line.setOrientations([model.orientations[subId], model.orientations[subId + 1]]);\n    } else {\n      line.setOrientations(null);\n    }\n\n    return line.evaluateOrientation(pcoords, q, weights);\n  };\n\n  publicAPI.getDistancesToFirstPoint = function () {\n    var dTime = model.distancesTime.getMTime();\n\n    if (dTime < model.points.getMTime() || dTime < publicAPI.getMTime()) {\n      var numPoints = publicAPI.getNumberOfPoints();\n\n      if (!model.distances) {\n        model.distances = new Array(numPoints);\n      } else {\n        model.distances.length = numPoints;\n      }\n\n      if (numPoints > 0) {\n        var previousPoint = new Array(3);\n        var currentPoint = new Array(3);\n        var totalDistance = 0;\n        model.distances[0] = totalDistance;\n        model.points.getPoint(0, previousPoint);\n\n        for (var i = 1; i < numPoints; ++i) {\n          model.points.getPoint(i, currentPoint);\n          totalDistance += model.distanceFunction(previousPoint, currentPoint);\n          model.distances[i] = totalDistance;\n          vec3.copy(previousPoint, currentPoint);\n        }\n      }\n\n      model.distancesTime.modified();\n    }\n\n    return model.distances;\n  };\n\n  publicAPI.findPointIdAtDistanceFromFirstPoint = function (distance) {\n    var distances = publicAPI.getDistancesToFirstPoint(); // At least two points to return an ID\n\n    if (distances.length < 2) {\n      return -1;\n    } // Binary search in the distance array\n\n\n    var minId = 0;\n    var maxId = distances.length - 1;\n\n    if (distance < distances[minId] || distance > distances[maxId] || distances[maxId] === 0) {\n      return -1;\n    }\n\n    while (maxId - minId > 1) {\n      var midId = Math.floor((minId + maxId) / 2);\n\n      if (distances[midId] <= distance) {\n        minId = midId;\n      } else {\n        maxId = midId;\n      }\n    }\n\n    return minId;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  orientations: null,\n  // an array of quat or null\n  distanceFunction: vec3.dist\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkCell.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['orientations', 'distanceFunction']);\n  model.distancesTime = {};\n  macro.obj(model.distancesTime, {\n    mtime: 0\n  });\n  vtkPolyLine(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkPolyLine'); // ----------------------------------------------------------------------------\n\nvar vtkPolyLine$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkPolyLine$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}