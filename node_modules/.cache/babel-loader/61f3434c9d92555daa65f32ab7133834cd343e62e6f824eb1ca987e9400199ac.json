{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkContextRepresentation from './ContextRepresentation.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkSpline3D from '../../Common/DataModel/Spline3D.js';\nimport vtkTriangleFilter from '../../Filters/General/TriangleFilter.js';\nimport vtkLineFilter from '../../Filters/General/LineFilter.js';\nimport vtkWidgetRepresentation, { allocateArray } from './WidgetRepresentation.js';\n\n// vtkSplineContextRepresentation methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSplineContextRepresentation(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSplineContextRepresentation'); // --------------------------------------------------------------------------\n  // Generic rendering pipeline\n  // --------------------------------------------------------------------------\n\n  model.internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n  model._pipelines = {\n    area: {\n      source: publicAPI,\n      filter: vtkTriangleFilter.newInstance(),\n      mapper: vtkMapper.newInstance(),\n      actor: vtkActor.newInstance({\n        parentProp: publicAPI\n      })\n    },\n    border: {\n      source: publicAPI,\n      filter: vtkLineFilter.newInstance(),\n      mapper: vtkMapper.newInstance(),\n      actor: vtkActor.newInstance({\n        parentProp: publicAPI\n      })\n    }\n  };\n  vtkWidgetRepresentation.connectPipeline(model._pipelines.area);\n  model._pipelines.area.actor.getProperty().setOpacity(0.2);\n  model._pipelines.area.actor.getProperty().setColor(0, 1, 0);\n  publicAPI.addActor(model._pipelines.area.actor);\n  vtkWidgetRepresentation.connectPipeline(model._pipelines.border);\n  model._pipelines.border.actor.getProperty().setOpacity(1);\n  model._pipelines.border.actor.getProperty().setColor(0.1, 1, 0.1);\n  model._pipelines.border.actor.setVisibility(model.outputBorder);\n  publicAPI.addActor(model._pipelines.border.actor); // --------------------------------------------------------------------------\n\n  var superGetRepresentationStates = publicAPI.getRepresentationStates;\n  publicAPI.getRepresentationStates = function () {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.inputData[0];\n    return superGetRepresentationStates(input).filter(function (state) {\n      var _state$getOrigin, _state$isVisible;\n      return ((_state$getOrigin = state.getOrigin) === null || _state$getOrigin === void 0 ? void 0 : _state$getOrigin.call(state)) && ((_state$isVisible = state.isVisible) === null || _state$isVisible === void 0 ? void 0 : _state$isVisible.call(state));\n    });\n  };\n  publicAPI.requestData = function (inData, outData) {\n    var _model$_pipelines$bor;\n    if (model.deleted) {\n      return;\n    }\n    var widgetState = inData[0];\n    var closed = widgetState.getSplineClosed();\n    var list = publicAPI.getRepresentationStates(widgetState);\n    var inPoints = list.map(function (state) {\n      return state.getOrigin();\n    });\n    if (inPoints.length <= 1) {\n      outData[0] = model.internalPolyData;\n      return;\n    }\n    var numVertices = inPoints.length;\n    if (!closed) {\n      --numVertices;\n    } else {\n      inPoints.push(inPoints[0]);\n    }\n    var spline = vtkSpline3D.newInstance({\n      close: widgetState.getSplineClosed(),\n      kind: widgetState.getSplineKind(),\n      tension: widgetState.getSplineTension(),\n      bias: widgetState.getSplineBias(),\n      continuity: widgetState.getSplineContinuity(),\n      boundaryCondition: widgetState.getSplineBoundaryCondition(),\n      boundaryConditionValues: widgetState.getSplineBoundaryConditionValues()\n    });\n    spline.computeCoefficients(inPoints);\n    var outPoints = allocateArray(model.internalPolyData, 'points', (numVertices + !closed) * model.resolution).getData();\n    var outCells = new Uint32Array(numVertices * model.resolution + 2);\n    outCells[0] = numVertices * model.resolution + 1;\n    outCells[numVertices * model.resolution + 1] = 0;\n    for (var i = 0; i < numVertices; i++) {\n      for (var j = 0; j < model.resolution; j++) {\n        var t = j / model.resolution;\n        var point = spline.getPoint(i, t);\n        outPoints[3 * (i * model.resolution + j) + 0] = point[0];\n        outPoints[3 * (i * model.resolution + j) + 1] = point[1];\n        outPoints[3 * (i * model.resolution + j) + 2] = point[2];\n        outCells[i * model.resolution + j + 1] = i * model.resolution + j;\n      }\n    }\n    if (closed) {\n      outCells[numVertices * model.resolution + 1] = 0;\n    } else {\n      var lastPointIndex = numVertices * model.resolution + 1;\n      var lastPoint = spline.getPoint(numVertices, 0);\n      outPoints[3 * lastPointIndex + 0] = lastPoint[0];\n      outPoints[3 * lastPointIndex + 1] = lastPoint[1];\n      outPoints[3 * lastPointIndex + 2] = lastPoint[2];\n      outCells[numVertices * model.resolution + 1] = lastPointIndex;\n    }\n    if (model.fill) {\n      model.internalPolyData.getPolys().setData(outCells);\n    }\n    model.internalPolyData.getLines().setData(model.outputBorder ? outCells : []);\n    model.internalPolyData.modified();\n    outData[0] = model.internalPolyData;\n    model._pipelines.area.filter.update();\n    (_model$_pipelines$bor = model._pipelines.border.actor.getProperty()).setColor.apply(_model$_pipelines$bor, _toConsumableArray(inPoints.length <= 3 || model._pipelines.area.filter.getErrorCount() === 0 ? model.borderColor : model.errorBorderColor));\n  };\n  publicAPI.getSelectedState = function (prop, compositeID) {\n    return model.state;\n  };\n  function updateAreaVisibility() {\n    model._pipelines.area.actor.setVisibility(model.fill);\n  }\n  publicAPI.setFill = macro.chain(publicAPI.setFill, updateAreaVisibility);\n  publicAPI.setOutputBorder = macro.chain(publicAPI.setOutputBorder, function (v) {\n    return model._pipelines.border.actor.setVisibility(v);\n  });\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  resolution: 16,\n  fill: true,\n  // boundaryCondition : BoundaryCondition.DEFAULT\n  outputBorder: false,\n  borderColor: [0.1, 1, 0.1],\n  errorBorderColor: [1, 0, 0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkContextRepresentation.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['mapper']);\n  macro.setGet(publicAPI, model, ['resolution', 'boundaryCondition', 'fill', 'outputBorder']);\n  macro.setGetArray(publicAPI, model, ['borderColor', 'errorBorderColor'], 3); // Object specific methods\n\n  vtkSplineContextRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkSplineContextRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkSplineContextRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkSplineContextRepresentation$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkActor","vtkContextRepresentation","vtkMapper","vtkPolyData","vtkSpline3D","vtkTriangleFilter","vtkLineFilter","vtkWidgetRepresentation","allocateArray","vtkSplineContextRepresentation","publicAPI","model","classHierarchy","push","internalPolyData","newInstance","mtime","_pipelines","area","source","filter","mapper","actor","parentProp","border","connectPipeline","getProperty","setOpacity","setColor","addActor","setVisibility","outputBorder","superGetRepresentationStates","getRepresentationStates","input","arguments","length","undefined","inputData","state","_state$getOrigin","_state$isVisible","getOrigin","call","isVisible","requestData","inData","outData","_model$_pipelines$bor","deleted","widgetState","closed","getSplineClosed","list","inPoints","map","numVertices","spline","close","kind","getSplineKind","tension","getSplineTension","bias","getSplineBias","continuity","getSplineContinuity","boundaryCondition","getSplineBoundaryCondition","boundaryConditionValues","getSplineBoundaryConditionValues","computeCoefficients","outPoints","resolution","getData","outCells","Uint32Array","i","j","t","point","getPoint","lastPointIndex","lastPoint","fill","getPolys","setData","getLines","modified","update","apply","getErrorCount","borderColor","errorBorderColor","getSelectedState","prop","compositeID","updateAreaVisibility","setFill","chain","setOutputBorder","v","DEFAULT_VALUES","extend","initialValues","Object","assign","get","setGet","setGetArray","vtkSplineContextRepresentation$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Representations/SplineContextRepresentation.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkContextRepresentation from './ContextRepresentation.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkSpline3D from '../../Common/DataModel/Spline3D.js';\nimport vtkTriangleFilter from '../../Filters/General/TriangleFilter.js';\nimport vtkLineFilter from '../../Filters/General/LineFilter.js';\nimport vtkWidgetRepresentation, { allocateArray } from './WidgetRepresentation.js';\n\n// vtkSplineContextRepresentation methods\n// ----------------------------------------------------------------------------\n\nfunction vtkSplineContextRepresentation(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkSplineContextRepresentation'); // --------------------------------------------------------------------------\n  // Generic rendering pipeline\n  // --------------------------------------------------------------------------\n\n  model.internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n  model._pipelines = {\n    area: {\n      source: publicAPI,\n      filter: vtkTriangleFilter.newInstance(),\n      mapper: vtkMapper.newInstance(),\n      actor: vtkActor.newInstance({\n        parentProp: publicAPI\n      })\n    },\n    border: {\n      source: publicAPI,\n      filter: vtkLineFilter.newInstance(),\n      mapper: vtkMapper.newInstance(),\n      actor: vtkActor.newInstance({\n        parentProp: publicAPI\n      })\n    }\n  };\n  vtkWidgetRepresentation.connectPipeline(model._pipelines.area);\n\n  model._pipelines.area.actor.getProperty().setOpacity(0.2);\n\n  model._pipelines.area.actor.getProperty().setColor(0, 1, 0);\n\n  publicAPI.addActor(model._pipelines.area.actor);\n  vtkWidgetRepresentation.connectPipeline(model._pipelines.border);\n\n  model._pipelines.border.actor.getProperty().setOpacity(1);\n\n  model._pipelines.border.actor.getProperty().setColor(0.1, 1, 0.1);\n\n  model._pipelines.border.actor.setVisibility(model.outputBorder);\n\n  publicAPI.addActor(model._pipelines.border.actor); // --------------------------------------------------------------------------\n\n  var superGetRepresentationStates = publicAPI.getRepresentationStates;\n\n  publicAPI.getRepresentationStates = function () {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.inputData[0];\n    return superGetRepresentationStates(input).filter(function (state) {\n      var _state$getOrigin, _state$isVisible;\n\n      return ((_state$getOrigin = state.getOrigin) === null || _state$getOrigin === void 0 ? void 0 : _state$getOrigin.call(state)) && ((_state$isVisible = state.isVisible) === null || _state$isVisible === void 0 ? void 0 : _state$isVisible.call(state));\n    });\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    var _model$_pipelines$bor;\n\n    if (model.deleted) {\n      return;\n    }\n\n    var widgetState = inData[0];\n    var closed = widgetState.getSplineClosed();\n    var list = publicAPI.getRepresentationStates(widgetState);\n    var inPoints = list.map(function (state) {\n      return state.getOrigin();\n    });\n\n    if (inPoints.length <= 1) {\n      outData[0] = model.internalPolyData;\n      return;\n    }\n\n    var numVertices = inPoints.length;\n\n    if (!closed) {\n      --numVertices;\n    } else {\n      inPoints.push(inPoints[0]);\n    }\n\n    var spline = vtkSpline3D.newInstance({\n      close: widgetState.getSplineClosed(),\n      kind: widgetState.getSplineKind(),\n      tension: widgetState.getSplineTension(),\n      bias: widgetState.getSplineBias(),\n      continuity: widgetState.getSplineContinuity(),\n      boundaryCondition: widgetState.getSplineBoundaryCondition(),\n      boundaryConditionValues: widgetState.getSplineBoundaryConditionValues()\n    });\n    spline.computeCoefficients(inPoints);\n    var outPoints = allocateArray(model.internalPolyData, 'points', (numVertices + !closed) * model.resolution).getData();\n    var outCells = new Uint32Array(numVertices * model.resolution + 2);\n    outCells[0] = numVertices * model.resolution + 1;\n    outCells[numVertices * model.resolution + 1] = 0;\n\n    for (var i = 0; i < numVertices; i++) {\n      for (var j = 0; j < model.resolution; j++) {\n        var t = j / model.resolution;\n        var point = spline.getPoint(i, t);\n        outPoints[3 * (i * model.resolution + j) + 0] = point[0];\n        outPoints[3 * (i * model.resolution + j) + 1] = point[1];\n        outPoints[3 * (i * model.resolution + j) + 2] = point[2];\n        outCells[i * model.resolution + j + 1] = i * model.resolution + j;\n      }\n    }\n\n    if (closed) {\n      outCells[numVertices * model.resolution + 1] = 0;\n    } else {\n      var lastPointIndex = numVertices * model.resolution + 1;\n      var lastPoint = spline.getPoint(numVertices, 0);\n      outPoints[3 * lastPointIndex + 0] = lastPoint[0];\n      outPoints[3 * lastPointIndex + 1] = lastPoint[1];\n      outPoints[3 * lastPointIndex + 2] = lastPoint[2];\n      outCells[numVertices * model.resolution + 1] = lastPointIndex;\n    }\n\n    if (model.fill) {\n      model.internalPolyData.getPolys().setData(outCells);\n    }\n\n    model.internalPolyData.getLines().setData(model.outputBorder ? outCells : []);\n    model.internalPolyData.modified();\n    outData[0] = model.internalPolyData;\n\n    model._pipelines.area.filter.update();\n\n    (_model$_pipelines$bor = model._pipelines.border.actor.getProperty()).setColor.apply(_model$_pipelines$bor, _toConsumableArray(inPoints.length <= 3 || model._pipelines.area.filter.getErrorCount() === 0 ? model.borderColor : model.errorBorderColor));\n  };\n\n  publicAPI.getSelectedState = function (prop, compositeID) {\n    return model.state;\n  };\n\n  function updateAreaVisibility() {\n    model._pipelines.area.actor.setVisibility(model.fill);\n  }\n\n  publicAPI.setFill = macro.chain(publicAPI.setFill, updateAreaVisibility);\n  publicAPI.setOutputBorder = macro.chain(publicAPI.setOutputBorder, function (v) {\n    return model._pipelines.border.actor.setVisibility(v);\n  });\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  resolution: 16,\n  fill: true,\n  // boundaryCondition : BoundaryCondition.DEFAULT\n  outputBorder: false,\n  borderColor: [0.1, 1, 0.1],\n  errorBorderColor: [1, 0, 0]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkContextRepresentation.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['mapper']);\n  macro.setGet(publicAPI, model, ['resolution', 'boundaryCondition', 'fill', 'outputBorder']);\n  macro.setGetArray(publicAPI, model, ['borderColor', 'errorBorderColor'], 3); // Object specific methods\n\n  vtkSplineContextRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkSplineContextRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkSplineContextRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkSplineContextRepresentation$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}