{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkWebGPUTexture from './Texture.js';\nvar VtkDataTypes = vtkDataArray.VtkDataTypes; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkWebGPUTextureManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTextureManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureManager'); // fills in request values based on what is missing/provided\n\n  function _fillRequest(req) {\n    // fill in values based on imageData if the request has it\n    if (req.imageData) {\n      req.dataArray = req.imageData.getPointData().getScalars();\n      req.time = req.dataArray.getMTime();\n      req.nativeArray = req.dataArray.getData();\n      var dims = req.imageData.getDimensions();\n      req.width = dims[0];\n      req.height = dims[1];\n      req.depth = dims[2];\n      var numComp = req.dataArray.getNumberOfComponents(); // todo fix handling of 3 component\n\n      switch (numComp) {\n        case 1:\n          req.format = 'r';\n          break;\n        case 2:\n          req.format = 'rg';\n          break;\n        case 3:\n        case 4:\n        default:\n          req.format = 'rgba';\n          break;\n      }\n      var dataType = req.dataArray.getDataType();\n      switch (dataType) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          req.format += '8unorm';\n          break;\n        // todo extend to other types that are not filterable\n        // as they can be useful\n\n        case VtkDataTypes.FLOAT:\n        case VtkDataTypes.UNSIGNED_INT:\n        case VtkDataTypes.INT:\n        case VtkDataTypes.DOUBLE:\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        default:\n          req.format += '16float';\n          break;\n      }\n    } // fill in values based on image if the request has it\n\n    if (req.image) {\n      req.width = req.image.width;\n      req.height = req.image.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n    } // fill in based on js imageData\n\n    if (req.jsImageData) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n    if (req.canvas) {\n      req.width = req.canvas.width;\n      req.height = req.canvas.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      /* eslint-disable no-undef */\n\n      /* eslint-disable no-bitwise */\n\n      req.usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT;\n      /* eslint-enable no-undef */\n\n      /* eslint-enable no-bitwise */\n    }\n  } // create a texture (used by getTexture)\n\n  function _createTexture(req) {\n    var newTex = vtkWebGPUTexture.newInstance();\n    newTex.create(model.device, {\n      width: req.width,\n      height: req.height,\n      depth: req.depth,\n      format: req.format,\n      usage: req.usage,\n      mipLevel: req.mipLevel\n    }); // fill the texture if we have data\n\n    if (req.nativeArray || req.image || req.canvas) {\n      newTex.writeImageData(req);\n    }\n    return newTex;\n  } // get a texture or create it if not cached.\n  // this is the main entry point\n\n  publicAPI.getTexture = function (req) {\n    // if we have a source the get/create/cache the texture\n    if (req.hash) {\n      // if a matching texture already exists then return it\n      return model.device.getCachedObject(req.hash, _createTexture, req);\n    }\n    return _createTexture(req);\n  };\n  publicAPI.getTextureForImageData = function (imgData) {\n    var treq = {\n      time: imgData.getMTime()\n    };\n    treq.imageData = imgData; // fill out the req time and format based on imageData/image\n\n    _fillRequest(treq);\n    treq.hash = treq.time + treq.format + treq.mipLevel;\n    return model.device.getTextureManager().getTexture(treq);\n  };\n  publicAPI.getTextureForVTKTexture = function (srcTexture) {\n    var treq = {\n      time: srcTexture.getMTime()\n    };\n    if (srcTexture.getInputData()) {\n      treq.imageData = srcTexture.getInputData();\n    } else if (srcTexture.getImage()) {\n      treq.image = srcTexture.getImage();\n    } else if (srcTexture.getJsImageData()) {\n      treq.jsImageData = srcTexture.getJsImageData();\n    } else if (srcTexture.getCanvas()) {\n      treq.canvas = srcTexture.getCanvas();\n    } // fill out the req time and format based on imageData/image\n\n    _fillRequest(treq);\n    treq.mipLevel = srcTexture.getMipLevel();\n    treq.hash = treq.time + treq.format + treq.mipLevel;\n    return model.device.getTextureManager().getTexture(treq);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  handle: null,\n  device: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['device']);\n  vtkWebGPUTextureManager(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureManager$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkWebGPUTextureManager$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkDataArray","vtkWebGPUTexture","VtkDataTypes","vtkWebGPUTextureManager","publicAPI","model","classHierarchy","push","_fillRequest","req","imageData","dataArray","getPointData","getScalars","time","getMTime","nativeArray","getData","dims","getDimensions","width","height","depth","numComp","getNumberOfComponents","format","dataType","getDataType","UNSIGNED_CHAR","FLOAT","UNSIGNED_INT","INT","DOUBLE","UNSIGNED_SHORT","SHORT","image","jsImageData","flip","data","canvas","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","RENDER_ATTACHMENT","_createTexture","newTex","newInstance","create","device","mipLevel","writeImageData","getTexture","hash","getCachedObject","getTextureForImageData","imgData","treq","getTextureManager","getTextureForVTKTexture","srcTexture","getInputData","getImage","getJsImageData","getCanvas","getMipLevel","DEFAULT_VALUES","handle","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGet","vtkWebGPUTextureManager$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/TextureManager.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkWebGPUTexture from './Texture.js';\n\nvar VtkDataTypes = vtkDataArray.VtkDataTypes; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkWebGPUTextureManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTextureManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureManager'); // fills in request values based on what is missing/provided\n\n  function _fillRequest(req) {\n    // fill in values based on imageData if the request has it\n    if (req.imageData) {\n      req.dataArray = req.imageData.getPointData().getScalars();\n      req.time = req.dataArray.getMTime();\n      req.nativeArray = req.dataArray.getData();\n      var dims = req.imageData.getDimensions();\n      req.width = dims[0];\n      req.height = dims[1];\n      req.depth = dims[2];\n      var numComp = req.dataArray.getNumberOfComponents(); // todo fix handling of 3 component\n\n      switch (numComp) {\n        case 1:\n          req.format = 'r';\n          break;\n\n        case 2:\n          req.format = 'rg';\n          break;\n\n        case 3:\n        case 4:\n        default:\n          req.format = 'rgba';\n          break;\n      }\n\n      var dataType = req.dataArray.getDataType();\n\n      switch (dataType) {\n        case VtkDataTypes.UNSIGNED_CHAR:\n          req.format += '8unorm';\n          break;\n        // todo extend to other types that are not filterable\n        // as they can be useful\n\n        case VtkDataTypes.FLOAT:\n        case VtkDataTypes.UNSIGNED_INT:\n        case VtkDataTypes.INT:\n        case VtkDataTypes.DOUBLE:\n        case VtkDataTypes.UNSIGNED_SHORT:\n        case VtkDataTypes.SHORT:\n        default:\n          req.format += '16float';\n          break;\n      }\n    } // fill in values based on image if the request has it\n\n\n    if (req.image) {\n      req.width = req.image.width;\n      req.height = req.image.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n    } // fill in based on js imageData\n\n\n    if (req.jsImageData) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n\n    if (req.canvas) {\n      req.width = req.canvas.width;\n      req.height = req.canvas.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      /* eslint-disable no-undef */\n\n      /* eslint-disable no-bitwise */\n\n      req.usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT;\n      /* eslint-enable no-undef */\n\n      /* eslint-enable no-bitwise */\n    }\n  } // create a texture (used by getTexture)\n\n\n  function _createTexture(req) {\n    var newTex = vtkWebGPUTexture.newInstance();\n    newTex.create(model.device, {\n      width: req.width,\n      height: req.height,\n      depth: req.depth,\n      format: req.format,\n      usage: req.usage,\n      mipLevel: req.mipLevel\n    }); // fill the texture if we have data\n\n    if (req.nativeArray || req.image || req.canvas) {\n      newTex.writeImageData(req);\n    }\n\n    return newTex;\n  } // get a texture or create it if not cached.\n  // this is the main entry point\n\n\n  publicAPI.getTexture = function (req) {\n    // if we have a source the get/create/cache the texture\n    if (req.hash) {\n      // if a matching texture already exists then return it\n      return model.device.getCachedObject(req.hash, _createTexture, req);\n    }\n\n    return _createTexture(req);\n  };\n\n  publicAPI.getTextureForImageData = function (imgData) {\n    var treq = {\n      time: imgData.getMTime()\n    };\n    treq.imageData = imgData; // fill out the req time and format based on imageData/image\n\n    _fillRequest(treq);\n\n    treq.hash = treq.time + treq.format + treq.mipLevel;\n    return model.device.getTextureManager().getTexture(treq);\n  };\n\n  publicAPI.getTextureForVTKTexture = function (srcTexture) {\n    var treq = {\n      time: srcTexture.getMTime()\n    };\n\n    if (srcTexture.getInputData()) {\n      treq.imageData = srcTexture.getInputData();\n    } else if (srcTexture.getImage()) {\n      treq.image = srcTexture.getImage();\n    } else if (srcTexture.getJsImageData()) {\n      treq.jsImageData = srcTexture.getJsImageData();\n    } else if (srcTexture.getCanvas()) {\n      treq.canvas = srcTexture.getCanvas();\n    } // fill out the req time and format based on imageData/image\n\n\n    _fillRequest(treq);\n\n    treq.mipLevel = srcTexture.getMipLevel();\n    treq.hash = treq.time + treq.format + treq.mipLevel;\n    return model.device.getTextureManager().getTexture(treq);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  handle: null,\n  device: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['device']);\n  vtkWebGPUTextureManager(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureManager$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUTextureManager$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}