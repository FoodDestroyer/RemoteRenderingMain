{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { l as normalize } from '../../Common/Core/Math/index.js';\nimport { a as atomElem } from '../../Utilities/XMLConverter/chemistry/elements.json.js';\nvar vtkErrorMacro = macro.vtkErrorMacro,\n  vtkDebugMacro = macro.vtkDebugMacro; // ----------------------------------------------------------------------------\n// Globals\n// ----------------------------------------------------------------------------\n\nvar ATOMS = {};\natomElem.atoms.forEach(function (a) {\n  ATOMS[a.atomicNumber] = a;\n}); // ----------------------------------------------------------------------------\n// vtkMoleculeToRepresentation methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMoleculeToRepresentation(publicAPI, model) {\n  var bondPositionData = [];\n  var bondScaleData = [];\n  var bondOrientationData = [];\n  var bondColorData = []; // Set our className\n\n  model.classHierarchy.push('vtkMoleculeToRepresentation');\n  function addBond(position, orientation, length) {\n    var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1.0, 1.0, 1.0];\n    var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : model.bondRadius;\n    bondScaleData.push(length);\n    bondScaleData.push(radius);\n    bondOrientationData.push(orientation[0]);\n    bondOrientationData.push(orientation[1]);\n    bondOrientationData.push(orientation[2]);\n    bondPositionData.push(position[0]);\n    bondPositionData.push(position[1]);\n    bondPositionData.push(position[2]);\n    for (var i = 0; i < color.length; ++i) {\n      bondColorData.push(color[i] * 255);\n    }\n  }\n  publicAPI.requestData = function (inData, outData) {\n    // input\n    var moleculedata = inData[0];\n    if (!moleculedata) {\n      vtkErrorMacro('Invalid or missing input');\n      return 1;\n    } // output\n\n    var SphereData = vtkPolyData.newInstance();\n    var StickData = vtkPolyData.newInstance(); // Fetch from input molecule data\n\n    var numPts = 0;\n    var numBonds = 0;\n    var pointsArray = null;\n    var atomicNumber = null;\n    var bondIndex = null;\n    var bondOrder = null; // Empty arrays\n\n    bondPositionData.length = 0;\n    bondScaleData.length = 0;\n    bondOrientationData.length = 0;\n    bondColorData.length = 0;\n    if (moleculedata.getAtoms()) {\n      if (moleculedata.getAtoms().coords !== undefined) {\n        if (moleculedata.getAtoms().coords['3d'] !== undefined) {\n          pointsArray = moleculedata.getAtoms().coords['3d'];\n          numPts = pointsArray.length / 3;\n        }\n      }\n      if (moleculedata.getAtoms().elements !== undefined) {\n        if (moleculedata.getAtoms().elements.number !== undefined) {\n          atomicNumber = moleculedata.getAtoms().elements.number;\n        }\n      }\n    }\n    if (moleculedata.getBonds()) {\n      if (moleculedata.getBonds().connections !== undefined) {\n        if (moleculedata.getBonds().connections.index !== undefined) {\n          bondIndex = moleculedata.getBonds().connections.index;\n          numBonds = bondIndex.length / 2;\n        }\n      }\n      if (moleculedata.getBonds().order !== undefined) {\n        bondOrder = moleculedata.getBonds().order;\n      }\n    }\n    var pointsData = [];\n    var scaleData = [];\n    var colorData = [];\n    var radiusArray = [];\n    var covalentArray = [];\n    var colorArray = [];\n    vtkDebugMacro('Checking for bonds with tolerance ', model.tolerance); // go through each points and fill from elements.json\n\n    /* eslint-disable no-continue */\n\n    var ptsIdx = 0;\n    for (var i = 0; i < numPts; i++) {\n      // fetch from elements.json\n      if (atomicNumber) {\n        radiusArray.push(ATOMS[atomicNumber[i]][model.radiusType]);\n        covalentArray.push(ATOMS[atomicNumber[i]].radiusCovalent);\n        colorArray.push(ATOMS[atomicNumber[i]].elementColor[0]);\n        colorArray.push(ATOMS[atomicNumber[i]].elementColor[1]);\n        colorArray.push(ATOMS[atomicNumber[i]].elementColor[2]);\n      } // skip atoms specified by hideElements\n      // model.hideHydrogen = false; // show hydrogen\n\n      if (model.hideElements.indexOf(ATOMS[atomicNumber[i]].id) !== -1) {\n        continue;\n      } // points\n\n      ptsIdx = i * 3;\n      pointsData.push(pointsArray[ptsIdx]);\n      pointsData.push(pointsArray[ptsIdx + 1]);\n      pointsData.push(pointsArray[ptsIdx + 2]); // radius\n\n      if (radiusArray.length > 0) {\n        scaleData.push(radiusArray[i] * model.atomicRadiusScaleFactor);\n      } // colors\n\n      if (colorArray.length > 0) {\n        ptsIdx = i * 3;\n        colorData.push(colorArray[ptsIdx] * 255);\n        colorData.push(colorArray[ptsIdx + 1] * 255);\n        colorData.push(colorArray[ptsIdx + 2] * 255);\n      }\n    } // if we don't have Bonds provided\n    // we fill up a bondIndex and a bondOrder\n\n    if (!bondIndex) {\n      bondIndex = [];\n      bondOrder = []; // default bond display\n\n      /* eslint-disable no-continue */\n\n      for (var _i = 0; _i < numPts; _i++) {\n        for (var j = _i + 1; j < numPts; j++) {\n          var cutoff = covalentArray[_i] + covalentArray[j] + model.tolerance;\n          var jPtsIdx = j * 3;\n          var iPtsIdx = _i * 3;\n          var diff = [pointsArray[jPtsIdx], pointsArray[jPtsIdx + 1], pointsArray[jPtsIdx + 2]];\n          diff[0] -= pointsArray[iPtsIdx];\n          diff[1] -= pointsArray[iPtsIdx + 1];\n          diff[2] -= pointsArray[iPtsIdx + 2];\n          if (Math.abs(diff[0]) > cutoff || Math.abs(diff[1]) > cutoff || Math.abs(diff[2]) > cutoff) {\n            continue;\n          } // Check radius and add bond if needed\n\n          var cutoffSq = cutoff * cutoff;\n          var diffsq = diff[0] * diff[0] + diff[1] * diff[1] + diff[2] * diff[2];\n          if (diffsq < cutoffSq && diffsq > 0.1) {\n            // appendBond between i and j\n            bondIndex.push(_i);\n            bondIndex.push(j);\n            bondOrder.push(1);\n          }\n        }\n      }\n      numBonds = bondIndex.length / 2;\n    } // now we have the bonds, draw them\n\n    for (var index = 0; index < numBonds; index++) {\n      // appendBond between i and j\n      var _i2 = bondIndex[index * 2];\n      var _j = bondIndex[index * 2 + 1]; // Do not append if i or j belong to element to not display\n\n      if (model.hideElements.indexOf(ATOMS[atomicNumber[_i2]].id) !== -1 || model.hideElements.indexOf(ATOMS[atomicNumber[_j]].id) !== -1) {\n        continue;\n      }\n      var _jPtsIdx = _j * 3;\n      var _iPtsIdx = _i2 * 3;\n      var _diff = [pointsArray[_jPtsIdx], pointsArray[_jPtsIdx + 1], pointsArray[_jPtsIdx + 2]];\n      _diff[0] -= pointsArray[_iPtsIdx];\n      _diff[1] -= pointsArray[_iPtsIdx + 1];\n      _diff[2] -= pointsArray[_iPtsIdx + 2];\n      var _diffsq = _diff[0] * _diff[0] + _diff[1] * _diff[1] + _diff[2] * _diff[2];\n      var bondDelta = (2 + model.deltaBondFactor) * model.bondRadius; // distance between 2 bonds\n      // scale bonds if total distance from bonds is bigger than 2r*factor with r = min(r_i, r_j)\n\n      var r = Math.min(radiusArray[_i2] * model.atomicRadiusScaleFactor, radiusArray[_j] * model.atomicRadiusScaleFactor);\n      var t = (bondOrder[index] - 1) * bondDelta + 2 * model.bondRadius;\n      if (t > 2 * r * 0.6) {\n        model.bondRadius *= 2 * r * 0.6 / t; // recompute bondDelta\n\n        bondDelta = (2 + model.deltaBondFactor) * model.bondRadius; // distance between 2 bonds\n      } // Display multiple bond\n      // loop such as 0 11 22 if odd order / 00 11 22 33 if even order\n      // To make:     0 22 44 66 88 ...      11 33 55 77 ....\n      // because the offset has to be:\n      // (with bd= bondDelta. Note the minus is added just before creating bondPos)\n      //   - odd order: 0 2bd/2 -2bd/2 4bd/2 -4bd/2 ...\n      //   - even order:  1bd/2 -1bd/2 3bd/2 -3bd/2 ...\n      // Then, to transform loop to offset we have:\n      //   - odd order: x * 2 <=> x * 2 + 1 - 1\n      //   - even order: x * 2 + 1\n      // (with x the loop <=> floor(k/2))\n\n      var oddOrEven = bondOrder[index] % 2; // zero if even order / one if odd order\n\n      for (var k = oddOrEven; k < bondOrder[index] + oddOrEven; k++) {\n        // dist from center to bond depending of number of bond\n        var offset = (Math.floor(k / 2) * 2 + 1 - oddOrEven) * bondDelta / 2;\n        var vectUnitJI = [_diff[0] / Math.sqrt(_diffsq), _diff[1] / Math.sqrt(_diffsq), _diff[2] / Math.sqrt(_diffsq)];\n        var vectUnitJIperp = [0, 0, 0]; // Search perp to vectUnitJI: find axis != 0 to create vectUnitJIperp such as dot(vectUnitJIperp,vectUnitJI) = 0\n\n        for (var coord = 0; coord < 3; coord++) {\n          if (Math.abs(vectUnitJI[coord]) < 0.000001) {\n            continue;\n          }\n          vectUnitJIperp[coord] = -(vectUnitJI[(coord + 2) % 3] * vectUnitJI[(coord + 2) % 3] + vectUnitJI[(coord + 1) % 3] * vectUnitJI[(coord + 1) % 3]) / vectUnitJI[coord];\n          vectUnitJIperp[(coord + 1) % 3] = vectUnitJI[(coord + 1) % 3];\n          vectUnitJIperp[(coord + 2) % 3] = vectUnitJI[(coord + 2) % 3];\n          normalize(vectUnitJIperp);\n          break;\n        }\n        offset *= Math.pow(-1, k % 2);\n        /*\n        If atoms have a color associated, and if the atoms involved in the bond\n        are different species, then each bond will be represented by\n        two sticks, so that they can be colored with the same color as the atoms\n        involved in the bond.\n        */\n\n        var bondPos = void 0;\n        if (atomicNumber && atomicNumber[_i2] !== atomicNumber[_j] && colorArray.length > 0) {\n          var bondLength = Math.sqrt(_diffsq) / 2.0;\n          bondPos = [pointsArray[_jPtsIdx] - bondLength * vectUnitJI[0] / 2.0 + offset * vectUnitJIperp[0], pointsArray[_jPtsIdx + 1] - bondLength * vectUnitJI[1] / 2.0 + offset * vectUnitJIperp[1], pointsArray[_jPtsIdx + 2] - bondLength * vectUnitJI[2] / 2.0 + offset * vectUnitJIperp[2]];\n          addBond(bondPos, vectUnitJI, bondLength, colorArray.slice(_jPtsIdx, _jPtsIdx + 3));\n          bondPos = [pointsArray[_iPtsIdx] + bondLength * vectUnitJI[0] / 2.0 + offset * vectUnitJIperp[0], pointsArray[_iPtsIdx + 1] + bondLength * vectUnitJI[1] / 2.0 + offset * vectUnitJIperp[1], pointsArray[_iPtsIdx + 2] + bondLength * vectUnitJI[2] / 2.0 + offset * vectUnitJIperp[2]];\n          addBond(bondPos, vectUnitJI, bondLength, colorArray.slice(_iPtsIdx, _iPtsIdx + 3));\n        } else {\n          var _bondLength = Math.sqrt(_diffsq);\n          bondPos = [pointsArray[_jPtsIdx] - _diff[0] / 2.0 + offset * vectUnitJIperp[0], pointsArray[_jPtsIdx + 1] - _diff[1] / 2.0 + offset * vectUnitJIperp[1], pointsArray[_jPtsIdx + 2] - _diff[2] / 2.0 + offset * vectUnitJIperp[2]];\n          if (colorArray.length > 0) {\n            addBond(bondPos, vectUnitJI, _bondLength, colorArray.slice(_iPtsIdx, _iPtsIdx + 3));\n          } else {\n            addBond(bondPos, vectUnitJI, _bondLength);\n          }\n        }\n      }\n    }\n    SphereData.getPoints().setData(pointsData, 3);\n    if (radiusArray) {\n      var scales = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: scaleData,\n        name: publicAPI.getSphereScaleArrayName()\n      });\n      SphereData.getPointData().addArray(scales);\n    }\n    if (colorArray.length > 0) {\n      var colors = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: Uint8Array.from(colorData),\n        name: 'colors'\n      });\n      SphereData.getPointData().setScalars(colors);\n    }\n    StickData.getPoints().setData(bondPositionData, 3);\n    var stickScales = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: bondScaleData,\n      name: 'stickScales'\n    });\n    StickData.getPointData().addArray(stickScales);\n    var orientation = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: bondOrientationData,\n      name: 'orientation'\n    });\n    StickData.getPointData().addArray(orientation);\n    if (colorArray.length > 0) {\n      var bondColors = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: Uint8Array.from(bondColorData),\n        name: 'colors'\n      });\n      StickData.getPointData().setScalars(bondColors);\n    } // Update output\n\n    outData[0] = SphereData;\n    outData[1] = StickData;\n    return 1;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  sphereScaleArrayName: 'radius',\n  tolerance: 0.45,\n  atomicRadiusScaleFactor: 0.3,\n  bondRadius: 0.075,\n  deltaBondFactor: 0.6,\n  radiusType: 'radiusVDW',\n  hideElements: ''\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['atomicRadiusScaleFactor', 'bondRadius', 'deltaBondFactor', 'hideElements', 'radiusType', 'sphereScaleArrayName', 'tolerance']);\n  macro.algo(publicAPI, model, 1, 2);\n  vtkMoleculeToRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMoleculeToRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkMoleculeToRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkMoleculeToRepresentation$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkPolyData","vtkDataArray","l","normalize","a","atomElem","vtkErrorMacro","vtkDebugMacro","ATOMS","atoms","forEach","atomicNumber","vtkMoleculeToRepresentation","publicAPI","model","bondPositionData","bondScaleData","bondOrientationData","bondColorData","classHierarchy","push","addBond","position","orientation","length","color","arguments","undefined","radius","bondRadius","i","requestData","inData","outData","moleculedata","SphereData","newInstance","StickData","numPts","numBonds","pointsArray","bondIndex","bondOrder","getAtoms","coords","elements","number","getBonds","connections","index","order","pointsData","scaleData","colorData","radiusArray","covalentArray","colorArray","tolerance","ptsIdx","radiusType","radiusCovalent","elementColor","hideElements","indexOf","id","atomicRadiusScaleFactor","_i","j","cutoff","jPtsIdx","iPtsIdx","diff","Math","abs","cutoffSq","diffsq","_i2","_j","_jPtsIdx","_iPtsIdx","_diff","_diffsq","bondDelta","deltaBondFactor","r","min","t","oddOrEven","k","offset","floor","vectUnitJI","sqrt","vectUnitJIperp","coord","pow","bondPos","bondLength","slice","_bondLength","getPoints","setData","scales","numberOfComponents","values","name","getSphereScaleArrayName","getPointData","addArray","colors","Uint8Array","from","setScalars","stickScales","bondColors","DEFAULT_VALUES","sphereScaleArrayName","extend","initialValues","Object","assign","obj","setGet","algo","vtkMoleculeToRepresentation$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/General/MoleculeToRepresentation.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { l as normalize } from '../../Common/Core/Math/index.js';\nimport { a as atomElem } from '../../Utilities/XMLConverter/chemistry/elements.json.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro,\n    vtkDebugMacro = macro.vtkDebugMacro; // ----------------------------------------------------------------------------\n// Globals\n// ----------------------------------------------------------------------------\n\nvar ATOMS = {};\natomElem.atoms.forEach(function (a) {\n  ATOMS[a.atomicNumber] = a;\n}); // ----------------------------------------------------------------------------\n// vtkMoleculeToRepresentation methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMoleculeToRepresentation(publicAPI, model) {\n  var bondPositionData = [];\n  var bondScaleData = [];\n  var bondOrientationData = [];\n  var bondColorData = []; // Set our className\n\n  model.classHierarchy.push('vtkMoleculeToRepresentation');\n\n  function addBond(position, orientation, length) {\n    var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1.0, 1.0, 1.0];\n    var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : model.bondRadius;\n    bondScaleData.push(length);\n    bondScaleData.push(radius);\n    bondOrientationData.push(orientation[0]);\n    bondOrientationData.push(orientation[1]);\n    bondOrientationData.push(orientation[2]);\n    bondPositionData.push(position[0]);\n    bondPositionData.push(position[1]);\n    bondPositionData.push(position[2]);\n\n    for (var i = 0; i < color.length; ++i) {\n      bondColorData.push(color[i] * 255);\n    }\n  }\n\n  publicAPI.requestData = function (inData, outData) {\n    // input\n    var moleculedata = inData[0];\n\n    if (!moleculedata) {\n      vtkErrorMacro('Invalid or missing input');\n      return 1;\n    } // output\n\n\n    var SphereData = vtkPolyData.newInstance();\n    var StickData = vtkPolyData.newInstance(); // Fetch from input molecule data\n\n    var numPts = 0;\n    var numBonds = 0;\n    var pointsArray = null;\n    var atomicNumber = null;\n    var bondIndex = null;\n    var bondOrder = null; // Empty arrays\n\n    bondPositionData.length = 0;\n    bondScaleData.length = 0;\n    bondOrientationData.length = 0;\n    bondColorData.length = 0;\n\n    if (moleculedata.getAtoms()) {\n      if (moleculedata.getAtoms().coords !== undefined) {\n        if (moleculedata.getAtoms().coords['3d'] !== undefined) {\n          pointsArray = moleculedata.getAtoms().coords['3d'];\n          numPts = pointsArray.length / 3;\n        }\n      }\n\n      if (moleculedata.getAtoms().elements !== undefined) {\n        if (moleculedata.getAtoms().elements.number !== undefined) {\n          atomicNumber = moleculedata.getAtoms().elements.number;\n        }\n      }\n    }\n\n    if (moleculedata.getBonds()) {\n      if (moleculedata.getBonds().connections !== undefined) {\n        if (moleculedata.getBonds().connections.index !== undefined) {\n          bondIndex = moleculedata.getBonds().connections.index;\n          numBonds = bondIndex.length / 2;\n        }\n      }\n\n      if (moleculedata.getBonds().order !== undefined) {\n        bondOrder = moleculedata.getBonds().order;\n      }\n    }\n\n    var pointsData = [];\n    var scaleData = [];\n    var colorData = [];\n    var radiusArray = [];\n    var covalentArray = [];\n    var colorArray = [];\n    vtkDebugMacro('Checking for bonds with tolerance ', model.tolerance); // go through each points and fill from elements.json\n\n    /* eslint-disable no-continue */\n\n    var ptsIdx = 0;\n\n    for (var i = 0; i < numPts; i++) {\n      // fetch from elements.json\n      if (atomicNumber) {\n        radiusArray.push(ATOMS[atomicNumber[i]][model.radiusType]);\n        covalentArray.push(ATOMS[atomicNumber[i]].radiusCovalent);\n        colorArray.push(ATOMS[atomicNumber[i]].elementColor[0]);\n        colorArray.push(ATOMS[atomicNumber[i]].elementColor[1]);\n        colorArray.push(ATOMS[atomicNumber[i]].elementColor[2]);\n      } // skip atoms specified by hideElements\n      // model.hideHydrogen = false; // show hydrogen\n\n\n      if (model.hideElements.indexOf(ATOMS[atomicNumber[i]].id) !== -1) {\n        continue;\n      } // points\n\n\n      ptsIdx = i * 3;\n      pointsData.push(pointsArray[ptsIdx]);\n      pointsData.push(pointsArray[ptsIdx + 1]);\n      pointsData.push(pointsArray[ptsIdx + 2]); // radius\n\n      if (radiusArray.length > 0) {\n        scaleData.push(radiusArray[i] * model.atomicRadiusScaleFactor);\n      } // colors\n\n\n      if (colorArray.length > 0) {\n        ptsIdx = i * 3;\n        colorData.push(colorArray[ptsIdx] * 255);\n        colorData.push(colorArray[ptsIdx + 1] * 255);\n        colorData.push(colorArray[ptsIdx + 2] * 255);\n      }\n    } // if we don't have Bonds provided\n    // we fill up a bondIndex and a bondOrder\n\n\n    if (!bondIndex) {\n      bondIndex = [];\n      bondOrder = []; // default bond display\n\n      /* eslint-disable no-continue */\n\n      for (var _i = 0; _i < numPts; _i++) {\n        for (var j = _i + 1; j < numPts; j++) {\n          var cutoff = covalentArray[_i] + covalentArray[j] + model.tolerance;\n          var jPtsIdx = j * 3;\n          var iPtsIdx = _i * 3;\n          var diff = [pointsArray[jPtsIdx], pointsArray[jPtsIdx + 1], pointsArray[jPtsIdx + 2]];\n          diff[0] -= pointsArray[iPtsIdx];\n          diff[1] -= pointsArray[iPtsIdx + 1];\n          diff[2] -= pointsArray[iPtsIdx + 2];\n\n          if (Math.abs(diff[0]) > cutoff || Math.abs(diff[1]) > cutoff || Math.abs(diff[2]) > cutoff) {\n            continue;\n          } // Check radius and add bond if needed\n\n\n          var cutoffSq = cutoff * cutoff;\n          var diffsq = diff[0] * diff[0] + diff[1] * diff[1] + diff[2] * diff[2];\n\n          if (diffsq < cutoffSq && diffsq > 0.1) {\n            // appendBond between i and j\n            bondIndex.push(_i);\n            bondIndex.push(j);\n            bondOrder.push(1);\n          }\n        }\n      }\n\n      numBonds = bondIndex.length / 2;\n    } // now we have the bonds, draw them\n\n\n    for (var index = 0; index < numBonds; index++) {\n      // appendBond between i and j\n      var _i2 = bondIndex[index * 2];\n      var _j = bondIndex[index * 2 + 1]; // Do not append if i or j belong to element to not display\n\n      if (model.hideElements.indexOf(ATOMS[atomicNumber[_i2]].id) !== -1 || model.hideElements.indexOf(ATOMS[atomicNumber[_j]].id) !== -1) {\n        continue;\n      }\n\n      var _jPtsIdx = _j * 3;\n\n      var _iPtsIdx = _i2 * 3;\n\n      var _diff = [pointsArray[_jPtsIdx], pointsArray[_jPtsIdx + 1], pointsArray[_jPtsIdx + 2]];\n      _diff[0] -= pointsArray[_iPtsIdx];\n      _diff[1] -= pointsArray[_iPtsIdx + 1];\n      _diff[2] -= pointsArray[_iPtsIdx + 2];\n\n      var _diffsq = _diff[0] * _diff[0] + _diff[1] * _diff[1] + _diff[2] * _diff[2];\n\n      var bondDelta = (2 + model.deltaBondFactor) * model.bondRadius; // distance between 2 bonds\n      // scale bonds if total distance from bonds is bigger than 2r*factor with r = min(r_i, r_j)\n\n      var r = Math.min(radiusArray[_i2] * model.atomicRadiusScaleFactor, radiusArray[_j] * model.atomicRadiusScaleFactor);\n      var t = (bondOrder[index] - 1) * bondDelta + 2 * model.bondRadius;\n\n      if (t > 2 * r * 0.6) {\n        model.bondRadius *= 2 * r * 0.6 / t; // recompute bondDelta\n\n        bondDelta = (2 + model.deltaBondFactor) * model.bondRadius; // distance between 2 bonds\n      } // Display multiple bond\n      // loop such as 0 11 22 if odd order / 00 11 22 33 if even order\n      // To make:     0 22 44 66 88 ...      11 33 55 77 ....\n      // because the offset has to be:\n      // (with bd= bondDelta. Note the minus is added just before creating bondPos)\n      //   - odd order: 0 2bd/2 -2bd/2 4bd/2 -4bd/2 ...\n      //   - even order:  1bd/2 -1bd/2 3bd/2 -3bd/2 ...\n      // Then, to transform loop to offset we have:\n      //   - odd order: x * 2 <=> x * 2 + 1 - 1\n      //   - even order: x * 2 + 1\n      // (with x the loop <=> floor(k/2))\n\n\n      var oddOrEven = bondOrder[index] % 2; // zero if even order / one if odd order\n\n      for (var k = oddOrEven; k < bondOrder[index] + oddOrEven; k++) {\n        // dist from center to bond depending of number of bond\n        var offset = (Math.floor(k / 2) * 2 + 1 - oddOrEven) * bondDelta / 2;\n        var vectUnitJI = [_diff[0] / Math.sqrt(_diffsq), _diff[1] / Math.sqrt(_diffsq), _diff[2] / Math.sqrt(_diffsq)];\n        var vectUnitJIperp = [0, 0, 0]; // Search perp to vectUnitJI: find axis != 0 to create vectUnitJIperp such as dot(vectUnitJIperp,vectUnitJI) = 0\n\n        for (var coord = 0; coord < 3; coord++) {\n          if (Math.abs(vectUnitJI[coord]) < 0.000001) {\n            continue;\n          }\n\n          vectUnitJIperp[coord] = -(vectUnitJI[(coord + 2) % 3] * vectUnitJI[(coord + 2) % 3] + vectUnitJI[(coord + 1) % 3] * vectUnitJI[(coord + 1) % 3]) / vectUnitJI[coord];\n          vectUnitJIperp[(coord + 1) % 3] = vectUnitJI[(coord + 1) % 3];\n          vectUnitJIperp[(coord + 2) % 3] = vectUnitJI[(coord + 2) % 3];\n          normalize(vectUnitJIperp);\n          break;\n        }\n\n        offset *= Math.pow(-1, k % 2);\n        /*\n        If atoms have a color associated, and if the atoms involved in the bond\n        are different species, then each bond will be represented by\n        two sticks, so that they can be colored with the same color as the atoms\n        involved in the bond.\n        */\n\n        var bondPos = void 0;\n\n        if (atomicNumber && atomicNumber[_i2] !== atomicNumber[_j] && colorArray.length > 0) {\n          var bondLength = Math.sqrt(_diffsq) / 2.0;\n          bondPos = [pointsArray[_jPtsIdx] - bondLength * vectUnitJI[0] / 2.0 + offset * vectUnitJIperp[0], pointsArray[_jPtsIdx + 1] - bondLength * vectUnitJI[1] / 2.0 + offset * vectUnitJIperp[1], pointsArray[_jPtsIdx + 2] - bondLength * vectUnitJI[2] / 2.0 + offset * vectUnitJIperp[2]];\n          addBond(bondPos, vectUnitJI, bondLength, colorArray.slice(_jPtsIdx, _jPtsIdx + 3));\n          bondPos = [pointsArray[_iPtsIdx] + bondLength * vectUnitJI[0] / 2.0 + offset * vectUnitJIperp[0], pointsArray[_iPtsIdx + 1] + bondLength * vectUnitJI[1] / 2.0 + offset * vectUnitJIperp[1], pointsArray[_iPtsIdx + 2] + bondLength * vectUnitJI[2] / 2.0 + offset * vectUnitJIperp[2]];\n          addBond(bondPos, vectUnitJI, bondLength, colorArray.slice(_iPtsIdx, _iPtsIdx + 3));\n        } else {\n          var _bondLength = Math.sqrt(_diffsq);\n\n          bondPos = [pointsArray[_jPtsIdx] - _diff[0] / 2.0 + offset * vectUnitJIperp[0], pointsArray[_jPtsIdx + 1] - _diff[1] / 2.0 + offset * vectUnitJIperp[1], pointsArray[_jPtsIdx + 2] - _diff[2] / 2.0 + offset * vectUnitJIperp[2]];\n\n          if (colorArray.length > 0) {\n            addBond(bondPos, vectUnitJI, _bondLength, colorArray.slice(_iPtsIdx, _iPtsIdx + 3));\n          } else {\n            addBond(bondPos, vectUnitJI, _bondLength);\n          }\n        }\n      }\n    }\n\n    SphereData.getPoints().setData(pointsData, 3);\n\n    if (radiusArray) {\n      var scales = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: scaleData,\n        name: publicAPI.getSphereScaleArrayName()\n      });\n      SphereData.getPointData().addArray(scales);\n    }\n\n    if (colorArray.length > 0) {\n      var colors = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: Uint8Array.from(colorData),\n        name: 'colors'\n      });\n      SphereData.getPointData().setScalars(colors);\n    }\n\n    StickData.getPoints().setData(bondPositionData, 3);\n    var stickScales = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: bondScaleData,\n      name: 'stickScales'\n    });\n    StickData.getPointData().addArray(stickScales);\n    var orientation = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: bondOrientationData,\n      name: 'orientation'\n    });\n    StickData.getPointData().addArray(orientation);\n\n    if (colorArray.length > 0) {\n      var bondColors = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: Uint8Array.from(bondColorData),\n        name: 'colors'\n      });\n      StickData.getPointData().setScalars(bondColors);\n    } // Update output\n\n\n    outData[0] = SphereData;\n    outData[1] = StickData;\n    return 1;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  sphereScaleArrayName: 'radius',\n  tolerance: 0.45,\n  atomicRadiusScaleFactor: 0.3,\n  bondRadius: 0.075,\n  deltaBondFactor: 0.6,\n  radiusType: 'radiusVDW',\n  hideElements: ''\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['atomicRadiusScaleFactor', 'bondRadius', 'deltaBondFactor', 'hideElements', 'radiusType', 'sphereScaleArrayName', 'tolerance']);\n  macro.algo(publicAPI, model, 1, 2);\n  vtkMoleculeToRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMoleculeToRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkMoleculeToRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkMoleculeToRepresentation$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}