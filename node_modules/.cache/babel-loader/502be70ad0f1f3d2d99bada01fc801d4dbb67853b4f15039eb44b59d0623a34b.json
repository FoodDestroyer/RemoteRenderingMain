{"ast":null,"code":"import { CellType } from '../../../Common/DataModel/CellTypes/Constants.js';\nimport vtkOBJReader from '../../../IO/Misc/OBJReader.js';\n\n/**\n * Get the correct point ID from a cell id\n * @param {Array} cellPtsIds\n * @param {CellType} type\n * @param {Number} idx\n * @returns {Object} Contains three point's id of cells as 'ptId0', 'ptId1', 'ptId2'\n */\n\nfunction getCellTriangles(cellPtsIds, type, idx) {\n  var ptId0 = -1;\n  var ptId1 = -1;\n  var ptId2 = -1;\n  var cellListLength = cellPtsIds.length;\n  switch (type) {\n    case CellType.VTK_TRIANGLE:\n    case CellType.VTK_POLYGON:\n    case CellType.VTK_QUAD:\n      {\n        if (idx > cellListLength) break;\n        ptId0 = cellPtsIds[0];\n        ptId1 = cellPtsIds[idx + 1];\n        ptId2 = cellPtsIds[idx + 2];\n        break;\n      }\n    case CellType.VTK_TRIANGLE_STRIP:\n      {\n        // eslint-disable-next-line no-bitwise\n        var idx1 = idx + 1 + (idx & 1); // eslint-disable-next-line no-bitwise\n\n        var idx2 = idx + 2 - (idx & 1);\n        if (idx1 > cellListLength || idx2 > cellListLength) break;\n        ptId0 = cellPtsIds[idx];\n        ptId1 = cellPtsIds[idx1];\n        ptId2 = cellPtsIds[idx2];\n        break;\n      }\n    default:\n      ptId0 = -1;\n      ptId1 = -1;\n      ptId2 = -1;\n      break;\n  }\n  return {\n    ptId0: ptId0,\n    ptId1: ptId1,\n    ptId2: ptId2\n  };\n}\n/**\n * Concatenate second typed array to the first typed array.\n * @param {TypedArray} first\n * @param {TypedArray} second Must be of the same type as first\n * @return {TypedArray}\n */\n\nfunction pushArray(first, second) {\n  var firstLength = first.length;\n  var result = new first.constructor(firstLength + second.length);\n  result.set(first);\n  result.set(second, firstLength);\n  return result;\n}\n/**\n * Load an obj with point's colors\n *\n * @param {string} url path to the OBJ file\n * @return Promise\n * ---> success : Return vtkPolyData\n * ---> failed : Error message\n */\n\nfunction loadOBJ(url) {\n  return new Promise(function (resolve, reject) {\n    var reader = vtkOBJReader.newInstance();\n    reader.setUrl(url).then(function () {\n      var data = reader.getOutputData();\n      resolve(data);\n    }, function () {\n      // eslint-disable-next-line prefer-promise-reject-errors\n      reject('Error when loading ', url);\n    });\n  });\n}\nexport { getCellTriangles, loadOBJ, pushArray };","map":{"version":3,"names":["CellType","vtkOBJReader","getCellTriangles","cellPtsIds","type","idx","ptId0","ptId1","ptId2","cellListLength","length","VTK_TRIANGLE","VTK_POLYGON","VTK_QUAD","VTK_TRIANGLE_STRIP","idx1","idx2","pushArray","first","second","firstLength","result","constructor","set","loadOBJ","url","Promise","resolve","reject","reader","newInstance","setUrl","then","data","getOutputData"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/General/OBBTree/helper.js"],"sourcesContent":["import { CellType } from '../../../Common/DataModel/CellTypes/Constants.js';\nimport vtkOBJReader from '../../../IO/Misc/OBJReader.js';\n\n/**\n * Get the correct point ID from a cell id\n * @param {Array} cellPtsIds\n * @param {CellType} type\n * @param {Number} idx\n * @returns {Object} Contains three point's id of cells as 'ptId0', 'ptId1', 'ptId2'\n */\n\nfunction getCellTriangles(cellPtsIds, type, idx) {\n  var ptId0 = -1;\n  var ptId1 = -1;\n  var ptId2 = -1;\n  var cellListLength = cellPtsIds.length;\n\n  switch (type) {\n    case CellType.VTK_TRIANGLE:\n    case CellType.VTK_POLYGON:\n    case CellType.VTK_QUAD:\n      {\n        if (idx > cellListLength) break;\n        ptId0 = cellPtsIds[0];\n        ptId1 = cellPtsIds[idx + 1];\n        ptId2 = cellPtsIds[idx + 2];\n        break;\n      }\n\n    case CellType.VTK_TRIANGLE_STRIP:\n      {\n        // eslint-disable-next-line no-bitwise\n        var idx1 = idx + 1 + (idx & 1); // eslint-disable-next-line no-bitwise\n\n        var idx2 = idx + 2 - (idx & 1);\n        if (idx1 > cellListLength || idx2 > cellListLength) break;\n        ptId0 = cellPtsIds[idx];\n        ptId1 = cellPtsIds[idx1];\n        ptId2 = cellPtsIds[idx2];\n        break;\n      }\n\n    default:\n      ptId0 = -1;\n      ptId1 = -1;\n      ptId2 = -1;\n      break;\n  }\n\n  return {\n    ptId0: ptId0,\n    ptId1: ptId1,\n    ptId2: ptId2\n  };\n}\n/**\n * Concatenate second typed array to the first typed array.\n * @param {TypedArray} first\n * @param {TypedArray} second Must be of the same type as first\n * @return {TypedArray}\n */\n\nfunction pushArray(first, second) {\n  var firstLength = first.length;\n  var result = new first.constructor(firstLength + second.length);\n  result.set(first);\n  result.set(second, firstLength);\n  return result;\n}\n/**\n * Load an obj with point's colors\n *\n * @param {string} url path to the OBJ file\n * @return Promise\n * ---> success : Return vtkPolyData\n * ---> failed : Error message\n */\n\nfunction loadOBJ(url) {\n  return new Promise(function (resolve, reject) {\n    var reader = vtkOBJReader.newInstance();\n    reader.setUrl(url).then(function () {\n      var data = reader.getOutputData();\n      resolve(data);\n    }, function () {\n      // eslint-disable-next-line prefer-promise-reject-errors\n      reject('Error when loading ', url);\n    });\n  });\n}\n\nexport { getCellTriangles, loadOBJ, pushArray };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kDAAkD;AAC3E,OAAOC,YAAY,MAAM,+BAA+B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,gBAAgBA,CAACC,UAAU,EAAEC,IAAI,EAAEC,GAAG,EAAE;EAC/C,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,cAAc,GAAGN,UAAU,CAACO,MAAM;EAEtC,QAAQN,IAAI;IACV,KAAKJ,QAAQ,CAACW,YAAY;IAC1B,KAAKX,QAAQ,CAACY,WAAW;IACzB,KAAKZ,QAAQ,CAACa,QAAQ;MACpB;QACE,IAAIR,GAAG,GAAGI,cAAc,EAAE;QAC1BH,KAAK,GAAGH,UAAU,CAAC,CAAC,CAAC;QACrBI,KAAK,GAAGJ,UAAU,CAACE,GAAG,GAAG,CAAC,CAAC;QAC3BG,KAAK,GAAGL,UAAU,CAACE,GAAG,GAAG,CAAC,CAAC;QAC3B;MACF;IAEF,KAAKL,QAAQ,CAACc,kBAAkB;MAC9B;QACE;QACA,IAAIC,IAAI,GAAGV,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;QAEhC,IAAIW,IAAI,GAAGX,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,CAAC,CAAC;QAC9B,IAAIU,IAAI,GAAGN,cAAc,IAAIO,IAAI,GAAGP,cAAc,EAAE;QACpDH,KAAK,GAAGH,UAAU,CAACE,GAAG,CAAC;QACvBE,KAAK,GAAGJ,UAAU,CAACY,IAAI,CAAC;QACxBP,KAAK,GAAGL,UAAU,CAACa,IAAI,CAAC;QACxB;MACF;IAEF;MACEV,KAAK,GAAG,CAAC,CAAC;MACVC,KAAK,GAAG,CAAC,CAAC;MACVC,KAAK,GAAG,CAAC,CAAC;MACV;EACJ;EAEA,OAAO;IACLF,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA;EACT,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASS,SAASA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAChC,IAAIC,WAAW,GAAGF,KAAK,CAACR,MAAM;EAC9B,IAAIW,MAAM,GAAG,IAAIH,KAAK,CAACI,WAAW,CAACF,WAAW,GAAGD,MAAM,CAACT,MAAM,CAAC;EAC/DW,MAAM,CAACE,GAAG,CAACL,KAAK,CAAC;EACjBG,MAAM,CAACE,GAAG,CAACJ,MAAM,EAAEC,WAAW,CAAC;EAC/B,OAAOC,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,OAAOA,CAACC,GAAG,EAAE;EACpB,OAAO,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;IAC5C,IAAIC,MAAM,GAAG5B,YAAY,CAAC6B,WAAW,CAAC,CAAC;IACvCD,MAAM,CAACE,MAAM,CAACN,GAAG,CAAC,CAACO,IAAI,CAAC,YAAY;MAClC,IAAIC,IAAI,GAAGJ,MAAM,CAACK,aAAa,CAAC,CAAC;MACjCP,OAAO,CAACM,IAAI,CAAC;IACf,CAAC,EAAE,YAAY;MACb;MACAL,MAAM,CAAC,qBAAqB,EAAEH,GAAG,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASvB,gBAAgB,EAAEsB,OAAO,EAAEP,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}