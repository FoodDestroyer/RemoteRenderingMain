{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTypes from './Types.js';\n\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n  publicAPI.create = function (texture, options) {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n  publicAPI.createFromTextureHandle = function (textureHandle, options) {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n  publicAPI.getBindGroupEntry = function () {\n    var foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n  publicAPI.getShaderCode = function (binding, group) {\n    var ttype = 'f32';\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n    var result = \"@binding(\".concat(binding, \") @group(\").concat(group, \") var \").concat(model.label, \": texture_\").concat(model.options.dimension, \"<\").concat(ttype, \">;\");\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = \"@binding(\".concat(binding, \") @group(\").concat(group, \") var \").concat(model.label, \": texture_depth_\").concat(model.options.dimension, \";\");\n    }\n    return result;\n  };\n  publicAPI.addSampler = function (device, options) {\n    var newSamp = vtkWebGPUSampler.newInstance({\n      label: \"\".concat(model.label, \"Sampler\")\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n  publicAPI.getBindGroupTime = function () {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.bindGroupTime;\n  }; // if the texture has changed then get a new view\n\n  publicAPI.getHandle = function () {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n    return model.handle;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d' // multisampled: false,\n    }\n  };\n\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureView$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkWebGPUTextureView$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkWebGPUSampler","vtkWebGPUTypes","vtkWebGPUTextureView","publicAPI","model","classHierarchy","push","create","texture","options","dimension","label","textureHandle","getHandle","handle","createView","bindGroupLayoutEntry","viewDimension","tDetails","getDetailsFromTextureFormat","getFormat","sampleType","createFromTextureHandle","format","bindGroupTime","modified","getBindGroupEntry","foo","resource","getShaderCode","binding","group","ttype","result","concat","addSampler","device","newSamp","newInstance","setSampler","getBindGroupTime","DEFAULT_VALUES","sampler","extend","initialValues","arguments","length","undefined","Object","assign","obj","visibility","GPUShaderStage","VERTEX","FRAGMENT","mtime","get","setGet","vtkWebGPUTextureView$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/TextureView.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTypes from './Types.js';\n\n// vtkWebGPUTextureView methods\n// ----------------------------------------------------------------------------\n\n/* eslint-disable no-bitwise */\n\nfunction vtkWebGPUTextureView(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTextureView');\n\n  publicAPI.create = function (texture, options) {\n    model.texture = texture;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = texture.getHandle();\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.texture.getFormat());\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n  };\n\n  publicAPI.createFromTextureHandle = function (textureHandle, options) {\n    model.texture = null;\n    model.options = options;\n    model.options.dimension = model.options.dimension || '2d';\n    model.options.label = model.label;\n    model.textureHandle = textureHandle;\n    model.handle = model.textureHandle.createView(model.options);\n    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(options.format);\n    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;\n    model.bindGroupTime.modified();\n  };\n\n  publicAPI.getBindGroupEntry = function () {\n    var foo = {\n      resource: publicAPI.getHandle()\n    };\n    return foo;\n  };\n\n  publicAPI.getShaderCode = function (binding, group) {\n    var ttype = 'f32';\n\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {\n      ttype = 'i32';\n    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {\n      ttype = 'u32';\n    }\n\n    var result = \"@binding(\".concat(binding, \") @group(\").concat(group, \") var \").concat(model.label, \": texture_\").concat(model.options.dimension, \"<\").concat(ttype, \">;\");\n\n    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {\n      result = \"@binding(\".concat(binding, \") @group(\").concat(group, \") var \").concat(model.label, \": texture_depth_\").concat(model.options.dimension, \";\");\n    }\n\n    return result;\n  };\n\n  publicAPI.addSampler = function (device, options) {\n    var newSamp = vtkWebGPUSampler.newInstance({\n      label: \"\".concat(model.label, \"Sampler\")\n    });\n    newSamp.create(device, options);\n    publicAPI.setSampler(newSamp);\n  };\n\n  publicAPI.getBindGroupTime = function () {\n    // check if the handle changed\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n\n    return model.bindGroupTime;\n  }; // if the texture has changed then get a new view\n\n\n  publicAPI.getHandle = function () {\n    if (model.texture && model.texture.getHandle() !== model.textureHandle) {\n      model.textureHandle = model.texture.getHandle();\n      model.handle = model.textureHandle.createView(model.options);\n      model.bindGroupTime.modified();\n    }\n\n    return model.handle;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  texture: null,\n  handle: null,\n  sampler: null,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  model.bindGroupLayoutEntry = {\n    /* eslint-disable no-undef */\n    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n\n    /* eslint-enable no-undef */\n    texture: {\n      sampleType: 'float',\n      viewDimension: '2d' // multisampled: false,\n\n    }\n  };\n  model.bindGroupTime = {};\n  macro.obj(model.bindGroupTime, {\n    mtime: 0\n  });\n  macro.get(publicAPI, model, ['bindGroupTime', 'texture']);\n  macro.setGet(publicAPI, model, ['bindGroupLayoutEntry', 'label', 'sampler']);\n  vtkWebGPUTextureView(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTextureView$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUTextureView$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}