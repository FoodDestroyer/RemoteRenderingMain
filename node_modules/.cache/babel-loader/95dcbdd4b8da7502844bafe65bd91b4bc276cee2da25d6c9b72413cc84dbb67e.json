{"ast":null,"code":"import macro from '../../macros.js';\nimport vtk from '../../vtk.js';\nvar readPolyDataArrayBuffer = null;\nvar resultPreprocessor = function resultPreprocessor(result) {\n  return result;\n};\nfunction setReadPolyDataArrayBufferFromITK(fn) {\n  readPolyDataArrayBuffer = fn; // first arg is a webworker if reuse is desired.\n\n  readPolyDataArrayBuffer = function readPolyDataArrayBuffer() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return fn.apply(void 0, [null].concat(args));\n  }; // an object is now passed out which includes a webworker which we\n  // should terminate\n\n  resultPreprocessor = function resultPreprocessor(_ref) {\n    var webWorker = _ref.webWorker,\n      polyData = _ref.polyData;\n    webWorker.terminate();\n    return polyData;\n  };\n} // ----------------------------------------------------------------------------\n// vtkITKPolyDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkITKPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkITKPolyDataReader'); // Returns a promise to signal when polyData is ready\n\n  publicAPI.parseAsArrayBuffer = function (arrayBuffer) {\n    if (!arrayBuffer || arrayBuffer === model.rawDataBuffer) {\n      return Promise.resolve();\n    }\n    model.rawDataBuffer = arrayBuffer;\n    return readPolyDataArrayBuffer(arrayBuffer, model.fileName).then(resultPreprocessor).then(function (polyData) {\n      model.output[0] = vtk(polyData);\n      publicAPI.modified();\n    });\n  };\n  publicAPI.requestData = function (inData, outData) {\n    publicAPI.parseAsArrayBuffer(model.rawDataBuffer, model.fileName);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  fileName: '',\n  // If null/undefined a unique array will be generated\n  arrayName: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.setGet(publicAPI, model, ['fileName', 'arrayName']); // vtkITKPolyDataReader methods\n\n  vtkITKPolyDataReader(publicAPI, model); // Check that ITK function has been injected\n\n  if (!readPolyDataArrayBuffer) {\n    console.error(\"\\n      // Dependency needs to be added inside your project\\n      import readPolyDataArrayBuffer from 'itk/readPolyDataArrayBuffer';\\n      vtkITKPolyDataReader.setReadPolyDataArrayBufferFromITK(readPolyDataArrayBuffer);\\n      \");\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkITKPolyDataReader'); // ----------------------------------------------------------------------------\n\nvar vtkITKPolyDataReader$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  setReadPolyDataArrayBufferFromITK: setReadPolyDataArrayBufferFromITK\n};\nexport { vtkITKPolyDataReader$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtk","readPolyDataArrayBuffer","resultPreprocessor","result","setReadPolyDataArrayBufferFromITK","fn","_len","arguments","length","args","Array","_key","apply","concat","_ref","webWorker","polyData","terminate","vtkITKPolyDataReader","publicAPI","model","classHierarchy","push","parseAsArrayBuffer","arrayBuffer","rawDataBuffer","Promise","resolve","fileName","then","output","modified","requestData","inData","outData","DEFAULT_VALUES","arrayName","extend","initialValues","undefined","Object","assign","obj","algo","setGet","console","error","newInstance","vtkITKPolyDataReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Misc/ITKPolyDataReader.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtk from '../../vtk.js';\n\nvar readPolyDataArrayBuffer = null;\n\nvar resultPreprocessor = function resultPreprocessor(result) {\n  return result;\n};\n\nfunction setReadPolyDataArrayBufferFromITK(fn) {\n  readPolyDataArrayBuffer = fn; // first arg is a webworker if reuse is desired.\n\n  readPolyDataArrayBuffer = function readPolyDataArrayBuffer() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return fn.apply(void 0, [null].concat(args));\n  }; // an object is now passed out which includes a webworker which we\n  // should terminate\n\n\n  resultPreprocessor = function resultPreprocessor(_ref) {\n    var webWorker = _ref.webWorker,\n        polyData = _ref.polyData;\n    webWorker.terminate();\n    return polyData;\n  };\n} // ----------------------------------------------------------------------------\n// vtkITKPolyDataReader methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkITKPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkITKPolyDataReader'); // Returns a promise to signal when polyData is ready\n\n  publicAPI.parseAsArrayBuffer = function (arrayBuffer) {\n    if (!arrayBuffer || arrayBuffer === model.rawDataBuffer) {\n      return Promise.resolve();\n    }\n\n    model.rawDataBuffer = arrayBuffer;\n    return readPolyDataArrayBuffer(arrayBuffer, model.fileName).then(resultPreprocessor).then(function (polyData) {\n      model.output[0] = vtk(polyData);\n      publicAPI.modified();\n    });\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    publicAPI.parseAsArrayBuffer(model.rawDataBuffer, model.fileName);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  fileName: '',\n  // If null/undefined a unique array will be generated\n  arrayName: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.setGet(publicAPI, model, ['fileName', 'arrayName']); // vtkITKPolyDataReader methods\n\n  vtkITKPolyDataReader(publicAPI, model); // Check that ITK function has been injected\n\n  if (!readPolyDataArrayBuffer) {\n    console.error(\"\\n      // Dependency needs to be added inside your project\\n      import readPolyDataArrayBuffer from 'itk/readPolyDataArrayBuffer';\\n      vtkITKPolyDataReader.setReadPolyDataArrayBufferFromITK(readPolyDataArrayBuffer);\\n      \");\n  }\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkITKPolyDataReader'); // ----------------------------------------------------------------------------\n\nvar vtkITKPolyDataReader$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  setReadPolyDataArrayBufferFromITK: setReadPolyDataArrayBufferFromITK\n};\n\nexport { vtkITKPolyDataReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}