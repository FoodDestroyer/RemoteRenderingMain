{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkContextRepresentation from './ContextRepresentation.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport { origin } from './GlyphRepresentation.js';\nimport { allocateArray } from './WidgetRepresentation.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // prettier-ignore\n\nvar OUTLINE_ARRAY = [2, 0, 1, 2, 0, 2, 2, 0, 4, 2, 1, 3, 2, 1, 5, 2, 2, 3, 2, 2, 6, 2, 3, 7, 2, 4, 5, 2, 4, 6, 2, 5, 7, 2, 6, 7]; // ----------------------------------------------------------------------------\n// vtkCroppingOutlineRepresentation methods\n// ----------------------------------------------------------------------------\n// Represents a box outline given 8 points as corners.\n// Does not work with an arbitrary set of points. An oriented bounding box\n// algorithm may be implemented in the future.\n\nfunction vtkCroppingOutlineRepresentation(publicAPI, model) {\n  var _model$actor$getPrope;\n\n  // Set our className\n  model.classHierarchy.push('vtkCroppingOutlineRepresentation'); // --------------------------------------------------------------------------\n  // Internal polydata dataset\n  // --------------------------------------------------------------------------\n\n  model.internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n  allocateArray(model.internalPolyData, 'lines', OUTLINE_ARRAY.length).getData().set(OUTLINE_ARRAY);\n  var applyOrigin = origin(publicAPI, model); // --------------------------------------------------------------------------\n  // Generic rendering pipeline\n  // --------------------------------------------------------------------------\n\n  model.mapper = vtkMapper.newInstance({\n    scalarVisibility: false\n  });\n  model.actor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n  (_model$actor$getPrope = model.actor.getProperty()).setEdgeColor.apply(_model$actor$getPrope, _toConsumableArray(model.edgeColor));\n  model.mapper.setInputConnection(publicAPI.getOutputPort());\n  model.actor.setMapper(model.mapper);\n  publicAPI.addActor(model.actor); // --------------------------------------------------------------------------\n\n  publicAPI.requestData = function (inData, outData) {\n    var list = publicAPI.getRepresentationStates(inData[0]).filter(function (state) {\n      return state.getOrigin && state.getOrigin();\n    });\n    if (list.length === 8) {\n      applyOrigin(model.internalPolyData, list);\n      model.internalPolyData.getPoints().modified();\n      model.internalPolyData.modified();\n      outData[0] = model.internalPolyData;\n    } else {\n      vtkErrorMacro('CroppingOutlineRepresentation did not get 8 states');\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  edgeColor: [1, 1, 1]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkContextRepresentation.extend(publicAPI, model, initialValues);\n  macro.setGetArray(publicAPI, model, ['edgeColor'], 3);\n  macro.get(publicAPI, model, ['mapper', 'actor']); // Object specific methods\n\n  vtkCroppingOutlineRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCroppingOutlineRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkCroppingOutlineRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkCroppingOutlineRepresentation$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkActor","vtkContextRepresentation","vtkMapper","vtkPolyData","origin","allocateArray","vtkErrorMacro","OUTLINE_ARRAY","vtkCroppingOutlineRepresentation","publicAPI","model","_model$actor$getPrope","classHierarchy","push","internalPolyData","newInstance","mtime","length","getData","set","applyOrigin","mapper","scalarVisibility","actor","parentProp","getProperty","setEdgeColor","apply","edgeColor","setInputConnection","getOutputPort","setMapper","addActor","requestData","inData","outData","list","getRepresentationStates","filter","state","getOrigin","getPoints","modified","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","setGetArray","get","vtkCroppingOutlineRepresentation$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Representations/CroppingOutlineRepresentation.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkContextRepresentation from './ContextRepresentation.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport { origin } from './GlyphRepresentation.js';\nimport { allocateArray } from './WidgetRepresentation.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // prettier-ignore\n\nvar OUTLINE_ARRAY = [2, 0, 1, 2, 0, 2, 2, 0, 4, 2, 1, 3, 2, 1, 5, 2, 2, 3, 2, 2, 6, 2, 3, 7, 2, 4, 5, 2, 4, 6, 2, 5, 7, 2, 6, 7]; // ----------------------------------------------------------------------------\n// vtkCroppingOutlineRepresentation methods\n// ----------------------------------------------------------------------------\n// Represents a box outline given 8 points as corners.\n// Does not work with an arbitrary set of points. An oriented bounding box\n// algorithm may be implemented in the future.\n\nfunction vtkCroppingOutlineRepresentation(publicAPI, model) {\n  var _model$actor$getPrope;\n\n  // Set our className\n  model.classHierarchy.push('vtkCroppingOutlineRepresentation'); // --------------------------------------------------------------------------\n  // Internal polydata dataset\n  // --------------------------------------------------------------------------\n\n  model.internalPolyData = vtkPolyData.newInstance({\n    mtime: 0\n  });\n  allocateArray(model.internalPolyData, 'lines', OUTLINE_ARRAY.length).getData().set(OUTLINE_ARRAY);\n  var applyOrigin = origin(publicAPI, model); // --------------------------------------------------------------------------\n  // Generic rendering pipeline\n  // --------------------------------------------------------------------------\n\n  model.mapper = vtkMapper.newInstance({\n    scalarVisibility: false\n  });\n  model.actor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n\n  (_model$actor$getPrope = model.actor.getProperty()).setEdgeColor.apply(_model$actor$getPrope, _toConsumableArray(model.edgeColor));\n\n  model.mapper.setInputConnection(publicAPI.getOutputPort());\n  model.actor.setMapper(model.mapper);\n  publicAPI.addActor(model.actor); // --------------------------------------------------------------------------\n\n  publicAPI.requestData = function (inData, outData) {\n    var list = publicAPI.getRepresentationStates(inData[0]).filter(function (state) {\n      return state.getOrigin && state.getOrigin();\n    });\n\n    if (list.length === 8) {\n      applyOrigin(model.internalPolyData, list);\n      model.internalPolyData.getPoints().modified();\n      model.internalPolyData.modified();\n      outData[0] = model.internalPolyData;\n    } else {\n      vtkErrorMacro('CroppingOutlineRepresentation did not get 8 states');\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  edgeColor: [1, 1, 1]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkContextRepresentation.extend(publicAPI, model, initialValues);\n  macro.setGetArray(publicAPI, model, ['edgeColor'], 3);\n  macro.get(publicAPI, model, ['mapper', 'actor']); // Object specific methods\n\n  vtkCroppingOutlineRepresentation(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCroppingOutlineRepresentation'); // ----------------------------------------------------------------------------\n\nvar vtkCroppingOutlineRepresentation$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkCroppingOutlineRepresentation$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}