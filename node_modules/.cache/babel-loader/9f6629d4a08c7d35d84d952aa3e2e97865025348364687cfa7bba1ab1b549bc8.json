{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUOpaquePass from './OpaquePass.js';\nimport vtkWebGPUOrderIndepenentTranslucentPass from './OrderIndependentTranslucentPass.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUVolumePass from './VolumePass.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTextureView from './TextureView.js';\nvar finalBlitFragTemplate = \"\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = clamp(textureSampleLevel(opaquePassColorTexture, finalPassSampler, input.tcoordVS, 0),vec4<f32>(0.0),vec4<f32>(1.0));\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\"; // ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass'); // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n\n  publicAPI.traverse = function (viewNode) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n    model._currentParent = parent; // build\n\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n    if (!model.opaquePass) {\n      model.opaquePass = vtkWebGPUOpaquePass.newInstance();\n    }\n    var numlayers = viewNode.getRenderable().getNumberOfLayers(); // iterate over renderers\n\n    var renderers = viewNode.getChildren();\n    for (var i = 0; i < numlayers; i++) {\n      for (var index = 0; index < renderers.length; index++) {\n        var renNode = renderers[index];\n        var ren = viewNode.getRenderable().getRenderers()[index];\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumes = [];\n          publicAPI.setCurrentOperation('queryPass');\n          renNode.traverse(publicAPI);\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI); // always do opaque pass to get a valid color and zbuffer, even if empty\n\n          model.opaquePass.traverse(renNode, viewNode); // optional translucent pass\n\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass = vtkWebGPUOrderIndepenentTranslucentPass.newInstance();\n            }\n            model.translucentPass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.translucentPass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.translucentPass.traverse(renNode, viewNode);\n          } // optional volume pass\n\n          if (model.volumes.length > 0) {\n            if (!model.volumePass) {\n              model.volumePass = vtkWebGPUVolumePass.newInstance();\n            }\n            model.volumePass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.volumePass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.volumePass.setVolumes(model.volumes);\n            model.volumePass.traverse(renNode, viewNode);\n          } // blit the result into the swap chain\n\n          publicAPI.finalPass(viewNode, renNode);\n        }\n      }\n    }\n  };\n  publicAPI.finalPass = function (viewNode, renNode) {\n    if (!model._finalBlitEncoder) {\n      publicAPI.createFinalBlitEncoder(viewNode);\n    }\n    model._finalBlitOutputTextureView.createFromTextureHandle(viewNode.getCurrentTexture(), {\n      depth: 1,\n      format: viewNode.getPresentationFormat()\n    });\n    model._finalBlitEncoder.attachTextureViews();\n    model._finalBlitEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._finalBlitEncoder);\n    model._fullScreenQuad.prepareAndDraw(model._finalBlitEncoder);\n    model._finalBlitEncoder.end();\n  };\n  publicAPI.createFinalBlitEncoder = function (viewNode) {\n    model._finalBlitEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'forwardPassBlit'\n    });\n    model._finalBlitEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._finalBlitEncoder.setPipelineHash('fpf');\n    model._finalBlitEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: viewNode.getPresentationFormat(),\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n    model._fsqSampler = vtkWebGPUSampler.newInstance({\n      label: 'finalPassSampler'\n    });\n    model._fsqSampler.create(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n    model._fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n    model._fullScreenQuad.setDevice(viewNode.getDevice());\n    model._fullScreenQuad.setPipelineHash('fpfsq');\n    model._fullScreenQuad.setTextureViews([model.opaquePass.getColorTextureView()]);\n    model._fullScreenQuad.setAdditionalBindables([model._fsqSampler]);\n    model._fullScreenQuad.setFragmentShaderTemplate(finalBlitFragTemplate);\n    model._finalBlitOutputTextureView = vtkWebGPUTextureView.newInstance();\n    model._finalBlitEncoder.setColorTextureView(0, model._finalBlitOutputTextureView);\n  };\n  publicAPI.incrementOpaqueActorCount = function () {\n    return model.opaqueActorCount++;\n  };\n  publicAPI.incrementTranslucentActorCount = function () {\n    return model.translucentActorCount++;\n  };\n  publicAPI.addVolume = function (volume) {\n    model.volumes.push(volume);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumes: null,\n  opaqueRenderEncoder: null,\n  translucentPass: null,\n  volumePass: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['opaquePass', 'translucentPass', 'volumePass']); // Object methods\n\n  vtkForwardPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkForwardPass'); // ----------------------------------------------------------------------------\n\nvar vtkForwardPass$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkForwardPass$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkWebGPUFullScreenQuad","vtkWebGPUOpaquePass","vtkWebGPUOrderIndepenentTranslucentPass","vtkWebGPURenderEncoder","vtkWebGPUVolumePass","vtkRenderPass","vtkWebGPUSampler","vtkWebGPUTextureView","finalBlitFragTemplate","vtkForwardPass","publicAPI","model","classHierarchy","push","traverse","viewNode","parent","arguments","length","undefined","deleted","_currentParent","setCurrentOperation","opaquePass","newInstance","numlayers","getRenderable","getNumberOfLayers","renderers","getChildren","i","index","renNode","ren","getRenderers","getDraw","getLayer","opaqueActorCount","translucentActorCount","volumes","translucentPass","setColorTextureView","getColorTextureView","setDepthTextureView","getDepthTextureView","volumePass","setVolumes","finalPass","_finalBlitEncoder","createFinalBlitEncoder","_finalBlitOutputTextureView","createFromTextureHandle","getCurrentTexture","depth","format","getPresentationFormat","attachTextureViews","begin","getCommandEncoder","scissorAndViewport","_fullScreenQuad","prepareAndDraw","end","label","setDescription","colorAttachments","view","loadOp","storeOp","setPipelineHash","setPipelineSettings","primitive","cullMode","fragment","targets","blend","color","srcFactor","dstFactor","alpha","srcfactor","_fsqSampler","create","getDevice","minFilter","magFilter","setDevice","setTextureViews","setAdditionalBindables","setFragmentShaderTemplate","incrementOpaqueActorCount","incrementTranslucentActorCount","addVolume","volume","DEFAULT_VALUES","opaqueRenderEncoder","extend","initialValues","Object","assign","setGet","vtkForwardPass$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/ForwardPass.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUOpaquePass from './OpaquePass.js';\nimport vtkWebGPUOrderIndepenentTranslucentPass from './OrderIndependentTranslucentPass.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUVolumePass from './VolumePass.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUSampler from './Sampler.js';\nimport vtkWebGPUTextureView from './TextureView.js';\n\nvar finalBlitFragTemplate = \"\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = clamp(textureSampleLevel(opaquePassColorTexture, finalPassSampler, input.tcoordVS, 0),vec4<f32>(0.0),vec4<f32>(1.0));\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\"; // ----------------------------------------------------------------------------\n\nfunction vtkForwardPass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkForwardPass'); // this pass implements a forward rendering pipeline\n  // if both volumes and opaque geometry are present\n  // it will mix the two together by capturing a zbuffer\n  // first\n\n  publicAPI.traverse = function (viewNode) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n\n    model._currentParent = parent; // build\n\n    publicAPI.setCurrentOperation('buildPass');\n    viewNode.traverse(publicAPI);\n\n    if (!model.opaquePass) {\n      model.opaquePass = vtkWebGPUOpaquePass.newInstance();\n    }\n\n    var numlayers = viewNode.getRenderable().getNumberOfLayers(); // iterate over renderers\n\n    var renderers = viewNode.getChildren();\n\n    for (var i = 0; i < numlayers; i++) {\n      for (var index = 0; index < renderers.length; index++) {\n        var renNode = renderers[index];\n        var ren = viewNode.getRenderable().getRenderers()[index];\n\n        if (ren.getDraw() && ren.getLayer() === i) {\n          // check for both opaque and volume actors\n          model.opaqueActorCount = 0;\n          model.translucentActorCount = 0;\n          model.volumes = [];\n          publicAPI.setCurrentOperation('queryPass');\n          renNode.traverse(publicAPI);\n          publicAPI.setCurrentOperation('cameraPass');\n          renNode.traverse(publicAPI); // always do opaque pass to get a valid color and zbuffer, even if empty\n\n          model.opaquePass.traverse(renNode, viewNode); // optional translucent pass\n\n          if (model.translucentActorCount > 0) {\n            if (!model.translucentPass) {\n              model.translucentPass = vtkWebGPUOrderIndepenentTranslucentPass.newInstance();\n            }\n\n            model.translucentPass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.translucentPass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.translucentPass.traverse(renNode, viewNode);\n          } // optional volume pass\n\n\n          if (model.volumes.length > 0) {\n            if (!model.volumePass) {\n              model.volumePass = vtkWebGPUVolumePass.newInstance();\n            }\n\n            model.volumePass.setColorTextureView(model.opaquePass.getColorTextureView());\n            model.volumePass.setDepthTextureView(model.opaquePass.getDepthTextureView());\n            model.volumePass.setVolumes(model.volumes);\n            model.volumePass.traverse(renNode, viewNode);\n          } // blit the result into the swap chain\n\n\n          publicAPI.finalPass(viewNode, renNode);\n        }\n      }\n    }\n  };\n\n  publicAPI.finalPass = function (viewNode, renNode) {\n    if (!model._finalBlitEncoder) {\n      publicAPI.createFinalBlitEncoder(viewNode);\n    }\n\n    model._finalBlitOutputTextureView.createFromTextureHandle(viewNode.getCurrentTexture(), {\n      depth: 1,\n      format: viewNode.getPresentationFormat()\n    });\n\n    model._finalBlitEncoder.attachTextureViews();\n\n    model._finalBlitEncoder.begin(viewNode.getCommandEncoder());\n\n    renNode.scissorAndViewport(model._finalBlitEncoder);\n\n    model._fullScreenQuad.prepareAndDraw(model._finalBlitEncoder);\n\n    model._finalBlitEncoder.end();\n  };\n\n  publicAPI.createFinalBlitEncoder = function (viewNode) {\n    model._finalBlitEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'forwardPassBlit'\n    });\n\n    model._finalBlitEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n\n    model._finalBlitEncoder.setPipelineHash('fpf');\n\n    model._finalBlitEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: viewNode.getPresentationFormat(),\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n\n    model._fsqSampler = vtkWebGPUSampler.newInstance({\n      label: 'finalPassSampler'\n    });\n\n    model._fsqSampler.create(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n\n    model._fullScreenQuad = vtkWebGPUFullScreenQuad.newInstance();\n\n    model._fullScreenQuad.setDevice(viewNode.getDevice());\n\n    model._fullScreenQuad.setPipelineHash('fpfsq');\n\n    model._fullScreenQuad.setTextureViews([model.opaquePass.getColorTextureView()]);\n\n    model._fullScreenQuad.setAdditionalBindables([model._fsqSampler]);\n\n    model._fullScreenQuad.setFragmentShaderTemplate(finalBlitFragTemplate);\n\n    model._finalBlitOutputTextureView = vtkWebGPUTextureView.newInstance();\n\n    model._finalBlitEncoder.setColorTextureView(0, model._finalBlitOutputTextureView);\n  };\n\n  publicAPI.incrementOpaqueActorCount = function () {\n    return model.opaqueActorCount++;\n  };\n\n  publicAPI.incrementTranslucentActorCount = function () {\n    return model.translucentActorCount++;\n  };\n\n  publicAPI.addVolume = function (volume) {\n    model.volumes.push(volume);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  opaqueActorCount: 0,\n  translucentActorCount: 0,\n  volumes: null,\n  opaqueRenderEncoder: null,\n  translucentPass: null,\n  volumePass: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['opaquePass', 'translucentPass', 'volumePass']); // Object methods\n\n  vtkForwardPass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkForwardPass'); // ----------------------------------------------------------------------------\n\nvar vtkForwardPass$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkForwardPass$1 as default, extend, newInstance };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;AACnC,OAAOC,uBAAuB,MAAM,qBAAqB;AACzD,OAAOC,mBAAmB,MAAM,iBAAiB;AACjD,OAAOC,uCAAuC,MAAM,sCAAsC;AAC1F,OAAOC,sBAAsB,MAAM,oBAAoB;AACvD,OAAOC,mBAAmB,MAAM,iBAAiB;AACjD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,gBAAgB,MAAM,cAAc;AAC3C,OAAOC,oBAAoB,MAAM,kBAAkB;AAEnD,IAAIC,qBAAqB,GAAG,kaAAka,CAAC,CAAC;;AAEhc,SAASC,cAAcA,CAACC,SAAS,EAAEC,KAAK,EAAE;EACxC;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;EAC7C;EACA;EACA;;EAEAH,SAAS,CAACI,QAAQ,GAAG,UAAUC,QAAQ,EAAE;IACvC,IAAIC,MAAM,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IAErF,IAAIN,KAAK,CAACS,OAAO,EAAE;MACjB;IACF,CAAC,CAAC;;IAGFT,KAAK,CAACU,cAAc,GAAGL,MAAM,CAAC,CAAC;;IAE/BN,SAAS,CAACY,mBAAmB,CAAC,WAAW,CAAC;IAC1CP,QAAQ,CAACD,QAAQ,CAACJ,SAAS,CAAC;IAE5B,IAAI,CAACC,KAAK,CAACY,UAAU,EAAE;MACrBZ,KAAK,CAACY,UAAU,GAAGtB,mBAAmB,CAACuB,WAAW,CAAC,CAAC;IACtD;IAEA,IAAIC,SAAS,GAAGV,QAAQ,CAACW,aAAa,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC;;IAE9D,IAAIC,SAAS,GAAGb,QAAQ,CAACc,WAAW,CAAC,CAAC;IAEtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,EAAEK,CAAC,EAAE,EAAE;MAClC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGH,SAAS,CAACV,MAAM,EAAEa,KAAK,EAAE,EAAE;QACrD,IAAIC,OAAO,GAAGJ,SAAS,CAACG,KAAK,CAAC;QAC9B,IAAIE,GAAG,GAAGlB,QAAQ,CAACW,aAAa,CAAC,CAAC,CAACQ,YAAY,CAAC,CAAC,CAACH,KAAK,CAAC;QAExD,IAAIE,GAAG,CAACE,OAAO,CAAC,CAAC,IAAIF,GAAG,CAACG,QAAQ,CAAC,CAAC,KAAKN,CAAC,EAAE;UACzC;UACAnB,KAAK,CAAC0B,gBAAgB,GAAG,CAAC;UAC1B1B,KAAK,CAAC2B,qBAAqB,GAAG,CAAC;UAC/B3B,KAAK,CAAC4B,OAAO,GAAG,EAAE;UAClB7B,SAAS,CAACY,mBAAmB,CAAC,WAAW,CAAC;UAC1CU,OAAO,CAAClB,QAAQ,CAACJ,SAAS,CAAC;UAC3BA,SAAS,CAACY,mBAAmB,CAAC,YAAY,CAAC;UAC3CU,OAAO,CAAClB,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC;;UAE7BC,KAAK,CAACY,UAAU,CAACT,QAAQ,CAACkB,OAAO,EAAEjB,QAAQ,CAAC,CAAC,CAAC;;UAE9C,IAAIJ,KAAK,CAAC2B,qBAAqB,GAAG,CAAC,EAAE;YACnC,IAAI,CAAC3B,KAAK,CAAC6B,eAAe,EAAE;cAC1B7B,KAAK,CAAC6B,eAAe,GAAGtC,uCAAuC,CAACsB,WAAW,CAAC,CAAC;YAC/E;YAEAb,KAAK,CAAC6B,eAAe,CAACC,mBAAmB,CAAC9B,KAAK,CAACY,UAAU,CAACmB,mBAAmB,CAAC,CAAC,CAAC;YACjF/B,KAAK,CAAC6B,eAAe,CAACG,mBAAmB,CAAChC,KAAK,CAACY,UAAU,CAACqB,mBAAmB,CAAC,CAAC,CAAC;YACjFjC,KAAK,CAAC6B,eAAe,CAAC1B,QAAQ,CAACkB,OAAO,EAAEjB,QAAQ,CAAC;UACnD,CAAC,CAAC;;UAGF,IAAIJ,KAAK,CAAC4B,OAAO,CAACrB,MAAM,GAAG,CAAC,EAAE;YAC5B,IAAI,CAACP,KAAK,CAACkC,UAAU,EAAE;cACrBlC,KAAK,CAACkC,UAAU,GAAGzC,mBAAmB,CAACoB,WAAW,CAAC,CAAC;YACtD;YAEAb,KAAK,CAACkC,UAAU,CAACJ,mBAAmB,CAAC9B,KAAK,CAACY,UAAU,CAACmB,mBAAmB,CAAC,CAAC,CAAC;YAC5E/B,KAAK,CAACkC,UAAU,CAACF,mBAAmB,CAAChC,KAAK,CAACY,UAAU,CAACqB,mBAAmB,CAAC,CAAC,CAAC;YAC5EjC,KAAK,CAACkC,UAAU,CAACC,UAAU,CAACnC,KAAK,CAAC4B,OAAO,CAAC;YAC1C5B,KAAK,CAACkC,UAAU,CAAC/B,QAAQ,CAACkB,OAAO,EAAEjB,QAAQ,CAAC;UAC9C,CAAC,CAAC;;UAGFL,SAAS,CAACqC,SAAS,CAAChC,QAAQ,EAAEiB,OAAO,CAAC;QACxC;MACF;IACF;EACF,CAAC;EAEDtB,SAAS,CAACqC,SAAS,GAAG,UAAUhC,QAAQ,EAAEiB,OAAO,EAAE;IACjD,IAAI,CAACrB,KAAK,CAACqC,iBAAiB,EAAE;MAC5BtC,SAAS,CAACuC,sBAAsB,CAAClC,QAAQ,CAAC;IAC5C;IAEAJ,KAAK,CAACuC,2BAA2B,CAACC,uBAAuB,CAACpC,QAAQ,CAACqC,iBAAiB,CAAC,CAAC,EAAE;MACtFC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAEvC,QAAQ,CAACwC,qBAAqB,CAAC;IACzC,CAAC,CAAC;IAEF5C,KAAK,CAACqC,iBAAiB,CAACQ,kBAAkB,CAAC,CAAC;IAE5C7C,KAAK,CAACqC,iBAAiB,CAACS,KAAK,CAAC1C,QAAQ,CAAC2C,iBAAiB,CAAC,CAAC,CAAC;IAE3D1B,OAAO,CAAC2B,kBAAkB,CAAChD,KAAK,CAACqC,iBAAiB,CAAC;IAEnDrC,KAAK,CAACiD,eAAe,CAACC,cAAc,CAAClD,KAAK,CAACqC,iBAAiB,CAAC;IAE7DrC,KAAK,CAACqC,iBAAiB,CAACc,GAAG,CAAC,CAAC;EAC/B,CAAC;EAEDpD,SAAS,CAACuC,sBAAsB,GAAG,UAAUlC,QAAQ,EAAE;IACrDJ,KAAK,CAACqC,iBAAiB,GAAG7C,sBAAsB,CAACqB,WAAW,CAAC;MAC3DuC,KAAK,EAAE;IACT,CAAC,CAAC;IAEFpD,KAAK,CAACqC,iBAAiB,CAACgB,cAAc,CAAC;MACrCC,gBAAgB,EAAE,CAAC;QACjBC,IAAI,EAAE,IAAI;QACVC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC;IAEFzD,KAAK,CAACqC,iBAAiB,CAACqB,eAAe,CAAC,KAAK,CAAC;IAE9C1D,KAAK,CAACqC,iBAAiB,CAACsB,mBAAmB,CAAC;MAC1CC,SAAS,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,QAAQ,EAAE;QACRC,OAAO,EAAE,CAAC;UACRpB,MAAM,EAAEvC,QAAQ,CAACwC,qBAAqB,CAAC,CAAC;UACxCoB,KAAK,EAAE;YACLC,KAAK,EAAE;cACLC,SAAS,EAAE,WAAW;cACtBC,SAAS,EAAE;YACb,CAAC;YACDC,KAAK,EAAE;cACLC,SAAS,EAAE,KAAK;cAChBF,SAAS,EAAE;YACb;UACF;QACF,CAAC;MACH;IACF,CAAC,CAAC;IAEFnE,KAAK,CAACsE,WAAW,GAAG3E,gBAAgB,CAACkB,WAAW,CAAC;MAC/CuC,KAAK,EAAE;IACT,CAAC,CAAC;IAEFpD,KAAK,CAACsE,WAAW,CAACC,MAAM,CAACnE,QAAQ,CAACoE,SAAS,CAAC,CAAC,EAAE;MAC7CC,SAAS,EAAE,QAAQ;MACnBC,SAAS,EAAE;IACb,CAAC,CAAC;IAEF1E,KAAK,CAACiD,eAAe,GAAG5D,uBAAuB,CAACwB,WAAW,CAAC,CAAC;IAE7Db,KAAK,CAACiD,eAAe,CAAC0B,SAAS,CAACvE,QAAQ,CAACoE,SAAS,CAAC,CAAC,CAAC;IAErDxE,KAAK,CAACiD,eAAe,CAACS,eAAe,CAAC,OAAO,CAAC;IAE9C1D,KAAK,CAACiD,eAAe,CAAC2B,eAAe,CAAC,CAAC5E,KAAK,CAACY,UAAU,CAACmB,mBAAmB,CAAC,CAAC,CAAC,CAAC;IAE/E/B,KAAK,CAACiD,eAAe,CAAC4B,sBAAsB,CAAC,CAAC7E,KAAK,CAACsE,WAAW,CAAC,CAAC;IAEjEtE,KAAK,CAACiD,eAAe,CAAC6B,yBAAyB,CAACjF,qBAAqB,CAAC;IAEtEG,KAAK,CAACuC,2BAA2B,GAAG3C,oBAAoB,CAACiB,WAAW,CAAC,CAAC;IAEtEb,KAAK,CAACqC,iBAAiB,CAACP,mBAAmB,CAAC,CAAC,EAAE9B,KAAK,CAACuC,2BAA2B,CAAC;EACnF,CAAC;EAEDxC,SAAS,CAACgF,yBAAyB,GAAG,YAAY;IAChD,OAAO/E,KAAK,CAAC0B,gBAAgB,EAAE;EACjC,CAAC;EAED3B,SAAS,CAACiF,8BAA8B,GAAG,YAAY;IACrD,OAAOhF,KAAK,CAAC2B,qBAAqB,EAAE;EACtC,CAAC;EAED5B,SAAS,CAACkF,SAAS,GAAG,UAAUC,MAAM,EAAE;IACtClF,KAAK,CAAC4B,OAAO,CAAC1B,IAAI,CAACgF,MAAM,CAAC;EAC5B,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,IAAIC,cAAc,GAAG;EACnBzD,gBAAgB,EAAE,CAAC;EACnBC,qBAAqB,EAAE,CAAC;EACxBC,OAAO,EAAE,IAAI;EACbwD,mBAAmB,EAAE,IAAI;EACzBvD,eAAe,EAAE,IAAI;EACrBK,UAAU,EAAE;AACd,CAAC,CAAC,CAAC;;AAEH,SAASmD,MAAMA,CAACtF,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAIsF,aAAa,GAAGhF,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FiF,MAAM,CAACC,MAAM,CAACxF,KAAK,EAAEmF,cAAc,EAAEG,aAAa,CAAC,CAAC,CAAC;;EAErD5F,aAAa,CAAC2F,MAAM,CAACtF,SAAS,EAAEC,KAAK,EAAEsF,aAAa,CAAC;EACrDlG,KAAK,CAACqG,MAAM,CAAC1F,SAAS,EAAEC,KAAK,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEjFF,cAAc,CAACC,SAAS,EAAEC,KAAK,CAAC;AAClC,CAAC,CAAC;;AAEF,IAAIa,WAAW,GAAGzB,KAAK,CAACyB,WAAW,CAACwE,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC;;AAE/D,IAAIK,gBAAgB,GAAG;EACrB7E,WAAW,EAAEA,WAAW;EACxBwE,MAAM,EAAEA;AACV,CAAC;AAED,SAASK,gBAAgB,IAAIC,OAAO,EAAEN,MAAM,EAAExE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}