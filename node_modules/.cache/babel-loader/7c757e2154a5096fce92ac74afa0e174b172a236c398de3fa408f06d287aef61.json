{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// vtkCylinderSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCylinderSource(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkCylinderSource');\n  function requestData(inData, outData) {\n    var _vtkMatrixBuilder$bui, _vtkMatrixBuilder$bui2;\n    if (model.deleted) {\n      return;\n    }\n    var dataset = outData[0];\n    var angle = 2.0 * Math.PI / model.resolution;\n    var numberOfPoints = 2 * model.resolution;\n    var numberOfPolys = 5 * model.resolution;\n    if (model.capping) {\n      numberOfPoints = 4 * model.resolution;\n      numberOfPolys = 7 * model.resolution + 2;\n    } // Points\n\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(numberOfPolys); // Normals\n\n    var normalsData = new Float32Array(numberOfPoints * 3);\n    var normals = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: normalsData,\n      name: 'Normals'\n    }); // Texture coords\n\n    var tcData = new Float32Array(numberOfPoints * 2);\n    var tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcData,\n      name: 'TCoords'\n    }); // Generate points for all sides\n\n    var nbot = [0.0, 0.0, 0.0];\n    var ntop = [0.0, 0.0, 0.0];\n    var xbot = [0.0, 0.0, 0.0];\n    var xtop = [0.0, 0.0, 0.0];\n    var tcbot = [0.0, 0.0];\n    var tctop = [0.0, 0.0];\n    var otherRadius = model.otherRadius == null ? model.radius : model.otherRadius;\n    for (var i = 0; i < model.resolution; i++) {\n      // x coordinate\n      nbot[0] = Math.cos(i * angle + model.initAngle);\n      ntop[0] = nbot[0];\n      xbot[0] = model.radius * nbot[0] + model.center[0];\n      xtop[0] = xbot[0];\n      tcbot[0] = Math.abs(2.0 * i / model.resolution - 1.0);\n      tctop[0] = tcbot[0]; // y coordinate\n\n      xbot[1] = 0.5 * model.height + model.center[1];\n      xtop[1] = -0.5 * model.height + model.center[1];\n      tcbot[1] = 0.0;\n      tctop[1] = 1.0; // z coordinate\n\n      nbot[2] = -Math.sin(i * angle + model.initAngle);\n      ntop[2] = nbot[2];\n      xbot[2] = otherRadius * nbot[2] + model.center[2];\n      xtop[2] = xbot[2];\n      var pointIdx = 2 * i;\n      for (var j = 0; j < 3; j++) {\n        normalsData[pointIdx * 3 + j] = nbot[j];\n        normalsData[(pointIdx + 1) * 3 + j] = ntop[j];\n        points[pointIdx * 3 + j] = xbot[j];\n        points[(pointIdx + 1) * 3 + j] = xtop[j];\n        if (j < 2) {\n          tcData[pointIdx * 2 + j] = tcbot[j];\n          tcData[(pointIdx + 1) * 2 + j] = tctop[j];\n        }\n      }\n    } // Generate polygons for sides\n\n    for (var _i = 0; _i < model.resolution; _i++) {\n      polys[cellLocation++] = 4;\n      polys[cellLocation++] = 2 * _i;\n      polys[cellLocation++] = 2 * _i + 1;\n      var pt = (2 * _i + 3) % (2 * model.resolution);\n      polys[cellLocation++] = pt;\n      polys[cellLocation++] = pt - 1;\n    }\n    if (model.capping) {\n      // Generate points for top/bottom polygons\n      for (var _i2 = 0; _i2 < model.resolution; _i2++) {\n        // x coordinate\n        xbot[0] = model.radius * Math.cos(_i2 * angle + model.initAngle);\n        xtop[0] = xbot[0];\n        tcbot[0] = xbot[0];\n        tctop[0] = xbot[0];\n        xbot[0] += model.center[0];\n        xtop[0] += model.center[0]; // y coordinate\n\n        nbot[1] = 1.0;\n        ntop[1] = -1.0;\n        xbot[1] = 0.5 * model.height + model.center[1];\n        xtop[1] = -0.5 * model.height + model.center[1]; // z coordinate\n\n        xbot[2] = -otherRadius * Math.sin(_i2 * angle + model.initAngle);\n        xtop[2] = xbot[2];\n        tcbot[1] = xbot[2];\n        tctop[1] = xbot[2];\n        xbot[2] += model.center[2];\n        xtop[2] += model.center[2];\n        var botIdx = 2 * model.resolution + _i2;\n        var topIdx = 3 * model.resolution + model.resolution - _i2 - 1;\n        for (var _j = 0; _j < 3; _j++) {\n          normalsData[3 * botIdx + _j] = nbot[_j];\n          normalsData[3 * topIdx + _j] = ntop[_j];\n          points[3 * botIdx + _j] = xbot[_j];\n          points[3 * topIdx + _j] = xtop[_j];\n          if (_j < 2) {\n            tcData[2 * botIdx + _j] = tcbot[_j];\n            tcData[2 * topIdx + _j] = tctop[_j];\n          }\n        }\n      } // Generate polygons for top/bottom\n\n      polys[cellLocation++] = model.resolution;\n      for (var _i3 = 0; _i3 < model.resolution; _i3++) {\n        polys[cellLocation++] = 2 * model.resolution + _i3;\n      }\n      polys[cellLocation++] = model.resolution;\n      for (var _i4 = 0; _i4 < model.resolution; _i4++) {\n        polys[cellLocation++] = 3 * model.resolution + _i4;\n      }\n    } // Apply transformation to the points coordinates\n\n    (_vtkMatrixBuilder$bui = (_vtkMatrixBuilder$bui2 = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui2, _toConsumableArray(model.center)).rotateFromDirections([0, 1, 0], model.direction)).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center.map(function (c) {\n      return c * -1;\n    }))).apply(points);\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n    dataset.getPointData().setNormals(normals);\n    dataset.getPointData().setTCoords(tcoords); // Update output\n\n    outData[0] = dataset;\n  } // Expose methods\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  height: 1.0,\n  initAngle: 0,\n  radius: 1.0,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [0.0, 1.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'initAngle', 'otherRadius', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCylinderSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCylinderSource'); // ----------------------------------------------------------------------------\n\nvar vtkCylinderSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkCylinderSource$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkDataArray","vtkPolyData","vtkMatrixBuilder","vtkCylinderSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","_vtkMatrixBuilder$bui","_vtkMatrixBuilder$bui2","deleted","dataset","angle","Math","PI","resolution","numberOfPoints","numberOfPolys","capping","points","newTypedArray","pointType","cellLocation","polys","Uint32Array","normalsData","Float32Array","normals","newInstance","numberOfComponents","values","name","tcData","tcoords","nbot","ntop","xbot","xtop","tcbot","tctop","otherRadius","radius","i","cos","initAngle","center","abs","height","sin","pointIdx","j","_i","pt","_i2","botIdx","topIdx","_j","_i3","_i4","buildFromRadian","translate","apply","rotateFromDirections","direction","map","c","getPoints","setData","getPolys","getPointData","setNormals","setTCoords","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGet","setGetArray","algo","vtkCylinderSource$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/Sources/CylinderSource.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// vtkCylinderSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCylinderSource(publicAPI, model) {\n  // Set our classname\n  model.classHierarchy.push('vtkCylinderSource');\n\n  function requestData(inData, outData) {\n    var _vtkMatrixBuilder$bui, _vtkMatrixBuilder$bui2;\n\n    if (model.deleted) {\n      return;\n    }\n\n    var dataset = outData[0];\n    var angle = 2.0 * Math.PI / model.resolution;\n    var numberOfPoints = 2 * model.resolution;\n    var numberOfPolys = 5 * model.resolution;\n\n    if (model.capping) {\n      numberOfPoints = 4 * model.resolution;\n      numberOfPolys = 7 * model.resolution + 2;\n    } // Points\n\n\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(numberOfPolys); // Normals\n\n    var normalsData = new Float32Array(numberOfPoints * 3);\n    var normals = vtkDataArray.newInstance({\n      numberOfComponents: 3,\n      values: normalsData,\n      name: 'Normals'\n    }); // Texture coords\n\n    var tcData = new Float32Array(numberOfPoints * 2);\n    var tcoords = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcData,\n      name: 'TCoords'\n    }); // Generate points for all sides\n\n    var nbot = [0.0, 0.0, 0.0];\n    var ntop = [0.0, 0.0, 0.0];\n    var xbot = [0.0, 0.0, 0.0];\n    var xtop = [0.0, 0.0, 0.0];\n    var tcbot = [0.0, 0.0];\n    var tctop = [0.0, 0.0];\n    var otherRadius = model.otherRadius == null ? model.radius : model.otherRadius;\n\n    for (var i = 0; i < model.resolution; i++) {\n      // x coordinate\n      nbot[0] = Math.cos(i * angle + model.initAngle);\n      ntop[0] = nbot[0];\n      xbot[0] = model.radius * nbot[0] + model.center[0];\n      xtop[0] = xbot[0];\n      tcbot[0] = Math.abs(2.0 * i / model.resolution - 1.0);\n      tctop[0] = tcbot[0]; // y coordinate\n\n      xbot[1] = 0.5 * model.height + model.center[1];\n      xtop[1] = -0.5 * model.height + model.center[1];\n      tcbot[1] = 0.0;\n      tctop[1] = 1.0; // z coordinate\n\n      nbot[2] = -Math.sin(i * angle + model.initAngle);\n      ntop[2] = nbot[2];\n      xbot[2] = otherRadius * nbot[2] + model.center[2];\n      xtop[2] = xbot[2];\n      var pointIdx = 2 * i;\n\n      for (var j = 0; j < 3; j++) {\n        normalsData[pointIdx * 3 + j] = nbot[j];\n        normalsData[(pointIdx + 1) * 3 + j] = ntop[j];\n        points[pointIdx * 3 + j] = xbot[j];\n        points[(pointIdx + 1) * 3 + j] = xtop[j];\n\n        if (j < 2) {\n          tcData[pointIdx * 2 + j] = tcbot[j];\n          tcData[(pointIdx + 1) * 2 + j] = tctop[j];\n        }\n      }\n    } // Generate polygons for sides\n\n\n    for (var _i = 0; _i < model.resolution; _i++) {\n      polys[cellLocation++] = 4;\n      polys[cellLocation++] = 2 * _i;\n      polys[cellLocation++] = 2 * _i + 1;\n      var pt = (2 * _i + 3) % (2 * model.resolution);\n      polys[cellLocation++] = pt;\n      polys[cellLocation++] = pt - 1;\n    }\n\n    if (model.capping) {\n      // Generate points for top/bottom polygons\n      for (var _i2 = 0; _i2 < model.resolution; _i2++) {\n        // x coordinate\n        xbot[0] = model.radius * Math.cos(_i2 * angle + model.initAngle);\n        xtop[0] = xbot[0];\n        tcbot[0] = xbot[0];\n        tctop[0] = xbot[0];\n        xbot[0] += model.center[0];\n        xtop[0] += model.center[0]; // y coordinate\n\n        nbot[1] = 1.0;\n        ntop[1] = -1.0;\n        xbot[1] = 0.5 * model.height + model.center[1];\n        xtop[1] = -0.5 * model.height + model.center[1]; // z coordinate\n\n        xbot[2] = -otherRadius * Math.sin(_i2 * angle + model.initAngle);\n        xtop[2] = xbot[2];\n        tcbot[1] = xbot[2];\n        tctop[1] = xbot[2];\n        xbot[2] += model.center[2];\n        xtop[2] += model.center[2];\n        var botIdx = 2 * model.resolution + _i2;\n        var topIdx = 3 * model.resolution + model.resolution - _i2 - 1;\n\n        for (var _j = 0; _j < 3; _j++) {\n          normalsData[3 * botIdx + _j] = nbot[_j];\n          normalsData[3 * topIdx + _j] = ntop[_j];\n          points[3 * botIdx + _j] = xbot[_j];\n          points[3 * topIdx + _j] = xtop[_j];\n\n          if (_j < 2) {\n            tcData[2 * botIdx + _j] = tcbot[_j];\n            tcData[2 * topIdx + _j] = tctop[_j];\n          }\n        }\n      } // Generate polygons for top/bottom\n\n\n      polys[cellLocation++] = model.resolution;\n\n      for (var _i3 = 0; _i3 < model.resolution; _i3++) {\n        polys[cellLocation++] = 2 * model.resolution + _i3;\n      }\n\n      polys[cellLocation++] = model.resolution;\n\n      for (var _i4 = 0; _i4 < model.resolution; _i4++) {\n        polys[cellLocation++] = 3 * model.resolution + _i4;\n      }\n    } // Apply transformation to the points coordinates\n\n\n    (_vtkMatrixBuilder$bui = (_vtkMatrixBuilder$bui2 = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui2, _toConsumableArray(model.center)).rotateFromDirections([0, 1, 0], model.direction)).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center.map(function (c) {\n      return c * -1;\n    }))).apply(points);\n\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1);\n    dataset.getPointData().setNormals(normals);\n    dataset.getPointData().setTCoords(tcoords); // Update output\n\n    outData[0] = dataset;\n  } // Expose methods\n\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  height: 1.0,\n  initAngle: 0,\n  radius: 1.0,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [0.0, 1.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'initAngle', 'otherRadius', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkCylinderSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCylinderSource'); // ----------------------------------------------------------------------------\n\nvar vtkCylinderSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkCylinderSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}