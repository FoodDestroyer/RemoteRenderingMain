{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkElevationReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkElevationReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkElevationReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n  function fetchCSV(url, options) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, options);\n  } // Set DataSet url\n\n  publicAPI.setUrl = function (url, options) {\n    model.url = url; // Fetch metadata\n\n    return publicAPI.loadData(options);\n  }; // Fetch the actual data arrays\n\n  publicAPI.loadData = function (options) {\n    return fetchCSV(model.url, options).then(function (csv) {\n      publicAPI.parseAsText(csv);\n      return true;\n    });\n  };\n  publicAPI.parseAsText = function (csv) {\n    model.csv = csv;\n    model.elevation = []; // Parse data\n\n    var lines = model.csv.split('\\n');\n    lines.forEach(function (line, lineIdx) {\n      model.elevation.push(line.split(',').map(function (str) {\n        return Number(str);\n      }));\n    });\n    publicAPI.modified();\n  };\n  publicAPI.requestData = function (inData, outData) {\n    var polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(new Float32Array(0, 0, 0, 1, 1, 1), 3);\n    if (model.elevation) {\n      var jSize = model.elevation.length;\n      var iSize = model.elevation[0].length; // Handle points and polys\n\n      var points = polydata.getPoints();\n      points.setNumberOfPoints(iSize * jSize, 3);\n      var pointValues = points.getData();\n      var polys = vtkCellArray.newInstance({\n        size: 5 * (iSize - 1) * (jSize - 1)\n      });\n      polydata.setPolys(polys);\n      var polysValues = polys.getData();\n      var cellOffset = 0; // Texture coords\n\n      var tcData = new Float32Array(iSize * jSize * 2);\n      var tcoords = vtkDataArray.newInstance({\n        numberOfComponents: 2,\n        values: tcData,\n        name: 'TextureCoordinates'\n      });\n      polydata.getPointData().setTCoords(tcoords);\n      for (var j = 0; j < jSize; j++) {\n        for (var i = 0; i < iSize; i++) {\n          var offsetIdx = j * iSize + i;\n          var offsetPt = 3 * offsetIdx; // Fill points coordinates\n\n          pointValues[offsetPt + 0] = model.origin[0] + i * model.xSpacing * model.xDirection;\n          pointValues[offsetPt + 1] = model.origin[1] + j * model.ySpacing * model.yDirection;\n          pointValues[offsetPt + 2] = model.origin[2] + model.elevation[j][i] * model.zScaling; // fill in tcoords\n\n          tcData[offsetIdx * 2] = i / (iSize - 1.0);\n          tcData[offsetIdx * 2 + 1] = 1.0 - j / (jSize - 1.0); // Fill polys\n\n          if (i > 0 && j > 0) {\n            polysValues[cellOffset++] = 4;\n            polysValues[cellOffset++] = offsetIdx;\n            polysValues[cellOffset++] = offsetIdx - 1;\n            polysValues[cellOffset++] = offsetIdx - 1 - iSize;\n            polysValues[cellOffset++] = offsetIdx - iSize;\n          }\n        }\n      }\n    }\n    model.output[0] = polydata;\n  }; // return Busy state\n\n  publicAPI.isBusy = function () {\n    return !!model.requestCount;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  origin: [0, 0, 0],\n  xSpacing: 1,\n  ySpacing: 1,\n  zScaling: 1,\n  xDirection: 1,\n  yDirection: -1,\n  requestCount: 0 // dataAccessHelper: null,\n  // url: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper', 'xSpacing', 'ySpacing', 'zScaling', 'xDirection', 'yDirection']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy'); // Object methods\n\n  vtkElevationReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkElevationReader'); // ----------------------------------------------------------------------------\n\nvar vtkElevationReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkElevationReader$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkDataArray","vtkPolyData","vtkCellArray","DataAccessHelper","vtkElevationReader","publicAPI","model","classHierarchy","push","dataAccessHelper","get","fetchCSV","url","options","fetchText","setUrl","loadData","then","csv","parseAsText","elevation","lines","split","forEach","line","lineIdx","map","str","Number","modified","requestData","inData","outData","polydata","newInstance","getPoints","setData","Float32Array","jSize","length","iSize","points","setNumberOfPoints","pointValues","getData","polys","size","setPolys","polysValues","cellOffset","tcData","tcoords","numberOfComponents","values","name","getPointData","setTCoords","j","i","offsetIdx","offsetPt","origin","xSpacing","xDirection","ySpacing","yDirection","zScaling","output","isBusy","requestCount","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","setGet","algo","event","vtkElevationReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/Misc/ElevationReader.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkCellArray from '../../Common/Core/CellArray.js';\nimport DataAccessHelper from '../Core/DataAccessHelper.js';\nimport '../Core/DataAccessHelper/LiteHttpDataAccessHelper.js';\n\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HttpDataAccessHelper'; // HTTP + gz\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/HtmlDataAccessHelper'; // html + base64 + zip\n// import 'vtk.js/Sources/IO/Core/DataAccessHelper/JSZipDataAccessHelper'; // zip\n// ----------------------------------------------------------------------------\n// vtkElevationReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkElevationReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkElevationReader'); // Create default dataAccessHelper if not available\n\n  if (!model.dataAccessHelper) {\n    model.dataAccessHelper = DataAccessHelper.get('http');\n  } // Internal method to fetch Array\n\n\n  function fetchCSV(url, options) {\n    return model.dataAccessHelper.fetchText(publicAPI, url, options);\n  } // Set DataSet url\n\n\n  publicAPI.setUrl = function (url, options) {\n    model.url = url; // Fetch metadata\n\n    return publicAPI.loadData(options);\n  }; // Fetch the actual data arrays\n\n\n  publicAPI.loadData = function (options) {\n    return fetchCSV(model.url, options).then(function (csv) {\n      publicAPI.parseAsText(csv);\n      return true;\n    });\n  };\n\n  publicAPI.parseAsText = function (csv) {\n    model.csv = csv;\n    model.elevation = []; // Parse data\n\n    var lines = model.csv.split('\\n');\n    lines.forEach(function (line, lineIdx) {\n      model.elevation.push(line.split(',').map(function (str) {\n        return Number(str);\n      }));\n    });\n    publicAPI.modified();\n  };\n\n  publicAPI.requestData = function (inData, outData) {\n    var polydata = vtkPolyData.newInstance();\n    polydata.getPoints().setData(new Float32Array(0, 0, 0, 1, 1, 1), 3);\n\n    if (model.elevation) {\n      var jSize = model.elevation.length;\n      var iSize = model.elevation[0].length; // Handle points and polys\n\n      var points = polydata.getPoints();\n      points.setNumberOfPoints(iSize * jSize, 3);\n      var pointValues = points.getData();\n      var polys = vtkCellArray.newInstance({\n        size: 5 * (iSize - 1) * (jSize - 1)\n      });\n      polydata.setPolys(polys);\n      var polysValues = polys.getData();\n      var cellOffset = 0; // Texture coords\n\n      var tcData = new Float32Array(iSize * jSize * 2);\n      var tcoords = vtkDataArray.newInstance({\n        numberOfComponents: 2,\n        values: tcData,\n        name: 'TextureCoordinates'\n      });\n      polydata.getPointData().setTCoords(tcoords);\n\n      for (var j = 0; j < jSize; j++) {\n        for (var i = 0; i < iSize; i++) {\n          var offsetIdx = j * iSize + i;\n          var offsetPt = 3 * offsetIdx; // Fill points coordinates\n\n          pointValues[offsetPt + 0] = model.origin[0] + i * model.xSpacing * model.xDirection;\n          pointValues[offsetPt + 1] = model.origin[1] + j * model.ySpacing * model.yDirection;\n          pointValues[offsetPt + 2] = model.origin[2] + model.elevation[j][i] * model.zScaling; // fill in tcoords\n\n          tcData[offsetIdx * 2] = i / (iSize - 1.0);\n          tcData[offsetIdx * 2 + 1] = 1.0 - j / (jSize - 1.0); // Fill polys\n\n          if (i > 0 && j > 0) {\n            polysValues[cellOffset++] = 4;\n            polysValues[cellOffset++] = offsetIdx;\n            polysValues[cellOffset++] = offsetIdx - 1;\n            polysValues[cellOffset++] = offsetIdx - 1 - iSize;\n            polysValues[cellOffset++] = offsetIdx - iSize;\n          }\n        }\n      }\n    }\n\n    model.output[0] = polydata;\n  }; // return Busy state\n\n\n  publicAPI.isBusy = function () {\n    return !!model.requestCount;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  origin: [0, 0, 0],\n  xSpacing: 1,\n  ySpacing: 1,\n  zScaling: 1,\n  xDirection: 1,\n  yDirection: -1,\n  requestCount: 0 // dataAccessHelper: null,\n  // url: null,\n\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['url']);\n  macro.setGet(publicAPI, model, ['dataAccessHelper', 'xSpacing', 'ySpacing', 'zScaling', 'xDirection', 'yDirection']);\n  macro.algo(publicAPI, model, 0, 1);\n  macro.event(publicAPI, model, 'busy'); // Object methods\n\n  vtkElevationReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkElevationReader'); // ----------------------------------------------------------------------------\n\nvar vtkElevationReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkElevationReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}