{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkTextureMapToSphere methods\n// ----------------------------------------------------------------------------\n\nfunction vtkTextureMapToSphere(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkTextureMapToSphere');\n  publicAPI.requestData = function (inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n    var input = inData[0];\n    var nbPoints = input.getPoints().getNumberOfPoints();\n    if (nbPoints <= 1) {\n      vtkErrorMacro(\"Can't generate texture coordinates without points\");\n      return;\n    }\n    var piOverTwo = Math.PI / 2;\n    var x = [];\n    var points = input.getPoints();\n    if (model.automaticSphereGeneration) {\n      model.center = [0, 0, 0];\n      for (var i = 0; i < nbPoints; i++) {\n        points.getPoint(i, x);\n        model.center[0] += x[0];\n        model.center[1] += x[1];\n        model.center[2] += x[2];\n      }\n      model.center[0] /= nbPoints;\n      model.center[1] /= nbPoints;\n      model.center[2] /= nbPoints;\n    }\n    var rho = 0;\n    var diff = 0;\n    var phi = 0;\n    var tc = [0, 0];\n    var r = 0;\n    var thetaX = 0;\n    var thetaY = 0;\n    var tcoordsData = [];\n    for (var _i = 0; _i < nbPoints; _i++) {\n      points.getPoint(_i, x);\n      rho = Math.sqrt(distance2BetweenPoints(x, model.center));\n      if (rho !== 0) {\n        diff = x[2] - model.center[2];\n        if (Math.abs(diff) > rho) {\n          phi = 0;\n          if (diff > 0) {\n            tc[1] = 0;\n          } else {\n            tc[1] = 1;\n          }\n        } else {\n          phi = Math.acos(diff / rho);\n          tc[1] = phi / Math.PI;\n        }\n      } else {\n        tc[1] = 0;\n      }\n      r = rho * Math.sin(phi);\n      if (r !== 0) {\n        diff = x[0] - model.center[0];\n        if (Math.abs(diff) > r) {\n          if (diff > 0) {\n            thetaX = 0;\n          } else {\n            thetaX = Math.PI;\n          }\n        } else {\n          thetaX = Math.acos(diff / r);\n        }\n        diff = x[1] - model.center[1];\n        if (Math.abs(diff) > r) {\n          if (diff > 0) {\n            thetaY = piOverTwo;\n          } else {\n            thetaY = -piOverTwo;\n          }\n        } else {\n          thetaY = Math.asin(diff / r);\n        }\n      } else {\n        thetaX = 0;\n        thetaY = 0;\n      }\n      if (model.preventSeam) {\n        tc[0] = thetaX / Math.PI;\n      } else {\n        tc[0] = thetaX / (2 * Math.PI);\n        if (thetaY < 0) {\n          tc[0] = 1 - tc[0];\n        }\n      }\n      tcoordsData.push.apply(tcoordsData, tc);\n    }\n    var tCoords = vtkDataArray.newInstance({\n      name: 'Texture Coordinates',\n      numberOfComponents: 2,\n      size: nbPoints,\n      values: tcoordsData\n    });\n    var output = vtkPolyData.newInstance();\n    output.getPoints().setData(new Float32Array(input.getPoints().getData()), 3);\n    output.getPolys().setData(new Uint32Array(input.getPolys().getData()));\n    output.getPointData().setTCoords(tCoords); // Update output\n\n    outData[0] = output;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  center: [0, 0, 0],\n  automaticSphereGeneration: 1,\n  preventSeam: 1\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGetArray(publicAPI, model, ['center'], 3);\n  macro.setGet(publicAPI, model, ['automaticSphereGeneration', 'preventSeam']);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkTextureMapToSphere(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkTextureMapToSphere'); // ----------------------------------------------------------------------------\n\nvar vtkTextureMapToSphere$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkTextureMapToSphere$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkDataArray","e","distance2BetweenPoints","vtkPolyData","vtkErrorMacro","vtkTextureMapToSphere","publicAPI","model","classHierarchy","push","requestData","inData","outData","deleted","input","nbPoints","getPoints","getNumberOfPoints","piOverTwo","Math","PI","x","points","automaticSphereGeneration","center","i","getPoint","rho","diff","phi","tc","r","thetaX","thetaY","tcoordsData","_i","sqrt","abs","acos","sin","asin","preventSeam","apply","tCoords","newInstance","name","numberOfComponents","size","values","output","setData","Float32Array","getData","getPolys","Uint32Array","getPointData","setTCoords","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGetArray","setGet","algo","vtkTextureMapToSphere$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/Texture/TextureMapToSphere.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkTextureMapToSphere methods\n// ----------------------------------------------------------------------------\n\nfunction vtkTextureMapToSphere(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkTextureMapToSphere');\n\n  publicAPI.requestData = function (inData, outData) {\n    if (model.deleted) {\n      return;\n    }\n\n    var input = inData[0];\n    var nbPoints = input.getPoints().getNumberOfPoints();\n\n    if (nbPoints <= 1) {\n      vtkErrorMacro(\"Can't generate texture coordinates without points\");\n      return;\n    }\n\n    var piOverTwo = Math.PI / 2;\n    var x = [];\n    var points = input.getPoints();\n\n    if (model.automaticSphereGeneration) {\n      model.center = [0, 0, 0];\n\n      for (var i = 0; i < nbPoints; i++) {\n        points.getPoint(i, x);\n        model.center[0] += x[0];\n        model.center[1] += x[1];\n        model.center[2] += x[2];\n      }\n\n      model.center[0] /= nbPoints;\n      model.center[1] /= nbPoints;\n      model.center[2] /= nbPoints;\n    }\n\n    var rho = 0;\n    var diff = 0;\n    var phi = 0;\n    var tc = [0, 0];\n    var r = 0;\n    var thetaX = 0;\n    var thetaY = 0;\n    var tcoordsData = [];\n\n    for (var _i = 0; _i < nbPoints; _i++) {\n      points.getPoint(_i, x);\n      rho = Math.sqrt(distance2BetweenPoints(x, model.center));\n\n      if (rho !== 0) {\n        diff = x[2] - model.center[2];\n\n        if (Math.abs(diff) > rho) {\n          phi = 0;\n\n          if (diff > 0) {\n            tc[1] = 0;\n          } else {\n            tc[1] = 1;\n          }\n        } else {\n          phi = Math.acos(diff / rho);\n          tc[1] = phi / Math.PI;\n        }\n      } else {\n        tc[1] = 0;\n      }\n\n      r = rho * Math.sin(phi);\n\n      if (r !== 0) {\n        diff = x[0] - model.center[0];\n\n        if (Math.abs(diff) > r) {\n          if (diff > 0) {\n            thetaX = 0;\n          } else {\n            thetaX = Math.PI;\n          }\n        } else {\n          thetaX = Math.acos(diff / r);\n        }\n\n        diff = x[1] - model.center[1];\n\n        if (Math.abs(diff) > r) {\n          if (diff > 0) {\n            thetaY = piOverTwo;\n          } else {\n            thetaY = -piOverTwo;\n          }\n        } else {\n          thetaY = Math.asin(diff / r);\n        }\n      } else {\n        thetaX = 0;\n        thetaY = 0;\n      }\n\n      if (model.preventSeam) {\n        tc[0] = thetaX / Math.PI;\n      } else {\n        tc[0] = thetaX / (2 * Math.PI);\n\n        if (thetaY < 0) {\n          tc[0] = 1 - tc[0];\n        }\n      }\n\n      tcoordsData.push.apply(tcoordsData, tc);\n    }\n\n    var tCoords = vtkDataArray.newInstance({\n      name: 'Texture Coordinates',\n      numberOfComponents: 2,\n      size: nbPoints,\n      values: tcoordsData\n    });\n    var output = vtkPolyData.newInstance();\n    output.getPoints().setData(new Float32Array(input.getPoints().getData()), 3);\n    output.getPolys().setData(new Uint32Array(input.getPolys().getData()));\n    output.getPointData().setTCoords(tCoords); // Update output\n\n    outData[0] = output;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  center: [0, 0, 0],\n  automaticSphereGeneration: 1,\n  preventSeam: 1\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGetArray(publicAPI, model, ['center'], 3);\n  macro.setGet(publicAPI, model, ['automaticSphereGeneration', 'preventSeam']);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkTextureMapToSphere(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkTextureMapToSphere'); // ----------------------------------------------------------------------------\n\nvar vtkTextureMapToSphere$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkTextureMapToSphere$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}