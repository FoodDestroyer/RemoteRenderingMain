{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../../macros.js';\nimport vtkBoundingBox from '../../../Common/DataModel/BoundingBox.js';\nimport vtkLine from '../../../Common/DataModel/Line.js';\nimport { k as add, l as normalize, s as subtract, d as dot, j as cross, m as multiplyAccumulate, w as multiplyScalar, S as signedAngleBetweenVectors } from '../../../Common/Core/Math/index.js';\nimport { getLineNames, getOtherLineName, updateState, boundPointOnPlane, getLinePlaneName, getLineInPlaneName, rotateVector } from './helpers.js';\nimport { InteractionMethodsName, ScrollingMethods, planeNameToViewType } from './Constants.js';\nfunction widgetBehavior(publicAPI, model) {\n  var _publicAPI$setCursorS;\n  model._isDragging = false;\n  var isScrolling = false;\n  var previousPosition;\n  macro.setGet(publicAPI, model, ['keepOrthogonality', {\n    type: 'object',\n    name: 'cursorStyles'\n  }]); // Set default value for cursorStyles\n\n  publicAPI.setCursorStyles((_publicAPI$setCursorS = {}, _defineProperty(_publicAPI$setCursorS, InteractionMethodsName.TranslateCenter, 'move'), _defineProperty(_publicAPI$setCursorS, InteractionMethodsName.RotateLine, 'alias'), _defineProperty(_publicAPI$setCursorS, InteractionMethodsName.TranslateAxis, 'pointer'), _defineProperty(_publicAPI$setCursorS, \"default\", 'default'), _publicAPI$setCursorS));\n  publicAPI.setEnableTranslation = function (enable) {\n    model.representations[0].setPickable(enable); // line handle\n\n    model.representations[2].setPickable(enable); // center handle\n  };\n\n  publicAPI.setEnableRotation = function (enable) {\n    model.representations[1].setPickable(enable); // rotation handle\n  }; // FIXME: label information should be accessible from activeState instead of parent state.\n\n  publicAPI.getActiveInteraction = function () {\n    if (model.widgetState.getStatesWithLabel('rotation').includes(model.activeState)) {\n      return InteractionMethodsName.RotateLine;\n    }\n    if (model.widgetState.getStatesWithLabel('line').includes(model.activeState)) {\n      return InteractionMethodsName.TranslateAxis;\n    }\n    if (model.widgetState.getStatesWithLabel('center').includes(model.activeState)) {\n      return InteractionMethodsName.TranslateCenter;\n    }\n    return null;\n  };\n  /**\n   * ActiveState can be RotationHandle or a LineHandle\n   * @returns 'YinX', 'ZinX', 'XinY', 'ZinY', 'XinZ' or 'YinZ'\n   */\n\n  publicAPI.getActiveLineName = function () {\n    return getLineNames(model.widgetState).find(function (lineName) {\n      return model.widgetState.getStatesWithLabel(lineName).includes(model.activeState);\n    });\n  }; // FIXME: label information should be accessible from activeState instead of parent state.\n\n  publicAPI.getActiveLineHandle = function () {\n    var _model$widgetState$, _model$widgetState;\n    return (_model$widgetState$ = (_model$widgetState = model.widgetState)[\"getAxis\".concat(publicAPI.getActiveLineName())]) === null || _model$widgetState$ === void 0 ? void 0 : _model$widgetState$.call(_model$widgetState);\n  };\n  /**\n   * Return the line handle of the other line in the same view.\n   * @param {string} lineName name of the line (YinX, ZinX, XinY, ZinY, XinZ, YinZ)\n   * @returns ZinX if lineName == YinX, YinX if lineName == ZinX, ZinY if lineName == XinY...\n   */\n\n  publicAPI.getOtherLineHandle = function (lineName) {\n    var _model$widgetState$2, _model$widgetState2;\n    return (_model$widgetState$2 = (_model$widgetState2 = model.widgetState)[\"getAxis\".concat(getOtherLineName(model.widgetState, lineName))]) === null || _model$widgetState$2 === void 0 ? void 0 : _model$widgetState$2.call(_model$widgetState2);\n  }; // FIXME: label information should be accessible from activeState instead of parent state.\n\n  /**\n   * There are 2 rotation handles per axis: 'point0' and 'point1'.\n   * This function returns which rotation handle (point0 or point1) is currently active.\n   * ActiveState must be a RotationHandle.\n   * @returns 'point0', 'point1' or null if no point is active (e.g. line is being rotated)\n   */\n\n  publicAPI.getActiveRotationPointName = function () {\n    if (model.widgetState.getStatesWithLabel('point0').includes(model.activeState)) {\n      return 'point0';\n    }\n    if (model.widgetState.getStatesWithLabel('point1').includes(model.activeState)) {\n      return 'point1';\n    }\n    return null;\n  };\n  publicAPI.startScrolling = function (newPosition) {\n    if (newPosition) {\n      previousPosition = newPosition;\n    }\n    isScrolling = true;\n    publicAPI.startInteraction();\n  };\n  publicAPI.endScrolling = function () {\n    isScrolling = false;\n    publicAPI.endInteraction();\n  };\n  publicAPI.updateCursor = function () {\n    var cursorStyles = publicAPI.getCursorStyles();\n    if (cursorStyles) {\n      switch (publicAPI.getActiveInteraction()) {\n        case InteractionMethodsName.TranslateCenter:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.translateCenter);\n          break;\n        case InteractionMethodsName.RotateLine:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.rotateLine);\n          break;\n        case InteractionMethodsName.TranslateAxis:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.translateAxis);\n          break;\n        default:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.default);\n          break;\n      }\n    }\n  };\n  publicAPI.handleLeftButtonPress = function (callData) {\n    if (model.activeState && model.activeState.getActive()) {\n      var _model$activeState$ge, _model$activeState, _model$activeState$ge2;\n      model._isDragging = true;\n      var viewType = model.viewType;\n      var currentPlaneNormal = model.widgetState.getPlanes()[viewType].normal;\n      var manipulator = (_model$activeState$ge = (_model$activeState = model.activeState) === null || _model$activeState === void 0 ? void 0 : (_model$activeState$ge2 = _model$activeState.getManipulator) === null || _model$activeState$ge2 === void 0 ? void 0 : _model$activeState$ge2.call(_model$activeState)) !== null && _model$activeState$ge !== void 0 ? _model$activeState$ge : model.manipulator;\n      manipulator.setWidgetOrigin(model.widgetState.getCenter());\n      manipulator.setWidgetNormal(currentPlaneNormal);\n      var _manipulator$handleEv = manipulator.handleEvent(callData, model._apiSpecificRenderWindow),\n        worldCoords = _manipulator$handleEv.worldCoords;\n      previousPosition = worldCoords;\n      publicAPI.startInteraction();\n    } else if (model.widgetState.getScrollingMethod() === ScrollingMethods.LEFT_MOUSE_BUTTON) {\n      publicAPI.startScrolling(callData.position);\n    } else {\n      return macro.VOID;\n    }\n    return macro.EVENT_ABORT;\n  };\n  publicAPI.handleMouseMove = function (callData) {\n    if (model._isDragging) {\n      return publicAPI.handleEvent(callData);\n    }\n    if (isScrolling) {\n      if (previousPosition.y !== callData.position.y) {\n        var step = previousPosition.y - callData.position.y;\n        publicAPI.translateCenterOnPlaneDirection(step);\n        previousPosition = callData.position;\n        publicAPI.invokeInternalInteractionEvent();\n      }\n    }\n    return macro.VOID;\n  };\n  publicAPI.handleLeftButtonRelease = function () {\n    if (model._isDragging || isScrolling) {\n      publicAPI.endScrolling();\n    }\n    model._isDragging = false;\n    model.widgetState.deactivate();\n  };\n  publicAPI.handleRightButtonPress = function (calldata) {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.RIGHT_MOUSE_BUTTON) {\n      publicAPI.startScrolling(calldata.position);\n    }\n  };\n  publicAPI.handleRightButtonRelease = function () {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.RIGHT_MOUSE_BUTTON) {\n      publicAPI.endScrolling();\n    }\n  };\n  publicAPI.handleStartMouseWheel = function () {\n    publicAPI.startInteraction();\n  };\n  publicAPI.handleMouseWheel = function (calldata) {\n    var step = calldata.spinY;\n    isScrolling = true;\n    publicAPI.translateCenterOnPlaneDirection(step);\n    publicAPI.invokeInternalInteractionEvent();\n    isScrolling = false;\n    return macro.EVENT_ABORT;\n  };\n  publicAPI.handleEndMouseWheel = function () {\n    publicAPI.endScrolling();\n  };\n  publicAPI.handleMiddleButtonPress = function (calldata) {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.MIDDLE_MOUSE_BUTTON) {\n      publicAPI.startScrolling(calldata.position);\n    }\n  };\n  publicAPI.handleMiddleButtonRelease = function () {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.MIDDLE_MOUSE_BUTTON) {\n      publicAPI.endScrolling();\n    }\n  };\n  publicAPI.handleEvent = function (callData) {\n    if (model.activeState.getActive()) {\n      publicAPI[publicAPI.getActiveInteraction()](callData);\n      publicAPI.invokeInternalInteractionEvent();\n      return macro.EVENT_ABORT;\n    }\n    return macro.VOID;\n  };\n  publicAPI.invokeInternalInteractionEvent = function () {\n    var methodName = publicAPI.getActiveInteraction();\n    var computeFocalPointOffset = methodName !== InteractionMethodsName.RotateLine;\n    var canUpdateFocalPoint = methodName === InteractionMethodsName.RotateLine;\n    publicAPI.invokeInteractionEvent({\n      computeFocalPointOffset: computeFocalPointOffset,\n      canUpdateFocalPoint: canUpdateFocalPoint\n    });\n  };\n  publicAPI.startInteraction = function () {\n    publicAPI.invokeStartInteractionEvent(); // When interacting, plane actor and lines must be re-rendered on other views\n\n    publicAPI.getViewWidgets().forEach(function (viewWidget) {\n      viewWidget.getInteractor().requestAnimation(publicAPI);\n    });\n  };\n  publicAPI.endInteraction = function () {\n    publicAPI.invokeEndInteractionEvent();\n    publicAPI.getViewWidgets().forEach(function (viewWidget) {\n      viewWidget.getInteractor().cancelAnimation(publicAPI);\n    });\n  };\n  publicAPI.translateCenterOnPlaneDirection = function (nbSteps) {\n    var dirProj = model.widgetState.getPlanes()[model.viewType].normal;\n    var oldCenter = model.widgetState.getCenter();\n    var image = model.widgetState.getImage();\n    var imageSpacing = image.getSpacing(); // Use Chebyshev norm\n    // https://math.stackexchange.com/questions/71423/what-is-the-term-for-the-projection-of-a-vector-onto-the-unit-cube\n\n    var absDirProj = dirProj.map(function (value) {\n      return Math.abs(value);\n    });\n    var index = absDirProj.indexOf(Math.max.apply(Math, _toConsumableArray(absDirProj)));\n    var movingFactor = nbSteps * imageSpacing[index] / Math.abs(dirProj[index]); // Define the potentially new center\n\n    var newCenter = [oldCenter[0] + movingFactor * dirProj[0], oldCenter[1] + movingFactor * dirProj[1], oldCenter[2] + movingFactor * dirProj[2]];\n    newCenter = publicAPI.getBoundedCenter(newCenter);\n    model.widgetState.setCenter(newCenter);\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n  };\n  publicAPI[InteractionMethodsName.TranslateAxis] = function (calldata) {\n    var _model$activeState$ge3, _model$activeState2, _model$activeState2$g, _model$activeState3, _model$activeState3$g;\n    var lineHandle = publicAPI.getActiveLineHandle();\n    var lineName = publicAPI.getActiveLineName();\n    var pointOnLine = add(lineHandle.getOrigin(), lineHandle.getDirection(), []);\n    var currentLineVector = lineHandle.getDirection();\n    normalize(currentLineVector); // Translate the current line along the other line\n\n    var otherLineHandle = publicAPI.getOtherLineHandle(lineName);\n    var center = model.widgetState.getCenter();\n    var manipulator = (_model$activeState$ge3 = (_model$activeState2 = model.activeState) === null || _model$activeState2 === void 0 ? void 0 : (_model$activeState2$g = _model$activeState2.getManipulator) === null || _model$activeState2$g === void 0 ? void 0 : _model$activeState2$g.call(_model$activeState2)) !== null && _model$activeState$ge3 !== void 0 ? _model$activeState$ge3 : model.manipulator;\n    var worldCoords = null;\n    var newOrigin = [];\n    if ((_model$activeState3 = model.activeState) !== null && _model$activeState3 !== void 0 && (_model$activeState3$g = _model$activeState3.getManipulator) !== null && _model$activeState3$g !== void 0 && _model$activeState3$g.call(_model$activeState3)) {\n      worldCoords = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow).worldCoords;\n      var translation = subtract(worldCoords, previousPosition, []);\n      add(center, translation, newOrigin);\n    } else if (otherLineHandle) {\n      var otherLineVector = otherLineHandle.getDirection();\n      normalize(otherLineVector);\n      var axisTranslation = otherLineVector;\n      var dot$1 = dot(currentLineVector, otherLineVector); // lines are colinear, translate along perpendicular axis from current line\n\n      if (dot$1 === 1 || dot$1 === -1) {\n        cross(currentLineVector, manipulator.getWidgetNormal(), axisTranslation);\n      }\n      var closestPoint = [];\n      worldCoords = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow).worldCoords;\n      vtkLine.distanceToLine(worldCoords, lineHandle.getOrigin(), pointOnLine, closestPoint);\n      var translationVector = subtract(worldCoords, closestPoint, []);\n      var translationDistance = dot(translationVector, axisTranslation);\n      newOrigin = multiplyAccumulate(center, axisTranslation, translationDistance, newOrigin);\n    }\n    newOrigin = publicAPI.getBoundedCenter(newOrigin);\n    model.widgetState.setCenter(newOrigin);\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n    previousPosition = worldCoords;\n  };\n  publicAPI.getBoundedCenter = function (newCenter) {\n    var oldCenter = model.widgetState.getCenter();\n    var imageBounds = model.widgetState.getImage().getBounds();\n    if (vtkBoundingBox.containsPoint.apply(vtkBoundingBox, [imageBounds].concat(_toConsumableArray(newCenter)))) {\n      return newCenter;\n    }\n    return boundPointOnPlane(newCenter, oldCenter, imageBounds);\n  };\n  publicAPI[InteractionMethodsName.TranslateCenter] = function (calldata) {\n    var _model$activeState$ge4, _model$activeState4, _model$activeState4$g;\n    var manipulator = (_model$activeState$ge4 = (_model$activeState4 = model.activeState) === null || _model$activeState4 === void 0 ? void 0 : (_model$activeState4$g = _model$activeState4.getManipulator) === null || _model$activeState4$g === void 0 ? void 0 : _model$activeState4$g.call(_model$activeState4)) !== null && _model$activeState$ge4 !== void 0 ? _model$activeState$ge4 : model.manipulator;\n    var _manipulator$handleEv2 = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow),\n      worldCoords = _manipulator$handleEv2.worldCoords;\n    var translation = subtract(worldCoords, previousPosition, []);\n    previousPosition = worldCoords;\n    var newCenter = add(model.widgetState.getCenter(), translation, []);\n    newCenter = publicAPI.getBoundedCenter(newCenter);\n    model.widgetState.setCenter(newCenter);\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n  };\n  publicAPI[InteractionMethodsName.RotateLine] = function (calldata) {\n    var _model$activeState$ge5, _model$activeState5, _model$activeState5$g;\n    var activeLineHandle = publicAPI.getActiveLineHandle();\n    var manipulator = (_model$activeState$ge5 = (_model$activeState5 = model.activeState) === null || _model$activeState5 === void 0 ? void 0 : (_model$activeState5$g = _model$activeState5.getManipulator) === null || _model$activeState5$g === void 0 ? void 0 : _model$activeState5$g.call(_model$activeState5)) !== null && _model$activeState$ge5 !== void 0 ? _model$activeState$ge5 : model.manipulator;\n    var planeNormal = manipulator.getWidgetNormal();\n    var _manipulator$handleEv3 = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow),\n      worldCoords = _manipulator$handleEv3.worldCoords;\n    if (!worldCoords || !worldCoords.length) {\n      return;\n    }\n    var center = model.widgetState.getCenter();\n    var currentVectorToOrigin = [0, 0, 0];\n    subtract(worldCoords, center, currentVectorToOrigin);\n    normalize(currentVectorToOrigin);\n    var previousLineDirection = activeLineHandle.getDirection();\n    normalize(previousLineDirection);\n    var activePointName = publicAPI.getActiveRotationPointName();\n    if (activePointName === 'point1' || !activePointName && dot(currentVectorToOrigin, previousLineDirection) < 0) {\n      multiplyScalar(previousLineDirection, -1);\n    }\n    var radianAngle = signedAngleBetweenVectors(previousLineDirection, currentVectorToOrigin, planeNormal);\n    publicAPI.rotateLineInView(publicAPI.getActiveLineName(), radianAngle);\n  };\n  /**\n   * Rotate a line by a specified angle\n   * @param {string} lineName The line name to rotate (e.g. YinX, ZinX, XinY, ZinY, XinZ, YinZ)\n   * @param {Number} radianAngle Applied angle in radian\n   */\n\n  publicAPI.rotateLineInView = function (lineName, radianAngle) {\n    var viewType = planeNameToViewType[getLinePlaneName(lineName)];\n    var inViewType = planeNameToViewType[getLineInPlaneName(lineName)];\n    var planeNormal = model.widgetState.getPlanes()[inViewType].normal;\n    publicAPI.rotatePlane(viewType, radianAngle, planeNormal);\n    if (publicAPI.getKeepOrthogonality()) {\n      var otherLineName = getOtherLineName(model.widgetState, lineName);\n      var otherPlaneName = getLinePlaneName(otherLineName);\n      publicAPI.rotatePlane(planeNameToViewType[otherPlaneName], radianAngle, planeNormal);\n    }\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n  };\n  /**\n   * Rotate a specified plane around an other specified plane.\n   * @param {ViewTypes} viewType Define which plane will be rotated\n   * @param {Number} radianAngle Applied angle in radian\n   * @param {vec3} planeNormal Define the axis to rotate around\n   */\n\n  publicAPI.rotatePlane = function (viewType, radianAngle, planeNormal) {\n    var _model$widgetState$ge = model.widgetState.getPlanes()[viewType],\n      normal = _model$widgetState$ge.normal,\n      viewUp = _model$widgetState$ge.viewUp;\n    var newNormal = rotateVector(normal, planeNormal, radianAngle);\n    var newViewUp = rotateVector(viewUp, planeNormal, radianAngle);\n    model.widgetState.getPlanes()[viewType] = {\n      normal: newNormal,\n      viewUp: newViewUp\n    };\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n}\n\nexport { widgetBehavior as default };","map":{"version":3,"names":["_toConsumableArray","_defineProperty","macro","vtkBoundingBox","vtkLine","k","add","l","normalize","s","subtract","d","dot","j","cross","m","multiplyAccumulate","w","multiplyScalar","S","signedAngleBetweenVectors","getLineNames","getOtherLineName","updateState","boundPointOnPlane","getLinePlaneName","getLineInPlaneName","rotateVector","InteractionMethodsName","ScrollingMethods","planeNameToViewType","widgetBehavior","publicAPI","model","_publicAPI$setCursorS","_isDragging","isScrolling","previousPosition","setGet","type","name","setCursorStyles","TranslateCenter","RotateLine","TranslateAxis","setEnableTranslation","enable","representations","setPickable","setEnableRotation","getActiveInteraction","widgetState","getStatesWithLabel","includes","activeState","getActiveLineName","find","lineName","getActiveLineHandle","_model$widgetState$","_model$widgetState","concat","call","getOtherLineHandle","_model$widgetState$2","_model$widgetState2","getActiveRotationPointName","startScrolling","newPosition","startInteraction","endScrolling","endInteraction","updateCursor","cursorStyles","getCursorStyles","_apiSpecificRenderWindow","setCursor","translateCenter","rotateLine","translateAxis","default","handleLeftButtonPress","callData","getActive","_model$activeState$ge","_model$activeState","_model$activeState$ge2","viewType","currentPlaneNormal","getPlanes","normal","manipulator","getManipulator","setWidgetOrigin","getCenter","setWidgetNormal","_manipulator$handleEv","handleEvent","worldCoords","getScrollingMethod","LEFT_MOUSE_BUTTON","position","VOID","EVENT_ABORT","handleMouseMove","y","step","translateCenterOnPlaneDirection","invokeInternalInteractionEvent","handleLeftButtonRelease","deactivate","handleRightButtonPress","calldata","RIGHT_MOUSE_BUTTON","handleRightButtonRelease","handleStartMouseWheel","handleMouseWheel","spinY","handleEndMouseWheel","handleMiddleButtonPress","MIDDLE_MOUSE_BUTTON","handleMiddleButtonRelease","methodName","computeFocalPointOffset","canUpdateFocalPoint","invokeInteractionEvent","invokeStartInteractionEvent","getViewWidgets","forEach","viewWidget","getInteractor","requestAnimation","invokeEndInteractionEvent","cancelAnimation","nbSteps","dirProj","oldCenter","image","getImage","imageSpacing","getSpacing","absDirProj","map","value","Math","abs","index","indexOf","max","apply","movingFactor","newCenter","getBoundedCenter","setCenter","_factory","getScaleInPixels","getRotationHandlePosition","_model$activeState$ge3","_model$activeState2","_model$activeState2$g","_model$activeState3","_model$activeState3$g","lineHandle","pointOnLine","getOrigin","getDirection","currentLineVector","otherLineHandle","center","newOrigin","translation","otherLineVector","axisTranslation","dot$1","getWidgetNormal","closestPoint","distanceToLine","translationVector","translationDistance","imageBounds","getBounds","containsPoint","_model$activeState$ge4","_model$activeState4","_model$activeState4$g","_manipulator$handleEv2","_model$activeState$ge5","_model$activeState5","_model$activeState5$g","activeLineHandle","planeNormal","_manipulator$handleEv3","length","currentVectorToOrigin","previousLineDirection","activePointName","radianAngle","rotateLineInView","inViewType","rotatePlane","getKeepOrthogonality","otherLineName","otherPlaneName","_model$widgetState$ge","viewUp","newNormal","newViewUp"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/ResliceCursorWidget/behavior.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../../macros.js';\nimport vtkBoundingBox from '../../../Common/DataModel/BoundingBox.js';\nimport vtkLine from '../../../Common/DataModel/Line.js';\nimport { k as add, l as normalize, s as subtract, d as dot, j as cross, m as multiplyAccumulate, w as multiplyScalar, S as signedAngleBetweenVectors } from '../../../Common/Core/Math/index.js';\nimport { getLineNames, getOtherLineName, updateState, boundPointOnPlane, getLinePlaneName, getLineInPlaneName, rotateVector } from './helpers.js';\nimport { InteractionMethodsName, ScrollingMethods, planeNameToViewType } from './Constants.js';\n\nfunction widgetBehavior(publicAPI, model) {\n  var _publicAPI$setCursorS;\n\n  model._isDragging = false;\n  var isScrolling = false;\n  var previousPosition;\n  macro.setGet(publicAPI, model, ['keepOrthogonality', {\n    type: 'object',\n    name: 'cursorStyles'\n  }]); // Set default value for cursorStyles\n\n  publicAPI.setCursorStyles((_publicAPI$setCursorS = {}, _defineProperty(_publicAPI$setCursorS, InteractionMethodsName.TranslateCenter, 'move'), _defineProperty(_publicAPI$setCursorS, InteractionMethodsName.RotateLine, 'alias'), _defineProperty(_publicAPI$setCursorS, InteractionMethodsName.TranslateAxis, 'pointer'), _defineProperty(_publicAPI$setCursorS, \"default\", 'default'), _publicAPI$setCursorS));\n\n  publicAPI.setEnableTranslation = function (enable) {\n    model.representations[0].setPickable(enable); // line handle\n\n    model.representations[2].setPickable(enable); // center handle\n  };\n\n  publicAPI.setEnableRotation = function (enable) {\n    model.representations[1].setPickable(enable); // rotation handle\n  }; // FIXME: label information should be accessible from activeState instead of parent state.\n\n\n  publicAPI.getActiveInteraction = function () {\n    if (model.widgetState.getStatesWithLabel('rotation').includes(model.activeState)) {\n      return InteractionMethodsName.RotateLine;\n    }\n\n    if (model.widgetState.getStatesWithLabel('line').includes(model.activeState)) {\n      return InteractionMethodsName.TranslateAxis;\n    }\n\n    if (model.widgetState.getStatesWithLabel('center').includes(model.activeState)) {\n      return InteractionMethodsName.TranslateCenter;\n    }\n\n    return null;\n  };\n  /**\n   * ActiveState can be RotationHandle or a LineHandle\n   * @returns 'YinX', 'ZinX', 'XinY', 'ZinY', 'XinZ' or 'YinZ'\n   */\n\n\n  publicAPI.getActiveLineName = function () {\n    return getLineNames(model.widgetState).find(function (lineName) {\n      return model.widgetState.getStatesWithLabel(lineName).includes(model.activeState);\n    });\n  }; // FIXME: label information should be accessible from activeState instead of parent state.\n\n\n  publicAPI.getActiveLineHandle = function () {\n    var _model$widgetState$, _model$widgetState;\n\n    return (_model$widgetState$ = (_model$widgetState = model.widgetState)[\"getAxis\".concat(publicAPI.getActiveLineName())]) === null || _model$widgetState$ === void 0 ? void 0 : _model$widgetState$.call(_model$widgetState);\n  };\n  /**\n   * Return the line handle of the other line in the same view.\n   * @param {string} lineName name of the line (YinX, ZinX, XinY, ZinY, XinZ, YinZ)\n   * @returns ZinX if lineName == YinX, YinX if lineName == ZinX, ZinY if lineName == XinY...\n   */\n\n\n  publicAPI.getOtherLineHandle = function (lineName) {\n    var _model$widgetState$2, _model$widgetState2;\n\n    return (_model$widgetState$2 = (_model$widgetState2 = model.widgetState)[\"getAxis\".concat(getOtherLineName(model.widgetState, lineName))]) === null || _model$widgetState$2 === void 0 ? void 0 : _model$widgetState$2.call(_model$widgetState2);\n  }; // FIXME: label information should be accessible from activeState instead of parent state.\n\n  /**\n   * There are 2 rotation handles per axis: 'point0' and 'point1'.\n   * This function returns which rotation handle (point0 or point1) is currently active.\n   * ActiveState must be a RotationHandle.\n   * @returns 'point0', 'point1' or null if no point is active (e.g. line is being rotated)\n   */\n\n\n  publicAPI.getActiveRotationPointName = function () {\n    if (model.widgetState.getStatesWithLabel('point0').includes(model.activeState)) {\n      return 'point0';\n    }\n\n    if (model.widgetState.getStatesWithLabel('point1').includes(model.activeState)) {\n      return 'point1';\n    }\n\n    return null;\n  };\n\n  publicAPI.startScrolling = function (newPosition) {\n    if (newPosition) {\n      previousPosition = newPosition;\n    }\n\n    isScrolling = true;\n    publicAPI.startInteraction();\n  };\n\n  publicAPI.endScrolling = function () {\n    isScrolling = false;\n    publicAPI.endInteraction();\n  };\n\n  publicAPI.updateCursor = function () {\n    var cursorStyles = publicAPI.getCursorStyles();\n\n    if (cursorStyles) {\n      switch (publicAPI.getActiveInteraction()) {\n        case InteractionMethodsName.TranslateCenter:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.translateCenter);\n\n          break;\n\n        case InteractionMethodsName.RotateLine:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.rotateLine);\n\n          break;\n\n        case InteractionMethodsName.TranslateAxis:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.translateAxis);\n\n          break;\n\n        default:\n          model._apiSpecificRenderWindow.setCursor(cursorStyles.default);\n\n          break;\n      }\n    }\n  };\n\n  publicAPI.handleLeftButtonPress = function (callData) {\n    if (model.activeState && model.activeState.getActive()) {\n      var _model$activeState$ge, _model$activeState, _model$activeState$ge2;\n\n      model._isDragging = true;\n      var viewType = model.viewType;\n      var currentPlaneNormal = model.widgetState.getPlanes()[viewType].normal;\n      var manipulator = (_model$activeState$ge = (_model$activeState = model.activeState) === null || _model$activeState === void 0 ? void 0 : (_model$activeState$ge2 = _model$activeState.getManipulator) === null || _model$activeState$ge2 === void 0 ? void 0 : _model$activeState$ge2.call(_model$activeState)) !== null && _model$activeState$ge !== void 0 ? _model$activeState$ge : model.manipulator;\n      manipulator.setWidgetOrigin(model.widgetState.getCenter());\n      manipulator.setWidgetNormal(currentPlaneNormal);\n\n      var _manipulator$handleEv = manipulator.handleEvent(callData, model._apiSpecificRenderWindow),\n          worldCoords = _manipulator$handleEv.worldCoords;\n\n      previousPosition = worldCoords;\n      publicAPI.startInteraction();\n    } else if (model.widgetState.getScrollingMethod() === ScrollingMethods.LEFT_MOUSE_BUTTON) {\n      publicAPI.startScrolling(callData.position);\n    } else {\n      return macro.VOID;\n    }\n\n    return macro.EVENT_ABORT;\n  };\n\n  publicAPI.handleMouseMove = function (callData) {\n    if (model._isDragging) {\n      return publicAPI.handleEvent(callData);\n    }\n\n    if (isScrolling) {\n      if (previousPosition.y !== callData.position.y) {\n        var step = previousPosition.y - callData.position.y;\n        publicAPI.translateCenterOnPlaneDirection(step);\n        previousPosition = callData.position;\n        publicAPI.invokeInternalInteractionEvent();\n      }\n    }\n\n    return macro.VOID;\n  };\n\n  publicAPI.handleLeftButtonRelease = function () {\n    if (model._isDragging || isScrolling) {\n      publicAPI.endScrolling();\n    }\n\n    model._isDragging = false;\n    model.widgetState.deactivate();\n  };\n\n  publicAPI.handleRightButtonPress = function (calldata) {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.RIGHT_MOUSE_BUTTON) {\n      publicAPI.startScrolling(calldata.position);\n    }\n  };\n\n  publicAPI.handleRightButtonRelease = function () {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.RIGHT_MOUSE_BUTTON) {\n      publicAPI.endScrolling();\n    }\n  };\n\n  publicAPI.handleStartMouseWheel = function () {\n    publicAPI.startInteraction();\n  };\n\n  publicAPI.handleMouseWheel = function (calldata) {\n    var step = calldata.spinY;\n    isScrolling = true;\n    publicAPI.translateCenterOnPlaneDirection(step);\n    publicAPI.invokeInternalInteractionEvent();\n    isScrolling = false;\n    return macro.EVENT_ABORT;\n  };\n\n  publicAPI.handleEndMouseWheel = function () {\n    publicAPI.endScrolling();\n  };\n\n  publicAPI.handleMiddleButtonPress = function (calldata) {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.MIDDLE_MOUSE_BUTTON) {\n      publicAPI.startScrolling(calldata.position);\n    }\n  };\n\n  publicAPI.handleMiddleButtonRelease = function () {\n    if (model.widgetState.getScrollingMethod() === ScrollingMethods.MIDDLE_MOUSE_BUTTON) {\n      publicAPI.endScrolling();\n    }\n  };\n\n  publicAPI.handleEvent = function (callData) {\n    if (model.activeState.getActive()) {\n      publicAPI[publicAPI.getActiveInteraction()](callData);\n      publicAPI.invokeInternalInteractionEvent();\n      return macro.EVENT_ABORT;\n    }\n\n    return macro.VOID;\n  };\n\n  publicAPI.invokeInternalInteractionEvent = function () {\n    var methodName = publicAPI.getActiveInteraction();\n    var computeFocalPointOffset = methodName !== InteractionMethodsName.RotateLine;\n    var canUpdateFocalPoint = methodName === InteractionMethodsName.RotateLine;\n    publicAPI.invokeInteractionEvent({\n      computeFocalPointOffset: computeFocalPointOffset,\n      canUpdateFocalPoint: canUpdateFocalPoint\n    });\n  };\n\n  publicAPI.startInteraction = function () {\n    publicAPI.invokeStartInteractionEvent(); // When interacting, plane actor and lines must be re-rendered on other views\n\n    publicAPI.getViewWidgets().forEach(function (viewWidget) {\n      viewWidget.getInteractor().requestAnimation(publicAPI);\n    });\n  };\n\n  publicAPI.endInteraction = function () {\n    publicAPI.invokeEndInteractionEvent();\n    publicAPI.getViewWidgets().forEach(function (viewWidget) {\n      viewWidget.getInteractor().cancelAnimation(publicAPI);\n    });\n  };\n\n  publicAPI.translateCenterOnPlaneDirection = function (nbSteps) {\n    var dirProj = model.widgetState.getPlanes()[model.viewType].normal;\n    var oldCenter = model.widgetState.getCenter();\n    var image = model.widgetState.getImage();\n    var imageSpacing = image.getSpacing(); // Use Chebyshev norm\n    // https://math.stackexchange.com/questions/71423/what-is-the-term-for-the-projection-of-a-vector-onto-the-unit-cube\n\n    var absDirProj = dirProj.map(function (value) {\n      return Math.abs(value);\n    });\n    var index = absDirProj.indexOf(Math.max.apply(Math, _toConsumableArray(absDirProj)));\n    var movingFactor = nbSteps * imageSpacing[index] / Math.abs(dirProj[index]); // Define the potentially new center\n\n    var newCenter = [oldCenter[0] + movingFactor * dirProj[0], oldCenter[1] + movingFactor * dirProj[1], oldCenter[2] + movingFactor * dirProj[2]];\n    newCenter = publicAPI.getBoundedCenter(newCenter);\n    model.widgetState.setCenter(newCenter);\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n  };\n\n  publicAPI[InteractionMethodsName.TranslateAxis] = function (calldata) {\n    var _model$activeState$ge3, _model$activeState2, _model$activeState2$g, _model$activeState3, _model$activeState3$g;\n\n    var lineHandle = publicAPI.getActiveLineHandle();\n    var lineName = publicAPI.getActiveLineName();\n    var pointOnLine = add(lineHandle.getOrigin(), lineHandle.getDirection(), []);\n    var currentLineVector = lineHandle.getDirection();\n    normalize(currentLineVector); // Translate the current line along the other line\n\n    var otherLineHandle = publicAPI.getOtherLineHandle(lineName);\n    var center = model.widgetState.getCenter();\n    var manipulator = (_model$activeState$ge3 = (_model$activeState2 = model.activeState) === null || _model$activeState2 === void 0 ? void 0 : (_model$activeState2$g = _model$activeState2.getManipulator) === null || _model$activeState2$g === void 0 ? void 0 : _model$activeState2$g.call(_model$activeState2)) !== null && _model$activeState$ge3 !== void 0 ? _model$activeState$ge3 : model.manipulator;\n    var worldCoords = null;\n    var newOrigin = [];\n\n    if ((_model$activeState3 = model.activeState) !== null && _model$activeState3 !== void 0 && (_model$activeState3$g = _model$activeState3.getManipulator) !== null && _model$activeState3$g !== void 0 && _model$activeState3$g.call(_model$activeState3)) {\n      worldCoords = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow).worldCoords;\n      var translation = subtract(worldCoords, previousPosition, []);\n      add(center, translation, newOrigin);\n    } else if (otherLineHandle) {\n      var otherLineVector = otherLineHandle.getDirection();\n      normalize(otherLineVector);\n      var axisTranslation = otherLineVector;\n      var dot$1 = dot(currentLineVector, otherLineVector); // lines are colinear, translate along perpendicular axis from current line\n\n      if (dot$1 === 1 || dot$1 === -1) {\n        cross(currentLineVector, manipulator.getWidgetNormal(), axisTranslation);\n      }\n\n      var closestPoint = [];\n      worldCoords = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow).worldCoords;\n      vtkLine.distanceToLine(worldCoords, lineHandle.getOrigin(), pointOnLine, closestPoint);\n      var translationVector = subtract(worldCoords, closestPoint, []);\n      var translationDistance = dot(translationVector, axisTranslation);\n      newOrigin = multiplyAccumulate(center, axisTranslation, translationDistance, newOrigin);\n    }\n\n    newOrigin = publicAPI.getBoundedCenter(newOrigin);\n    model.widgetState.setCenter(newOrigin);\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n    previousPosition = worldCoords;\n  };\n\n  publicAPI.getBoundedCenter = function (newCenter) {\n    var oldCenter = model.widgetState.getCenter();\n    var imageBounds = model.widgetState.getImage().getBounds();\n\n    if (vtkBoundingBox.containsPoint.apply(vtkBoundingBox, [imageBounds].concat(_toConsumableArray(newCenter)))) {\n      return newCenter;\n    }\n\n    return boundPointOnPlane(newCenter, oldCenter, imageBounds);\n  };\n\n  publicAPI[InteractionMethodsName.TranslateCenter] = function (calldata) {\n    var _model$activeState$ge4, _model$activeState4, _model$activeState4$g;\n\n    var manipulator = (_model$activeState$ge4 = (_model$activeState4 = model.activeState) === null || _model$activeState4 === void 0 ? void 0 : (_model$activeState4$g = _model$activeState4.getManipulator) === null || _model$activeState4$g === void 0 ? void 0 : _model$activeState4$g.call(_model$activeState4)) !== null && _model$activeState$ge4 !== void 0 ? _model$activeState$ge4 : model.manipulator;\n\n    var _manipulator$handleEv2 = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow),\n        worldCoords = _manipulator$handleEv2.worldCoords;\n\n    var translation = subtract(worldCoords, previousPosition, []);\n    previousPosition = worldCoords;\n    var newCenter = add(model.widgetState.getCenter(), translation, []);\n    newCenter = publicAPI.getBoundedCenter(newCenter);\n    model.widgetState.setCenter(newCenter);\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n  };\n\n  publicAPI[InteractionMethodsName.RotateLine] = function (calldata) {\n    var _model$activeState$ge5, _model$activeState5, _model$activeState5$g;\n\n    var activeLineHandle = publicAPI.getActiveLineHandle();\n    var manipulator = (_model$activeState$ge5 = (_model$activeState5 = model.activeState) === null || _model$activeState5 === void 0 ? void 0 : (_model$activeState5$g = _model$activeState5.getManipulator) === null || _model$activeState5$g === void 0 ? void 0 : _model$activeState5$g.call(_model$activeState5)) !== null && _model$activeState$ge5 !== void 0 ? _model$activeState$ge5 : model.manipulator;\n    var planeNormal = manipulator.getWidgetNormal();\n\n    var _manipulator$handleEv3 = manipulator.handleEvent(calldata, model._apiSpecificRenderWindow),\n        worldCoords = _manipulator$handleEv3.worldCoords;\n\n    if (!worldCoords || !worldCoords.length) {\n      return;\n    }\n\n    var center = model.widgetState.getCenter();\n    var currentVectorToOrigin = [0, 0, 0];\n    subtract(worldCoords, center, currentVectorToOrigin);\n    normalize(currentVectorToOrigin);\n    var previousLineDirection = activeLineHandle.getDirection();\n    normalize(previousLineDirection);\n    var activePointName = publicAPI.getActiveRotationPointName();\n\n    if (activePointName === 'point1' || !activePointName && dot(currentVectorToOrigin, previousLineDirection) < 0) {\n      multiplyScalar(previousLineDirection, -1);\n    }\n\n    var radianAngle = signedAngleBetweenVectors(previousLineDirection, currentVectorToOrigin, planeNormal);\n    publicAPI.rotateLineInView(publicAPI.getActiveLineName(), radianAngle);\n  };\n  /**\n   * Rotate a line by a specified angle\n   * @param {string} lineName The line name to rotate (e.g. YinX, ZinX, XinY, ZinY, XinZ, YinZ)\n   * @param {Number} radianAngle Applied angle in radian\n   */\n\n\n  publicAPI.rotateLineInView = function (lineName, radianAngle) {\n    var viewType = planeNameToViewType[getLinePlaneName(lineName)];\n    var inViewType = planeNameToViewType[getLineInPlaneName(lineName)];\n    var planeNormal = model.widgetState.getPlanes()[inViewType].normal;\n    publicAPI.rotatePlane(viewType, radianAngle, planeNormal);\n\n    if (publicAPI.getKeepOrthogonality()) {\n      var otherLineName = getOtherLineName(model.widgetState, lineName);\n      var otherPlaneName = getLinePlaneName(otherLineName);\n      publicAPI.rotatePlane(planeNameToViewType[otherPlaneName], radianAngle, planeNormal);\n    }\n\n    updateState(model.widgetState, model._factory.getScaleInPixels(), model._factory.getRotationHandlePosition());\n  };\n  /**\n   * Rotate a specified plane around an other specified plane.\n   * @param {ViewTypes} viewType Define which plane will be rotated\n   * @param {Number} radianAngle Applied angle in radian\n   * @param {vec3} planeNormal Define the axis to rotate around\n   */\n\n\n  publicAPI.rotatePlane = function (viewType, radianAngle, planeNormal) {\n    var _model$widgetState$ge = model.widgetState.getPlanes()[viewType],\n        normal = _model$widgetState$ge.normal,\n        viewUp = _model$widgetState$ge.viewUp;\n    var newNormal = rotateVector(normal, planeNormal, radianAngle);\n    var newViewUp = rotateVector(viewUp, planeNormal, radianAngle);\n    model.widgetState.getPlanes()[viewType] = {\n      normal: newNormal,\n      viewUp: newViewUp\n    };\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n}\n\nexport { widgetBehavior as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}