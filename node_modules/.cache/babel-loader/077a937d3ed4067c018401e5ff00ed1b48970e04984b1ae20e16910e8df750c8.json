{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport { mat4, vec4, vec3, quat } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport { r as radiansFromDegrees, k as add, j as cross } from '../../Common/Core/Math/index.js';\nvar vtkDebugMacro = macro.vtkDebugMacro;\n/* eslint-disable new-cap */\n\n/*\n * Convenience function to access elements of a gl-matrix.  If it turns\n * out I have rows and columns swapped everywhere, then I'll just change\n * the order of 'row' and 'col' parameters in this function\n */\n// function getMatrixElement(matrix, row, col) {\n//   const idx = (row * 4) + col;\n//   return matrix[idx];\n// }\n// ----------------------------------------------------------------------------\n// vtkCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCamera'); // Set up private variables and methods\n\n  var origin = new Float64Array(3);\n  var dopbasis = new Float64Array([0.0, 0.0, -1.0]);\n  var upbasis = new Float64Array([0.0, 1.0, 0.0]);\n  var tmpMatrix = mat4.identity(new Float64Array(16));\n  var tmpMatrix2 = mat4.identity(new Float64Array(16));\n  var tmpvec1 = new Float64Array(3);\n  var tmpvec2 = new Float64Array(3);\n  var tmpvec3 = new Float64Array(3);\n  var rotateMatrix = mat4.identity(new Float64Array(16));\n  var trans = mat4.identity(new Float64Array(16));\n  var newPosition = new Float64Array(3);\n  var newFocalPoint = new Float64Array(3); // Internal Functions that don't need to be public\n\n  function computeViewPlaneNormal() {\n    // VPN is -DOP\n    model.viewPlaneNormal[0] = -model.directionOfProjection[0];\n    model.viewPlaneNormal[1] = -model.directionOfProjection[1];\n    model.viewPlaneNormal[2] = -model.directionOfProjection[2];\n  }\n  publicAPI.orthogonalizeViewUp = function () {\n    var vt = publicAPI.getViewMatrix();\n    model.viewUp[0] = vt[4];\n    model.viewUp[1] = vt[5];\n    model.viewUp[2] = vt[6];\n    publicAPI.modified();\n  };\n  publicAPI.setPosition = function (x, y, z) {\n    if (x === model.position[0] && y === model.position[1] && z === model.position[2]) {\n      return;\n    }\n    model.position[0] = x;\n    model.position[1] = y;\n    model.position[2] = z; // recompute the focal distance\n\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n  publicAPI.setFocalPoint = function (x, y, z) {\n    if (x === model.focalPoint[0] && y === model.focalPoint[1] && z === model.focalPoint[2]) {\n      return;\n    }\n    model.focalPoint[0] = x;\n    model.focalPoint[1] = y;\n    model.focalPoint[2] = z; // recompute the focal distance\n\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n  publicAPI.setDistance = function (d) {\n    if (model.distance === d) {\n      return;\n    }\n    model.distance = d;\n    if (model.distance < 1e-20) {\n      model.distance = 1e-20;\n      vtkDebugMacro('Distance is set to minimum.');\n    } // we want to keep the camera pointing in the same direction\n\n    var vec = model.directionOfProjection; // recalculate FocalPoint\n\n    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    publicAPI.modified();\n  }; //----------------------------------------------------------------------------\n  // This method must be called when the focal point or camera position changes\n\n  publicAPI.computeDistance = function () {\n    var dx = model.focalPoint[0] - model.position[0];\n    var dy = model.focalPoint[1] - model.position[1];\n    var dz = model.focalPoint[2] - model.position[2];\n    model.distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n    if (model.distance < 1e-20) {\n      model.distance = 1e-20;\n      vtkDebugMacro('Distance is set to minimum.');\n      var vec = model.directionOfProjection; // recalculate FocalPoint\n\n      model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n      model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n      model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    }\n    model.directionOfProjection[0] = dx / model.distance;\n    model.directionOfProjection[1] = dy / model.distance;\n    model.directionOfProjection[2] = dz / model.distance;\n    computeViewPlaneNormal();\n  }; //----------------------------------------------------------------------------\n  // Move the position of the camera along the view plane normal. Moving\n  // towards the focal point (e.g., > 1) is a dolly-in, moving away\n  // from the focal point (e.g., < 1) is a dolly-out.\n\n  publicAPI.dolly = function (amount) {\n    if (amount <= 0.0) {\n      return;\n    } // dolly moves the camera towards the focus\n\n    var d = model.distance / amount;\n    publicAPI.setPosition(model.focalPoint[0] - d * model.directionOfProjection[0], model.focalPoint[1] - d * model.directionOfProjection[1], model.focalPoint[2] - d * model.directionOfProjection[2]);\n  };\n  publicAPI.roll = function (angle) {\n    var eye = model.position;\n    var at = model.focalPoint;\n    var up = model.viewUp;\n    var viewUpVec4 = new Float64Array([up[0], up[1], up[2], 0.0]);\n    mat4.identity(rotateMatrix);\n    var viewDir = new Float64Array([at[0] - eye[0], at[1] - eye[1], at[2] - eye[2]]);\n    mat4.rotate(rotateMatrix, rotateMatrix, radiansFromDegrees(angle), viewDir);\n    vec4.transformMat4(viewUpVec4, viewUpVec4, rotateMatrix);\n    model.viewUp[0] = viewUpVec4[0];\n    model.viewUp[1] = viewUpVec4[1];\n    model.viewUp[2] = viewUpVec4[2];\n    publicAPI.modified();\n  };\n  publicAPI.azimuth = function (angle) {\n    var fp = model.focalPoint;\n    mat4.identity(trans); // translate the focal point to the origin,\n    // rotate about view up,\n    // translate back again\n\n    mat4.translate(trans, trans, fp);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);\n    mat4.translate(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position\n\n    vec3.transformMat4(newPosition, model.position, trans);\n    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);\n  };\n  publicAPI.yaw = function (angle) {\n    var position = model.position;\n    mat4.identity(trans); // translate the camera to the origin,\n    // rotate about axis,\n    // translate back again\n\n    mat4.translate(trans, trans, position);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);\n    mat4.translate(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the position\n\n    vec3.transformMat4(newFocalPoint, model.focalPoint, trans);\n    publicAPI.setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);\n  };\n  publicAPI.elevation = function (angle) {\n    var fp = model.focalPoint; // get the eye / camera position from the viewMatrix\n\n    var vt = publicAPI.getViewMatrix();\n    var axis = [-vt[0], -vt[1], -vt[2]];\n    mat4.identity(trans); // translate the focal point to the origin,\n    // rotate about view up,\n    // translate back again\n\n    mat4.translate(trans, trans, fp);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), axis);\n    mat4.translate(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position\n\n    vec3.transformMat4(newPosition, model.position, trans);\n    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);\n  };\n  publicAPI.pitch = function (angle) {\n    var position = model.position;\n    var vt = publicAPI.getViewMatrix();\n    var axis = [vt[0], vt[1], vt[2]];\n    mat4.identity(trans); // translate the camera to the origin,\n    // rotate about axis,\n    // translate back again\n\n    mat4.translate(trans, trans, position);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), axis);\n    mat4.translate(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the focal point\n\n    vec3.transformMat4(newFocalPoint, model.focalPoint, trans);\n    publicAPI.setFocalPoint.apply(publicAPI, _toConsumableArray(newFocalPoint));\n  };\n  publicAPI.zoom = function (factor) {\n    if (factor <= 0) {\n      return;\n    }\n    if (model.parallelProjection) {\n      model.parallelScale /= factor;\n    } else {\n      model.viewAngle /= factor;\n    }\n    publicAPI.modified();\n  };\n  publicAPI.translate = function (x, y, z) {\n    var offset = [x, y, z];\n    add(model.position, offset, model.position);\n    add(model.focalPoint, offset, model.focalPoint);\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n  publicAPI.applyTransform = function (transformMat4) {\n    var vuOld = [].concat(_toConsumableArray(model.viewUp), [1.0]);\n    var posNew = [];\n    var fpNew = [];\n    var vuNew = [];\n    vuOld[0] += model.position[0];\n    vuOld[1] += model.position[1];\n    vuOld[2] += model.position[2];\n    vec4.transformMat4(posNew, [].concat(_toConsumableArray(model.position), [1.0]), transformMat4);\n    vec4.transformMat4(fpNew, [].concat(_toConsumableArray(model.focalPoint), [1.0]), transformMat4);\n    vec4.transformMat4(vuNew, vuOld, transformMat4);\n    vuNew[0] -= posNew[0];\n    vuNew[1] -= posNew[1];\n    vuNew[2] -= posNew[2];\n    publicAPI.setPosition.apply(publicAPI, _toConsumableArray(posNew.slice(0, 3)));\n    publicAPI.setFocalPoint.apply(publicAPI, _toConsumableArray(fpNew.slice(0, 3)));\n    publicAPI.setViewUp.apply(publicAPI, _toConsumableArray(vuNew.slice(0, 3)));\n  };\n  publicAPI.getThickness = function () {\n    return model.clippingRange[1] - model.clippingRange[0];\n  };\n  publicAPI.setThickness = function (thickness) {\n    var t = thickness;\n    if (t < 1e-20) {\n      t = 1e-20;\n      vtkDebugMacro('Thickness is set to minimum.');\n    }\n    publicAPI.setClippingRange(model.clippingRange[0], model.clippingRange[0] + t);\n  };\n  publicAPI.setThicknessFromFocalPoint = function (thickness) {\n    var t = thickness;\n    if (t < 1e-20) {\n      t = 1e-20;\n      vtkDebugMacro('Thickness is set to minimum.');\n    }\n    publicAPI.setClippingRange(model.distance - t / 2, model.distance + t / 2);\n  }; // Unimplemented functions\n\n  publicAPI.setRoll = function (angle) {}; // dependency on GetOrientation() and a model.ViewTransform object, see https://github.com/Kitware/VTK/blob/master/Common/Transforms/vtkTransform.cxx and https://vtk.org/doc/nightly/html/classvtkTransform.html\n\n  publicAPI.getRoll = function () {};\n  publicAPI.setObliqueAngles = function (alpha, beta) {};\n  publicAPI.getOrientation = function () {};\n  publicAPI.getOrientationWXYZ = function () {};\n  publicAPI.getFrustumPlanes = function (aspect) {// Return array of 24 params (4 params for each of 6 plane equations)\n  };\n  publicAPI.getCameraLightTransformMatrix = function (matrix) {\n    mat4.copy(matrix, model.cameraLightTransform);\n    return matrix;\n  };\n  publicAPI.computeCameraLightTransform = function () {\n    // not sure if this is the correct transformation, based on the same funciton in VTK\n    mat4.copy(tmpMatrix, publicAPI.getViewMatrix());\n    mat4.invert(tmpMatrix, tmpMatrix);\n    mat4.fromScaling(tmpMatrix2, [model.distance, model.distance, model.distance]);\n    mat4.multiply(tmpMatrix, tmpMatrix, tmpMatrix2);\n    mat4.identity(model.cameraLightTransform);\n    mat4.translate(model.cameraLightTransform, tmpMatrix, [0.0, 0.0, -1.0]);\n  };\n  publicAPI.deepCopy = function (sourceCamera) {};\n  publicAPI.physicalOrientationToWorldDirection = function (ori) {\n    // push the x axis through the orientation quat\n    var oriq = quat.fromValues(ori[0], ori[1], ori[2], ori[3]);\n    var coriq = quat.create();\n    var qdir = quat.fromValues(0.0, 0.0, 1.0, 0.0);\n    quat.conjugate(coriq, oriq); // rotate the z axis by the quat\n\n    quat.multiply(qdir, oriq, qdir);\n    quat.multiply(qdir, qdir, coriq); // return the z axis in world coords\n\n    return [qdir[0], qdir[1], qdir[2]];\n  };\n  publicAPI.getPhysicalToWorldMatrix = function (result) {\n    publicAPI.getWorldToPhysicalMatrix(result);\n    mat4.invert(result, result);\n  };\n  publicAPI.getWorldToPhysicalMatrix = function (result) {\n    mat4.identity(result); // now the physical to vtk world rotation tform\n\n    var physVRight = [3];\n    cross(model.physicalViewNorth, model.physicalViewUp, physVRight);\n    result[0] = physVRight[0];\n    result[1] = physVRight[1];\n    result[2] = physVRight[2];\n    result[4] = model.physicalViewUp[0];\n    result[5] = model.physicalViewUp[1];\n    result[6] = model.physicalViewUp[2];\n    result[8] = -model.physicalViewNorth[0];\n    result[9] = -model.physicalViewNorth[1];\n    result[10] = -model.physicalViewNorth[2];\n    mat4.transpose(result, result);\n    vec3.set(tmpvec1, 1 / model.physicalScale, 1 / model.physicalScale, 1 / model.physicalScale);\n    mat4.scale(result, result, tmpvec1);\n    mat4.translate(result, result, model.physicalTranslation);\n  };\n  publicAPI.computeViewParametersFromViewMatrix = function (vmat) {\n    // invert to get view to world\n    mat4.invert(tmpMatrix, vmat); // note with glmatrix operations happen in\n    // the reverse order\n    // mat.scale\n    // mat.translate\n    // will result in the translation then the scale\n    // mat.mult(a,b)\n    // results in perform the B transformation then A\n    // then extract the params position, orientation\n    // push 0,0,0 through to get a translation\n\n    vec3.transformMat4(tmpvec1, origin, tmpMatrix);\n    publicAPI.computeDistance();\n    var oldDist = model.distance;\n    publicAPI.setPosition(tmpvec1[0], tmpvec1[1], tmpvec1[2]); // push basis vectors to get orientation\n\n    vec3.transformMat4(tmpvec2, dopbasis, tmpMatrix);\n    vec3.subtract(tmpvec2, tmpvec2, tmpvec1);\n    vec3.normalize(tmpvec2, tmpvec2);\n    publicAPI.setDirectionOfProjection(tmpvec2[0], tmpvec2[1], tmpvec2[2]);\n    vec3.transformMat4(tmpvec3, upbasis, tmpMatrix);\n    vec3.subtract(tmpvec3, tmpvec3, tmpvec1);\n    vec3.normalize(tmpvec3, tmpvec3);\n    publicAPI.setViewUp(tmpvec3[0], tmpvec3[1], tmpvec3[2]);\n    publicAPI.setDistance(oldDist);\n  }; // the provided matrix should include\n  // translation and orientation only\n  // mat is physical to view\n\n  publicAPI.computeViewParametersFromPhysicalMatrix = function (mat) {\n    // get the WorldToPhysicalMatrix\n    publicAPI.getWorldToPhysicalMatrix(tmpMatrix); // first convert the physical -> view matrix to be\n    // world -> view\n\n    mat4.multiply(tmpMatrix, mat, tmpMatrix);\n    publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);\n  };\n  publicAPI.setViewMatrix = function (mat) {\n    model.viewMatrix = mat;\n    if (model.viewMatrix) {\n      mat4.copy(tmpMatrix, model.viewMatrix);\n      publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);\n      mat4.transpose(model.viewMatrix, model.viewMatrix);\n    }\n  };\n  publicAPI.getViewMatrix = function () {\n    if (model.viewMatrix) {\n      return model.viewMatrix;\n    }\n    mat4.lookAt(tmpMatrix, model.position,\n    // eye\n    model.focalPoint,\n    // at\n    model.viewUp // up\n    );\n\n    mat4.transpose(tmpMatrix, tmpMatrix);\n    var result = new Float64Array(16);\n    mat4.copy(result, tmpMatrix);\n    return result;\n  };\n  publicAPI.setProjectionMatrix = function (mat) {\n    model.projectionMatrix = mat;\n  };\n  publicAPI.getProjectionMatrix = function (aspect, nearz, farz) {\n    var result = new Float64Array(16);\n    mat4.identity(result);\n    if (model.projectionMatrix) {\n      var scale = 1 / model.physicalScale;\n      vec3.set(tmpvec1, scale, scale, scale);\n      mat4.copy(result, model.projectionMatrix);\n      mat4.scale(result, result, tmpvec1);\n      mat4.transpose(result, result);\n      return result;\n    }\n    mat4.identity(tmpMatrix); // FIXME: Not sure what to do about adjust z buffer here\n    // adjust Z-buffer range\n    // this->ProjectionTransform->AdjustZBuffer( -1, +1, nearz, farz );\n\n    var cWidth = model.clippingRange[1] - model.clippingRange[0];\n    var cRange = [model.clippingRange[0] + (nearz + 1) * cWidth / 2.0, model.clippingRange[0] + (farz + 1) * cWidth / 2.0];\n    if (model.parallelProjection) {\n      // set up a rectangular parallelipiped\n      var width = model.parallelScale * aspect;\n      var height = model.parallelScale;\n      var xmin = (model.windowCenter[0] - 1.0) * width;\n      var xmax = (model.windowCenter[0] + 1.0) * width;\n      var ymin = (model.windowCenter[1] - 1.0) * height;\n      var ymax = (model.windowCenter[1] + 1.0) * height;\n      mat4.ortho(tmpMatrix, xmin, xmax, ymin, ymax, cRange[0], cRange[1]);\n      mat4.transpose(tmpMatrix, tmpMatrix);\n    } else if (model.useOffAxisProjection) {\n      throw new Error('Off-Axis projection is not supported at this time');\n    } else {\n      var tmp = Math.tan(radiansFromDegrees(model.viewAngle) / 2.0);\n      var _width;\n      var _height;\n      if (model.useHorizontalViewAngle === true) {\n        _width = model.clippingRange[0] * tmp;\n        _height = model.clippingRange[0] * tmp / aspect;\n      } else {\n        _width = model.clippingRange[0] * tmp * aspect;\n        _height = model.clippingRange[0] * tmp;\n      }\n      var _xmin = (model.windowCenter[0] - 1.0) * _width;\n      var _xmax = (model.windowCenter[0] + 1.0) * _width;\n      var _ymin = (model.windowCenter[1] - 1.0) * _height;\n      var _ymax = (model.windowCenter[1] + 1.0) * _height;\n      var znear = cRange[0];\n      var zfar = cRange[1];\n      tmpMatrix[0] = 2.0 * znear / (_xmax - _xmin);\n      tmpMatrix[5] = 2.0 * znear / (_ymax - _ymin);\n      tmpMatrix[2] = (_xmin + _xmax) / (_xmax - _xmin);\n      tmpMatrix[6] = (_ymin + _ymax) / (_ymax - _ymin);\n      tmpMatrix[10] = -(znear + zfar) / (zfar - znear);\n      tmpMatrix[14] = -1.0;\n      tmpMatrix[11] = -2.0 * znear * zfar / (zfar - znear);\n      tmpMatrix[15] = 0.0;\n    }\n    mat4.copy(result, tmpMatrix);\n    return result;\n  };\n  publicAPI.getCompositeProjectionMatrix = function (aspect, nearz, farz) {\n    var vMat = publicAPI.getViewMatrix();\n    var pMat = publicAPI.getProjectionMatrix(aspect, nearz, farz); // mats are transposed so the order is A then B\n    // we reuse pMat as it is a copy so we can do what we want with it\n\n    mat4.multiply(pMat, vMat, pMat);\n    return pMat;\n  };\n  publicAPI.setDirectionOfProjection = function (x, y, z) {\n    if (model.directionOfProjection[0] === x && model.directionOfProjection[1] === y && model.directionOfProjection[2] === z) {\n      return;\n    }\n    model.directionOfProjection[0] = x;\n    model.directionOfProjection[1] = y;\n    model.directionOfProjection[2] = z;\n    var vec = model.directionOfProjection; // recalculate FocalPoint\n\n    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    computeViewPlaneNormal();\n  }; // used to handle convert js device orientation angles\n  // when you use this method the camera will adjust to the\n  // device orientation such that the physicalViewUp you set\n  // in world coordinates looks up, and the physicalViewNorth\n  // you set in world coorindates will (maybe) point north\n  //\n  // NOTE WARNING - much of the documentation out there on how\n  // orientation works is seriously wrong. Even worse the Chrome\n  // device orientation simulator is completely wrong and should\n  // never be used. OMG it is so messed up.\n  //\n  // how it seems to work on iOS is that the device orientation\n  // is specified in extrinsic angles with a alpha, beta, gamma\n  // convention with axes of Z, X, Y (the code below substitutes\n  // the physical coordinate system for these axes to get the right\n  // modified coordinate system.\n\n  publicAPI.setDeviceAngles = function (alpha, beta, gamma, screen) {\n    var physVRight = [3];\n    cross(model.physicalViewNorth, model.physicalViewUp, physVRight); // phone to physical coordinates\n\n    var rotmat = mat4.identity(new Float64Array(16));\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(alpha), model.physicalViewUp);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(beta), physVRight);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(gamma), model.physicalViewNorth);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(-screen), model.physicalViewUp);\n    var dop = new Float64Array([-model.physicalViewUp[0], -model.physicalViewUp[1], -model.physicalViewUp[2]]);\n    var vup = new Float64Array(model.physicalViewNorth);\n    vec3.transformMat4(dop, dop, rotmat);\n    vec3.transformMat4(vup, vup, rotmat);\n    publicAPI.setDirectionOfProjection(dop[0], dop[1], dop[2]);\n    publicAPI.setViewUp(vup[0], vup[1], vup[2]);\n    publicAPI.modified();\n  };\n  publicAPI.setOrientationWXYZ = function (degrees, x, y, z) {\n    var quatMat = mat4.identity(new Float64Array(16));\n    if (degrees !== 0.0 && (x !== 0.0 || y !== 0.0 || z !== 0.0)) {\n      // convert to radians\n      var angle = radiansFromDegrees(degrees);\n      var q = quat.create();\n      quat.setAxisAngle(q, [x, y, z], angle);\n      mat4.fromQuat(quatMat, q);\n    }\n    var newdop = new Float64Array(3);\n    vec3.transformMat4(newdop, [0.0, 0.0, -1.0], quatMat);\n    var newvup = new Float64Array(3);\n    vec3.transformMat4(newvup, [0.0, 1.0, 0.0], quatMat);\n    publicAPI.setDirectionOfProjection.apply(publicAPI, _toConsumableArray(newdop));\n    publicAPI.setViewUp.apply(publicAPI, _toConsumableArray(newvup));\n    publicAPI.modified();\n  };\n  publicAPI.computeClippingRange = function (bounds) {\n    var vn = null;\n    var position = null;\n    vn = model.viewPlaneNormal;\n    position = model.position;\n    var a = -vn[0];\n    var b = -vn[1];\n    var c = -vn[2];\n    var d = -(a * position[0] + b * position[1] + c * position[2]); // Set the max near clipping plane and the min far clipping plane\n\n    var range = [a * bounds[0] + b * bounds[2] + c * bounds[4] + d, 1e-18]; // Find the closest / farthest bounding box vertex\n\n    for (var k = 0; k < 2; k++) {\n      for (var j = 0; j < 2; j++) {\n        for (var i = 0; i < 2; i++) {\n          var dist = a * bounds[i] + b * bounds[2 + j] + c * bounds[4 + k] + d;\n          range[0] = dist < range[0] ? dist : range[0];\n          range[1] = dist > range[1] ? dist : range[1];\n        }\n      }\n    }\n    return range;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  position: [0, 0, 1],\n  focalPoint: [0, 0, 0],\n  viewUp: [0, 1, 0],\n  directionOfProjection: [0, 0, -1],\n  parallelProjection: false,\n  useHorizontalViewAngle: false,\n  viewAngle: 30,\n  parallelScale: 1,\n  clippingRange: [0.01, 1000.01],\n  windowCenter: [0, 0],\n  viewPlaneNormal: [0, 0, 1],\n  useOffAxisProjection: false,\n  screenBottomLeft: [-0.5, -0.5, -0.5],\n  screenBottomRight: [0.5, -0.5, -0.5],\n  screenTopRight: [0.5, 0.5, -0.5],\n  freezeFocalPoint: false,\n  projectionMatrix: null,\n  viewMatrix: null,\n  cameraLightTransform: mat4.create(),\n  // used for world to physical transformations\n  physicalTranslation: [0, 0, 0],\n  physicalScale: 1.0,\n  physicalViewUp: [0, 1, 0],\n  physicalViewNorth: [0, 0, -1]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['distance']);\n  macro.setGet(publicAPI, model, ['parallelProjection', 'useHorizontalViewAngle', 'viewAngle', 'parallelScale', 'useOffAxisProjection', 'freezeFocalPoint', 'physicalScale']);\n  macro.getArray(publicAPI, model, ['directionOfProjection', 'viewPlaneNormal', 'position', 'focalPoint']);\n  macro.setGetArray(publicAPI, model, ['clippingRange', 'windowCenter'], 2);\n  macro.setGetArray(publicAPI, model, ['viewUp', 'screenBottomLeft', 'screenBottomRight', 'screenTopRight', 'physicalTranslation', 'physicalViewUp', 'physicalViewNorth'], 3); // Object methods\n\n  vtkCamera(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCamera'); // ----------------------------------------------------------------------------\n\nvar vtkCamera$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { DEFAULT_VALUES, vtkCamera$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","mat4","vec4","vec3","quat","macro","r","radiansFromDegrees","k","add","j","cross","vtkDebugMacro","vtkCamera","publicAPI","model","classHierarchy","push","origin","Float64Array","dopbasis","upbasis","tmpMatrix","identity","tmpMatrix2","tmpvec1","tmpvec2","tmpvec3","rotateMatrix","trans","newPosition","newFocalPoint","computeViewPlaneNormal","viewPlaneNormal","directionOfProjection","orthogonalizeViewUp","vt","getViewMatrix","viewUp","modified","setPosition","x","y","z","position","computeDistance","setFocalPoint","focalPoint","setDistance","d","distance","vec","dx","dy","dz","Math","sqrt","dolly","amount","roll","angle","eye","at","up","viewUpVec4","viewDir","rotate","transformMat4","azimuth","fp","translate","yaw","elevation","axis","pitch","apply","zoom","factor","parallelProjection","parallelScale","viewAngle","offset","applyTransform","vuOld","concat","posNew","fpNew","vuNew","slice","setViewUp","getThickness","clippingRange","setThickness","thickness","t","setClippingRange","setThicknessFromFocalPoint","setRoll","getRoll","setObliqueAngles","alpha","beta","getOrientation","getOrientationWXYZ","getFrustumPlanes","aspect","getCameraLightTransformMatrix","matrix","copy","cameraLightTransform","computeCameraLightTransform","invert","fromScaling","multiply","deepCopy","sourceCamera","physicalOrientationToWorldDirection","ori","oriq","fromValues","coriq","create","qdir","conjugate","getPhysicalToWorldMatrix","result","getWorldToPhysicalMatrix","physVRight","physicalViewNorth","physicalViewUp","transpose","set","physicalScale","scale","physicalTranslation","computeViewParametersFromViewMatrix","vmat","oldDist","subtract","normalize","setDirectionOfProjection","computeViewParametersFromPhysicalMatrix","mat","setViewMatrix","viewMatrix","lookAt","setProjectionMatrix","projectionMatrix","getProjectionMatrix","nearz","farz","cWidth","cRange","width","height","xmin","windowCenter","xmax","ymin","ymax","ortho","useOffAxisProjection","Error","tmp","tan","_width","_height","useHorizontalViewAngle","_xmin","_xmax","_ymin","_ymax","znear","zfar","getCompositeProjectionMatrix","vMat","pMat","setDeviceAngles","gamma","screen","rotmat","dop","vup","setOrientationWXYZ","degrees","quatMat","q","setAxisAngle","fromQuat","newdop","newvup","computeClippingRange","bounds","vn","a","b","c","range","i","dist","DEFAULT_VALUES","screenBottomLeft","screenBottomRight","screenTopRight","freezeFocalPoint","extend","initialValues","arguments","length","undefined","Object","assign","obj","get","setGet","getArray","setGetArray","newInstance","vtkCamera$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Core/Camera.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport { mat4, vec4, vec3, quat } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport { r as radiansFromDegrees, k as add, j as cross } from '../../Common/Core/Math/index.js';\n\nvar vtkDebugMacro = macro.vtkDebugMacro;\n/* eslint-disable new-cap */\n\n/*\n * Convenience function to access elements of a gl-matrix.  If it turns\n * out I have rows and columns swapped everywhere, then I'll just change\n * the order of 'row' and 'col' parameters in this function\n */\n// function getMatrixElement(matrix, row, col) {\n//   const idx = (row * 4) + col;\n//   return matrix[idx];\n// }\n// ----------------------------------------------------------------------------\n// vtkCamera methods\n// ----------------------------------------------------------------------------\n\nfunction vtkCamera(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkCamera'); // Set up private variables and methods\n\n  var origin = new Float64Array(3);\n  var dopbasis = new Float64Array([0.0, 0.0, -1.0]);\n  var upbasis = new Float64Array([0.0, 1.0, 0.0]);\n  var tmpMatrix = mat4.identity(new Float64Array(16));\n  var tmpMatrix2 = mat4.identity(new Float64Array(16));\n  var tmpvec1 = new Float64Array(3);\n  var tmpvec2 = new Float64Array(3);\n  var tmpvec3 = new Float64Array(3);\n  var rotateMatrix = mat4.identity(new Float64Array(16));\n  var trans = mat4.identity(new Float64Array(16));\n  var newPosition = new Float64Array(3);\n  var newFocalPoint = new Float64Array(3); // Internal Functions that don't need to be public\n\n  function computeViewPlaneNormal() {\n    // VPN is -DOP\n    model.viewPlaneNormal[0] = -model.directionOfProjection[0];\n    model.viewPlaneNormal[1] = -model.directionOfProjection[1];\n    model.viewPlaneNormal[2] = -model.directionOfProjection[2];\n  }\n\n  publicAPI.orthogonalizeViewUp = function () {\n    var vt = publicAPI.getViewMatrix();\n    model.viewUp[0] = vt[4];\n    model.viewUp[1] = vt[5];\n    model.viewUp[2] = vt[6];\n    publicAPI.modified();\n  };\n\n  publicAPI.setPosition = function (x, y, z) {\n    if (x === model.position[0] && y === model.position[1] && z === model.position[2]) {\n      return;\n    }\n\n    model.position[0] = x;\n    model.position[1] = y;\n    model.position[2] = z; // recompute the focal distance\n\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n\n  publicAPI.setFocalPoint = function (x, y, z) {\n    if (x === model.focalPoint[0] && y === model.focalPoint[1] && z === model.focalPoint[2]) {\n      return;\n    }\n\n    model.focalPoint[0] = x;\n    model.focalPoint[1] = y;\n    model.focalPoint[2] = z; // recompute the focal distance\n\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n\n  publicAPI.setDistance = function (d) {\n    if (model.distance === d) {\n      return;\n    }\n\n    model.distance = d;\n\n    if (model.distance < 1e-20) {\n      model.distance = 1e-20;\n      vtkDebugMacro('Distance is set to minimum.');\n    } // we want to keep the camera pointing in the same direction\n\n\n    var vec = model.directionOfProjection; // recalculate FocalPoint\n\n    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    publicAPI.modified();\n  }; //----------------------------------------------------------------------------\n  // This method must be called when the focal point or camera position changes\n\n\n  publicAPI.computeDistance = function () {\n    var dx = model.focalPoint[0] - model.position[0];\n    var dy = model.focalPoint[1] - model.position[1];\n    var dz = model.focalPoint[2] - model.position[2];\n    model.distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n    if (model.distance < 1e-20) {\n      model.distance = 1e-20;\n      vtkDebugMacro('Distance is set to minimum.');\n      var vec = model.directionOfProjection; // recalculate FocalPoint\n\n      model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n      model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n      model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    }\n\n    model.directionOfProjection[0] = dx / model.distance;\n    model.directionOfProjection[1] = dy / model.distance;\n    model.directionOfProjection[2] = dz / model.distance;\n    computeViewPlaneNormal();\n  }; //----------------------------------------------------------------------------\n  // Move the position of the camera along the view plane normal. Moving\n  // towards the focal point (e.g., > 1) is a dolly-in, moving away\n  // from the focal point (e.g., < 1) is a dolly-out.\n\n\n  publicAPI.dolly = function (amount) {\n    if (amount <= 0.0) {\n      return;\n    } // dolly moves the camera towards the focus\n\n\n    var d = model.distance / amount;\n    publicAPI.setPosition(model.focalPoint[0] - d * model.directionOfProjection[0], model.focalPoint[1] - d * model.directionOfProjection[1], model.focalPoint[2] - d * model.directionOfProjection[2]);\n  };\n\n  publicAPI.roll = function (angle) {\n    var eye = model.position;\n    var at = model.focalPoint;\n    var up = model.viewUp;\n    var viewUpVec4 = new Float64Array([up[0], up[1], up[2], 0.0]);\n    mat4.identity(rotateMatrix);\n    var viewDir = new Float64Array([at[0] - eye[0], at[1] - eye[1], at[2] - eye[2]]);\n    mat4.rotate(rotateMatrix, rotateMatrix, radiansFromDegrees(angle), viewDir);\n    vec4.transformMat4(viewUpVec4, viewUpVec4, rotateMatrix);\n    model.viewUp[0] = viewUpVec4[0];\n    model.viewUp[1] = viewUpVec4[1];\n    model.viewUp[2] = viewUpVec4[2];\n    publicAPI.modified();\n  };\n\n  publicAPI.azimuth = function (angle) {\n    var fp = model.focalPoint;\n    mat4.identity(trans); // translate the focal point to the origin,\n    // rotate about view up,\n    // translate back again\n\n    mat4.translate(trans, trans, fp);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);\n    mat4.translate(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position\n\n    vec3.transformMat4(newPosition, model.position, trans);\n    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);\n  };\n\n  publicAPI.yaw = function (angle) {\n    var position = model.position;\n    mat4.identity(trans); // translate the camera to the origin,\n    // rotate about axis,\n    // translate back again\n\n    mat4.translate(trans, trans, position);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), model.viewUp);\n    mat4.translate(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the position\n\n    vec3.transformMat4(newFocalPoint, model.focalPoint, trans);\n    publicAPI.setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);\n  };\n\n  publicAPI.elevation = function (angle) {\n    var fp = model.focalPoint; // get the eye / camera position from the viewMatrix\n\n    var vt = publicAPI.getViewMatrix();\n    var axis = [-vt[0], -vt[1], -vt[2]];\n    mat4.identity(trans); // translate the focal point to the origin,\n    // rotate about view up,\n    // translate back again\n\n    mat4.translate(trans, trans, fp);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), axis);\n    mat4.translate(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position\n\n    vec3.transformMat4(newPosition, model.position, trans);\n    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);\n  };\n\n  publicAPI.pitch = function (angle) {\n    var position = model.position;\n    var vt = publicAPI.getViewMatrix();\n    var axis = [vt[0], vt[1], vt[2]];\n    mat4.identity(trans); // translate the camera to the origin,\n    // rotate about axis,\n    // translate back again\n\n    mat4.translate(trans, trans, position);\n    mat4.rotate(trans, trans, radiansFromDegrees(angle), axis);\n    mat4.translate(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the focal point\n\n    vec3.transformMat4(newFocalPoint, model.focalPoint, trans);\n    publicAPI.setFocalPoint.apply(publicAPI, _toConsumableArray(newFocalPoint));\n  };\n\n  publicAPI.zoom = function (factor) {\n    if (factor <= 0) {\n      return;\n    }\n\n    if (model.parallelProjection) {\n      model.parallelScale /= factor;\n    } else {\n      model.viewAngle /= factor;\n    }\n\n    publicAPI.modified();\n  };\n\n  publicAPI.translate = function (x, y, z) {\n    var offset = [x, y, z];\n    add(model.position, offset, model.position);\n    add(model.focalPoint, offset, model.focalPoint);\n    publicAPI.computeDistance();\n    publicAPI.modified();\n  };\n\n  publicAPI.applyTransform = function (transformMat4) {\n    var vuOld = [].concat(_toConsumableArray(model.viewUp), [1.0]);\n    var posNew = [];\n    var fpNew = [];\n    var vuNew = [];\n    vuOld[0] += model.position[0];\n    vuOld[1] += model.position[1];\n    vuOld[2] += model.position[2];\n    vec4.transformMat4(posNew, [].concat(_toConsumableArray(model.position), [1.0]), transformMat4);\n    vec4.transformMat4(fpNew, [].concat(_toConsumableArray(model.focalPoint), [1.0]), transformMat4);\n    vec4.transformMat4(vuNew, vuOld, transformMat4);\n    vuNew[0] -= posNew[0];\n    vuNew[1] -= posNew[1];\n    vuNew[2] -= posNew[2];\n    publicAPI.setPosition.apply(publicAPI, _toConsumableArray(posNew.slice(0, 3)));\n    publicAPI.setFocalPoint.apply(publicAPI, _toConsumableArray(fpNew.slice(0, 3)));\n    publicAPI.setViewUp.apply(publicAPI, _toConsumableArray(vuNew.slice(0, 3)));\n  };\n\n  publicAPI.getThickness = function () {\n    return model.clippingRange[1] - model.clippingRange[0];\n  };\n\n  publicAPI.setThickness = function (thickness) {\n    var t = thickness;\n\n    if (t < 1e-20) {\n      t = 1e-20;\n      vtkDebugMacro('Thickness is set to minimum.');\n    }\n\n    publicAPI.setClippingRange(model.clippingRange[0], model.clippingRange[0] + t);\n  };\n\n  publicAPI.setThicknessFromFocalPoint = function (thickness) {\n    var t = thickness;\n\n    if (t < 1e-20) {\n      t = 1e-20;\n      vtkDebugMacro('Thickness is set to minimum.');\n    }\n\n    publicAPI.setClippingRange(model.distance - t / 2, model.distance + t / 2);\n  }; // Unimplemented functions\n\n\n  publicAPI.setRoll = function (angle) {}; // dependency on GetOrientation() and a model.ViewTransform object, see https://github.com/Kitware/VTK/blob/master/Common/Transforms/vtkTransform.cxx and https://vtk.org/doc/nightly/html/classvtkTransform.html\n\n\n  publicAPI.getRoll = function () {};\n\n  publicAPI.setObliqueAngles = function (alpha, beta) {};\n\n  publicAPI.getOrientation = function () {};\n\n  publicAPI.getOrientationWXYZ = function () {};\n\n  publicAPI.getFrustumPlanes = function (aspect) {// Return array of 24 params (4 params for each of 6 plane equations)\n  };\n\n  publicAPI.getCameraLightTransformMatrix = function (matrix) {\n    mat4.copy(matrix, model.cameraLightTransform);\n    return matrix;\n  };\n\n  publicAPI.computeCameraLightTransform = function () {\n    // not sure if this is the correct transformation, based on the same funciton in VTK\n    mat4.copy(tmpMatrix, publicAPI.getViewMatrix());\n    mat4.invert(tmpMatrix, tmpMatrix);\n    mat4.fromScaling(tmpMatrix2, [model.distance, model.distance, model.distance]);\n    mat4.multiply(tmpMatrix, tmpMatrix, tmpMatrix2);\n    mat4.identity(model.cameraLightTransform);\n    mat4.translate(model.cameraLightTransform, tmpMatrix, [0.0, 0.0, -1.0]);\n  };\n\n  publicAPI.deepCopy = function (sourceCamera) {};\n\n  publicAPI.physicalOrientationToWorldDirection = function (ori) {\n    // push the x axis through the orientation quat\n    var oriq = quat.fromValues(ori[0], ori[1], ori[2], ori[3]);\n    var coriq = quat.create();\n    var qdir = quat.fromValues(0.0, 0.0, 1.0, 0.0);\n    quat.conjugate(coriq, oriq); // rotate the z axis by the quat\n\n    quat.multiply(qdir, oriq, qdir);\n    quat.multiply(qdir, qdir, coriq); // return the z axis in world coords\n\n    return [qdir[0], qdir[1], qdir[2]];\n  };\n\n  publicAPI.getPhysicalToWorldMatrix = function (result) {\n    publicAPI.getWorldToPhysicalMatrix(result);\n    mat4.invert(result, result);\n  };\n\n  publicAPI.getWorldToPhysicalMatrix = function (result) {\n    mat4.identity(result); // now the physical to vtk world rotation tform\n\n    var physVRight = [3];\n    cross(model.physicalViewNorth, model.physicalViewUp, physVRight);\n    result[0] = physVRight[0];\n    result[1] = physVRight[1];\n    result[2] = physVRight[2];\n    result[4] = model.physicalViewUp[0];\n    result[5] = model.physicalViewUp[1];\n    result[6] = model.physicalViewUp[2];\n    result[8] = -model.physicalViewNorth[0];\n    result[9] = -model.physicalViewNorth[1];\n    result[10] = -model.physicalViewNorth[2];\n    mat4.transpose(result, result);\n    vec3.set(tmpvec1, 1 / model.physicalScale, 1 / model.physicalScale, 1 / model.physicalScale);\n    mat4.scale(result, result, tmpvec1);\n    mat4.translate(result, result, model.physicalTranslation);\n  };\n\n  publicAPI.computeViewParametersFromViewMatrix = function (vmat) {\n    // invert to get view to world\n    mat4.invert(tmpMatrix, vmat); // note with glmatrix operations happen in\n    // the reverse order\n    // mat.scale\n    // mat.translate\n    // will result in the translation then the scale\n    // mat.mult(a,b)\n    // results in perform the B transformation then A\n    // then extract the params position, orientation\n    // push 0,0,0 through to get a translation\n\n    vec3.transformMat4(tmpvec1, origin, tmpMatrix);\n    publicAPI.computeDistance();\n    var oldDist = model.distance;\n    publicAPI.setPosition(tmpvec1[0], tmpvec1[1], tmpvec1[2]); // push basis vectors to get orientation\n\n    vec3.transformMat4(tmpvec2, dopbasis, tmpMatrix);\n    vec3.subtract(tmpvec2, tmpvec2, tmpvec1);\n    vec3.normalize(tmpvec2, tmpvec2);\n    publicAPI.setDirectionOfProjection(tmpvec2[0], tmpvec2[1], tmpvec2[2]);\n    vec3.transformMat4(tmpvec3, upbasis, tmpMatrix);\n    vec3.subtract(tmpvec3, tmpvec3, tmpvec1);\n    vec3.normalize(tmpvec3, tmpvec3);\n    publicAPI.setViewUp(tmpvec3[0], tmpvec3[1], tmpvec3[2]);\n    publicAPI.setDistance(oldDist);\n  }; // the provided matrix should include\n  // translation and orientation only\n  // mat is physical to view\n\n\n  publicAPI.computeViewParametersFromPhysicalMatrix = function (mat) {\n    // get the WorldToPhysicalMatrix\n    publicAPI.getWorldToPhysicalMatrix(tmpMatrix); // first convert the physical -> view matrix to be\n    // world -> view\n\n    mat4.multiply(tmpMatrix, mat, tmpMatrix);\n    publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);\n  };\n\n  publicAPI.setViewMatrix = function (mat) {\n    model.viewMatrix = mat;\n\n    if (model.viewMatrix) {\n      mat4.copy(tmpMatrix, model.viewMatrix);\n      publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);\n      mat4.transpose(model.viewMatrix, model.viewMatrix);\n    }\n  };\n\n  publicAPI.getViewMatrix = function () {\n    if (model.viewMatrix) {\n      return model.viewMatrix;\n    }\n\n    mat4.lookAt(tmpMatrix, model.position, // eye\n    model.focalPoint, // at\n    model.viewUp // up\n    );\n    mat4.transpose(tmpMatrix, tmpMatrix);\n    var result = new Float64Array(16);\n    mat4.copy(result, tmpMatrix);\n    return result;\n  };\n\n  publicAPI.setProjectionMatrix = function (mat) {\n    model.projectionMatrix = mat;\n  };\n\n  publicAPI.getProjectionMatrix = function (aspect, nearz, farz) {\n    var result = new Float64Array(16);\n    mat4.identity(result);\n\n    if (model.projectionMatrix) {\n      var scale = 1 / model.physicalScale;\n      vec3.set(tmpvec1, scale, scale, scale);\n      mat4.copy(result, model.projectionMatrix);\n      mat4.scale(result, result, tmpvec1);\n      mat4.transpose(result, result);\n      return result;\n    }\n\n    mat4.identity(tmpMatrix); // FIXME: Not sure what to do about adjust z buffer here\n    // adjust Z-buffer range\n    // this->ProjectionTransform->AdjustZBuffer( -1, +1, nearz, farz );\n\n    var cWidth = model.clippingRange[1] - model.clippingRange[0];\n    var cRange = [model.clippingRange[0] + (nearz + 1) * cWidth / 2.0, model.clippingRange[0] + (farz + 1) * cWidth / 2.0];\n\n    if (model.parallelProjection) {\n      // set up a rectangular parallelipiped\n      var width = model.parallelScale * aspect;\n      var height = model.parallelScale;\n      var xmin = (model.windowCenter[0] - 1.0) * width;\n      var xmax = (model.windowCenter[0] + 1.0) * width;\n      var ymin = (model.windowCenter[1] - 1.0) * height;\n      var ymax = (model.windowCenter[1] + 1.0) * height;\n      mat4.ortho(tmpMatrix, xmin, xmax, ymin, ymax, cRange[0], cRange[1]);\n      mat4.transpose(tmpMatrix, tmpMatrix);\n    } else if (model.useOffAxisProjection) {\n      throw new Error('Off-Axis projection is not supported at this time');\n    } else {\n      var tmp = Math.tan(radiansFromDegrees(model.viewAngle) / 2.0);\n\n      var _width;\n\n      var _height;\n\n      if (model.useHorizontalViewAngle === true) {\n        _width = model.clippingRange[0] * tmp;\n        _height = model.clippingRange[0] * tmp / aspect;\n      } else {\n        _width = model.clippingRange[0] * tmp * aspect;\n        _height = model.clippingRange[0] * tmp;\n      }\n\n      var _xmin = (model.windowCenter[0] - 1.0) * _width;\n\n      var _xmax = (model.windowCenter[0] + 1.0) * _width;\n\n      var _ymin = (model.windowCenter[1] - 1.0) * _height;\n\n      var _ymax = (model.windowCenter[1] + 1.0) * _height;\n\n      var znear = cRange[0];\n      var zfar = cRange[1];\n      tmpMatrix[0] = 2.0 * znear / (_xmax - _xmin);\n      tmpMatrix[5] = 2.0 * znear / (_ymax - _ymin);\n      tmpMatrix[2] = (_xmin + _xmax) / (_xmax - _xmin);\n      tmpMatrix[6] = (_ymin + _ymax) / (_ymax - _ymin);\n      tmpMatrix[10] = -(znear + zfar) / (zfar - znear);\n      tmpMatrix[14] = -1.0;\n      tmpMatrix[11] = -2.0 * znear * zfar / (zfar - znear);\n      tmpMatrix[15] = 0.0;\n    }\n\n    mat4.copy(result, tmpMatrix);\n    return result;\n  };\n\n  publicAPI.getCompositeProjectionMatrix = function (aspect, nearz, farz) {\n    var vMat = publicAPI.getViewMatrix();\n    var pMat = publicAPI.getProjectionMatrix(aspect, nearz, farz); // mats are transposed so the order is A then B\n    // we reuse pMat as it is a copy so we can do what we want with it\n\n    mat4.multiply(pMat, vMat, pMat);\n    return pMat;\n  };\n\n  publicAPI.setDirectionOfProjection = function (x, y, z) {\n    if (model.directionOfProjection[0] === x && model.directionOfProjection[1] === y && model.directionOfProjection[2] === z) {\n      return;\n    }\n\n    model.directionOfProjection[0] = x;\n    model.directionOfProjection[1] = y;\n    model.directionOfProjection[2] = z;\n    var vec = model.directionOfProjection; // recalculate FocalPoint\n\n    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;\n    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;\n    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;\n    computeViewPlaneNormal();\n  }; // used to handle convert js device orientation angles\n  // when you use this method the camera will adjust to the\n  // device orientation such that the physicalViewUp you set\n  // in world coordinates looks up, and the physicalViewNorth\n  // you set in world coorindates will (maybe) point north\n  //\n  // NOTE WARNING - much of the documentation out there on how\n  // orientation works is seriously wrong. Even worse the Chrome\n  // device orientation simulator is completely wrong and should\n  // never be used. OMG it is so messed up.\n  //\n  // how it seems to work on iOS is that the device orientation\n  // is specified in extrinsic angles with a alpha, beta, gamma\n  // convention with axes of Z, X, Y (the code below substitutes\n  // the physical coordinate system for these axes to get the right\n  // modified coordinate system.\n\n\n  publicAPI.setDeviceAngles = function (alpha, beta, gamma, screen) {\n    var physVRight = [3];\n    cross(model.physicalViewNorth, model.physicalViewUp, physVRight); // phone to physical coordinates\n\n    var rotmat = mat4.identity(new Float64Array(16));\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(alpha), model.physicalViewUp);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(beta), physVRight);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(gamma), model.physicalViewNorth);\n    mat4.rotate(rotmat, rotmat, radiansFromDegrees(-screen), model.physicalViewUp);\n    var dop = new Float64Array([-model.physicalViewUp[0], -model.physicalViewUp[1], -model.physicalViewUp[2]]);\n    var vup = new Float64Array(model.physicalViewNorth);\n    vec3.transformMat4(dop, dop, rotmat);\n    vec3.transformMat4(vup, vup, rotmat);\n    publicAPI.setDirectionOfProjection(dop[0], dop[1], dop[2]);\n    publicAPI.setViewUp(vup[0], vup[1], vup[2]);\n    publicAPI.modified();\n  };\n\n  publicAPI.setOrientationWXYZ = function (degrees, x, y, z) {\n    var quatMat = mat4.identity(new Float64Array(16));\n\n    if (degrees !== 0.0 && (x !== 0.0 || y !== 0.0 || z !== 0.0)) {\n      // convert to radians\n      var angle = radiansFromDegrees(degrees);\n      var q = quat.create();\n      quat.setAxisAngle(q, [x, y, z], angle);\n      mat4.fromQuat(quatMat, q);\n    }\n\n    var newdop = new Float64Array(3);\n    vec3.transformMat4(newdop, [0.0, 0.0, -1.0], quatMat);\n    var newvup = new Float64Array(3);\n    vec3.transformMat4(newvup, [0.0, 1.0, 0.0], quatMat);\n    publicAPI.setDirectionOfProjection.apply(publicAPI, _toConsumableArray(newdop));\n    publicAPI.setViewUp.apply(publicAPI, _toConsumableArray(newvup));\n    publicAPI.modified();\n  };\n\n  publicAPI.computeClippingRange = function (bounds) {\n    var vn = null;\n    var position = null;\n    vn = model.viewPlaneNormal;\n    position = model.position;\n    var a = -vn[0];\n    var b = -vn[1];\n    var c = -vn[2];\n    var d = -(a * position[0] + b * position[1] + c * position[2]); // Set the max near clipping plane and the min far clipping plane\n\n    var range = [a * bounds[0] + b * bounds[2] + c * bounds[4] + d, 1e-18]; // Find the closest / farthest bounding box vertex\n\n    for (var k = 0; k < 2; k++) {\n      for (var j = 0; j < 2; j++) {\n        for (var i = 0; i < 2; i++) {\n          var dist = a * bounds[i] + b * bounds[2 + j] + c * bounds[4 + k] + d;\n          range[0] = dist < range[0] ? dist : range[0];\n          range[1] = dist > range[1] ? dist : range[1];\n        }\n      }\n    }\n\n    return range;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  position: [0, 0, 1],\n  focalPoint: [0, 0, 0],\n  viewUp: [0, 1, 0],\n  directionOfProjection: [0, 0, -1],\n  parallelProjection: false,\n  useHorizontalViewAngle: false,\n  viewAngle: 30,\n  parallelScale: 1,\n  clippingRange: [0.01, 1000.01],\n  windowCenter: [0, 0],\n  viewPlaneNormal: [0, 0, 1],\n  useOffAxisProjection: false,\n  screenBottomLeft: [-0.5, -0.5, -0.5],\n  screenBottomRight: [0.5, -0.5, -0.5],\n  screenTopRight: [0.5, 0.5, -0.5],\n  freezeFocalPoint: false,\n  projectionMatrix: null,\n  viewMatrix: null,\n  cameraLightTransform: mat4.create(),\n  // used for world to physical transformations\n  physicalTranslation: [0, 0, 0],\n  physicalScale: 1.0,\n  physicalViewUp: [0, 1, 0],\n  physicalViewNorth: [0, 0, -1]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['distance']);\n  macro.setGet(publicAPI, model, ['parallelProjection', 'useHorizontalViewAngle', 'viewAngle', 'parallelScale', 'useOffAxisProjection', 'freezeFocalPoint', 'physicalScale']);\n  macro.getArray(publicAPI, model, ['directionOfProjection', 'viewPlaneNormal', 'position', 'focalPoint']);\n  macro.setGetArray(publicAPI, model, ['clippingRange', 'windowCenter'], 2);\n  macro.setGetArray(publicAPI, model, ['viewUp', 'screenBottomLeft', 'screenBottomRight', 'screenTopRight', 'physicalTranslation', 'physicalViewUp', 'physicalViewNorth'], 3); // Object methods\n\n  vtkCamera(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkCamera'); // ----------------------------------------------------------------------------\n\nvar vtkCamera$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { DEFAULT_VALUES, vtkCamera$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}