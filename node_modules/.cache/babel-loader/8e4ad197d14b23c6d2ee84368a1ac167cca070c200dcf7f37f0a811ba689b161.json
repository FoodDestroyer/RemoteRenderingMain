{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// vtkConeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkConeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkConeSource');\n  function requestData(inData, outData) {\n    var _vtkMatrixBuilder$bui;\n    if (model.deleted) {\n      return;\n    }\n    var dataset = outData[0];\n    var angle = 2 * Math.PI / model.resolution;\n    var xbot = -model.height / 2.0;\n    var numberOfPoints = model.resolution + 1;\n    var cellArraySize = 4 * model.resolution + 1 + model.resolution; // Points\n\n    var pointIdx = 0;\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(cellArraySize); // Add summit point\n\n    points[0] = model.height / 2.0;\n    points[1] = 0.0;\n    points[2] = 0.0; // Create bottom cell\n\n    if (model.capping) {\n      polys[cellLocation++] = model.resolution;\n    } // Add all points\n\n    for (var i = 0; i < model.resolution; i++) {\n      pointIdx++;\n      points[pointIdx * 3 + 0] = xbot;\n      points[pointIdx * 3 + 1] = model.radius * Math.cos(i * angle);\n      points[pointIdx * 3 + 2] = model.radius * Math.sin(i * angle); // Add points to bottom cell in reverse order\n\n      if (model.capping) {\n        polys[model.resolution - cellLocation++ + 1] = pointIdx;\n      }\n    } // Add all triangle cells\n\n    for (var _i = 0; _i < model.resolution; _i++) {\n      polys[cellLocation++] = 3;\n      polys[cellLocation++] = 0;\n      polys[cellLocation++] = _i + 1;\n      polys[cellLocation++] = _i + 2 > model.resolution ? 1 : _i + 2;\n    } // Apply transformation to the points coordinates\n\n    (_vtkMatrixBuilder$bui = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center)).rotateFromDirections([1, 0, 0], model.direction).apply(points);\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1); // Update output\n\n    outData[0] = dataset;\n  } // Expose methods\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  height: 1.0,\n  radius: 0.5,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [1.0, 0.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkConeSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkConeSource'); // ----------------------------------------------------------------------------\n\nvar vtkConeSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkConeSource$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkPolyData","vtkMatrixBuilder","vtkConeSource","publicAPI","model","classHierarchy","push","requestData","inData","outData","_vtkMatrixBuilder$bui","deleted","dataset","angle","Math","PI","resolution","xbot","height","numberOfPoints","cellArraySize","pointIdx","points","newTypedArray","pointType","cellLocation","polys","Uint32Array","capping","i","radius","cos","sin","_i","buildFromRadian","translate","apply","center","rotateFromDirections","direction","newInstance","getPoints","setData","getPolys","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","setGet","setGetArray","algo","vtkConeSource$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Filters/Sources/ConeSource.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkMatrixBuilder from '../../Common/Core/MatrixBuilder.js';\n\n// vtkConeSource methods\n// ----------------------------------------------------------------------------\n\nfunction vtkConeSource(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkConeSource');\n\n  function requestData(inData, outData) {\n    var _vtkMatrixBuilder$bui;\n\n    if (model.deleted) {\n      return;\n    }\n\n    var dataset = outData[0];\n    var angle = 2 * Math.PI / model.resolution;\n    var xbot = -model.height / 2.0;\n    var numberOfPoints = model.resolution + 1;\n    var cellArraySize = 4 * model.resolution + 1 + model.resolution; // Points\n\n    var pointIdx = 0;\n    var points = macro.newTypedArray(model.pointType, numberOfPoints * 3); // Cells\n\n    var cellLocation = 0;\n    var polys = new Uint32Array(cellArraySize); // Add summit point\n\n    points[0] = model.height / 2.0;\n    points[1] = 0.0;\n    points[2] = 0.0; // Create bottom cell\n\n    if (model.capping) {\n      polys[cellLocation++] = model.resolution;\n    } // Add all points\n\n\n    for (var i = 0; i < model.resolution; i++) {\n      pointIdx++;\n      points[pointIdx * 3 + 0] = xbot;\n      points[pointIdx * 3 + 1] = model.radius * Math.cos(i * angle);\n      points[pointIdx * 3 + 2] = model.radius * Math.sin(i * angle); // Add points to bottom cell in reverse order\n\n      if (model.capping) {\n        polys[model.resolution - cellLocation++ + 1] = pointIdx;\n      }\n    } // Add all triangle cells\n\n\n    for (var _i = 0; _i < model.resolution; _i++) {\n      polys[cellLocation++] = 3;\n      polys[cellLocation++] = 0;\n      polys[cellLocation++] = _i + 1;\n      polys[cellLocation++] = _i + 2 > model.resolution ? 1 : _i + 2;\n    } // Apply transformation to the points coordinates\n\n\n    (_vtkMatrixBuilder$bui = vtkMatrixBuilder.buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui, _toConsumableArray(model.center)).rotateFromDirections([1, 0, 0], model.direction).apply(points);\n\n    dataset = vtkPolyData.newInstance();\n    dataset.getPoints().setData(points, 3);\n    dataset.getPolys().setData(polys, 1); // Update output\n\n    outData[0] = dataset;\n  } // Expose methods\n\n\n  publicAPI.requestData = requestData;\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  height: 1.0,\n  radius: 0.5,\n  resolution: 6,\n  center: [0, 0, 0],\n  direction: [1.0, 0.0, 0.0],\n  capping: true,\n  pointType: 'Float64Array'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['height', 'radius', 'resolution', 'capping']);\n  macro.setGetArray(publicAPI, model, ['center', 'direction'], 3);\n  macro.algo(publicAPI, model, 0, 1);\n  vtkConeSource(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkConeSource'); // ----------------------------------------------------------------------------\n\nvar vtkConeSource$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkConeSource$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}