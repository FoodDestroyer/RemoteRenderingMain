{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkCompositeCameraManipulator from './CompositeCameraManipulator.js';\nimport vtkCompositeMouseManipulator from './CompositeMouseManipulator.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport vtkPointPicker from '../../Rendering/Core/PointPicker.js';\nimport vtkSphereSource from '../../Filters/Sources/SphereSource.js';\nimport { FieldAssociations } from '../../Common/DataModel/DataSet/Constants.js';\nimport { mat4, vec3 } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport { B as areEquals, l as normalize, d as dot, C as clampValue, s as subtract, j as cross, w as multiplyScalar, e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\nvar States = vtkInteractorStyleConstants.States; // ----------------------------------------------------------------------------\n// vtkMouseCameraUnicamRotateManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMouseCameraUnicamRotateManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkMouseCameraUnicamRotateManipulator'); // Setup Picker to pick points\n\n  model.picker = vtkPointPicker.newInstance();\n  model.downPoint = [0, 0, 0];\n  model.isDot = false;\n  model.state = States.IS_NONE; // Setup focus dot\n\n  var sphereSource = vtkSphereSource.newInstance();\n  sphereSource.setThetaResolution(6);\n  sphereSource.setPhiResolution(6);\n  var sphereMapper = vtkMapper.newInstance();\n  sphereMapper.setInputConnection(sphereSource.getOutputPort());\n  model.focusSphere = vtkActor.newInstance();\n  model.focusSphere.setMapper(sphereMapper);\n  model.focusSphere.getProperty().setColor(0.89, 0.66, 0.41);\n  model.focusSphere.getProperty().setAmbient(1);\n  model.focusSphere.getProperty().setDiffuse(0);\n  model.focusSphere.getProperty().setRepresentationToWireframe(); //----------------------------------------------------------------------------\n\n  var updateAndRender = function updateAndRender(interactor) {\n    if (!interactor) {\n      return;\n    }\n    if (model.useWorldUpVec) {\n      var camera = interactor.findPokedRenderer().getActiveCamera();\n      if (!areEquals(model.worldUpVec, camera.getViewPlaneNormal())) {\n        camera.setViewUp(model.worldUpVec);\n      }\n    }\n    interactor.render();\n  }; //----------------------------------------------------------------------------\n\n  var normalize$1 = function normalize(position, interactor) {\n    var renderer = interactor.findPokedRenderer();\n    var _interactor$getView$g = interactor.getView().getViewportSize(renderer),\n      _interactor$getView$g2 = _slicedToArray(_interactor$getView$g, 2),\n      width = _interactor$getView$g2[0],\n      height = _interactor$getView$g2[1];\n    var nx = -1.0 + 2.0 * position.x / width;\n    var ny = -1.0 + 2.0 * position.y / height;\n    return {\n      x: nx,\n      y: ny\n    };\n  }; //----------------------------------------------------------------------------\n  // Rotate the camera by 'angle' degrees about the point <cx, cy, cz>\n  // and around the vector/axis <ax, ay, az>.\n\n  var rotateCamera = function rotateCamera(camera, cx, cy, cz, ax, ay, az, angle) {\n    var cameraPosition = camera.getPosition();\n    var cameraFocalPoint = camera.getFocalPoint();\n    var cameraViewUp = camera.getViewUp();\n    cameraPosition[3] = 1.0;\n    cameraFocalPoint[3] = 1.0;\n    cameraViewUp[3] = 0.0;\n    var transform = mat4.identity(new Float64Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    var newCameraPosition = [];\n    var newCameraFocalPoint = [];\n    vec3.transformMat4(newCameraPosition, cameraPosition, transform);\n    vec3.transformMat4(newCameraFocalPoint, cameraFocalPoint, transform);\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    var newCameraViewUp = [];\n    vec3.transformMat4(newCameraViewUp, cameraViewUp, transform);\n    camera.setPosition.apply(camera, newCameraPosition);\n    camera.setFocalPoint.apply(camera, newCameraFocalPoint);\n    camera.setViewUp.apply(camera, newCameraViewUp);\n  }; //----------------------------------------------------------------------------\n\n  var rotate = function rotate(interactor, position) {\n    var _interactor$getView;\n    var renderer = interactor.findPokedRenderer();\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var center = model.focusSphere.getPosition();\n    var normalizedCenter = (_interactor$getView = interactor.getView()).worldToDisplay.apply(_interactor$getView, _toConsumableArray(center).concat([renderer])); // let normalizedCenter = publicAPI.computeWorldToDisplay(renderer, ...center);\n\n    normalizedCenter = normalize$1({\n      x: center[0],\n      y: center[1]\n    }, interactor);\n    normalizedCenter = [normalizedCenter.x, normalizedCenter.y, center[2]]; // Squared rad of virtual cylinder\n\n    var radsq = Math.pow(1.0 + Math.abs(normalizedCenter[0]), 2.0);\n    var op = [normalizedPreviousPosition.x, 0, 0];\n    var oe = [normalizedPosition.x, 0, 0];\n    var opsq = Math.pow(op[0], 2);\n    var oesq = Math.pow(oe[0], 2);\n    var lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    var loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n    var nop = [op[0], 0, lop];\n    normalize(nop);\n    var noe = [oe[0], 0, loe];\n    normalize(noe);\n    var dot$1 = dot(nop, noe);\n    if (Math.abs(dot$1) > 0.0001) {\n      var angle = -2 * Math.acos(clampValue(dot$1, -1.0, 1.0)) * Math.sign(normalizedPosition.x - normalizedPreviousPosition.x) * publicAPI.getRotationFactor();\n      var camera = renderer.getActiveCamera();\n      var upVec = model.useWorldUpVec ? model.worldUpVec : camera.getViewUp();\n      normalize(upVec);\n      rotateCamera.apply(void 0, [camera].concat(_toConsumableArray(center), _toConsumableArray(upVec), [angle]));\n      var dVec = [];\n      var cameraPosition = camera.getPosition();\n      subtract(cameraPosition, position, dVec);\n      var rDist = (normalizedPosition.y - normalizedPreviousPosition.y) * publicAPI.getRotationFactor();\n      normalize(dVec);\n      var atV = camera.getViewPlaneNormal();\n      var upV = camera.getViewUp();\n      var rightV = [];\n      cross(upV, atV, rightV);\n      normalize(rightV); //\n      // The following two tests try to prevent chaotic camera movement\n      // that results from rotating over the poles defined by the\n      // \"WorldUpVector\".  The problem is the constraint to keep the\n      // camera's up vector in line w/ the WorldUpVector is at odds with\n      // the action of rotating over the top of the virtual sphere used\n      // for rotation.  The solution here is to prevent the user from\n      // rotating the last bit required to \"go over the top\"-- as a\n      // consequence, you can never look directly down on the poles.\n      //\n      // The \"0.99\" value is somewhat arbitrary, but seems to produce\n      // reasonable results.  (Theoretically, some sort of clamping\n      // function could probably be used rather than a hard cutoff, but\n      // time constraints prevent figuring that out right now.)\n      //\n\n      if (model.useWorldUpVec) {\n        var OVER_THE_TOP_THRESHOLD = 0.99;\n        if (dot(upVec, atV) > OVER_THE_TOP_THRESHOLD && rDist < 0) {\n          rDist = 0;\n        }\n        if (dot(upVec, atV) < -OVER_THE_TOP_THRESHOLD && rDist > 0) {\n          rDist = 0;\n        }\n      }\n      rotateCamera.apply(void 0, [camera].concat(_toConsumableArray(center), rightV, [rDist]));\n      if (model.useWorldUpVec && !areEquals(upVec, camera.getViewPlaneNormal())) {\n        camera.setViewUp.apply(camera, _toConsumableArray(upVec));\n      }\n      model.previousPosition = position;\n      renderer.resetCameraClippingRange();\n      updateAndRender(interactor);\n    }\n  }; //----------------------------------------------------------------------------\n\n  var placeFocusSphere = function placeFocusSphere(interactor) {\n    var _model$focusSphere;\n    var renderer = interactor.findPokedRenderer();\n    (_model$focusSphere = model.focusSphere).setPosition.apply(_model$focusSphere, _toConsumableArray(model.downPoint));\n    var camera = renderer.getActiveCamera();\n    var cameraPosition = camera.getPosition();\n    var cameraToPointVec = [];\n    subtract(model.downPoint, cameraPosition, cameraToPointVec);\n    if (camera.getParallelProjection()) {\n      multiplyScalar(cameraToPointVec, camera.getParallelScale());\n    }\n    var atV = camera.getDirectionOfProjection();\n    normalize(atV); // Scales the focus dot so it always appears the same size\n\n    var scale = 0.02 * dot(atV, cameraToPointVec) * model.focusSphereRadiusFactor;\n    model.focusSphere.setScale(scale, scale, scale);\n  };\n  var placeAndDisplayFocusSphere = function placeAndDisplayFocusSphere(interactor) {\n    placeFocusSphere(interactor);\n    interactor.findPokedRenderer().addActor(model.focusSphere);\n    model.isDot = true;\n  };\n  var hideFocusSphere = function hideFocusSphere(interactor) {\n    interactor.findPokedRenderer().removeActor(model.focusSphere);\n    model.isDot = false;\n  }; //----------------------------------------------------------------------------\n\n  var pickWithPointPicker = function pickWithPointPicker(interactor, position) {\n    var renderer = interactor.findPokedRenderer();\n    model.picker.pick([position.x, position.y, position.z], renderer);\n    var pickedPositions = model.picker.getPickedPositions();\n    if (pickedPositions.length === 0) {\n      return model.picker.getPickPosition();\n    }\n    var cameraPosition = renderer.getActiveCamera().getPosition();\n    pickedPositions.sort(function (pointA, pointB) {\n      return distance2BetweenPoints(pointA, cameraPosition) - distance2BetweenPoints(pointB, cameraPosition);\n    });\n    return pickedPositions[0];\n  }; //----------------------------------------------------------------------------\n\n  var pickPoint = function pickPoint(interactor, position) {\n    var renderer = interactor.findPokedRenderer(); // Finds the point under the cursor.\n    // Note: If no object has been rendered to the pixel (X, Y), then\n    // vtkPicker will return a z-value with depth equal\n    // to the distance from the camera's position to the focal point.\n    // This seems like an arbitrary, but perhaps reasonable, default value.\n\n    var selections = null;\n    if (model.useHardwareSelector) {\n      var selector = interactor.getView().getSelector();\n      selector.setCaptureZValues(true);\n      selector.setFieldAssociation(FieldAssociations.FIELD_ASSOCIATION_POINTS);\n      selector.attach(interactor.getView(), renderer);\n      selector.setArea(position.x, position.y, position.x, position.y);\n      selections = selector.select();\n    }\n    if (selections && selections.length !== 0) {\n      // convert Float64Array to regular array\n      return Array.from(selections[0].getProperties().worldPosition);\n    }\n    return pickWithPointPicker(interactor, position);\n  }; //----------------------------------------------------------------------------\n  // Public API methods\n  //----------------------------------------------------------------------------\n\n  publicAPI.onButtonDown = function (interactor, renderer, position) {\n    model.buttonPressed = true;\n    model.startPosition = position;\n    model.previousPosition = position;\n    var normalizedPosition = normalize$1(position, interactor); // borderRatio defines the percentage of the screen size that is considered to be\n    // the border of the screen on each side\n\n    var borderRatio = 0.1; // If the user is clicking on the perimeter of the screen,\n    // then we want to go into rotation mode, and there is no need to determine the downPoint\n\n    if (Math.abs(normalizedPosition.x) > 1 - borderRatio || Math.abs(normalizedPosition.y) > 1 - borderRatio) {\n      model.state = States.IS_ROTATE;\n      placeAndDisplayFocusSphere(interactor);\n      return;\n    }\n    model.downPoint = pickPoint(interactor, position);\n    if (model.isDot) {\n      model.state = States.IS_ROTATE;\n    } else {\n      model.state = States.IS_NONE;\n      if (model.displayFocusSphereOnButtonDown) {\n        placeAndDisplayFocusSphere(interactor);\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n  publicAPI.onMouseMove = function (interactor, renderer, position) {\n    if (!model.buttonPressed) {\n      return;\n    }\n    model.state = States.IS_ROTATE;\n    rotate(interactor, position);\n    model.previousPosition = position;\n  }; //--------------------------------------------------------------------------\n\n  publicAPI.onButtonUp = function (interactor) {\n    var renderer = interactor.findPokedRenderer();\n    model.buttonPressed = false; // If rotation without a focus sphere, nothing to do\n\n    if (model.state === States.IS_ROTATE && !model.isDot) {\n      return;\n    }\n    if (model.state === States.IS_ROTATE) {\n      hideFocusSphere(interactor);\n    } else if (model.state === States.IS_NONE) {\n      placeAndDisplayFocusSphere(interactor);\n    }\n    renderer.resetCameraClippingRange();\n    updateAndRender(interactor);\n  };\n  publicAPI.getFocusSphereColor = function () {\n    model.focusSphere.getProperty().getColor();\n  };\n  publicAPI.setFocusSphereColor = function (r, g, b) {\n    model.focusSphere.getProperty().setColor(r, g, b);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  focusSphereRadiusFactor: 1,\n  displayFocusSphereOnButtonDown: true,\n  useHardwareSelector: true,\n  useWorldUpVec: true,\n  // set WorldUpVector to be z-axis by default\n  worldUpVec: [0, 0, 1]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  vtkCompositeCameraManipulator.extend(publicAPI, model, initialValues);\n  vtkCompositeMouseManipulator.extend(publicAPI, model, initialValues); // Create get-set macros\n\n  macro.setGet(publicAPI, model, ['focusSphereRadiusFactor', 'displayFocusSphereOnButtonDown', 'useHardwareSelector', 'useWorldUpVec']);\n  macro.get(publicAPI, model, ['state']);\n  macro.getArray(publicAPI, model, ['downPoint'], 3);\n  macro.setGetArray(publicAPI, model, ['worldUpVec'], 3); // Object specific methods\n\n  vtkMouseCameraUnicamRotateManipulator(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMouseCameraUnicamRotateManipulator'); // ----------------------------------------------------------------------------\n\nvar vtkMouseCameraUnicamRotateManipulator$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkMouseCameraUnicamRotateManipulator$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","_slicedToArray","vtkActor","vtkCompositeCameraManipulator","vtkCompositeMouseManipulator","vtkInteractorStyleConstants","vtkMapper","vtkPointPicker","vtkSphereSource","FieldAssociations","mat4","vec3","macro","B","areEquals","l","normalize","d","dot","C","clampValue","s","subtract","j","cross","w","multiplyScalar","e","distance2BetweenPoints","States","vtkMouseCameraUnicamRotateManipulator","publicAPI","model","classHierarchy","push","picker","newInstance","downPoint","isDot","state","IS_NONE","sphereSource","setThetaResolution","setPhiResolution","sphereMapper","setInputConnection","getOutputPort","focusSphere","setMapper","getProperty","setColor","setAmbient","setDiffuse","setRepresentationToWireframe","updateAndRender","interactor","useWorldUpVec","camera","findPokedRenderer","getActiveCamera","worldUpVec","getViewPlaneNormal","setViewUp","render","normalize$1","position","renderer","_interactor$getView$g","getView","getViewportSize","_interactor$getView$g2","width","height","nx","x","ny","y","rotateCamera","cx","cy","cz","ax","ay","az","angle","cameraPosition","getPosition","cameraFocalPoint","getFocalPoint","cameraViewUp","getViewUp","transform","identity","Float64Array","translate","rotate","newCameraPosition","newCameraFocalPoint","transformMat4","newCameraViewUp","setPosition","apply","setFocalPoint","_interactor$getView","normalizedPosition","normalizedPreviousPosition","previousPosition","center","normalizedCenter","worldToDisplay","concat","radsq","Math","pow","abs","op","oe","opsq","oesq","lop","sqrt","loe","nop","noe","dot$1","acos","sign","getRotationFactor","upVec","dVec","rDist","atV","upV","rightV","OVER_THE_TOP_THRESHOLD","resetCameraClippingRange","placeFocusSphere","_model$focusSphere","cameraToPointVec","getParallelProjection","getParallelScale","getDirectionOfProjection","scale","focusSphereRadiusFactor","setScale","placeAndDisplayFocusSphere","addActor","hideFocusSphere","removeActor","pickWithPointPicker","pick","z","pickedPositions","getPickedPositions","length","getPickPosition","sort","pointA","pointB","pickPoint","selections","useHardwareSelector","selector","getSelector","setCaptureZValues","setFieldAssociation","FIELD_ASSOCIATION_POINTS","attach","setArea","select","Array","from","getProperties","worldPosition","onButtonDown","buttonPressed","startPosition","borderRatio","IS_ROTATE","displayFocusSphereOnButtonDown","onMouseMove","onButtonUp","getFocusSphereColor","getColor","setFocusSphereColor","r","g","b","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","obj","setGet","get","getArray","setGetArray","vtkMouseCameraUnicamRotateManipulator$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamRotateManipulator.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkCompositeCameraManipulator from './CompositeCameraManipulator.js';\nimport vtkCompositeMouseManipulator from './CompositeMouseManipulator.js';\nimport vtkInteractorStyleConstants from '../../Rendering/Core/InteractorStyle/Constants.js';\nimport vtkMapper from '../../Rendering/Core/Mapper.js';\nimport vtkPointPicker from '../../Rendering/Core/PointPicker.js';\nimport vtkSphereSource from '../../Filters/Sources/SphereSource.js';\nimport { FieldAssociations } from '../../Common/DataModel/DataSet/Constants.js';\nimport { mat4, vec3 } from 'gl-matrix';\nimport macro from '../../macros.js';\nimport { B as areEquals, l as normalize, d as dot, C as clampValue, s as subtract, j as cross, w as multiplyScalar, e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\n\nvar States = vtkInteractorStyleConstants.States; // ----------------------------------------------------------------------------\n// vtkMouseCameraUnicamRotateManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkMouseCameraUnicamRotateManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkMouseCameraUnicamRotateManipulator'); // Setup Picker to pick points\n\n  model.picker = vtkPointPicker.newInstance();\n  model.downPoint = [0, 0, 0];\n  model.isDot = false;\n  model.state = States.IS_NONE; // Setup focus dot\n\n  var sphereSource = vtkSphereSource.newInstance();\n  sphereSource.setThetaResolution(6);\n  sphereSource.setPhiResolution(6);\n  var sphereMapper = vtkMapper.newInstance();\n  sphereMapper.setInputConnection(sphereSource.getOutputPort());\n  model.focusSphere = vtkActor.newInstance();\n  model.focusSphere.setMapper(sphereMapper);\n  model.focusSphere.getProperty().setColor(0.89, 0.66, 0.41);\n  model.focusSphere.getProperty().setAmbient(1);\n  model.focusSphere.getProperty().setDiffuse(0);\n  model.focusSphere.getProperty().setRepresentationToWireframe(); //----------------------------------------------------------------------------\n\n  var updateAndRender = function updateAndRender(interactor) {\n    if (!interactor) {\n      return;\n    }\n\n    if (model.useWorldUpVec) {\n      var camera = interactor.findPokedRenderer().getActiveCamera();\n\n      if (!areEquals(model.worldUpVec, camera.getViewPlaneNormal())) {\n        camera.setViewUp(model.worldUpVec);\n      }\n    }\n\n    interactor.render();\n  }; //----------------------------------------------------------------------------\n\n\n  var normalize$1 = function normalize(position, interactor) {\n    var renderer = interactor.findPokedRenderer();\n\n    var _interactor$getView$g = interactor.getView().getViewportSize(renderer),\n        _interactor$getView$g2 = _slicedToArray(_interactor$getView$g, 2),\n        width = _interactor$getView$g2[0],\n        height = _interactor$getView$g2[1];\n\n    var nx = -1.0 + 2.0 * position.x / width;\n    var ny = -1.0 + 2.0 * position.y / height;\n    return {\n      x: nx,\n      y: ny\n    };\n  }; //----------------------------------------------------------------------------\n  // Rotate the camera by 'angle' degrees about the point <cx, cy, cz>\n  // and around the vector/axis <ax, ay, az>.\n\n\n  var rotateCamera = function rotateCamera(camera, cx, cy, cz, ax, ay, az, angle) {\n    var cameraPosition = camera.getPosition();\n    var cameraFocalPoint = camera.getFocalPoint();\n    var cameraViewUp = camera.getViewUp();\n    cameraPosition[3] = 1.0;\n    cameraFocalPoint[3] = 1.0;\n    cameraViewUp[3] = 0.0;\n    var transform = mat4.identity(new Float64Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    var newCameraPosition = [];\n    var newCameraFocalPoint = [];\n    vec3.transformMat4(newCameraPosition, cameraPosition, transform);\n    vec3.transformMat4(newCameraFocalPoint, cameraFocalPoint, transform);\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    var newCameraViewUp = [];\n    vec3.transformMat4(newCameraViewUp, cameraViewUp, transform);\n    camera.setPosition.apply(camera, newCameraPosition);\n    camera.setFocalPoint.apply(camera, newCameraFocalPoint);\n    camera.setViewUp.apply(camera, newCameraViewUp);\n  }; //----------------------------------------------------------------------------\n\n\n  var rotate = function rotate(interactor, position) {\n    var _interactor$getView;\n\n    var renderer = interactor.findPokedRenderer();\n    var normalizedPosition = normalize$1(position, interactor);\n    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);\n    var center = model.focusSphere.getPosition();\n\n    var normalizedCenter = (_interactor$getView = interactor.getView()).worldToDisplay.apply(_interactor$getView, _toConsumableArray(center).concat([renderer])); // let normalizedCenter = publicAPI.computeWorldToDisplay(renderer, ...center);\n\n\n    normalizedCenter = normalize$1({\n      x: center[0],\n      y: center[1]\n    }, interactor);\n    normalizedCenter = [normalizedCenter.x, normalizedCenter.y, center[2]]; // Squared rad of virtual cylinder\n\n    var radsq = Math.pow(1.0 + Math.abs(normalizedCenter[0]), 2.0);\n    var op = [normalizedPreviousPosition.x, 0, 0];\n    var oe = [normalizedPosition.x, 0, 0];\n    var opsq = Math.pow(op[0], 2);\n    var oesq = Math.pow(oe[0], 2);\n    var lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    var loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n    var nop = [op[0], 0, lop];\n    normalize(nop);\n    var noe = [oe[0], 0, loe];\n    normalize(noe);\n    var dot$1 = dot(nop, noe);\n\n    if (Math.abs(dot$1) > 0.0001) {\n      var angle = -2 * Math.acos(clampValue(dot$1, -1.0, 1.0)) * Math.sign(normalizedPosition.x - normalizedPreviousPosition.x) * publicAPI.getRotationFactor();\n      var camera = renderer.getActiveCamera();\n      var upVec = model.useWorldUpVec ? model.worldUpVec : camera.getViewUp();\n      normalize(upVec);\n      rotateCamera.apply(void 0, [camera].concat(_toConsumableArray(center), _toConsumableArray(upVec), [angle]));\n      var dVec = [];\n      var cameraPosition = camera.getPosition();\n      subtract(cameraPosition, position, dVec);\n      var rDist = (normalizedPosition.y - normalizedPreviousPosition.y) * publicAPI.getRotationFactor();\n      normalize(dVec);\n      var atV = camera.getViewPlaneNormal();\n      var upV = camera.getViewUp();\n      var rightV = [];\n      cross(upV, atV, rightV);\n      normalize(rightV); //\n      // The following two tests try to prevent chaotic camera movement\n      // that results from rotating over the poles defined by the\n      // \"WorldUpVector\".  The problem is the constraint to keep the\n      // camera's up vector in line w/ the WorldUpVector is at odds with\n      // the action of rotating over the top of the virtual sphere used\n      // for rotation.  The solution here is to prevent the user from\n      // rotating the last bit required to \"go over the top\"-- as a\n      // consequence, you can never look directly down on the poles.\n      //\n      // The \"0.99\" value is somewhat arbitrary, but seems to produce\n      // reasonable results.  (Theoretically, some sort of clamping\n      // function could probably be used rather than a hard cutoff, but\n      // time constraints prevent figuring that out right now.)\n      //\n\n      if (model.useWorldUpVec) {\n        var OVER_THE_TOP_THRESHOLD = 0.99;\n\n        if (dot(upVec, atV) > OVER_THE_TOP_THRESHOLD && rDist < 0) {\n          rDist = 0;\n        }\n\n        if (dot(upVec, atV) < -OVER_THE_TOP_THRESHOLD && rDist > 0) {\n          rDist = 0;\n        }\n      }\n\n      rotateCamera.apply(void 0, [camera].concat(_toConsumableArray(center), rightV, [rDist]));\n\n      if (model.useWorldUpVec && !areEquals(upVec, camera.getViewPlaneNormal())) {\n        camera.setViewUp.apply(camera, _toConsumableArray(upVec));\n      }\n\n      model.previousPosition = position;\n      renderer.resetCameraClippingRange();\n      updateAndRender(interactor);\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  var placeFocusSphere = function placeFocusSphere(interactor) {\n    var _model$focusSphere;\n\n    var renderer = interactor.findPokedRenderer();\n\n    (_model$focusSphere = model.focusSphere).setPosition.apply(_model$focusSphere, _toConsumableArray(model.downPoint));\n\n    var camera = renderer.getActiveCamera();\n    var cameraPosition = camera.getPosition();\n    var cameraToPointVec = [];\n    subtract(model.downPoint, cameraPosition, cameraToPointVec);\n\n    if (camera.getParallelProjection()) {\n      multiplyScalar(cameraToPointVec, camera.getParallelScale());\n    }\n\n    var atV = camera.getDirectionOfProjection();\n    normalize(atV); // Scales the focus dot so it always appears the same size\n\n    var scale = 0.02 * dot(atV, cameraToPointVec) * model.focusSphereRadiusFactor;\n    model.focusSphere.setScale(scale, scale, scale);\n  };\n\n  var placeAndDisplayFocusSphere = function placeAndDisplayFocusSphere(interactor) {\n    placeFocusSphere(interactor);\n    interactor.findPokedRenderer().addActor(model.focusSphere);\n    model.isDot = true;\n  };\n\n  var hideFocusSphere = function hideFocusSphere(interactor) {\n    interactor.findPokedRenderer().removeActor(model.focusSphere);\n    model.isDot = false;\n  }; //----------------------------------------------------------------------------\n\n\n  var pickWithPointPicker = function pickWithPointPicker(interactor, position) {\n    var renderer = interactor.findPokedRenderer();\n    model.picker.pick([position.x, position.y, position.z], renderer);\n    var pickedPositions = model.picker.getPickedPositions();\n\n    if (pickedPositions.length === 0) {\n      return model.picker.getPickPosition();\n    }\n\n    var cameraPosition = renderer.getActiveCamera().getPosition();\n    pickedPositions.sort(function (pointA, pointB) {\n      return distance2BetweenPoints(pointA, cameraPosition) - distance2BetweenPoints(pointB, cameraPosition);\n    });\n    return pickedPositions[0];\n  }; //----------------------------------------------------------------------------\n\n\n  var pickPoint = function pickPoint(interactor, position) {\n    var renderer = interactor.findPokedRenderer(); // Finds the point under the cursor.\n    // Note: If no object has been rendered to the pixel (X, Y), then\n    // vtkPicker will return a z-value with depth equal\n    // to the distance from the camera's position to the focal point.\n    // This seems like an arbitrary, but perhaps reasonable, default value.\n\n    var selections = null;\n\n    if (model.useHardwareSelector) {\n      var selector = interactor.getView().getSelector();\n      selector.setCaptureZValues(true);\n      selector.setFieldAssociation(FieldAssociations.FIELD_ASSOCIATION_POINTS);\n      selector.attach(interactor.getView(), renderer);\n      selector.setArea(position.x, position.y, position.x, position.y);\n      selections = selector.select();\n    }\n\n    if (selections && selections.length !== 0) {\n      // convert Float64Array to regular array\n      return Array.from(selections[0].getProperties().worldPosition);\n    }\n\n    return pickWithPointPicker(interactor, position);\n  }; //----------------------------------------------------------------------------\n  // Public API methods\n  //----------------------------------------------------------------------------\n\n\n  publicAPI.onButtonDown = function (interactor, renderer, position) {\n    model.buttonPressed = true;\n    model.startPosition = position;\n    model.previousPosition = position;\n    var normalizedPosition = normalize$1(position, interactor); // borderRatio defines the percentage of the screen size that is considered to be\n    // the border of the screen on each side\n\n    var borderRatio = 0.1; // If the user is clicking on the perimeter of the screen,\n    // then we want to go into rotation mode, and there is no need to determine the downPoint\n\n    if (Math.abs(normalizedPosition.x) > 1 - borderRatio || Math.abs(normalizedPosition.y) > 1 - borderRatio) {\n      model.state = States.IS_ROTATE;\n      placeAndDisplayFocusSphere(interactor);\n      return;\n    }\n\n    model.downPoint = pickPoint(interactor, position);\n\n    if (model.isDot) {\n      model.state = States.IS_ROTATE;\n    } else {\n      model.state = States.IS_NONE;\n\n      if (model.displayFocusSphereOnButtonDown) {\n        placeAndDisplayFocusSphere(interactor);\n      }\n    }\n  }; //----------------------------------------------------------------------------\n\n\n  publicAPI.onMouseMove = function (interactor, renderer, position) {\n    if (!model.buttonPressed) {\n      return;\n    }\n\n    model.state = States.IS_ROTATE;\n    rotate(interactor, position);\n    model.previousPosition = position;\n  }; //--------------------------------------------------------------------------\n\n\n  publicAPI.onButtonUp = function (interactor) {\n    var renderer = interactor.findPokedRenderer();\n    model.buttonPressed = false; // If rotation without a focus sphere, nothing to do\n\n    if (model.state === States.IS_ROTATE && !model.isDot) {\n      return;\n    }\n\n    if (model.state === States.IS_ROTATE) {\n      hideFocusSphere(interactor);\n    } else if (model.state === States.IS_NONE) {\n      placeAndDisplayFocusSphere(interactor);\n    }\n\n    renderer.resetCameraClippingRange();\n    updateAndRender(interactor);\n  };\n\n  publicAPI.getFocusSphereColor = function () {\n    model.focusSphere.getProperty().getColor();\n  };\n\n  publicAPI.setFocusSphereColor = function (r, g, b) {\n    model.focusSphere.getProperty().setColor(r, g, b);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  focusSphereRadiusFactor: 1,\n  displayFocusSphereOnButtonDown: true,\n  useHardwareSelector: true,\n  useWorldUpVec: true,\n  // set WorldUpVector to be z-axis by default\n  worldUpVec: [0, 0, 1]\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  vtkCompositeCameraManipulator.extend(publicAPI, model, initialValues);\n  vtkCompositeMouseManipulator.extend(publicAPI, model, initialValues); // Create get-set macros\n\n  macro.setGet(publicAPI, model, ['focusSphereRadiusFactor', 'displayFocusSphereOnButtonDown', 'useHardwareSelector', 'useWorldUpVec']);\n  macro.get(publicAPI, model, ['state']);\n  macro.getArray(publicAPI, model, ['downPoint'], 3);\n  macro.setGetArray(publicAPI, model, ['worldUpVec'], 3); // Object specific methods\n\n  vtkMouseCameraUnicamRotateManipulator(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMouseCameraUnicamRotateManipulator'); // ----------------------------------------------------------------------------\n\nvar vtkMouseCameraUnicamRotateManipulator$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkMouseCameraUnicamRotateManipulator$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}