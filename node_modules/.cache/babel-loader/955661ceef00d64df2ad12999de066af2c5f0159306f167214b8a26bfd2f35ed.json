{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport * as d3 from 'd3-scale';\nimport { N as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport macro from '../../macros.js';\nimport vtkActor from './Actor.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport vtkMapper from './Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkTexture from './Texture.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar VectorMode = vtkScalarsToColors.VectorMode; // ----------------------------------------------------------------------------\n// vtkScalarBarActor\n//\n// Note log scales are currently not supported\n//\n// Developer note: This class is broken into the main class and a helper\n// class. The main class holds view independent properties (those properties\n// that do not change as the view's resolution/aspect ratio change). The\n// helper class is instantiated one per view and holds properties that can\n// depend on view specific values such as resolution. The helper class code\n// could have been left to the View specific implementation (such as\n// vtkWebGPUScalarBarActor) but is instead placed here to it can be shared by\n// multiple rendering backends.\n//\n// ----------------------------------------------------------------------------\n\nfunction applyTextStyle(ctx, style) {\n  ctx.strokeStyle = style.strokeColor;\n  ctx.lineWidth = style.strokeSize;\n  ctx.fillStyle = style.fontColor;\n  ctx.font = \"\".concat(style.fontStyle, \" \").concat(style.fontSize, \"px \").concat(style.fontFamily);\n} // ----------------------------------------------------------------------------\n// Default autoLayout function\n// ----------------------------------------------------------------------------\n// compute good values to use based on window size etc a bunch of heuristics\n// here with hand tuned constants These values worked for me but really this\n// method could be redically changed. The basic gist is\n// 1) compute a resonable font size\n// 2) render the text atlas using those font sizes\n// 3) pick horizontal or vertical bsed on window size\n// 4) based on the size of the title and tick labels rendered\n//    compute the box size and position such that\n//    the text will all fit nicely and the bar will be a resonable size\n// 5) compute the bar segments based on the above settings\n//\n// Note that this function can and should read values from the\n// ScalarBarActor but should only write values to the view dependent helper\n// instance that is provided as those values are the ones that will be used\n// for rendering.\n//\n\nfunction defaultAutoLayout(publicAPI, model) {\n  return function (helper) {\n    // we don't do a linear scale, the proportions for\n    // a 700 pixel window differ from a 1400\n    var lastSize = helper.getLastSize();\n    var xAxisAdjust = Math.pow(lastSize[0] / 700, 0.8);\n    var yAxisAdjust = Math.pow(lastSize[1] / 700, 0.8);\n    var minAdjust = Math.min(xAxisAdjust, yAxisAdjust);\n    var axisTextStyle = helper.getAxisTextStyle();\n    var tickTextStyle = helper.getTickTextStyle();\n    Object.assign(axisTextStyle, model.axisTextStyle);\n    Object.assign(tickTextStyle, model.tickTextStyle); // compute a reasonable font size first\n\n    axisTextStyle.fontSize = Math.max(24 * minAdjust, 12);\n    if (helper.getLastAspectRatio() > 1.0) {\n      tickTextStyle.fontSize = Math.max(20 * minAdjust, 10);\n    } else {\n      tickTextStyle.fontSize = Math.max(16 * minAdjust, 10);\n    } // rebuild the text atlas\n\n    var textSizes = helper.updateTextureAtlas(); // now compute the boxSize and pixel offsets, different algorithm\n    // for horizonal versus vertical\n\n    helper.setTopTitle(false);\n    var boxSize = helper.getBoxSizeByReference(); // if vertical\n\n    if (helper.getLastAspectRatio() > 1.0) {\n      helper.setTickLabelPixelOffset(0.3 * tickTextStyle.fontSize); // if the title will fit within the width of the bar then that looks\n      // nicer to put it at the top (helper.topTitle), otherwise rotate it\n      // and place it sideways\n\n      if (textSizes.titleWidth <= textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) {\n        helper.setTopTitle(true);\n        helper.setAxisTitlePixelOffset(0.2 * tickTextStyle.fontSize);\n        boxSize[0] = 2.0 * (textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) / lastSize[0];\n        helper.setBoxPosition([0.98 - boxSize[0], -0.92]);\n      } else {\n        helper.setAxisTitlePixelOffset(0.2 * tickTextStyle.fontSize);\n        boxSize[0] = 2.0 * (textSizes.titleHeight + helper.getAxisTitlePixelOffset() + textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) / lastSize[0];\n        helper.setBoxPosition([0.99 - boxSize[0], -0.92]);\n      }\n      boxSize[1] = Math.max(1.2, Math.min(1.84 / yAxisAdjust, 1.84));\n    } else {\n      // horizontal\n      helper.setAxisTitlePixelOffset(1.2 * tickTextStyle.fontSize);\n      helper.setTickLabelPixelOffset(0.1 * tickTextStyle.fontSize);\n      var titleHeight =\n      // total offset from top of bar (includes ticks)\n      2.0 * (0.8 * tickTextStyle.fontSize + textSizes.titleHeight + helper.getAxisTitlePixelOffset()) / lastSize[1];\n      var tickWidth = 2.0 * textSizes.tickWidth / lastSize[0];\n      boxSize[0] = Math.min(1.9, Math.max(1.4, 1.4 * tickWidth * (helper.getTicks().length + 3)));\n      boxSize[1] = titleHeight;\n      helper.setBoxPosition([-0.5 * boxSize[0], -0.97]);\n    } // recomute bar segments based on positioning\n\n    helper.recomputeBarSegments(textSizes);\n  };\n} // ----------------------------------------------------------------------------\n// Default generateTicks function\n// ----------------------------------------------------------------------------\n// This function returns the default function used to generate vtkScalarBarActor ticks.\n// The default function makes use of d3.scaleLinear() to generate 5 tick marks between\n// the minimum and maximum values of the scalar bar. Customize this behavior by passing\n// a function to vtkScalarBarActor.newInstance({ generateTicks: customGenerateTicks })\n// or by calling scalarBarActor.setGenerateTicks(customGenerateTicks).\n\nfunction defaultGenerateTicks(publicApi, model) {\n  return function (helper) {\n    var lastTickBounds = helper.getLastTickBounds();\n    var scale = d3.scaleLinear().domain([lastTickBounds[0], lastTickBounds[1]]);\n    var ticks = scale.ticks(5);\n    var format = scale.tickFormat(5);\n    helper.setTicks(ticks);\n    helper.setTickStrings(ticks.map(format));\n  };\n} // many properties of this actor depend on the API specific view The main\n// dependency being the resolution as that drives what font sizes to use.\n// Bacause of this we need to do some of the calculations in a API specific\n// subclass. But... we don't want a lot of duplicated code between WebGL and\n// WebGPU for example so we have this helper class, that is designed to be\n// fairly API independent so that API specific views can call this to do\n// most of the work.\n\nfunction vtkScalarBarActorHelper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarBarActorHelper');\n  publicAPI.setRenderable = function (renderable) {\n    if (model.renderable === renderable) {\n      return;\n    }\n    model.renderable = renderable;\n    model.barActor.setProperty(renderable.getProperty());\n    model.barActor.setParentProp(renderable);\n    model.barActor.setCoordinateSystemToDisplay();\n    model.tmActor.setProperty(renderable.getProperty());\n    model.tmActor.setParentProp(renderable);\n    model.tmActor.setCoordinateSystemToDisplay();\n    model.generateTicks = renderable.generateTicks;\n    model.axisTextStyle = _objectSpread({}, renderable.getAxisTextStyle());\n    model.tickTextStyle = _objectSpread({}, renderable.getTickTextStyle());\n    publicAPI.modified();\n  };\n  publicAPI.updateAPISpecificData = function (size, camera, renderWindow) {\n    // has the size changed?\n    if (model.lastSize[0] !== size[0] || model.lastSize[1] !== size[1]) {\n      model.lastSize[0] = size[0];\n      model.lastSize[1] = size[1];\n      model.lastAspectRatio = size[0] / size[1];\n      model.forceUpdate = true;\n    }\n    var scalarsToColors = model.renderable.getScalarsToColors();\n    if (!scalarsToColors || !model.renderable.getVisibility()) {\n      return;\n    } // make sure the lut is assigned to our mapper\n\n    model.barMapper.setLookupTable(scalarsToColors); // camera should be the same for all views\n\n    model.camera = camera;\n    model.renderWindow = renderWindow; // did something significant change? If so rebuild a lot of things\n\n    if (model.forceUpdate || Math.max(scalarsToColors.getMTime(), publicAPI.getMTime(), model.renderable.getMTime()) > model.lastRebuildTime.getMTime()) {\n      var range = scalarsToColors.getMappingRange();\n      model.lastTickBounds = _toConsumableArray(range); // compute tick marks for axes (update for log scale)\n\n      model.renderable.getGenerateTicks()(publicAPI);\n      if (model.renderable.getAutomated()) {\n        model.renderable.getAutoLayout()(publicAPI);\n      } else {\n        // copy values from renderable\n        model.axisTextStyle = _objectSpread({}, model.renderable.getAxisTextStyle());\n        model.tickTextStyle = _objectSpread({}, model.renderable.getTickTextStyle());\n        model.barPosition = _toConsumableArray(model.renderable.getBarPosition());\n        model.barSize = _toConsumableArray(model.renderable.getBarSize());\n        model.boxPosition = _toConsumableArray(model.renderable.getBoxPosition());\n        model.boxSize = _toConsumableArray(model.renderable.getBoxSize());\n        model.axisTitlePixelOffset = model.renderable.getAxisTitlePixelOffset();\n        model.tickLabelPixelOffset = model.renderable.getTickLabelPixelOffset(); // rebuild the texture only when force or changed bounds, face\n        // visibility changes do to change the atlas\n\n        var textSizes = publicAPI.updateTextureAtlas(); // recompute bar segments based on positioning\n\n        publicAPI.recomputeBarSegments(textSizes);\n      }\n      publicAPI.updatePolyDataForLabels();\n      publicAPI.updatePolyDataForBarSegments();\n      model.lastRebuildTime.modified();\n      model.forceUpdate = false;\n    }\n  }; // create the texture map atlas that contains the rendering of\n  // all the text strings. Only needs to be called when the text strings\n  // have changed (labels and ticks)\n\n  publicAPI.updateTextureAtlas = function () {\n    // set the text properties\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left'; // return some factors about the text atlas\n\n    var results = {}; // first the axislabel\n\n    var newTmAtlas = new Map();\n    var maxWidth = 0;\n    var totalHeight = 1; // start one pixel in so we have a border\n\n    applyTextStyle(model.tmContext, model.axisTextStyle);\n    var metrics = model.tmContext.measureText(model.renderable.getAxisLabel());\n    var entry = {\n      height: metrics.actualBoundingBoxAscent + 2,\n      startingHeight: totalHeight,\n      width: metrics.width + 2,\n      textStyle: model.axisTextStyle\n    };\n    newTmAtlas.set(model.renderable.getAxisLabel(), entry);\n    totalHeight += entry.height;\n    maxWidth = entry.width;\n    results.titleWidth = entry.width;\n    results.titleHeight = entry.height; // and the ticks, NaN Below and Above\n\n    results.tickWidth = 0;\n    results.tickHeight = 0;\n    applyTextStyle(model.tmContext, model.tickTextStyle);\n    var strings = [].concat(_toConsumableArray(publicAPI.getTickStrings()), ['NaN', 'Below', 'Above']);\n    for (var t = 0; t < strings.length; t++) {\n      if (!newTmAtlas.has(strings[t])) {\n        metrics = model.tmContext.measureText(strings[t]);\n        entry = {\n          height: metrics.actualBoundingBoxAscent + 2,\n          startingHeight: totalHeight,\n          width: metrics.width + 2,\n          textStyle: model.tickTextStyle\n        };\n        newTmAtlas.set(strings[t], entry);\n        totalHeight += entry.height;\n        if (maxWidth < entry.width) {\n          maxWidth = entry.width;\n        }\n        if (results.tickWidth < entry.width) {\n          results.tickWidth = entry.width;\n        }\n        if (results.tickHeight < entry.height) {\n          results.tickHeight = entry.height;\n        }\n      }\n    } // always use power of two to avoid interpolation\n    // in cases where PO2 is required\n\n    maxWidth = nearestPowerOfTwo(maxWidth);\n    totalHeight = nearestPowerOfTwo(totalHeight); // set the tcoord values\n\n    newTmAtlas.forEach(function (value) {\n      value.tcoords = [0.0, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight) / totalHeight, 0.0, (totalHeight - value.startingHeight) / totalHeight];\n    }); // make sure we have power of two dimensions\n\n    model.tmCanvas.width = maxWidth;\n    model.tmCanvas.height = totalHeight;\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n    model.tmContext.clearRect(0, 0, maxWidth, totalHeight); // draw the text onto the texture\n\n    newTmAtlas.forEach(function (value, key) {\n      applyTextStyle(model.tmContext, value.textStyle);\n      model.tmContext.fillText(key, 1, value.startingHeight + value.height - 1);\n    });\n    model.tmTexture.setCanvas(model.tmCanvas); // mark as modified since the canvas typically doesn't change\n\n    model.tmTexture.modified();\n    model._tmAtlas = newTmAtlas;\n    return results;\n  };\n  publicAPI.computeBarSize = function (textSizes) {\n    // compute orientation\n    model.vertical = model.boxSize[1] > model.boxSize[0];\n    var tickHeight = 2.0 * textSizes.tickHeight / model.lastSize[1];\n    var segSize = [1, 1]; // horizontal and vertical have different astetics so adjust based on\n    // orientation\n\n    if (model.vertical) {\n      var tickWidth = 2.0 * (textSizes.tickWidth + model.tickLabelPixelOffset) / model.lastSize[0];\n      if (model.topTitle) {\n        var titleHeight = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[1];\n        model.barSize[0] = model.boxSize[0] - tickWidth;\n        model.barSize[1] = model.boxSize[1] - titleHeight;\n      } else {\n        // rotated title so width is based off height\n        var titleWidth = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[0];\n        model.barSize[0] = model.boxSize[0] - titleWidth - tickWidth;\n        model.barSize[1] = model.boxSize[1];\n      }\n      model.barPosition[0] = model.boxPosition[0] + tickWidth;\n      model.barPosition[1] = model.boxPosition[1];\n      segSize[1] = tickHeight;\n    } else {\n      var _tickWidth = (2.0 * textSizes.tickWidth - 8) / model.lastSize[0];\n      var _titleHeight = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[1];\n      model.barSize[0] = model.boxSize[0];\n      model.barPosition[0] = model.boxPosition[0];\n      model.barSize[1] = model.boxSize[1] - _titleHeight;\n      model.barPosition[1] = model.boxPosition[1];\n      segSize[0] = _tickWidth;\n    }\n    return segSize;\n  }; // based on all the settins compute a barSegments array\n  // containing the segments of the scalar bar\n  // each segment contains\n  //   corners[4][2]\n  //   title - e.g. NaN, Above, ticks\n  //   scalars - the normalized scalars values to use for that segment\n  //\n  // Note that the bar consumes the space in the box that remains after\n  // leaving room for the text labels\n\n  publicAPI.recomputeBarSegments = function (textSizes) {\n    var _model$renderable$get, _model$renderable$get2, _model$renderable$get3, _model$renderable$get4;\n\n    // first compute the barSize/Position\n    var segSize = publicAPI.computeBarSize(textSizes);\n    model.barSegments = [];\n    var startPos = [0.0, 0.0]; // horizontal and vertical have different astetics so adjust based on\n    // orientation\n\n    var barAxis = model.vertical ? 1 : 0;\n    var segSpace = model.vertical ? 0.01 : 0.02;\n    function pushSeg(title, scalars) {\n      model.barSegments.push({\n        corners: [[].concat(startPos), [startPos[0] + segSize[0], startPos[1]], [startPos[0] + segSize[0], startPos[1] + segSize[1]], [startPos[0], startPos[1] + segSize[1]]],\n        scalars: scalars,\n        title: title\n      });\n      startPos[barAxis] += segSize[barAxis] + segSpace;\n    }\n    if (model.renderable.getDrawNanAnnotation() && model.renderable.getScalarsToColors().getNanColor()) {\n      pushSeg('NaN', [NaN, NaN, NaN, NaN]);\n    }\n    if (model.renderable.getDrawBelowRangeSwatch() && (_model$renderable$get = (_model$renderable$get2 = model.renderable.getScalarsToColors()).getUseBelowRangeColor) !== null && _model$renderable$get !== void 0 && _model$renderable$get.call(_model$renderable$get2)) {\n      pushSeg('Below', [-0.1, -0.1, -0.1, -0.1]);\n    }\n    var haveAbove = (_model$renderable$get3 = (_model$renderable$get4 = model.renderable.getScalarsToColors()).getUseAboveRangeColor) === null || _model$renderable$get3 === void 0 ? void 0 : _model$renderable$get3.call(_model$renderable$get4); // extra space around the ticks section\n\n    startPos[barAxis] += segSpace;\n    var oldSegSize = segSize[barAxis];\n    segSize[barAxis] = haveAbove ? 1.0 - 2.0 * segSpace - segSize[barAxis] - startPos[barAxis] : 1.0 - segSpace - startPos[barAxis];\n    pushSeg('ticks', model.vertical ? [0, 0, 0.995, 0.995] : [0, 0.995, 0.995, 0]);\n    if (model.renderable.getDrawAboveRangeSwatch() && haveAbove) {\n      segSize[barAxis] = oldSegSize;\n      startPos[barAxis] += segSpace;\n      pushSeg('Above', [1.1, 1.1, 1.1, 1.1]);\n    }\n  }; // called by updatePolyDataForLabels\n  // modifies class constants tmp2v3\n\n  var tmp2v3 = new Float64Array(3); // anchor point = pos\n  // H alignment = left, middle, right\n  // V alignment = bottom, middle, top\n  // Text Orientation = horizontal, vertical\n  // orientation\n\n  publicAPI.createPolyDataForOneLabel = function (text, pos, alignment, orientation, offset, results) {\n    var value = model._tmAtlas.get(text);\n    if (!value) {\n      return;\n    } // have to find the four corners of the texture polygon for this label\n\n    var ptIdx = results.ptIdx;\n    var cellIdx = results.cellIdx; // get achor point in pixels\n\n    tmp2v3[0] = (0.5 * pos[0] + 0.5) * model.lastSize[0];\n    tmp2v3[1] = (0.5 * pos[1] + 0.5) * model.lastSize[1];\n    tmp2v3[2] = pos[2];\n    tmp2v3[0] += offset[0];\n    tmp2v3[1] += offset[1]; // get text size in display pixels\n\n    var textSize = [];\n    var textAxes = orientation === 'vertical' ? [1, 0] : [0, 1];\n    if (orientation === 'vertical') {\n      textSize[0] = value.width;\n      textSize[1] = -value.height; // update anchor point based on alignment\n\n      if (alignment[0] === 'middle') {\n        tmp2v3[1] -= value.width / 2.0;\n      } else if (alignment[0] === 'right') {\n        tmp2v3[1] -= value.width;\n      }\n      if (alignment[1] === 'middle') {\n        tmp2v3[0] += value.height / 2.0;\n      } else if (alignment[1] === 'top') {\n        tmp2v3[0] += value.height;\n      }\n    } else {\n      textSize[0] = value.width;\n      textSize[1] = value.height; // update anchor point based on alignment\n\n      if (alignment[0] === 'middle') {\n        tmp2v3[0] -= value.width / 2.0;\n      } else if (alignment[0] === 'right') {\n        tmp2v3[0] -= value.width;\n      }\n      if (alignment[1] === 'middle') {\n        tmp2v3[1] -= value.height / 2.0;\n      } else if (alignment[1] === 'top') {\n        tmp2v3[1] -= value.height;\n      }\n    }\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[0];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[1];\n    ptIdx++;\n    tmp2v3[textAxes[0]] += textSize[0];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[2];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[3];\n    ptIdx++;\n    tmp2v3[textAxes[1]] += textSize[1];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[4];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[5];\n    ptIdx++;\n    tmp2v3[textAxes[0]] -= textSize[0];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[6];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[7];\n    ptIdx++; // add the two triangles to represent the quad\n\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 3;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 2;\n    cellIdx++;\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 2;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 1;\n    results.ptIdx += 4;\n    results.cellIdx += 2;\n  }; // update the polydata associated with drawing the text labels\n  // specifically the quads used for each label and their associated tcoords\n  // etc. This changes every time the camera viewpoint changes\n\n  var tmpv3 = new Float64Array(3);\n  publicAPI.updatePolyDataForLabels = function () {\n    // update the polydata\n    var numLabels = publicAPI.getTickStrings().length + model.barSegments.length;\n    var numPts = numLabels * 4;\n    var numTris = numLabels * 2;\n    var points = new Float64Array(numPts * 3);\n    var polys = new Uint16Array(numTris * 4);\n    var tcoords = new Float32Array(numPts * 2);\n    var results = {\n      ptIdx: 0,\n      cellIdx: 0,\n      polys: polys,\n      points: points,\n      tcoords: tcoords\n    }; // compute the direction vector\n\n    var offsetAxis = model.vertical ? 0 : 1;\n    var spacedAxis = model.vertical ? 1 : 0;\n    tmpv3[2] = -0.99; // near plane\n    // draw the title\n\n    var alignment = model.vertical ? ['right', 'middle'] : ['middle', 'bottom'];\n    var dir = [0, 1];\n    var tickOffsets = [0, 0];\n    if (model.vertical) {\n      tickOffsets[0] = -model.tickLabelPixelOffset;\n      if (model.topTitle) {\n        tmpv3[0] = model.boxPosition[0] + 0.5 * model.boxSize[0];\n        tmpv3[1] = model.barPosition[1] + model.barSize[1]; // write the axis label\n\n        publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'bottom'], 'horizontal', [0, model.axisTitlePixelOffset], results);\n      } else {\n        tmpv3[0] = model.barPosition[0] + model.barSize[0];\n        tmpv3[1] = model.barPosition[1] + 0.5 * model.barSize[1]; // write the axis label\n\n        publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'top'], 'vertical', [model.axisTitlePixelOffset, 0], results);\n      }\n      dir = [-1, 0];\n    } else {\n      tickOffsets[1] = model.tickLabelPixelOffset;\n      tmpv3[0] = model.barPosition[0] + 0.5 * model.barSize[0];\n      tmpv3[1] = model.barPosition[1] + model.barSize[1];\n      publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'bottom'], 'horizontal', [0, model.axisTitlePixelOffset], results);\n    }\n    tmpv3[offsetAxis] = model.barPosition[offsetAxis] + (0.5 * dir[offsetAxis] + 0.5) * model.barSize[offsetAxis];\n    tmpv3[spacedAxis] = model.barPosition[spacedAxis] + model.barSize[spacedAxis] * 0.5; // draw bar segment labels\n\n    var tickSeg = null;\n    for (var i = 0; i < model.barSegments.length; i++) {\n      var seg = model.barSegments[i];\n      if (seg.title === 'ticks') {\n        // handle ticks below\n        tickSeg = seg;\n      } else {\n        tmpv3[spacedAxis] = model.barPosition[spacedAxis] + 0.5 * model.barSize[spacedAxis] * (seg.corners[2][spacedAxis] + seg.corners[0][spacedAxis]);\n        publicAPI.createPolyDataForOneLabel(seg.title, tmpv3, alignment, 'horizontal', tickOffsets, results);\n      }\n    } // write the tick labels\n\n    var tickSegmentStart = model.barPosition[spacedAxis] + model.barSize[spacedAxis] * tickSeg.corners[0][spacedAxis];\n    var tickSegmentSize = model.barSize[spacedAxis] * (tickSeg.corners[2][spacedAxis] - tickSeg.corners[0][spacedAxis]);\n    var ticks = publicAPI.getTicks();\n    var tickStrings = publicAPI.getTickStrings();\n    for (var t = 0; t < ticks.length; t++) {\n      var tickPos = (ticks[t] - model.lastTickBounds[0]) / (model.lastTickBounds[1] - model.lastTickBounds[0]);\n      tmpv3[spacedAxis] = tickSegmentStart + tickSegmentSize * tickPos;\n      publicAPI.createPolyDataForOneLabel(tickStrings[t], tmpv3, alignment, 'horizontal', tickOffsets, results);\n    }\n    var tcoordDA = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoords,\n      name: 'TextureCoordinates'\n    });\n    model.tmPolyData.getPointData().setTCoords(tcoordDA);\n    model.tmPolyData.getPoints().setData(points, 3);\n    model.tmPolyData.getPoints().modified();\n    model.tmPolyData.getPolys().setData(polys, 1);\n    model.tmPolyData.getPolys().modified();\n    model.tmPolyData.modified();\n  };\n  publicAPI.updatePolyDataForBarSegments = function () {\n    var _scalarsToColors$getU, _scalarsToColors$getU2;\n    var scalarsToColors = model.renderable.getScalarsToColors();\n    var numberOfExtraColors = 0;\n    if (model.renderable.getDrawNanAnnotation() && scalarsToColors.getNanColor()) {\n      numberOfExtraColors += 1;\n    }\n    if (model.renderable.getDrawBelowRangeSwatch() && (_scalarsToColors$getU = scalarsToColors.getUseBelowRangeColor) !== null && _scalarsToColors$getU !== void 0 && _scalarsToColors$getU.call(scalarsToColors)) {\n      numberOfExtraColors += 1;\n    }\n    if (model.renderable.getDrawAboveRangeSwatch() && (_scalarsToColors$getU2 = scalarsToColors.getUseAboveRangeColor) !== null && _scalarsToColors$getU2 !== void 0 && _scalarsToColors$getU2.call(scalarsToColors)) {\n      numberOfExtraColors += 1;\n    }\n    var numPts = 4 * (1 + numberOfExtraColors);\n    var numQuads = numPts; // handle vector component mode\n\n    var numComps = 1;\n    if (scalarsToColors.getVectorMode() === VectorMode.COMPONENT) {\n      numComps = scalarsToColors.getVectorComponent() + 1;\n    } // create the colored bars\n\n    var points = new Float64Array(numPts * 3);\n    var cells = new Uint16Array(numQuads * 5);\n    var scalars = new Float32Array(numPts * numComps);\n    var ptIdx = 0;\n    var cellIdx = 0;\n    for (var i = 0; i < model.barSegments.length; i++) {\n      var seg = model.barSegments[i];\n      for (var e = 0; e < 4; e++) {\n        tmpv3[0] = model.barPosition[0] + seg.corners[e][0] * model.barSize[0];\n        tmpv3[1] = model.barPosition[1] + seg.corners[e][1] * model.barSize[1];\n        points[ptIdx * 3] = (0.5 * tmpv3[0] + 0.5) * model.lastSize[0];\n        points[ptIdx * 3 + 1] = (0.5 * tmpv3[1] + 0.5) * model.lastSize[1];\n        points[ptIdx * 3 + 2] = tmpv3[2];\n        for (var nc = 0; nc < numComps; nc++) {\n          scalars[ptIdx * numComps + nc] = model.lastTickBounds[0] + seg.scalars[e] * (model.lastTickBounds[1] - model.lastTickBounds[0]);\n        }\n        ptIdx++;\n      }\n      cells[cellIdx * 5] = 4;\n      cells[cellIdx * 5 + 1] = ptIdx - 4;\n      cells[cellIdx * 5 + 2] = ptIdx - 3;\n      cells[cellIdx * 5 + 3] = ptIdx - 2;\n      cells[cellIdx * 5 + 4] = ptIdx - 1;\n      cellIdx++;\n    }\n    var scalarsDA = vtkDataArray.newInstance({\n      numberOfComponents: numComps,\n      values: scalars,\n      name: 'Scalars'\n    });\n    model.polyData.getPointData().setScalars(scalarsDA);\n    model.polyData.getPoints().setData(points, 3);\n    model.polyData.getPoints().modified();\n    model.polyData.getPolys().setData(cells, 1);\n    model.polyData.getPolys().modified();\n    model.polyData.modified();\n  };\n}\nvar newScalarBarActorHelper = macro.newInstance(function (publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    renderable: null\n  };\n  Object.assign(model, {}, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['axisTitlePixelOffset', 'tickLabelPixelOffset', 'renderable', 'topTitle', 'ticks', 'tickStrings']);\n  macro.get(publicAPI, model, ['lastSize', 'lastAspectRatio', 'lastTickBounds', 'axisTextStyle', 'tickTextStyle', 'barActor', 'tmActor']);\n  macro.getArray(publicAPI, model, ['boxPosition', 'boxSize']);\n  macro.setArray(publicAPI, model, ['boxPosition', 'boxSize'], 2);\n  model.forceUpdate = false;\n  model.lastRebuildTime = {};\n  macro.obj(model.lastRebuildTime, {\n    mtime: 0\n  });\n  model.lastSize = [-1, -1];\n  model.tmCanvas = document.createElement('canvas');\n  model.tmContext = model.tmCanvas.getContext('2d');\n  model._tmAtlas = new Map();\n  model.barMapper = vtkMapper.newInstance();\n  model.barMapper.setInterpolateScalarsBeforeMapping(true);\n  model.barMapper.setUseLookupTableScalarRange(true);\n  model.polyData = vtkPolyData.newInstance();\n  model.barMapper.setInputData(model.polyData);\n  model.barActor = vtkActor.newInstance();\n  model.barActor.setMapper(model.barMapper); // for texture atlas\n\n  model.tmPolyData = vtkPolyData.newInstance();\n  model.tmMapper = vtkMapper.newInstance();\n  model.tmMapper.setInputData(model.tmPolyData);\n  model.tmTexture = vtkTexture.newInstance({\n    resizable: true\n  });\n  model.tmTexture.setInterpolate(false);\n  model.tmActor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n  model.tmActor.setMapper(model.tmMapper);\n  model.tmActor.addTexture(model.tmTexture);\n  model.barPosition = [0, 0];\n  model.barSize = [0, 0];\n  model.boxPosition = [0.88, -0.92];\n  model.boxSize = [0.1, 1.1]; // internal variables\n\n  model.lastTickBounds = [];\n  vtkScalarBarActorHelper(publicAPI, model);\n}, 'vtkScalarBarActorHelper'); //\n// Now we define the public class that the application sets view independent\n// properties on. This class is fairly small as it mainly just holds\n// properties setter and getters leaving all calculations to the helper\n// class.\n//\n\nfunction vtkScalarBarActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarBarActor');\n  publicAPI.setTickTextStyle = function (tickStyle) {\n    model.tickTextStyle = _objectSpread(_objectSpread({}, model.tickTextStyle), tickStyle);\n    publicAPI.modified();\n  };\n  publicAPI.setAxisTextStyle = function (axisStyle) {\n    model.axisTextStyle = _objectSpread(_objectSpread({}, model.axisTextStyle), axisStyle);\n    publicAPI.modified();\n  };\n  publicAPI.resetAutoLayoutToDefault = function () {\n    publicAPI.setAutoLayout(defaultAutoLayout(publicAPI, model));\n  };\n  publicAPI.resetGenerateTicksToDefault = function () {\n    publicAPI.setGenerateTicks(defaultGenerateTicks());\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(initialValues) {\n  return _objectSpread({\n    automated: true,\n    autoLayout: null,\n    axisLabel: 'Scalar Value',\n    barPosition: [0, 0],\n    barSize: [0, 0],\n    boxPosition: [0.88, -0.92],\n    boxSize: [0.1, 1.1],\n    scalarToColors: null,\n    axisTitlePixelOffset: 36.0,\n    axisTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 18,\n      fontFamily: 'serif'\n    },\n    tickLabelPixelOffset: 14.0,\n    tickTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 14,\n      fontFamily: 'serif'\n    },\n    generateTicks: null,\n    drawNanAnnotation: true,\n    drawBelowRangeSwatch: true,\n    drawAboveRangeSwatch: true\n  }, initialValues);\n} // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  if (!model.autoLayout) model.autoLayout = defaultAutoLayout(publicAPI, model);\n  if (!model.generateTicks) model.generateTicks = defaultGenerateTicks(); // Inheritance\n\n  vtkActor.extend(publicAPI, model, initialValues);\n  publicAPI.getProperty().setDiffuse(0.0);\n  publicAPI.getProperty().setAmbient(1.0);\n  macro.setGet(publicAPI, model, ['automated', 'autoLayout', 'axisTitlePixelOffset', 'axisLabel', 'scalarsToColors', 'tickLabelPixelOffset', 'generateTicks', 'drawNanAnnotation', 'drawBelowRangeSwatch', 'drawAboveRangeSwatch']);\n  macro.get(publicAPI, model, ['axisTextStyle', 'tickTextStyle']);\n  macro.getArray(publicAPI, model, ['barPosition', 'barSize', 'boxPosition', 'boxSize']);\n  macro.setArray(publicAPI, model, ['barPosition', 'barSize', 'boxPosition', 'boxSize'], 2); // Object methods\n\n  vtkScalarBarActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkScalarBarActor'); // ----------------------------------------------------------------------------\n\nvar vtkScalarBarActor$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  newScalarBarActorHelper: newScalarBarActorHelper\n};\nexport { vtkScalarBarActor$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","_defineProperty","d3","N","nearestPowerOfTwo","macro","vtkActor","vtkDataArray","vtkScalarsToColors","vtkMapper","vtkPolyData","vtkTexture","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","VectorMode","applyTextStyle","ctx","style","strokeStyle","strokeColor","lineWidth","strokeSize","fillStyle","fontColor","font","concat","fontStyle","fontSize","fontFamily","defaultAutoLayout","publicAPI","model","helper","lastSize","getLastSize","xAxisAdjust","Math","pow","yAxisAdjust","minAdjust","min","axisTextStyle","getAxisTextStyle","tickTextStyle","getTickTextStyle","assign","max","getLastAspectRatio","textSizes","updateTextureAtlas","setTopTitle","boxSize","getBoxSizeByReference","setTickLabelPixelOffset","titleWidth","tickWidth","getTickLabelPixelOffset","setAxisTitlePixelOffset","setBoxPosition","titleHeight","getAxisTitlePixelOffset","getTicks","recomputeBarSegments","defaultGenerateTicks","publicApi","lastTickBounds","getLastTickBounds","scale","scaleLinear","domain","ticks","format","tickFormat","setTicks","setTickStrings","map","vtkScalarBarActorHelper","classHierarchy","setRenderable","renderable","barActor","setProperty","getProperty","setParentProp","setCoordinateSystemToDisplay","tmActor","generateTicks","modified","updateAPISpecificData","size","camera","renderWindow","lastAspectRatio","forceUpdate","scalarsToColors","getScalarsToColors","getVisibility","barMapper","setLookupTable","getMTime","lastRebuildTime","range","getMappingRange","getGenerateTicks","getAutomated","getAutoLayout","barPosition","getBarPosition","barSize","getBarSize","boxPosition","getBoxPosition","getBoxSize","axisTitlePixelOffset","tickLabelPixelOffset","updatePolyDataForLabels","updatePolyDataForBarSegments","tmContext","textBaseline","textAlign","results","newTmAtlas","Map","maxWidth","totalHeight","metrics","measureText","getAxisLabel","entry","height","actualBoundingBoxAscent","startingHeight","width","textStyle","set","tickHeight","strings","getTickStrings","t","has","value","tcoords","tmCanvas","clearRect","fillText","tmTexture","setCanvas","_tmAtlas","computeBarSize","vertical","segSize","topTitle","_tickWidth","_titleHeight","_model$renderable$get","_model$renderable$get2","_model$renderable$get3","_model$renderable$get4","barSegments","startPos","barAxis","segSpace","pushSeg","title","scalars","corners","getDrawNanAnnotation","getNanColor","NaN","getDrawBelowRangeSwatch","getUseBelowRangeColor","call","haveAbove","getUseAboveRangeColor","oldSegSize","getDrawAboveRangeSwatch","tmp2v3","Float64Array","createPolyDataForOneLabel","text","pos","alignment","orientation","offset","get","ptIdx","cellIdx","textSize","textAxes","points","polys","tmpv3","numLabels","numPts","numTris","Uint16Array","Float32Array","offsetAxis","spacedAxis","dir","tickOffsets","tickSeg","seg","tickSegmentStart","tickSegmentSize","tickStrings","tickPos","tcoordDA","newInstance","numberOfComponents","values","name","tmPolyData","getPointData","setTCoords","getPoints","setData","getPolys","_scalarsToColors$getU","_scalarsToColors$getU2","numberOfExtraColors","numQuads","numComps","getVectorMode","COMPONENT","getVectorComponent","cells","e","nc","scalarsDA","polyData","setScalars","newScalarBarActorHelper","initialValues","undefined","obj","setGet","getArray","setArray","mtime","document","createElement","getContext","setInterpolateScalarsBeforeMapping","setUseLookupTableScalarRange","setInputData","setMapper","tmMapper","resizable","setInterpolate","parentProp","addTexture","vtkScalarBarActor","setTickTextStyle","tickStyle","setAxisTextStyle","axisStyle","resetAutoLayoutToDefault","setAutoLayout","resetGenerateTicksToDefault","setGenerateTicks","defaultValues","automated","autoLayout","axisLabel","scalarToColors","drawNanAnnotation","drawBelowRangeSwatch","drawAboveRangeSwatch","extend","setDiffuse","setAmbient","vtkScalarBarActor$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Core/ScalarBarActor.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport * as d3 from 'd3-scale';\nimport { N as nearestPowerOfTwo } from '../../Common/Core/Math/index.js';\nimport macro from '../../macros.js';\nimport vtkActor from './Actor.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport vtkMapper from './Mapper.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkTexture from './Texture.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar VectorMode = vtkScalarsToColors.VectorMode; // ----------------------------------------------------------------------------\n// vtkScalarBarActor\n//\n// Note log scales are currently not supported\n//\n// Developer note: This class is broken into the main class and a helper\n// class. The main class holds view independent properties (those properties\n// that do not change as the view's resolution/aspect ratio change). The\n// helper class is instantiated one per view and holds properties that can\n// depend on view specific values such as resolution. The helper class code\n// could have been left to the View specific implementation (such as\n// vtkWebGPUScalarBarActor) but is instead placed here to it can be shared by\n// multiple rendering backends.\n//\n// ----------------------------------------------------------------------------\n\nfunction applyTextStyle(ctx, style) {\n  ctx.strokeStyle = style.strokeColor;\n  ctx.lineWidth = style.strokeSize;\n  ctx.fillStyle = style.fontColor;\n  ctx.font = \"\".concat(style.fontStyle, \" \").concat(style.fontSize, \"px \").concat(style.fontFamily);\n} // ----------------------------------------------------------------------------\n// Default autoLayout function\n// ----------------------------------------------------------------------------\n// compute good values to use based on window size etc a bunch of heuristics\n// here with hand tuned constants These values worked for me but really this\n// method could be redically changed. The basic gist is\n// 1) compute a resonable font size\n// 2) render the text atlas using those font sizes\n// 3) pick horizontal or vertical bsed on window size\n// 4) based on the size of the title and tick labels rendered\n//    compute the box size and position such that\n//    the text will all fit nicely and the bar will be a resonable size\n// 5) compute the bar segments based on the above settings\n//\n// Note that this function can and should read values from the\n// ScalarBarActor but should only write values to the view dependent helper\n// instance that is provided as those values are the ones that will be used\n// for rendering.\n//\n\n\nfunction defaultAutoLayout(publicAPI, model) {\n  return function (helper) {\n    // we don't do a linear scale, the proportions for\n    // a 700 pixel window differ from a 1400\n    var lastSize = helper.getLastSize();\n    var xAxisAdjust = Math.pow(lastSize[0] / 700, 0.8);\n    var yAxisAdjust = Math.pow(lastSize[1] / 700, 0.8);\n    var minAdjust = Math.min(xAxisAdjust, yAxisAdjust);\n    var axisTextStyle = helper.getAxisTextStyle();\n    var tickTextStyle = helper.getTickTextStyle();\n    Object.assign(axisTextStyle, model.axisTextStyle);\n    Object.assign(tickTextStyle, model.tickTextStyle); // compute a reasonable font size first\n\n    axisTextStyle.fontSize = Math.max(24 * minAdjust, 12);\n\n    if (helper.getLastAspectRatio() > 1.0) {\n      tickTextStyle.fontSize = Math.max(20 * minAdjust, 10);\n    } else {\n      tickTextStyle.fontSize = Math.max(16 * minAdjust, 10);\n    } // rebuild the text atlas\n\n\n    var textSizes = helper.updateTextureAtlas(); // now compute the boxSize and pixel offsets, different algorithm\n    // for horizonal versus vertical\n\n    helper.setTopTitle(false);\n    var boxSize = helper.getBoxSizeByReference(); // if vertical\n\n    if (helper.getLastAspectRatio() > 1.0) {\n      helper.setTickLabelPixelOffset(0.3 * tickTextStyle.fontSize); // if the title will fit within the width of the bar then that looks\n      // nicer to put it at the top (helper.topTitle), otherwise rotate it\n      // and place it sideways\n\n      if (textSizes.titleWidth <= textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) {\n        helper.setTopTitle(true);\n        helper.setAxisTitlePixelOffset(0.2 * tickTextStyle.fontSize);\n        boxSize[0] = 2.0 * (textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) / lastSize[0];\n        helper.setBoxPosition([0.98 - boxSize[0], -0.92]);\n      } else {\n        helper.setAxisTitlePixelOffset(0.2 * tickTextStyle.fontSize);\n        boxSize[0] = 2.0 * (textSizes.titleHeight + helper.getAxisTitlePixelOffset() + textSizes.tickWidth + helper.getTickLabelPixelOffset() + 0.8 * tickTextStyle.fontSize) / lastSize[0];\n        helper.setBoxPosition([0.99 - boxSize[0], -0.92]);\n      }\n\n      boxSize[1] = Math.max(1.2, Math.min(1.84 / yAxisAdjust, 1.84));\n    } else {\n      // horizontal\n      helper.setAxisTitlePixelOffset(1.2 * tickTextStyle.fontSize);\n      helper.setTickLabelPixelOffset(0.1 * tickTextStyle.fontSize);\n      var titleHeight = // total offset from top of bar (includes ticks)\n      2.0 * (0.8 * tickTextStyle.fontSize + textSizes.titleHeight + helper.getAxisTitlePixelOffset()) / lastSize[1];\n      var tickWidth = 2.0 * textSizes.tickWidth / lastSize[0];\n      boxSize[0] = Math.min(1.9, Math.max(1.4, 1.4 * tickWidth * (helper.getTicks().length + 3)));\n      boxSize[1] = titleHeight;\n      helper.setBoxPosition([-0.5 * boxSize[0], -0.97]);\n    } // recomute bar segments based on positioning\n\n\n    helper.recomputeBarSegments(textSizes);\n  };\n} // ----------------------------------------------------------------------------\n// Default generateTicks function\n// ----------------------------------------------------------------------------\n// This function returns the default function used to generate vtkScalarBarActor ticks.\n// The default function makes use of d3.scaleLinear() to generate 5 tick marks between\n// the minimum and maximum values of the scalar bar. Customize this behavior by passing\n// a function to vtkScalarBarActor.newInstance({ generateTicks: customGenerateTicks })\n// or by calling scalarBarActor.setGenerateTicks(customGenerateTicks).\n\n\nfunction defaultGenerateTicks(publicApi, model) {\n  return function (helper) {\n    var lastTickBounds = helper.getLastTickBounds();\n    var scale = d3.scaleLinear().domain([lastTickBounds[0], lastTickBounds[1]]);\n    var ticks = scale.ticks(5);\n    var format = scale.tickFormat(5);\n    helper.setTicks(ticks);\n    helper.setTickStrings(ticks.map(format));\n  };\n} // many properties of this actor depend on the API specific view The main\n// dependency being the resolution as that drives what font sizes to use.\n// Bacause of this we need to do some of the calculations in a API specific\n// subclass. But... we don't want a lot of duplicated code between WebGL and\n// WebGPU for example so we have this helper class, that is designed to be\n// fairly API independent so that API specific views can call this to do\n// most of the work.\n\n\nfunction vtkScalarBarActorHelper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarBarActorHelper');\n\n  publicAPI.setRenderable = function (renderable) {\n    if (model.renderable === renderable) {\n      return;\n    }\n\n    model.renderable = renderable;\n    model.barActor.setProperty(renderable.getProperty());\n    model.barActor.setParentProp(renderable);\n    model.barActor.setCoordinateSystemToDisplay();\n    model.tmActor.setProperty(renderable.getProperty());\n    model.tmActor.setParentProp(renderable);\n    model.tmActor.setCoordinateSystemToDisplay();\n    model.generateTicks = renderable.generateTicks;\n    model.axisTextStyle = _objectSpread({}, renderable.getAxisTextStyle());\n    model.tickTextStyle = _objectSpread({}, renderable.getTickTextStyle());\n    publicAPI.modified();\n  };\n\n  publicAPI.updateAPISpecificData = function (size, camera, renderWindow) {\n    // has the size changed?\n    if (model.lastSize[0] !== size[0] || model.lastSize[1] !== size[1]) {\n      model.lastSize[0] = size[0];\n      model.lastSize[1] = size[1];\n      model.lastAspectRatio = size[0] / size[1];\n      model.forceUpdate = true;\n    }\n\n    var scalarsToColors = model.renderable.getScalarsToColors();\n\n    if (!scalarsToColors || !model.renderable.getVisibility()) {\n      return;\n    } // make sure the lut is assigned to our mapper\n\n\n    model.barMapper.setLookupTable(scalarsToColors); // camera should be the same for all views\n\n    model.camera = camera;\n    model.renderWindow = renderWindow; // did something significant change? If so rebuild a lot of things\n\n    if (model.forceUpdate || Math.max(scalarsToColors.getMTime(), publicAPI.getMTime(), model.renderable.getMTime()) > model.lastRebuildTime.getMTime()) {\n      var range = scalarsToColors.getMappingRange();\n      model.lastTickBounds = _toConsumableArray(range); // compute tick marks for axes (update for log scale)\n\n      model.renderable.getGenerateTicks()(publicAPI);\n\n      if (model.renderable.getAutomated()) {\n        model.renderable.getAutoLayout()(publicAPI);\n      } else {\n        // copy values from renderable\n        model.axisTextStyle = _objectSpread({}, model.renderable.getAxisTextStyle());\n        model.tickTextStyle = _objectSpread({}, model.renderable.getTickTextStyle());\n        model.barPosition = _toConsumableArray(model.renderable.getBarPosition());\n        model.barSize = _toConsumableArray(model.renderable.getBarSize());\n        model.boxPosition = _toConsumableArray(model.renderable.getBoxPosition());\n        model.boxSize = _toConsumableArray(model.renderable.getBoxSize());\n        model.axisTitlePixelOffset = model.renderable.getAxisTitlePixelOffset();\n        model.tickLabelPixelOffset = model.renderable.getTickLabelPixelOffset(); // rebuild the texture only when force or changed bounds, face\n        // visibility changes do to change the atlas\n\n        var textSizes = publicAPI.updateTextureAtlas(); // recompute bar segments based on positioning\n\n        publicAPI.recomputeBarSegments(textSizes);\n      }\n\n      publicAPI.updatePolyDataForLabels();\n      publicAPI.updatePolyDataForBarSegments();\n      model.lastRebuildTime.modified();\n      model.forceUpdate = false;\n    }\n  }; // create the texture map atlas that contains the rendering of\n  // all the text strings. Only needs to be called when the text strings\n  // have changed (labels and ticks)\n\n\n  publicAPI.updateTextureAtlas = function () {\n    // set the text properties\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left'; // return some factors about the text atlas\n\n    var results = {}; // first the axislabel\n\n    var newTmAtlas = new Map();\n    var maxWidth = 0;\n    var totalHeight = 1; // start one pixel in so we have a border\n\n    applyTextStyle(model.tmContext, model.axisTextStyle);\n    var metrics = model.tmContext.measureText(model.renderable.getAxisLabel());\n    var entry = {\n      height: metrics.actualBoundingBoxAscent + 2,\n      startingHeight: totalHeight,\n      width: metrics.width + 2,\n      textStyle: model.axisTextStyle\n    };\n    newTmAtlas.set(model.renderable.getAxisLabel(), entry);\n    totalHeight += entry.height;\n    maxWidth = entry.width;\n    results.titleWidth = entry.width;\n    results.titleHeight = entry.height; // and the ticks, NaN Below and Above\n\n    results.tickWidth = 0;\n    results.tickHeight = 0;\n    applyTextStyle(model.tmContext, model.tickTextStyle);\n    var strings = [].concat(_toConsumableArray(publicAPI.getTickStrings()), ['NaN', 'Below', 'Above']);\n\n    for (var t = 0; t < strings.length; t++) {\n      if (!newTmAtlas.has(strings[t])) {\n        metrics = model.tmContext.measureText(strings[t]);\n        entry = {\n          height: metrics.actualBoundingBoxAscent + 2,\n          startingHeight: totalHeight,\n          width: metrics.width + 2,\n          textStyle: model.tickTextStyle\n        };\n        newTmAtlas.set(strings[t], entry);\n        totalHeight += entry.height;\n\n        if (maxWidth < entry.width) {\n          maxWidth = entry.width;\n        }\n\n        if (results.tickWidth < entry.width) {\n          results.tickWidth = entry.width;\n        }\n\n        if (results.tickHeight < entry.height) {\n          results.tickHeight = entry.height;\n        }\n      }\n    } // always use power of two to avoid interpolation\n    // in cases where PO2 is required\n\n\n    maxWidth = nearestPowerOfTwo(maxWidth);\n    totalHeight = nearestPowerOfTwo(totalHeight); // set the tcoord values\n\n    newTmAtlas.forEach(function (value) {\n      value.tcoords = [0.0, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight - value.height) / totalHeight, value.width / maxWidth, (totalHeight - value.startingHeight) / totalHeight, 0.0, (totalHeight - value.startingHeight) / totalHeight];\n    }); // make sure we have power of two dimensions\n\n    model.tmCanvas.width = maxWidth;\n    model.tmCanvas.height = totalHeight;\n    model.tmContext.textBaseline = 'bottom';\n    model.tmContext.textAlign = 'left';\n    model.tmContext.clearRect(0, 0, maxWidth, totalHeight); // draw the text onto the texture\n\n    newTmAtlas.forEach(function (value, key) {\n      applyTextStyle(model.tmContext, value.textStyle);\n      model.tmContext.fillText(key, 1, value.startingHeight + value.height - 1);\n    });\n    model.tmTexture.setCanvas(model.tmCanvas); // mark as modified since the canvas typically doesn't change\n\n    model.tmTexture.modified();\n    model._tmAtlas = newTmAtlas;\n    return results;\n  };\n\n  publicAPI.computeBarSize = function (textSizes) {\n    // compute orientation\n    model.vertical = model.boxSize[1] > model.boxSize[0];\n    var tickHeight = 2.0 * textSizes.tickHeight / model.lastSize[1];\n    var segSize = [1, 1]; // horizontal and vertical have different astetics so adjust based on\n    // orientation\n\n    if (model.vertical) {\n      var tickWidth = 2.0 * (textSizes.tickWidth + model.tickLabelPixelOffset) / model.lastSize[0];\n\n      if (model.topTitle) {\n        var titleHeight = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[1];\n        model.barSize[0] = model.boxSize[0] - tickWidth;\n        model.barSize[1] = model.boxSize[1] - titleHeight;\n      } else {\n        // rotated title so width is based off height\n        var titleWidth = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[0];\n        model.barSize[0] = model.boxSize[0] - titleWidth - tickWidth;\n        model.barSize[1] = model.boxSize[1];\n      }\n\n      model.barPosition[0] = model.boxPosition[0] + tickWidth;\n      model.barPosition[1] = model.boxPosition[1];\n      segSize[1] = tickHeight;\n    } else {\n      var _tickWidth = (2.0 * textSizes.tickWidth - 8) / model.lastSize[0];\n\n      var _titleHeight = 2.0 * (textSizes.titleHeight + model.axisTitlePixelOffset) / model.lastSize[1];\n\n      model.barSize[0] = model.boxSize[0];\n      model.barPosition[0] = model.boxPosition[0];\n      model.barSize[1] = model.boxSize[1] - _titleHeight;\n      model.barPosition[1] = model.boxPosition[1];\n      segSize[0] = _tickWidth;\n    }\n\n    return segSize;\n  }; // based on all the settins compute a barSegments array\n  // containing the segments of the scalar bar\n  // each segment contains\n  //   corners[4][2]\n  //   title - e.g. NaN, Above, ticks\n  //   scalars - the normalized scalars values to use for that segment\n  //\n  // Note that the bar consumes the space in the box that remains after\n  // leaving room for the text labels\n\n\n  publicAPI.recomputeBarSegments = function (textSizes) {\n    var _model$renderable$get, _model$renderable$get2, _model$renderable$get3, _model$renderable$get4;\n\n    // first compute the barSize/Position\n    var segSize = publicAPI.computeBarSize(textSizes);\n    model.barSegments = [];\n    var startPos = [0.0, 0.0]; // horizontal and vertical have different astetics so adjust based on\n    // orientation\n\n    var barAxis = model.vertical ? 1 : 0;\n    var segSpace = model.vertical ? 0.01 : 0.02;\n\n    function pushSeg(title, scalars) {\n      model.barSegments.push({\n        corners: [[].concat(startPos), [startPos[0] + segSize[0], startPos[1]], [startPos[0] + segSize[0], startPos[1] + segSize[1]], [startPos[0], startPos[1] + segSize[1]]],\n        scalars: scalars,\n        title: title\n      });\n      startPos[barAxis] += segSize[barAxis] + segSpace;\n    }\n\n    if (model.renderable.getDrawNanAnnotation() && model.renderable.getScalarsToColors().getNanColor()) {\n      pushSeg('NaN', [NaN, NaN, NaN, NaN]);\n    }\n\n    if (model.renderable.getDrawBelowRangeSwatch() && (_model$renderable$get = (_model$renderable$get2 = model.renderable.getScalarsToColors()).getUseBelowRangeColor) !== null && _model$renderable$get !== void 0 && _model$renderable$get.call(_model$renderable$get2)) {\n      pushSeg('Below', [-0.1, -0.1, -0.1, -0.1]);\n    }\n\n    var haveAbove = (_model$renderable$get3 = (_model$renderable$get4 = model.renderable.getScalarsToColors()).getUseAboveRangeColor) === null || _model$renderable$get3 === void 0 ? void 0 : _model$renderable$get3.call(_model$renderable$get4); // extra space around the ticks section\n\n    startPos[barAxis] += segSpace;\n    var oldSegSize = segSize[barAxis];\n    segSize[barAxis] = haveAbove ? 1.0 - 2.0 * segSpace - segSize[barAxis] - startPos[barAxis] : 1.0 - segSpace - startPos[barAxis];\n    pushSeg('ticks', model.vertical ? [0, 0, 0.995, 0.995] : [0, 0.995, 0.995, 0]);\n\n    if (model.renderable.getDrawAboveRangeSwatch() && haveAbove) {\n      segSize[barAxis] = oldSegSize;\n      startPos[barAxis] += segSpace;\n      pushSeg('Above', [1.1, 1.1, 1.1, 1.1]);\n    }\n  }; // called by updatePolyDataForLabels\n  // modifies class constants tmp2v3\n\n\n  var tmp2v3 = new Float64Array(3); // anchor point = pos\n  // H alignment = left, middle, right\n  // V alignment = bottom, middle, top\n  // Text Orientation = horizontal, vertical\n  // orientation\n\n  publicAPI.createPolyDataForOneLabel = function (text, pos, alignment, orientation, offset, results) {\n    var value = model._tmAtlas.get(text);\n\n    if (!value) {\n      return;\n    } // have to find the four corners of the texture polygon for this label\n\n\n    var ptIdx = results.ptIdx;\n    var cellIdx = results.cellIdx; // get achor point in pixels\n\n    tmp2v3[0] = (0.5 * pos[0] + 0.5) * model.lastSize[0];\n    tmp2v3[1] = (0.5 * pos[1] + 0.5) * model.lastSize[1];\n    tmp2v3[2] = pos[2];\n    tmp2v3[0] += offset[0];\n    tmp2v3[1] += offset[1]; // get text size in display pixels\n\n    var textSize = [];\n    var textAxes = orientation === 'vertical' ? [1, 0] : [0, 1];\n\n    if (orientation === 'vertical') {\n      textSize[0] = value.width;\n      textSize[1] = -value.height; // update anchor point based on alignment\n\n      if (alignment[0] === 'middle') {\n        tmp2v3[1] -= value.width / 2.0;\n      } else if (alignment[0] === 'right') {\n        tmp2v3[1] -= value.width;\n      }\n\n      if (alignment[1] === 'middle') {\n        tmp2v3[0] += value.height / 2.0;\n      } else if (alignment[1] === 'top') {\n        tmp2v3[0] += value.height;\n      }\n    } else {\n      textSize[0] = value.width;\n      textSize[1] = value.height; // update anchor point based on alignment\n\n      if (alignment[0] === 'middle') {\n        tmp2v3[0] -= value.width / 2.0;\n      } else if (alignment[0] === 'right') {\n        tmp2v3[0] -= value.width;\n      }\n\n      if (alignment[1] === 'middle') {\n        tmp2v3[1] -= value.height / 2.0;\n      } else if (alignment[1] === 'top') {\n        tmp2v3[1] -= value.height;\n      }\n    }\n\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[0];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[1];\n    ptIdx++;\n    tmp2v3[textAxes[0]] += textSize[0];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[2];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[3];\n    ptIdx++;\n    tmp2v3[textAxes[1]] += textSize[1];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[4];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[5];\n    ptIdx++;\n    tmp2v3[textAxes[0]] -= textSize[0];\n    results.points[ptIdx * 3] = tmp2v3[0];\n    results.points[ptIdx * 3 + 1] = tmp2v3[1];\n    results.points[ptIdx * 3 + 2] = tmp2v3[2];\n    results.tcoords[ptIdx * 2] = value.tcoords[6];\n    results.tcoords[ptIdx * 2 + 1] = value.tcoords[7];\n    ptIdx++; // add the two triangles to represent the quad\n\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 3;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 2;\n    cellIdx++;\n    results.polys[cellIdx * 4] = 3;\n    results.polys[cellIdx * 4 + 1] = ptIdx - 4;\n    results.polys[cellIdx * 4 + 2] = ptIdx - 2;\n    results.polys[cellIdx * 4 + 3] = ptIdx - 1;\n    results.ptIdx += 4;\n    results.cellIdx += 2;\n  }; // update the polydata associated with drawing the text labels\n  // specifically the quads used for each label and their associated tcoords\n  // etc. This changes every time the camera viewpoint changes\n\n\n  var tmpv3 = new Float64Array(3);\n\n  publicAPI.updatePolyDataForLabels = function () {\n    // update the polydata\n    var numLabels = publicAPI.getTickStrings().length + model.barSegments.length;\n    var numPts = numLabels * 4;\n    var numTris = numLabels * 2;\n    var points = new Float64Array(numPts * 3);\n    var polys = new Uint16Array(numTris * 4);\n    var tcoords = new Float32Array(numPts * 2);\n    var results = {\n      ptIdx: 0,\n      cellIdx: 0,\n      polys: polys,\n      points: points,\n      tcoords: tcoords\n    }; // compute the direction vector\n\n    var offsetAxis = model.vertical ? 0 : 1;\n    var spacedAxis = model.vertical ? 1 : 0;\n    tmpv3[2] = -0.99; // near plane\n    // draw the title\n\n    var alignment = model.vertical ? ['right', 'middle'] : ['middle', 'bottom'];\n    var dir = [0, 1];\n    var tickOffsets = [0, 0];\n\n    if (model.vertical) {\n      tickOffsets[0] = -model.tickLabelPixelOffset;\n\n      if (model.topTitle) {\n        tmpv3[0] = model.boxPosition[0] + 0.5 * model.boxSize[0];\n        tmpv3[1] = model.barPosition[1] + model.barSize[1]; // write the axis label\n\n        publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'bottom'], 'horizontal', [0, model.axisTitlePixelOffset], results);\n      } else {\n        tmpv3[0] = model.barPosition[0] + model.barSize[0];\n        tmpv3[1] = model.barPosition[1] + 0.5 * model.barSize[1]; // write the axis label\n\n        publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'top'], 'vertical', [model.axisTitlePixelOffset, 0], results);\n      }\n\n      dir = [-1, 0];\n    } else {\n      tickOffsets[1] = model.tickLabelPixelOffset;\n      tmpv3[0] = model.barPosition[0] + 0.5 * model.barSize[0];\n      tmpv3[1] = model.barPosition[1] + model.barSize[1];\n      publicAPI.createPolyDataForOneLabel(model.renderable.getAxisLabel(), tmpv3, ['middle', 'bottom'], 'horizontal', [0, model.axisTitlePixelOffset], results);\n    }\n\n    tmpv3[offsetAxis] = model.barPosition[offsetAxis] + (0.5 * dir[offsetAxis] + 0.5) * model.barSize[offsetAxis];\n    tmpv3[spacedAxis] = model.barPosition[spacedAxis] + model.barSize[spacedAxis] * 0.5; // draw bar segment labels\n\n    var tickSeg = null;\n\n    for (var i = 0; i < model.barSegments.length; i++) {\n      var seg = model.barSegments[i];\n\n      if (seg.title === 'ticks') {\n        // handle ticks below\n        tickSeg = seg;\n      } else {\n        tmpv3[spacedAxis] = model.barPosition[spacedAxis] + 0.5 * model.barSize[spacedAxis] * (seg.corners[2][spacedAxis] + seg.corners[0][spacedAxis]);\n        publicAPI.createPolyDataForOneLabel(seg.title, tmpv3, alignment, 'horizontal', tickOffsets, results);\n      }\n    } // write the tick labels\n\n\n    var tickSegmentStart = model.barPosition[spacedAxis] + model.barSize[spacedAxis] * tickSeg.corners[0][spacedAxis];\n    var tickSegmentSize = model.barSize[spacedAxis] * (tickSeg.corners[2][spacedAxis] - tickSeg.corners[0][spacedAxis]);\n    var ticks = publicAPI.getTicks();\n    var tickStrings = publicAPI.getTickStrings();\n\n    for (var t = 0; t < ticks.length; t++) {\n      var tickPos = (ticks[t] - model.lastTickBounds[0]) / (model.lastTickBounds[1] - model.lastTickBounds[0]);\n      tmpv3[spacedAxis] = tickSegmentStart + tickSegmentSize * tickPos;\n      publicAPI.createPolyDataForOneLabel(tickStrings[t], tmpv3, alignment, 'horizontal', tickOffsets, results);\n    }\n\n    var tcoordDA = vtkDataArray.newInstance({\n      numberOfComponents: 2,\n      values: tcoords,\n      name: 'TextureCoordinates'\n    });\n    model.tmPolyData.getPointData().setTCoords(tcoordDA);\n    model.tmPolyData.getPoints().setData(points, 3);\n    model.tmPolyData.getPoints().modified();\n    model.tmPolyData.getPolys().setData(polys, 1);\n    model.tmPolyData.getPolys().modified();\n    model.tmPolyData.modified();\n  };\n\n  publicAPI.updatePolyDataForBarSegments = function () {\n    var _scalarsToColors$getU, _scalarsToColors$getU2;\n\n    var scalarsToColors = model.renderable.getScalarsToColors();\n    var numberOfExtraColors = 0;\n\n    if (model.renderable.getDrawNanAnnotation() && scalarsToColors.getNanColor()) {\n      numberOfExtraColors += 1;\n    }\n\n    if (model.renderable.getDrawBelowRangeSwatch() && (_scalarsToColors$getU = scalarsToColors.getUseBelowRangeColor) !== null && _scalarsToColors$getU !== void 0 && _scalarsToColors$getU.call(scalarsToColors)) {\n      numberOfExtraColors += 1;\n    }\n\n    if (model.renderable.getDrawAboveRangeSwatch() && (_scalarsToColors$getU2 = scalarsToColors.getUseAboveRangeColor) !== null && _scalarsToColors$getU2 !== void 0 && _scalarsToColors$getU2.call(scalarsToColors)) {\n      numberOfExtraColors += 1;\n    }\n\n    var numPts = 4 * (1 + numberOfExtraColors);\n    var numQuads = numPts; // handle vector component mode\n\n    var numComps = 1;\n\n    if (scalarsToColors.getVectorMode() === VectorMode.COMPONENT) {\n      numComps = scalarsToColors.getVectorComponent() + 1;\n    } // create the colored bars\n\n\n    var points = new Float64Array(numPts * 3);\n    var cells = new Uint16Array(numQuads * 5);\n    var scalars = new Float32Array(numPts * numComps);\n    var ptIdx = 0;\n    var cellIdx = 0;\n\n    for (var i = 0; i < model.barSegments.length; i++) {\n      var seg = model.barSegments[i];\n\n      for (var e = 0; e < 4; e++) {\n        tmpv3[0] = model.barPosition[0] + seg.corners[e][0] * model.barSize[0];\n        tmpv3[1] = model.barPosition[1] + seg.corners[e][1] * model.barSize[1];\n        points[ptIdx * 3] = (0.5 * tmpv3[0] + 0.5) * model.lastSize[0];\n        points[ptIdx * 3 + 1] = (0.5 * tmpv3[1] + 0.5) * model.lastSize[1];\n        points[ptIdx * 3 + 2] = tmpv3[2];\n\n        for (var nc = 0; nc < numComps; nc++) {\n          scalars[ptIdx * numComps + nc] = model.lastTickBounds[0] + seg.scalars[e] * (model.lastTickBounds[1] - model.lastTickBounds[0]);\n        }\n\n        ptIdx++;\n      }\n\n      cells[cellIdx * 5] = 4;\n      cells[cellIdx * 5 + 1] = ptIdx - 4;\n      cells[cellIdx * 5 + 2] = ptIdx - 3;\n      cells[cellIdx * 5 + 3] = ptIdx - 2;\n      cells[cellIdx * 5 + 4] = ptIdx - 1;\n      cellIdx++;\n    }\n\n    var scalarsDA = vtkDataArray.newInstance({\n      numberOfComponents: numComps,\n      values: scalars,\n      name: 'Scalars'\n    });\n    model.polyData.getPointData().setScalars(scalarsDA);\n    model.polyData.getPoints().setData(points, 3);\n    model.polyData.getPoints().modified();\n    model.polyData.getPolys().setData(cells, 1);\n    model.polyData.getPolys().modified();\n    model.polyData.modified();\n  };\n}\n\nvar newScalarBarActorHelper = macro.newInstance(function (publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    renderable: null\n  };\n  Object.assign(model, {}, initialValues); // Inheritance\n\n  macro.obj(publicAPI, model);\n  macro.setGet(publicAPI, model, ['axisTitlePixelOffset', 'tickLabelPixelOffset', 'renderable', 'topTitle', 'ticks', 'tickStrings']);\n  macro.get(publicAPI, model, ['lastSize', 'lastAspectRatio', 'lastTickBounds', 'axisTextStyle', 'tickTextStyle', 'barActor', 'tmActor']);\n  macro.getArray(publicAPI, model, ['boxPosition', 'boxSize']);\n  macro.setArray(publicAPI, model, ['boxPosition', 'boxSize'], 2);\n  model.forceUpdate = false;\n  model.lastRebuildTime = {};\n  macro.obj(model.lastRebuildTime, {\n    mtime: 0\n  });\n  model.lastSize = [-1, -1];\n  model.tmCanvas = document.createElement('canvas');\n  model.tmContext = model.tmCanvas.getContext('2d');\n  model._tmAtlas = new Map();\n  model.barMapper = vtkMapper.newInstance();\n  model.barMapper.setInterpolateScalarsBeforeMapping(true);\n  model.barMapper.setUseLookupTableScalarRange(true);\n  model.polyData = vtkPolyData.newInstance();\n  model.barMapper.setInputData(model.polyData);\n  model.barActor = vtkActor.newInstance();\n  model.barActor.setMapper(model.barMapper); // for texture atlas\n\n  model.tmPolyData = vtkPolyData.newInstance();\n  model.tmMapper = vtkMapper.newInstance();\n  model.tmMapper.setInputData(model.tmPolyData);\n  model.tmTexture = vtkTexture.newInstance({\n    resizable: true\n  });\n  model.tmTexture.setInterpolate(false);\n  model.tmActor = vtkActor.newInstance({\n    parentProp: publicAPI\n  });\n  model.tmActor.setMapper(model.tmMapper);\n  model.tmActor.addTexture(model.tmTexture);\n  model.barPosition = [0, 0];\n  model.barSize = [0, 0];\n  model.boxPosition = [0.88, -0.92];\n  model.boxSize = [0.1, 1.1]; // internal variables\n\n  model.lastTickBounds = [];\n  vtkScalarBarActorHelper(publicAPI, model);\n}, 'vtkScalarBarActorHelper'); //\n// Now we define the public class that the application sets view independent\n// properties on. This class is fairly small as it mainly just holds\n// properties setter and getters leaving all calculations to the helper\n// class.\n//\n\nfunction vtkScalarBarActor(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkScalarBarActor');\n\n  publicAPI.setTickTextStyle = function (tickStyle) {\n    model.tickTextStyle = _objectSpread(_objectSpread({}, model.tickTextStyle), tickStyle);\n    publicAPI.modified();\n  };\n\n  publicAPI.setAxisTextStyle = function (axisStyle) {\n    model.axisTextStyle = _objectSpread(_objectSpread({}, model.axisTextStyle), axisStyle);\n    publicAPI.modified();\n  };\n\n  publicAPI.resetAutoLayoutToDefault = function () {\n    publicAPI.setAutoLayout(defaultAutoLayout(publicAPI, model));\n  };\n\n  publicAPI.resetGenerateTicksToDefault = function () {\n    publicAPI.setGenerateTicks(defaultGenerateTicks());\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nfunction defaultValues(initialValues) {\n  return _objectSpread({\n    automated: true,\n    autoLayout: null,\n    axisLabel: 'Scalar Value',\n    barPosition: [0, 0],\n    barSize: [0, 0],\n    boxPosition: [0.88, -0.92],\n    boxSize: [0.1, 1.1],\n    scalarToColors: null,\n    axisTitlePixelOffset: 36.0,\n    axisTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 18,\n      fontFamily: 'serif'\n    },\n    tickLabelPixelOffset: 14.0,\n    tickTextStyle: {\n      fontColor: 'white',\n      fontStyle: 'normal',\n      fontSize: 14,\n      fontFamily: 'serif'\n    },\n    generateTicks: null,\n    drawNanAnnotation: true,\n    drawBelowRangeSwatch: true,\n    drawAboveRangeSwatch: true\n  }, initialValues);\n} // ----------------------------------------------------------------------------\n\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  if (!model.autoLayout) model.autoLayout = defaultAutoLayout(publicAPI, model);\n  if (!model.generateTicks) model.generateTicks = defaultGenerateTicks(); // Inheritance\n\n  vtkActor.extend(publicAPI, model, initialValues);\n  publicAPI.getProperty().setDiffuse(0.0);\n  publicAPI.getProperty().setAmbient(1.0);\n  macro.setGet(publicAPI, model, ['automated', 'autoLayout', 'axisTitlePixelOffset', 'axisLabel', 'scalarsToColors', 'tickLabelPixelOffset', 'generateTicks', 'drawNanAnnotation', 'drawBelowRangeSwatch', 'drawAboveRangeSwatch']);\n  macro.get(publicAPI, model, ['axisTextStyle', 'tickTextStyle']);\n  macro.getArray(publicAPI, model, ['barPosition', 'barSize', 'boxPosition', 'boxSize']);\n  macro.setArray(publicAPI, model, ['barPosition', 'barSize', 'boxPosition', 'boxSize'], 2); // Object methods\n\n  vtkScalarBarActor(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkScalarBarActor'); // ----------------------------------------------------------------------------\n\nvar vtkScalarBarActor$1 = {\n  newInstance: newInstance,\n  extend: extend,\n  newScalarBarActorHelper: newScalarBarActorHelper\n};\n\nexport { vtkScalarBarActor$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}