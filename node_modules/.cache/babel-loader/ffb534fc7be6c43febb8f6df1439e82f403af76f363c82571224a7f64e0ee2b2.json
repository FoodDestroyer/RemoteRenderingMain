{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport Constants from './Constants.js';\nimport macro from '../../../macros.js';\nimport { s as subtract, k as add, l as normalize } from '../../../Common/Core/Math/index.js';\nimport { getNumberOfPlacedHandles, isHandlePlaced, calculateTextPosition, updateTextPosition, getPoint } from './helpers.js';\nvar ShapeType = Constants.ShapeType; // Total number of points to place\n\nvar MAX_POINTS = 2;\nvar handleGetters = ['getHandle1', 'getHandle2', 'getMoveHandle'];\nfunction widgetBehavior(publicAPI, model) {\n  model.classHierarchy.push('vtkLineWidgetProp');\n  model._isDragging = false;\n  /**\n   * Returns the handle at the handleIndex'th index.\n   * @param {number} handleIndex 0, 1 or 2\n   */\n\n  publicAPI.getHandle = function (handleIndex) {\n    return model.widgetState[handleGetters[handleIndex]]();\n  };\n  /**\n   * Return the index in the of tbe handle in `representations` array,\n   * or -1 if the handle is not present in the widget state.\n   */\n\n  publicAPI.getHandleIndex = function (handle) {\n    switch (handle) {\n      case model.widgetState.getHandle1():\n        return 0;\n      case model.widgetState.getHandle2():\n        return 1;\n      case model.widgetState.getMoveHandle():\n        return 2;\n      default:\n        return -1;\n    }\n  };\n  publicAPI.isPlaced = function () {\n    return getNumberOfPlacedHandles(model.widgetState) === MAX_POINTS;\n  }; // --------------------------------------------------------------------------\n  // Interactor event\n  // --------------------------------------------------------------------------\n\n  function ignoreKey(e) {\n    return e.altKey || e.controlKey || e.shiftKey;\n  }\n  function updateCursor(callData) {\n    var _model$activeState$ge, _model$activeState, _model$activeState$ge2;\n    model._isDragging = true;\n    var manipulator = (_model$activeState$ge = (_model$activeState = model.activeState) === null || _model$activeState === void 0 ? void 0 : (_model$activeState$ge2 = _model$activeState.getManipulator) === null || _model$activeState$ge2 === void 0 ? void 0 : _model$activeState$ge2.call(_model$activeState)) !== null && _model$activeState$ge !== void 0 ? _model$activeState$ge : model.manipulator;\n    model.previousPosition = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n    model._apiSpecificRenderWindow.setCursor('grabbing');\n    model._interactor.requestAnimation(publicAPI);\n  } // --------------------------------------------------------------------------\n  // Text methods\n  // --------------------------------------------------------------------------\n\n  publicAPI.setText = function (text) {\n    model.widgetState.getText().setText(text);\n    model._interactor.render();\n  }; // --------------------------------------------------------------------------\n  // Handle positioning methods\n  // --------------------------------------------------------------------------\n  // Handle utilities ---------------------------------------------------------\n\n  function getLineDirection(p1, p2) {\n    var dir = subtract(p1, p2, []);\n    normalize(dir);\n    return dir;\n  } // Handle orientation & rotation ---------------------------------------------------------\n\n  function computeMousePosition(p1, callData) {\n    var displayMousePos = publicAPI.computeWorldToDisplay.apply(publicAPI, [model._renderer].concat(_toConsumableArray(p1)));\n    var worldMousePos = publicAPI.computeDisplayToWorld(model._renderer, callData.position.x, callData.position.y, displayMousePos[2]);\n    return worldMousePos;\n  }\n  /**\n   * Returns the  handle orientation to match the direction vector of the polyLine from one tip to another\n   * @param {number} handleIndex 0 for handle1, 1 for handle2\n   * @param {object} callData if specified, uses mouse position as 2nd point\n   */\n\n  function getHandleOrientation(handleIndex) {\n    var callData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var point1 = getPoint(handleIndex, model.widgetState);\n    var point2 = callData ? computeMousePosition(point1, callData) : getPoint(1 - handleIndex, model.widgetState);\n    return point1 && point2 ? getLineDirection(point1, point2) : null;\n  }\n  /**\n   * Orient handle\n   * @param {number} handleIndex 0, 1 or 2\n   * @param {object} callData optional, see getHandleOrientation for details.\n   */\n\n  function updateHandleOrientation(handleIndex) {\n    var orientation = getHandleOrientation(Math.min(1, handleIndex));\n    model.representations[handleIndex].setOrientation(orientation);\n  }\n  publicAPI.updateHandleOrientations = function () {\n    updateHandleOrientation(0);\n    updateHandleOrientation(1);\n    updateHandleOrientation(2);\n  };\n  publicAPI.rotateHandlesToFaceCamera = function () {\n    model.representations[0].setViewMatrix(Array.from(model._camera.getViewMatrix()));\n    model.representations[1].setViewMatrix(Array.from(model._camera.getViewMatrix()));\n  }; // Handles visibility ---------------------------------------------------------\n\n  /**\n   * Set actor visibility to true unless it is a NONE handle\n   * and uses state visibility variable for the displayActor visibility to\n   * allow pickable handles even when they are not displayed on screen\n   * @param handle : the handle state object\n   * @param handleNb : the handle number according to its label in widget state\n   */\n\n  publicAPI.updateHandleVisibility = function (handleIndex) {\n    var handle = publicAPI.getHandle(handleIndex);\n    var visibility = handle.getVisible() && isHandlePlaced(handleIndex, model.widgetState);\n    model.representations[handleIndex].setVisibilityFlagArray([visibility, visibility && handle.getShape() !== ShapeType.NONE]);\n    model.representations[handleIndex].updateActorVisibility();\n    model._interactor.render();\n  };\n  /**\n   * Called when placing a point from the first time.\n   * @param {number} handleIndex\n   */\n\n  publicAPI.placeHandle = function (handleIndex) {\n    var handle = publicAPI.getHandle(handleIndex);\n    handle.setOrigin.apply(handle, _toConsumableArray(model.widgetState.getMoveHandle().getOrigin()));\n    publicAPI.updateHandleOrientations();\n    publicAPI.rotateHandlesToFaceCamera();\n    model.widgetState.getText().setOrigin(calculateTextPosition(model));\n    publicAPI.updateHandleVisibility(handleIndex);\n    if (handleIndex === 0) {\n      var _publicAPI$getHandle;\n\n      // For the line (handle1, handle2, moveHandle) to be displayed\n      // correctly, handle2 origin must be valid.\n      (_publicAPI$getHandle = publicAPI.getHandle(1)).setOrigin.apply(_publicAPI$getHandle, _toConsumableArray(model.widgetState.getMoveHandle().getOrigin())); // Now that handle2 has a valid origin, hide it\n\n      publicAPI.updateHandleVisibility(1);\n      model.widgetState.getMoveHandle().setShape(publicAPI.getHandle(1).getShape());\n    }\n    if (handleIndex === 1) {\n      publicAPI.loseFocus();\n    }\n  }; // --------------------------------------------------------------------------\n  // Left press: Select handle to drag\n  // --------------------------------------------------------------------------\n\n  publicAPI.handleLeftButtonPress = function (e) {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable || ignoreKey(e)) {\n      return macro.VOID;\n    }\n    if (model.activeState === model.widgetState.getMoveHandle() && getNumberOfPlacedHandles(model.widgetState) === 0) {\n      publicAPI.placeHandle(0);\n    } else if (model.widgetState.getMoveHandle().getActive() && getNumberOfPlacedHandles(model.widgetState) === 1) {\n      publicAPI.placeHandle(1);\n    } else if (model.dragable && !model.widgetState.getText().getActive()) {\n      // Grab handle1, handle2 or whole widget\n      updateCursor(e);\n    }\n    publicAPI.invokeStartInteractionEvent();\n    return macro.EVENT_ABORT;\n  }; // --------------------------------------------------------------------------\n  // Mouse move: Drag selected handle / Handle follow the mouse\n  // --------------------------------------------------------------------------\n\n  publicAPI.handleMouseMove = function (callData) {\n    var _model$activeState$ge3, _model$activeState2, _model$activeState2$g;\n    var manipulator = (_model$activeState$ge3 = (_model$activeState2 = model.activeState) === null || _model$activeState2 === void 0 ? void 0 : (_model$activeState2$g = _model$activeState2.getManipulator) === null || _model$activeState2$g === void 0 ? void 0 : _model$activeState2$g.call(_model$activeState2)) !== null && _model$activeState$ge3 !== void 0 ? _model$activeState$ge3 : model.manipulator;\n    if (manipulator && model.pickable && model.dragable && model.activeState && model.activeState.getActive() && !ignoreKey(callData)) {\n      var _manipulator$handleEv = manipulator.handleEvent(callData, model._apiSpecificRenderWindow),\n        worldCoords = _manipulator$handleEv.worldCoords;\n      var translation = model.previousPosition ? subtract(worldCoords, model.previousPosition, []) : [0, 0, 0];\n      model.previousPosition = worldCoords;\n      if (\n      // is placing first or second handle\n      model.activeState === model.widgetState.getMoveHandle() ||\n      // is dragging already placed first or second handle\n      model._isDragging) {\n        if (model.activeState.setOrigin) {\n          model.activeState.setOrigin(worldCoords);\n          publicAPI.updateHandleVisibility(publicAPI.getHandleIndex(model.activeState));\n        } else {\n          // Dragging line\n          publicAPI.getHandle(0).setOrigin(add(publicAPI.getHandle(0).getOrigin(), translation, []));\n          publicAPI.getHandle(1).setOrigin(add(publicAPI.getHandle(1).getOrigin(), translation, []));\n        }\n        publicAPI.updateHandleOrientations();\n        updateTextPosition(model);\n        publicAPI.invokeInteractionEvent();\n        return macro.EVENT_ABORT;\n      }\n    }\n    return macro.VOID;\n  }; // --------------------------------------------------------------------------\n  // Left release: Finish drag\n  // --------------------------------------------------------------------------\n\n  publicAPI.handleLeftButtonRelease = function () {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable) {\n      publicAPI.rotateHandlesToFaceCamera();\n      return macro.VOID;\n    }\n    if (model.hasFocus && publicAPI.isPlaced()) {\n      publicAPI.loseFocus();\n      return macro.VOID;\n    }\n    if (model._isDragging && publicAPI.isPlaced()) {\n      var wasTextActive = model.widgetState.getText().getActive(); // Recompute offsets\n\n      model.widgetState.deactivate();\n      model.activeState = null;\n      if (!wasTextActive) {\n        model._interactor.cancelAnimation(publicAPI);\n      }\n      model._apiSpecificRenderWindow.setCursor('pointer');\n      model.hasFocus = false;\n      model._isDragging = false;\n    } else if (model.activeState !== model.widgetState.getMoveHandle()) {\n      model.widgetState.deactivate();\n    }\n    if (model.hasFocus && !model.activeState || model.activeState && !model.activeState.getActive()) {\n      model._widgetManager.enablePicking();\n      model._interactor.render();\n    }\n    publicAPI.invokeEndInteractionEvent();\n    return macro.EVENT_ABORT;\n  }; // --------------------------------------------------------------------------\n  // Focus API - moveHandle follow mouse when widget has focus\n  // --------------------------------------------------------------------------\n\n  publicAPI.grabFocus = function () {\n    if (!model.hasFocus && !publicAPI.isPlaced()) {\n      model.activeState = model.widgetState.getMoveHandle();\n      model.activeState.setShape(publicAPI.getHandle(0).getShape());\n      model.activeState.activate();\n      model._interactor.requestAnimation(publicAPI);\n      publicAPI.invokeStartInteractionEvent();\n    }\n    model.hasFocus = true;\n  }; // --------------------------------------------------------------------------\n\n  publicAPI.loseFocus = function () {\n    if (model.hasFocus) {\n      model._interactor.cancelAnimation(publicAPI);\n      publicAPI.invokeEndInteractionEvent();\n    }\n    model.widgetState.deactivate();\n    model.widgetState.getMoveHandle().deactivate();\n    model.widgetState.getMoveHandle().setOrigin(null);\n    model.activeState = null;\n    model.hasFocus = false;\n    model._widgetManager.enablePicking();\n    model._interactor.render();\n  };\n  publicAPI.reset = function () {\n    model.widgetState.deactivate();\n    model.widgetState.getMoveHandle().deactivate();\n    model.widgetState.getHandle1().setOrigin(null);\n    model.widgetState.getHandle2().setOrigin(null);\n    model.widgetState.getMoveHandle().setOrigin(null);\n    model.widgetState.getText().setOrigin(null);\n    model.widgetState.getText().setText('');\n    model.activeState = null;\n  };\n}\nexport { widgetBehavior as default };","map":{"version":3,"names":["_toConsumableArray","Constants","macro","s","subtract","k","add","l","normalize","getNumberOfPlacedHandles","isHandlePlaced","calculateTextPosition","updateTextPosition","getPoint","ShapeType","MAX_POINTS","handleGetters","widgetBehavior","publicAPI","model","classHierarchy","push","_isDragging","getHandle","handleIndex","widgetState","getHandleIndex","handle","getHandle1","getHandle2","getMoveHandle","isPlaced","ignoreKey","e","altKey","controlKey","shiftKey","updateCursor","callData","_model$activeState$ge","_model$activeState","_model$activeState$ge2","manipulator","activeState","getManipulator","call","previousPosition","handleEvent","_apiSpecificRenderWindow","worldCoords","setCursor","_interactor","requestAnimation","setText","text","getText","render","getLineDirection","p1","p2","dir","computeMousePosition","displayMousePos","computeWorldToDisplay","apply","_renderer","concat","worldMousePos","computeDisplayToWorld","position","x","y","getHandleOrientation","arguments","length","undefined","point1","point2","updateHandleOrientation","orientation","Math","min","representations","setOrientation","updateHandleOrientations","rotateHandlesToFaceCamera","setViewMatrix","Array","from","_camera","getViewMatrix","updateHandleVisibility","visibility","getVisible","setVisibilityFlagArray","getShape","NONE","updateActorVisibility","placeHandle","setOrigin","getOrigin","_publicAPI$getHandle","setShape","loseFocus","handleLeftButtonPress","getActive","pickable","VOID","dragable","invokeStartInteractionEvent","EVENT_ABORT","handleMouseMove","_model$activeState$ge3","_model$activeState2","_model$activeState2$g","_manipulator$handleEv","translation","invokeInteractionEvent","handleLeftButtonRelease","hasFocus","wasTextActive","deactivate","cancelAnimation","_widgetManager","enablePicking","invokeEndInteractionEvent","grabFocus","activate","reset","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/LineWidget/behavior.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport Constants from './Constants.js';\nimport macro from '../../../macros.js';\nimport { s as subtract, k as add, l as normalize } from '../../../Common/Core/Math/index.js';\nimport { getNumberOfPlacedHandles, isHandlePlaced, calculateTextPosition, updateTextPosition, getPoint } from './helpers.js';\n\nvar ShapeType = Constants.ShapeType; // Total number of points to place\n\nvar MAX_POINTS = 2;\nvar handleGetters = ['getHandle1', 'getHandle2', 'getMoveHandle'];\nfunction widgetBehavior(publicAPI, model) {\n  model.classHierarchy.push('vtkLineWidgetProp');\n  model._isDragging = false;\n  /**\n   * Returns the handle at the handleIndex'th index.\n   * @param {number} handleIndex 0, 1 or 2\n   */\n\n  publicAPI.getHandle = function (handleIndex) {\n    return model.widgetState[handleGetters[handleIndex]]();\n  };\n  /**\n   * Return the index in the of tbe handle in `representations` array,\n   * or -1 if the handle is not present in the widget state.\n   */\n\n\n  publicAPI.getHandleIndex = function (handle) {\n    switch (handle) {\n      case model.widgetState.getHandle1():\n        return 0;\n\n      case model.widgetState.getHandle2():\n        return 1;\n\n      case model.widgetState.getMoveHandle():\n        return 2;\n\n      default:\n        return -1;\n    }\n  };\n\n  publicAPI.isPlaced = function () {\n    return getNumberOfPlacedHandles(model.widgetState) === MAX_POINTS;\n  }; // --------------------------------------------------------------------------\n  // Interactor event\n  // --------------------------------------------------------------------------\n\n\n  function ignoreKey(e) {\n    return e.altKey || e.controlKey || e.shiftKey;\n  }\n\n  function updateCursor(callData) {\n    var _model$activeState$ge, _model$activeState, _model$activeState$ge2;\n\n    model._isDragging = true;\n    var manipulator = (_model$activeState$ge = (_model$activeState = model.activeState) === null || _model$activeState === void 0 ? void 0 : (_model$activeState$ge2 = _model$activeState.getManipulator) === null || _model$activeState$ge2 === void 0 ? void 0 : _model$activeState$ge2.call(_model$activeState)) !== null && _model$activeState$ge !== void 0 ? _model$activeState$ge : model.manipulator;\n    model.previousPosition = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n\n    model._apiSpecificRenderWindow.setCursor('grabbing');\n\n    model._interactor.requestAnimation(publicAPI);\n  } // --------------------------------------------------------------------------\n  // Text methods\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.setText = function (text) {\n    model.widgetState.getText().setText(text);\n\n    model._interactor.render();\n  }; // --------------------------------------------------------------------------\n  // Handle positioning methods\n  // --------------------------------------------------------------------------\n  // Handle utilities ---------------------------------------------------------\n\n\n  function getLineDirection(p1, p2) {\n    var dir = subtract(p1, p2, []);\n    normalize(dir);\n    return dir;\n  } // Handle orientation & rotation ---------------------------------------------------------\n\n\n  function computeMousePosition(p1, callData) {\n    var displayMousePos = publicAPI.computeWorldToDisplay.apply(publicAPI, [model._renderer].concat(_toConsumableArray(p1)));\n    var worldMousePos = publicAPI.computeDisplayToWorld(model._renderer, callData.position.x, callData.position.y, displayMousePos[2]);\n    return worldMousePos;\n  }\n  /**\n   * Returns the  handle orientation to match the direction vector of the polyLine from one tip to another\n   * @param {number} handleIndex 0 for handle1, 1 for handle2\n   * @param {object} callData if specified, uses mouse position as 2nd point\n   */\n\n\n  function getHandleOrientation(handleIndex) {\n    var callData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var point1 = getPoint(handleIndex, model.widgetState);\n    var point2 = callData ? computeMousePosition(point1, callData) : getPoint(1 - handleIndex, model.widgetState);\n    return point1 && point2 ? getLineDirection(point1, point2) : null;\n  }\n  /**\n   * Orient handle\n   * @param {number} handleIndex 0, 1 or 2\n   * @param {object} callData optional, see getHandleOrientation for details.\n   */\n\n\n  function updateHandleOrientation(handleIndex) {\n    var orientation = getHandleOrientation(Math.min(1, handleIndex));\n    model.representations[handleIndex].setOrientation(orientation);\n  }\n\n  publicAPI.updateHandleOrientations = function () {\n    updateHandleOrientation(0);\n    updateHandleOrientation(1);\n    updateHandleOrientation(2);\n  };\n\n  publicAPI.rotateHandlesToFaceCamera = function () {\n    model.representations[0].setViewMatrix(Array.from(model._camera.getViewMatrix()));\n    model.representations[1].setViewMatrix(Array.from(model._camera.getViewMatrix()));\n  }; // Handles visibility ---------------------------------------------------------\n\n  /**\n   * Set actor visibility to true unless it is a NONE handle\n   * and uses state visibility variable for the displayActor visibility to\n   * allow pickable handles even when they are not displayed on screen\n   * @param handle : the handle state object\n   * @param handleNb : the handle number according to its label in widget state\n   */\n\n\n  publicAPI.updateHandleVisibility = function (handleIndex) {\n    var handle = publicAPI.getHandle(handleIndex);\n    var visibility = handle.getVisible() && isHandlePlaced(handleIndex, model.widgetState);\n    model.representations[handleIndex].setVisibilityFlagArray([visibility, visibility && handle.getShape() !== ShapeType.NONE]);\n    model.representations[handleIndex].updateActorVisibility();\n\n    model._interactor.render();\n  };\n  /**\n   * Called when placing a point from the first time.\n   * @param {number} handleIndex\n   */\n\n\n  publicAPI.placeHandle = function (handleIndex) {\n    var handle = publicAPI.getHandle(handleIndex);\n    handle.setOrigin.apply(handle, _toConsumableArray(model.widgetState.getMoveHandle().getOrigin()));\n    publicAPI.updateHandleOrientations();\n    publicAPI.rotateHandlesToFaceCamera();\n    model.widgetState.getText().setOrigin(calculateTextPosition(model));\n    publicAPI.updateHandleVisibility(handleIndex);\n\n    if (handleIndex === 0) {\n      var _publicAPI$getHandle;\n\n      // For the line (handle1, handle2, moveHandle) to be displayed\n      // correctly, handle2 origin must be valid.\n      (_publicAPI$getHandle = publicAPI.getHandle(1)).setOrigin.apply(_publicAPI$getHandle, _toConsumableArray(model.widgetState.getMoveHandle().getOrigin())); // Now that handle2 has a valid origin, hide it\n\n\n      publicAPI.updateHandleVisibility(1);\n      model.widgetState.getMoveHandle().setShape(publicAPI.getHandle(1).getShape());\n    }\n\n    if (handleIndex === 1) {\n      publicAPI.loseFocus();\n    }\n  }; // --------------------------------------------------------------------------\n  // Left press: Select handle to drag\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.handleLeftButtonPress = function (e) {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable || ignoreKey(e)) {\n      return macro.VOID;\n    }\n\n    if (model.activeState === model.widgetState.getMoveHandle() && getNumberOfPlacedHandles(model.widgetState) === 0) {\n      publicAPI.placeHandle(0);\n    } else if (model.widgetState.getMoveHandle().getActive() && getNumberOfPlacedHandles(model.widgetState) === 1) {\n      publicAPI.placeHandle(1);\n    } else if (model.dragable && !model.widgetState.getText().getActive()) {\n      // Grab handle1, handle2 or whole widget\n      updateCursor(e);\n    }\n\n    publicAPI.invokeStartInteractionEvent();\n    return macro.EVENT_ABORT;\n  }; // --------------------------------------------------------------------------\n  // Mouse move: Drag selected handle / Handle follow the mouse\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.handleMouseMove = function (callData) {\n    var _model$activeState$ge3, _model$activeState2, _model$activeState2$g;\n\n    var manipulator = (_model$activeState$ge3 = (_model$activeState2 = model.activeState) === null || _model$activeState2 === void 0 ? void 0 : (_model$activeState2$g = _model$activeState2.getManipulator) === null || _model$activeState2$g === void 0 ? void 0 : _model$activeState2$g.call(_model$activeState2)) !== null && _model$activeState$ge3 !== void 0 ? _model$activeState$ge3 : model.manipulator;\n\n    if (manipulator && model.pickable && model.dragable && model.activeState && model.activeState.getActive() && !ignoreKey(callData)) {\n      var _manipulator$handleEv = manipulator.handleEvent(callData, model._apiSpecificRenderWindow),\n          worldCoords = _manipulator$handleEv.worldCoords;\n\n      var translation = model.previousPosition ? subtract(worldCoords, model.previousPosition, []) : [0, 0, 0];\n      model.previousPosition = worldCoords;\n\n      if ( // is placing first or second handle\n      model.activeState === model.widgetState.getMoveHandle() || // is dragging already placed first or second handle\n      model._isDragging) {\n        if (model.activeState.setOrigin) {\n          model.activeState.setOrigin(worldCoords);\n          publicAPI.updateHandleVisibility(publicAPI.getHandleIndex(model.activeState));\n        } else {\n          // Dragging line\n          publicAPI.getHandle(0).setOrigin(add(publicAPI.getHandle(0).getOrigin(), translation, []));\n          publicAPI.getHandle(1).setOrigin(add(publicAPI.getHandle(1).getOrigin(), translation, []));\n        }\n\n        publicAPI.updateHandleOrientations();\n        updateTextPosition(model);\n        publicAPI.invokeInteractionEvent();\n        return macro.EVENT_ABORT;\n      }\n    }\n\n    return macro.VOID;\n  }; // --------------------------------------------------------------------------\n  // Left release: Finish drag\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.handleLeftButtonRelease = function () {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable) {\n      publicAPI.rotateHandlesToFaceCamera();\n      return macro.VOID;\n    }\n\n    if (model.hasFocus && publicAPI.isPlaced()) {\n      publicAPI.loseFocus();\n      return macro.VOID;\n    }\n\n    if (model._isDragging && publicAPI.isPlaced()) {\n      var wasTextActive = model.widgetState.getText().getActive(); // Recompute offsets\n\n      model.widgetState.deactivate();\n      model.activeState = null;\n\n      if (!wasTextActive) {\n        model._interactor.cancelAnimation(publicAPI);\n      }\n\n      model._apiSpecificRenderWindow.setCursor('pointer');\n\n      model.hasFocus = false;\n      model._isDragging = false;\n    } else if (model.activeState !== model.widgetState.getMoveHandle()) {\n      model.widgetState.deactivate();\n    }\n\n    if (model.hasFocus && !model.activeState || model.activeState && !model.activeState.getActive()) {\n      model._widgetManager.enablePicking();\n\n      model._interactor.render();\n    }\n\n    publicAPI.invokeEndInteractionEvent();\n    return macro.EVENT_ABORT;\n  }; // --------------------------------------------------------------------------\n  // Focus API - moveHandle follow mouse when widget has focus\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.grabFocus = function () {\n    if (!model.hasFocus && !publicAPI.isPlaced()) {\n      model.activeState = model.widgetState.getMoveHandle();\n      model.activeState.setShape(publicAPI.getHandle(0).getShape());\n      model.activeState.activate();\n\n      model._interactor.requestAnimation(publicAPI);\n\n      publicAPI.invokeStartInteractionEvent();\n    }\n\n    model.hasFocus = true;\n  }; // --------------------------------------------------------------------------\n\n\n  publicAPI.loseFocus = function () {\n    if (model.hasFocus) {\n      model._interactor.cancelAnimation(publicAPI);\n\n      publicAPI.invokeEndInteractionEvent();\n    }\n\n    model.widgetState.deactivate();\n    model.widgetState.getMoveHandle().deactivate();\n    model.widgetState.getMoveHandle().setOrigin(null);\n    model.activeState = null;\n    model.hasFocus = false;\n\n    model._widgetManager.enablePicking();\n\n    model._interactor.render();\n  };\n\n  publicAPI.reset = function () {\n    model.widgetState.deactivate();\n    model.widgetState.getMoveHandle().deactivate();\n    model.widgetState.getHandle1().setOrigin(null);\n    model.widgetState.getHandle2().setOrigin(null);\n    model.widgetState.getMoveHandle().setOrigin(null);\n    model.widgetState.getText().setOrigin(null);\n    model.widgetState.getText().setText('');\n    model.activeState = null;\n  };\n}\n\nexport { widgetBehavior as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}