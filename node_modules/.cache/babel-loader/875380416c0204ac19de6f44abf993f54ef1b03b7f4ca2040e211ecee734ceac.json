{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkXMLReader from './XMLReader.js';\n\n// Global method\n// ----------------------------------------------------------------------------\n\nfunction handleArray(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  var size = Number(piece.getAttribute(\"NumberOf\".concat(cellType)));\n  if (size > 0) {\n    var dataArrayElem = piece.getElementsByTagName(cellType)[0].getElementsByTagName('DataArray')[0];\n    var _vtkXMLReader$process = vtkXMLReader.processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer),\n      values = _vtkXMLReader$process.values,\n      numberOfComponents = _vtkXMLReader$process.numberOfComponents;\n    polydata[\"get\".concat(cellType)]().setData(values, numberOfComponents);\n  }\n  return size;\n} // ----------------------------------------------------------------------------\n\nfunction handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  var size = Number(piece.getAttribute(\"NumberOf\".concat(cellType)));\n  if (size > 0) {\n    var values = vtkXMLReader.processCells(size, piece.getElementsByTagName(cellType)[0], compressor, byteOrder, headerType, binaryBuffer);\n    polydata[\"get\".concat(cellType)]().setData(values);\n  }\n  return size;\n} // ----------------------------------------------------------------------------\n// vtkXMLPolyDataReader methods\n// ----------------------------------------------------------------------------\n\nfunction vtkXMLPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLPolyDataReader');\n  publicAPI.parseXML = function (rootElem, type, compressor, byteOrder, headerType) {\n    var datasetElem = rootElem.getElementsByTagName(model.dataType)[0];\n    var pieces = datasetElem.getElementsByTagName('Piece');\n    var nbPieces = pieces.length;\n    var _loop = function _loop(outputIndex) {\n      // Create dataset\n      var polydata = vtkPolyData.newInstance();\n      var piece = pieces[outputIndex]; // Points\n\n      var nbPoints = handleArray(polydata, 'Points', piece, compressor, byteOrder, headerType, model.binaryBuffer); // Cells\n\n      var nbCells = 0;\n      ['Verts', 'Lines', 'Strips', 'Polys'].forEach(function (cellType) {\n        nbCells += handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, model.binaryBuffer);\n      }); // Fill data\n\n      vtkXMLReader.processFieldData(nbPoints, piece.getElementsByTagName('PointData')[0], polydata.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(nbCells, piece.getElementsByTagName('CellData')[0], polydata.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer); // Add new output\n\n      model.output[outputIndex] = polydata;\n    };\n    for (var outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      _loop(outputIndex);\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  dataType: 'PolyData'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLPolyDataReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkXMLPolyDataReader'); // ----------------------------------------------------------------------------\n\nvar vtkXMLPolyDataReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkXMLPolyDataReader$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkPolyData","vtkXMLReader","handleArray","polydata","cellType","piece","compressor","byteOrder","headerType","binaryBuffer","size","Number","getAttribute","concat","dataArrayElem","getElementsByTagName","_vtkXMLReader$process","processDataArray","values","numberOfComponents","setData","handleCells","processCells","vtkXMLPolyDataReader","publicAPI","model","classHierarchy","push","parseXML","rootElem","type","datasetElem","dataType","pieces","nbPieces","length","_loop","outputIndex","newInstance","nbPoints","nbCells","forEach","processFieldData","getPointData","getCellData","output","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","vtkXMLPolyDataReader$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/IO/XML/XMLPolyDataReader.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkXMLReader from './XMLReader.js';\n\n// Global method\n// ----------------------------------------------------------------------------\n\nfunction handleArray(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  var size = Number(piece.getAttribute(\"NumberOf\".concat(cellType)));\n\n  if (size > 0) {\n    var dataArrayElem = piece.getElementsByTagName(cellType)[0].getElementsByTagName('DataArray')[0];\n\n    var _vtkXMLReader$process = vtkXMLReader.processDataArray(size, dataArrayElem, compressor, byteOrder, headerType, binaryBuffer),\n        values = _vtkXMLReader$process.values,\n        numberOfComponents = _vtkXMLReader$process.numberOfComponents;\n\n    polydata[\"get\".concat(cellType)]().setData(values, numberOfComponents);\n  }\n\n  return size;\n} // ----------------------------------------------------------------------------\n\n\nfunction handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, binaryBuffer) {\n  var size = Number(piece.getAttribute(\"NumberOf\".concat(cellType)));\n\n  if (size > 0) {\n    var values = vtkXMLReader.processCells(size, piece.getElementsByTagName(cellType)[0], compressor, byteOrder, headerType, binaryBuffer);\n    polydata[\"get\".concat(cellType)]().setData(values);\n  }\n\n  return size;\n} // ----------------------------------------------------------------------------\n// vtkXMLPolyDataReader methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkXMLPolyDataReader(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkXMLPolyDataReader');\n\n  publicAPI.parseXML = function (rootElem, type, compressor, byteOrder, headerType) {\n    var datasetElem = rootElem.getElementsByTagName(model.dataType)[0];\n    var pieces = datasetElem.getElementsByTagName('Piece');\n    var nbPieces = pieces.length;\n\n    var _loop = function _loop(outputIndex) {\n      // Create dataset\n      var polydata = vtkPolyData.newInstance();\n      var piece = pieces[outputIndex]; // Points\n\n      var nbPoints = handleArray(polydata, 'Points', piece, compressor, byteOrder, headerType, model.binaryBuffer); // Cells\n\n      var nbCells = 0;\n      ['Verts', 'Lines', 'Strips', 'Polys'].forEach(function (cellType) {\n        nbCells += handleCells(polydata, cellType, piece, compressor, byteOrder, headerType, model.binaryBuffer);\n      }); // Fill data\n\n      vtkXMLReader.processFieldData(nbPoints, piece.getElementsByTagName('PointData')[0], polydata.getPointData(), compressor, byteOrder, headerType, model.binaryBuffer);\n      vtkXMLReader.processFieldData(nbCells, piece.getElementsByTagName('CellData')[0], polydata.getCellData(), compressor, byteOrder, headerType, model.binaryBuffer); // Add new output\n\n      model.output[outputIndex] = polydata;\n    };\n\n    for (var outputIndex = 0; outputIndex < nbPieces; outputIndex++) {\n      _loop(outputIndex);\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  dataType: 'PolyData'\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  vtkXMLReader.extend(publicAPI, model, initialValues);\n  vtkXMLPolyDataReader(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkXMLPolyDataReader'); // ----------------------------------------------------------------------------\n\nvar vtkXMLPolyDataReader$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkXMLPolyDataReader$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}