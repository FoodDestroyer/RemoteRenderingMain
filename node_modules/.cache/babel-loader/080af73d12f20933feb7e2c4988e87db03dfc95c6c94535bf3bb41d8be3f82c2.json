{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes; // ----------------------------------------------------------------------------\n// vtkWebGPUPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPolyDataMapper2D');\n  publicAPI.createCellArrayMapper = function () {\n    return vtkWebGPUCellArrayMapper.newInstance();\n  };\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor2D');\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n      var poly = model.renderable.getInputData();\n      model.renderable.mapScalars(poly, 1.0);\n      publicAPI.updateCellArrayMappers(poly);\n    }\n  };\n  publicAPI.updateCellArrayMappers = function (poly) {\n    var prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()]; // we instantiate a cell array mapper for each cellArray that has cells\n    // and they handle the rendering of that cell array\n\n    var cellMappers = [];\n    var cellOffset = 0;\n    for (var i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {\n      if (prims[i].getNumberOfValues() > 0) {\n        if (!model.primitives[i]) {\n          model.primitives[i] = publicAPI.createCellArrayMapper();\n        }\n        var cellMapper = model.primitives[i];\n        cellMapper.setCellArray(prims[i]);\n        cellMapper.setCurrentInput(poly);\n        cellMapper.setCellOffset(cellOffset);\n        cellMapper.setPrimitiveType(i);\n        cellMapper.setRenderable(model.renderable);\n        cellMapper.setIs2D(true);\n        cellOffset += prims[i].getNumberOfCells();\n        cellMappers.push(cellMapper);\n      } else {\n        model.primitives[i] = null;\n      }\n    }\n    publicAPI.prepareNodes();\n    publicAPI.addMissingChildren(cellMappers);\n    publicAPI.removeUnusedNodes();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nfunction defaultValues(initialValues) {\n  return _objectSpread({\n    primitives: []\n  }, initialValues);\n} // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues)); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.primitives = []; // Object methods\n\n  vtkWebGPUPolyDataMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUPolyDataMapper2D'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkMapper2D', newInstance);\nexport { index as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","newInstance","newInstance$1","vtkWebGPUBufferManager","vtkWebGPUCellArrayMapper","vtkViewNode","registerOverride","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","PrimitiveTypes","vtkWebGPUPolyDataMapper2D","publicAPI","model","classHierarchy","createCellArrayMapper","buildPass","prepass","WebGPUActor","getFirstAncestorOfType","renderable","getStatic","update","poly","getInputData","mapScalars","updateCellArrayMappers","prims","getVerts","getLines","getPolys","getStrips","cellMappers","cellOffset","Points","Triangles","getNumberOfValues","primitives","cellMapper","setCellArray","setCurrentInput","setCellOffset","setPrimitiveType","setRenderable","setIs2D","getNumberOfCells","prepareNodes","addMissingChildren","removeUnusedNodes","defaultValues","initialValues","extend","undefined","assign","index","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/PolyDataMapper2D.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1 } from '../../macros.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUCellArrayMapper from './CellArrayMapper.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes; // ----------------------------------------------------------------------------\n// vtkWebGPUPolyDataMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUPolyDataMapper2D');\n\n  publicAPI.createCellArrayMapper = function () {\n    return vtkWebGPUCellArrayMapper.newInstance();\n  };\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor2D');\n\n      if (!model.renderable.getStatic()) {\n        model.renderable.update();\n      }\n\n      var poly = model.renderable.getInputData();\n      model.renderable.mapScalars(poly, 1.0);\n      publicAPI.updateCellArrayMappers(poly);\n    }\n  };\n\n  publicAPI.updateCellArrayMappers = function (poly) {\n    var prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()]; // we instantiate a cell array mapper for each cellArray that has cells\n    // and they handle the rendering of that cell array\n\n    var cellMappers = [];\n    var cellOffset = 0;\n\n    for (var i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {\n      if (prims[i].getNumberOfValues() > 0) {\n        if (!model.primitives[i]) {\n          model.primitives[i] = publicAPI.createCellArrayMapper();\n        }\n\n        var cellMapper = model.primitives[i];\n        cellMapper.setCellArray(prims[i]);\n        cellMapper.setCurrentInput(poly);\n        cellMapper.setCellOffset(cellOffset);\n        cellMapper.setPrimitiveType(i);\n        cellMapper.setRenderable(model.renderable);\n        cellMapper.setIs2D(true);\n        cellOffset += prims[i].getNumberOfCells();\n        cellMappers.push(cellMapper);\n      } else {\n        model.primitives[i] = null;\n      }\n    }\n\n    publicAPI.prepareNodes();\n    publicAPI.addMissingChildren(cellMappers);\n    publicAPI.removeUnusedNodes();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nfunction defaultValues(initialValues) {\n  return _objectSpread({\n    primitives: []\n  }, initialValues);\n} // ----------------------------------------------------------------------------\n\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues)); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.primitives = []; // Object methods\n\n  vtkWebGPUPolyDataMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkWebGPUPolyDataMapper2D'); // ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to WebGPU backend if imported\n\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { index as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}