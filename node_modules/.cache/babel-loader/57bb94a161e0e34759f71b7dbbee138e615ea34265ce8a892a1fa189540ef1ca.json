{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport Constants from './Mapper/Constants.js';\nvar ColorMode = Constants.ColorMode,\n  ScalarMode = Constants.ScalarMode,\n  GetArray = Constants.GetArray; // ---------------------------------------------------------------------------\n// vtkMapper2D methods\n// ---------------------------------------------------------------------------\n\nfunction vtkMapper2D(publicAPI, model) {\n  // Set out className\n  model.classHierarchy.push('vtkMapper2D');\n  publicAPI.createDefaultLookupTable = function () {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n  publicAPI.getColorModeAsString = function () {\n    return macro.enumToString(ColorMode, model.colorMode);\n  };\n  publicAPI.setColorModeToDefault = function () {\n    return publicAPI.setColorMode(0);\n  };\n  publicAPI.setColorModeToMapScalars = function () {\n    return publicAPI.setColorMode(1);\n  };\n  publicAPI.setColorModeToDirectScalars = function () {\n    return publicAPI.setColorMode(2);\n  };\n  publicAPI.getScalarModeAsString = function () {\n    return macro.enumToString(ScalarMode, model.scalarMode);\n  };\n  publicAPI.setScalarModeToDefault = function () {\n    return publicAPI.setScalarMode(0);\n  };\n  publicAPI.setScalarModeToUsePointData = function () {\n    return publicAPI.setScalarMode(1);\n  };\n  publicAPI.setScalarModeToUseCellData = function () {\n    return publicAPI.setScalarMode(2);\n  };\n  publicAPI.setScalarModeToUsePointFieldData = function () {\n    return publicAPI.setScalarMode(3);\n  };\n  publicAPI.setScalarModeToUseCellFieldData = function () {\n    return publicAPI.setScalarMode(4);\n  };\n  publicAPI.setScalarModeToUseFieldData = function () {\n    return publicAPI.setScalarMode(5);\n  };\n  publicAPI.getAbstractScalars = function (input, scalarMode, arrayAccessMode, arrayId, arrayName) {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFLag: false\n      };\n    }\n    var scalars = null;\n    var cellFlag = false; // get scalar data and point/cell attribute according to scalar mode\n\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      var pd = input.getPointData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      var cd = input.getCellData();\n      cellFlag = true;\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      var fd = input.getFieldData();\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n    return {\n      scalars: scalars,\n      cellFlag: cellFlag\n    };\n  };\n  publicAPI.getLookupTable = function () {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n    return model.lookupTable;\n  };\n  publicAPI.getMTime = function () {\n    var mt = model.mtime;\n    if (model.lookupTable !== null) {\n      var time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n    return mt;\n  };\n  publicAPI.mapScalars = function (input, alpha) {\n    var scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;\n    if (!scalars) {\n      model.colorMapColors = null;\n      return;\n    } // we want to only recompute when something has changed\n\n    var toString = \"\".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);\n    if (model.colorBuildString === toString) return;\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n    var lut = publicAPI.getLookupTable();\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n    }\n    model.colorBuildString = \"\".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  static: false,\n  lookupTable: null,\n  scalarVisibility: false,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n  renderTime: 0,\n  colorByArrayName: null,\n  transformCoordinate: null,\n  viewSpecificProperties: null,\n  customShaderAttributes: []\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorMapColors']);\n  macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n  if (!model.viewSpecificProperties) {\n    model.viewSpecificProperties = {};\n  } // Object methods\n\n  vtkMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMapper2D'); // ----------------------------------------------------------------------------\n\nvar vtkMapper2D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkMapper2D$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkAbstractMapper","vtkLookupTable","Constants","ColorMode","ScalarMode","GetArray","vtkMapper2D","publicAPI","model","classHierarchy","push","createDefaultLookupTable","lookupTable","newInstance","getColorModeAsString","enumToString","colorMode","setColorModeToDefault","setColorMode","setColorModeToMapScalars","setColorModeToDirectScalars","getScalarModeAsString","scalarMode","setScalarModeToDefault","setScalarMode","setScalarModeToUsePointData","setScalarModeToUseCellData","setScalarModeToUsePointFieldData","setScalarModeToUseCellFieldData","setScalarModeToUseFieldData","getAbstractScalars","input","arrayAccessMode","arrayId","arrayName","scalarVisibility","scalars","cellFLag","cellFlag","DEFAULT","getPointData","getScalars","getCellData","USE_POINT_DATA","USE_CELL_DATA","USE_POINT_FIELD_DATA","pd","BY_ID","getArrayByIndex","getArrayByName","USE_CELL_FIELD_DATA","cd","USE_FIELD_DATA","fd","getFieldData","getLookupTable","getMTime","mt","mtime","time","mapScalars","alpha","colorByArrayName","colorMapColors","toString","concat","colorBuildString","useLookupTableScalarRange","setRange","scalarRange","lut","build","fieldDataTupleId","DEFAULT_VALUES","static","renderTime","transformCoordinate","viewSpecificProperties","customShaderAttributes","extend","initialValues","arguments","length","undefined","Object","assign","get","setGet","setGetArray","vtkMapper2D$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Core/Mapper2D.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkAbstractMapper from './AbstractMapper.js';\nimport vtkLookupTable from '../../Common/Core/LookupTable.js';\nimport Constants from './Mapper/Constants.js';\n\nvar ColorMode = Constants.ColorMode,\n    ScalarMode = Constants.ScalarMode,\n    GetArray = Constants.GetArray; // ---------------------------------------------------------------------------\n// vtkMapper2D methods\n// ---------------------------------------------------------------------------\n\nfunction vtkMapper2D(publicAPI, model) {\n  // Set out className\n  model.classHierarchy.push('vtkMapper2D');\n\n  publicAPI.createDefaultLookupTable = function () {\n    model.lookupTable = vtkLookupTable.newInstance();\n  };\n\n  publicAPI.getColorModeAsString = function () {\n    return macro.enumToString(ColorMode, model.colorMode);\n  };\n\n  publicAPI.setColorModeToDefault = function () {\n    return publicAPI.setColorMode(0);\n  };\n\n  publicAPI.setColorModeToMapScalars = function () {\n    return publicAPI.setColorMode(1);\n  };\n\n  publicAPI.setColorModeToDirectScalars = function () {\n    return publicAPI.setColorMode(2);\n  };\n\n  publicAPI.getScalarModeAsString = function () {\n    return macro.enumToString(ScalarMode, model.scalarMode);\n  };\n\n  publicAPI.setScalarModeToDefault = function () {\n    return publicAPI.setScalarMode(0);\n  };\n\n  publicAPI.setScalarModeToUsePointData = function () {\n    return publicAPI.setScalarMode(1);\n  };\n\n  publicAPI.setScalarModeToUseCellData = function () {\n    return publicAPI.setScalarMode(2);\n  };\n\n  publicAPI.setScalarModeToUsePointFieldData = function () {\n    return publicAPI.setScalarMode(3);\n  };\n\n  publicAPI.setScalarModeToUseCellFieldData = function () {\n    return publicAPI.setScalarMode(4);\n  };\n\n  publicAPI.setScalarModeToUseFieldData = function () {\n    return publicAPI.setScalarMode(5);\n  };\n\n  publicAPI.getAbstractScalars = function (input, scalarMode, arrayAccessMode, arrayId, arrayName) {\n    // make sure we have an input\n    if (!input || !model.scalarVisibility) {\n      return {\n        scalars: null,\n        cellFLag: false\n      };\n    }\n\n    var scalars = null;\n    var cellFlag = false; // get scalar data and point/cell attribute according to scalar mode\n\n    if (scalarMode === ScalarMode.DEFAULT) {\n      scalars = input.getPointData().getScalars();\n\n      if (!scalars) {\n        scalars = input.getCellData().getScalars();\n        cellFlag = true;\n      }\n    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {\n      scalars = input.getPointData().getScalars();\n    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {\n      scalars = input.getCellData().getScalars();\n      cellFlag = true;\n    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {\n      var pd = input.getPointData();\n\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = pd.getArrayByIndex(arrayId);\n      } else {\n        scalars = pd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {\n      var cd = input.getCellData();\n      cellFlag = true;\n\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = cd.getArrayByIndex(arrayId);\n      } else {\n        scalars = cd.getArrayByName(arrayName);\n      }\n    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {\n      var fd = input.getFieldData();\n\n      if (arrayAccessMode === GetArray.BY_ID) {\n        scalars = fd.getArrayByIndex(arrayId);\n      } else {\n        scalars = fd.getArrayByName(arrayName);\n      }\n    }\n\n    return {\n      scalars: scalars,\n      cellFlag: cellFlag\n    };\n  };\n\n  publicAPI.getLookupTable = function () {\n    if (!model.lookupTable) {\n      publicAPI.createDefaultLookupTable();\n    }\n\n    return model.lookupTable;\n  };\n\n  publicAPI.getMTime = function () {\n    var mt = model.mtime;\n\n    if (model.lookupTable !== null) {\n      var time = model.lookupTable.getMTime();\n      mt = time > mt ? time : mt;\n    }\n\n    return mt;\n  };\n\n  publicAPI.mapScalars = function (input, alpha) {\n    var scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;\n\n    if (!scalars) {\n      model.colorMapColors = null;\n      return;\n    } // we want to only recompute when something has changed\n\n\n    var toString = \"\".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);\n    if (model.colorBuildString === toString) return;\n\n    if (!model.useLookupTableScalarRange) {\n      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);\n    }\n\n    var lut = publicAPI.getLookupTable();\n\n    if (lut) {\n      // Ensure that the lookup table is built\n      lut.build();\n      model.colorMapColors = lut.mapScalars(scalars, model.colorMode, model.fieldDataTupleId);\n    }\n\n    model.colorBuildString = \"\".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  static: false,\n  lookupTable: null,\n  scalarVisibility: false,\n  scalarRange: [0, 1],\n  useLookupTableScalarRange: false,\n  colorMode: 0,\n  scalarMode: 0,\n  arrayAccessMode: 1,\n  // By_NAME\n  renderTime: 0,\n  colorByArrayName: null,\n  transformCoordinate: null,\n  viewSpecificProperties: null,\n  customShaderAttributes: []\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkAbstractMapper.extend(publicAPI, model, initialValues);\n  macro.get(publicAPI, model, ['colorMapColors']);\n  macro.setGet(publicAPI, model, ['arrayAccessMode', 'colorByArrayName', 'colorMode', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'transformCoordinate', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO\n  ]);\n  macro.setGetArray(publicAPI, model, ['scalarRange'], 2);\n\n  if (!model.viewSpecificProperties) {\n    model.viewSpecificProperties = {};\n  } // Object methods\n\n\n  vtkMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkMapper2D'); // ----------------------------------------------------------------------------\n\nvar vtkMapper2D$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkMapper2D$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}