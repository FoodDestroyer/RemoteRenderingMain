{"ast":null,"code":"import otherStaticMethods from './Static.js';\nimport macro from '../../../macros.js';\n\n/* eslint-disable arrow-body-style */\n\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach(function (item) {\n    publicAPI[\"get\".concat(item.method)] = function () {\n      return model[item.key];\n    };\n    publicAPI[\"set\".concat(item.method)] = function (factor, offset) {\n      model[item.key] = {\n        factor: factor,\n        offset: offset\n      };\n    };\n  });\n}\nvar CATEGORIES = ['Polygon', 'Line', 'Point']; // CoincidentTopology static methods ------------------------------------------\n\nvar staticOffsetModel = {\n  Polygon: {\n    factor: 2,\n    offset: 0\n  },\n  Line: {\n    factor: 1,\n    offset: -1\n  },\n  Point: {\n    factor: 0,\n    offset: -2\n  }\n};\nvar staticOffsetAPI = {};\naddCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(function (key) {\n  return {\n    key: key,\n    method: \"ResolveCoincidentTopology\".concat(key, \"OffsetParameters\")\n  };\n}));\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']); // Relative methods\n\n  model.topologyOffset = {\n    Polygon: {\n      factor: 0,\n      offset: 0\n    },\n    Line: {\n      factor: 0,\n      offset: 0\n    },\n    Point: {\n      factor: 0,\n      offset: 0\n    }\n  }; // Add Static methods to our instance\n\n  Object.keys(otherStaticMethods).forEach(function (methodName) {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).forEach(function (methodName) {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(function (key) {\n    return {\n      key: key,\n      method: \"RelativeCoincidentTopology\".concat(key, \"OffsetParameters\")\n    };\n  }));\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = function () {\n    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    var localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyLineOffsetParameters = function () {\n    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    var localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n  publicAPI.getCoincidentTopologyPointOffsetParameter = function () {\n    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    var localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n}\nvar CoincidentTopologyHelper = {\n  implementCoincidentTopologyMethods: implementCoincidentTopologyMethods,\n  staticOffsetAPI: staticOffsetAPI,\n  otherStaticMethods: otherStaticMethods,\n  CATEGORIES: CATEGORIES\n};\nexport { CATEGORIES, CoincidentTopologyHelper as default };","map":{"version":3,"names":["otherStaticMethods","macro","addCoincidentTopologyMethods","publicAPI","model","nameList","forEach","item","concat","method","key","factor","offset","CATEGORIES","staticOffsetModel","Polygon","Line","Point","staticOffsetAPI","map","implementCoincidentTopologyMethods","resolveCoincidentTopology","undefined","setGet","topologyOffset","Object","keys","methodName","getCoincidentTopologyPolygonOffsetParameters","globalValue","getResolveCoincidentTopologyPolygonOffsetParameters","localValue","getRelativeCoincidentTopologyPolygonOffsetParameters","getCoincidentTopologyLineOffsetParameters","getResolveCoincidentTopologyLineOffsetParameters","getRelativeCoincidentTopologyLineOffsetParameters","getCoincidentTopologyPointOffsetParameter","getResolveCoincidentTopologyPointOffsetParameters","getRelativeCoincidentTopologyPointOffsetParameters","CoincidentTopologyHelper","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/Core/Mapper/CoincidentTopologyHelper.js"],"sourcesContent":["import otherStaticMethods from './Static.js';\nimport macro from '../../../macros.js';\n\n/* eslint-disable arrow-body-style */\n\nfunction addCoincidentTopologyMethods(publicAPI, model, nameList) {\n  nameList.forEach(function (item) {\n    publicAPI[\"get\".concat(item.method)] = function () {\n      return model[item.key];\n    };\n\n    publicAPI[\"set\".concat(item.method)] = function (factor, offset) {\n      model[item.key] = {\n        factor: factor,\n        offset: offset\n      };\n    };\n  });\n}\n\nvar CATEGORIES = ['Polygon', 'Line', 'Point']; // CoincidentTopology static methods ------------------------------------------\n\nvar staticOffsetModel = {\n  Polygon: {\n    factor: 2,\n    offset: 0\n  },\n  Line: {\n    factor: 1,\n    offset: -1\n  },\n  Point: {\n    factor: 0,\n    offset: -2\n  }\n};\nvar staticOffsetAPI = {};\naddCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(function (key) {\n  return {\n    key: key,\n    method: \"ResolveCoincidentTopology\".concat(key, \"OffsetParameters\")\n  };\n}));\n\nfunction implementCoincidentTopologyMethods(publicAPI, model) {\n  if (model.resolveCoincidentTopology === undefined) {\n    model.resolveCoincidentTopology = false;\n  }\n\n  macro.setGet(publicAPI, model, ['resolveCoincidentTopology']); // Relative methods\n\n  model.topologyOffset = {\n    Polygon: {\n      factor: 0,\n      offset: 0\n    },\n    Line: {\n      factor: 0,\n      offset: 0\n    },\n    Point: {\n      factor: 0,\n      offset: 0\n    }\n  }; // Add Static methods to our instance\n\n  Object.keys(otherStaticMethods).forEach(function (methodName) {\n    publicAPI[methodName] = otherStaticMethods[methodName];\n  });\n  Object.keys(staticOffsetAPI).forEach(function (methodName) {\n    publicAPI[methodName] = staticOffsetAPI[methodName];\n  });\n  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(function (key) {\n    return {\n      key: key,\n      method: \"RelativeCoincidentTopology\".concat(key, \"OffsetParameters\")\n    };\n  }));\n\n  publicAPI.getCoincidentTopologyPolygonOffsetParameters = function () {\n    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();\n    var localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n\n  publicAPI.getCoincidentTopologyLineOffsetParameters = function () {\n    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();\n    var localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n\n  publicAPI.getCoincidentTopologyPointOffsetParameter = function () {\n    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();\n    var localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();\n    return {\n      factor: globalValue.factor + localValue.factor,\n      offset: globalValue.offset + localValue.offset\n    };\n  };\n}\n\nvar CoincidentTopologyHelper = {\n  implementCoincidentTopologyMethods: implementCoincidentTopologyMethods,\n  staticOffsetAPI: staticOffsetAPI,\n  otherStaticMethods: otherStaticMethods,\n  CATEGORIES: CATEGORIES\n};\n\nexport { CATEGORIES, CoincidentTopologyHelper as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}