{"ast":null,"code":"import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport macro from '../../macros.js';\nimport vtkHardwareSelector from '../Core/HardwareSelector.js';\nimport vtkWebGPUBuffer from './Buffer.js';\nimport vtkWebGPUHardwareSelectionPass from './HardwareSelectionPass.js';\nimport vtkSelectionNode from '../../Common/DataModel/SelectionNode.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\nvar SelectionContent = vtkSelectionNode.SelectionContent,\n  SelectionField = vtkSelectionNode.SelectionField;\nvar FieldAssociations = vtkDataSet.FieldAssociations;\nvar vtkErrorMacro = macro.vtkErrorMacro;\nfunction getInfoHash(info) {\n  return \"\".concat(info.propID, \" \").concat(info.compositeID);\n}\nfunction convert(xx, yy, buffdata, channel) {\n  var offset = ((buffdata.height - yy - 1) * buffdata.colorBufferWidth + xx) * 4 + channel;\n  return buffdata.colorValues[offset];\n}\nfunction getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {\n  // Base case\n  var maxDist = maxDistance < 0 ? 0 : maxDistance;\n  if (maxDist === 0) {\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n    if (inDisplayPosition[0] < 0 || inDisplayPosition[0] >= buffdata.width || inDisplayPosition[1] < 0 || inDisplayPosition[1] >= buffdata.height) {\n      return null;\n    }\n    var actorid = convert(inDisplayPosition[0], inDisplayPosition[1], buffdata, 0);\n    if (actorid <= 0) {\n      // the pixel did not hit any actor.\n      return null;\n    }\n    var _info = {};\n    _info.propID = actorid;\n    var compositeID = convert(inDisplayPosition[0], inDisplayPosition[1], buffdata, 1);\n    if (compositeID < 0 || compositeID > 0xffffff) {\n      compositeID = 0;\n    }\n    _info.compositeID = compositeID;\n    if (buffdata.captureZValues) {\n      var offset = (buffdata.height - inDisplayPosition[1] - 1) * buffdata.zbufferBufferWidth + inDisplayPosition[0];\n      _info.zValue = buffdata.depthValues[offset];\n      _info.zValue = buffdata.webGPURenderer.convertToOpenGLDepth(_info.zValue);\n      _info.displayPosition = inDisplayPosition;\n    }\n    return _info;\n  } // Iterate over successively growing boxes.\n  // They recursively call the base case to handle single pixels.\n\n  var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n  var curPos = [0, 0];\n  var info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);\n  if (info) {\n    return info;\n  }\n  for (var dist = 1; dist < maxDist; ++dist) {\n    // Vertical sides of box.\n    for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n      curPos[1] = y;\n      if (dispPos[0] >= dist) {\n        curPos[0] = dispPos[0] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n        if (info) {\n          return info;\n        }\n      }\n      curPos[0] = dispPos[0] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n      if (info) {\n        return info;\n      }\n    } // Horizontal sides of box.\n\n    for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n      curPos[0] = x;\n      if (dispPos[1] >= dist) {\n        curPos[1] = dispPos[1] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n        if (info) {\n          return info;\n        }\n      }\n      curPos[1] = dispPos[1] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n      if (info) {\n        return info;\n      }\n    }\n  } // nothing hit.\n\n  outSelectedPosition[0] = inDisplayPosition[0];\n  outSelectedPosition[1] = inDisplayPosition[1];\n  return null;\n} //-----------------------------------------------------------------------------\n\nfunction convertSelection(fieldassociation, dataMap, buffdata) {\n  var sel = [];\n  var count = 0;\n  dataMap.forEach(function (value, key) {\n    var child = vtkSelectionNode.newInstance();\n    child.setContentType(SelectionContent.INDICES);\n    switch (fieldassociation) {\n      case FieldAssociations.FIELD_ASSOCIATION_CELLS:\n        child.setFieldType(SelectionField.CELL);\n        break;\n      case FieldAssociations.FIELD_ASSOCIATION_POINTS:\n        child.setFieldType(SelectionField.POINT);\n        break;\n      default:\n        vtkErrorMacro('Unknown field association');\n    }\n    child.getProperties().propID = value.info.propID;\n    var wprop = buffdata.webGPURenderer.getPropFromID(value.info.propID);\n    child.getProperties().prop = wprop.getRenderable();\n    child.getProperties().compositeID = value.info.compositeID;\n    child.getProperties().pixelCount = value.pixelCount;\n    if (buffdata.captureZValues) {\n      child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];\n      child.getProperties().worldPosition = buffdata.webGPURenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, buffdata.renderer);\n    }\n    child.setSelectionList(value.attributeIDs);\n    sel[count] = child;\n    count++;\n  });\n  return sel;\n} //----------------------------------------------------------------------------\n\nfunction generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {\n  var x1 = Math.floor(fx1);\n  var y1 = Math.floor(fy1);\n  var x2 = Math.floor(fx2);\n  var y2 = Math.floor(fy2);\n  var dataMap = new Map();\n  var outSelectedPosition = [0, 0];\n  for (var yy = y1; yy <= y2; yy++) {\n    for (var xx = x1; xx <= x2; xx++) {\n      var pos = [xx, yy];\n      var info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);\n      if (info) {\n        var hash = getInfoHash(info);\n        if (!dataMap.has(hash)) {\n          dataMap.set(hash, {\n            info: info,\n            pixelCount: 1,\n            attributeIDs: [info.attributeID]\n          });\n        } else {\n          var dmv = dataMap.get(hash);\n          dmv.pixelCount++;\n          if (buffdata.captureZValues) {\n            if (info.zValue < dmv.info.zValue) {\n              dmv.info = info;\n            }\n          }\n          if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n            dmv.attributeIDs.push(info.attributeID);\n          }\n        }\n      }\n    }\n  }\n  return convertSelection(buffdata.fieldAssociation, dataMap, buffdata);\n} // ----------------------------------------------------------------------------\n// vtkWebGPUHardwareSelector methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUHardwareSelector(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUHardwareSelector'); //----------------------------------------------------------------------------\n\n  publicAPI.endSelection = function () {\n    model.WebGPURenderer.setSelector(null);\n  }; //----------------------------------------------------------------------------\n  // note we ignore the x,y arguments as WebGPU has to do buffer copies\n  // of the entire depth bufer. We could realloc hardware selection textures\n  // based on the passed in size etc but it gets messy so for now we always\n  // render the full size window and copy it to the buffers.\n\n  publicAPI.getSourceDataAsync = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(renderer) {\n      var webGPURenderer, originalSuppress, device, texture, depthTexture, result, colorBuffer, cmdEnc, zbuffer, cLoad, zLoad;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!renderer || !model._WebGPURenderWindow)) {\n                _context.next = 3;\n                break;\n              }\n              vtkErrorMacro('Renderer and view must be set before calling Select.');\n              return _context.abrupt(\"return\", false);\n            case 3:\n              // todo revisit making selection part of core\n              // then we can do this in core\n              model._WebGPURenderWindow.getRenderable().preRender();\n              if (model._WebGPURenderWindow.getInitialized()) {\n                _context.next = 8;\n                break;\n              }\n              model._WebGPURenderWindow.initialize();\n              _context.next = 8;\n              return new Promise(function (resolve) {\n                model._WebGPURenderWindow.onInitialized(resolve);\n              });\n            case 8:\n              webGPURenderer = model._WebGPURenderWindow.getViewNodeFor(renderer);\n              if (webGPURenderer) {\n                _context.next = 11;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 11:\n              // Initialize renderer for selection.\n              // change the renderer's background to black, which will indicate a miss\n              originalSuppress = webGPURenderer.getSuppressClear();\n              webGPURenderer.setSuppressClear(true);\n              model._selectionPass.traverse(model._WebGPURenderWindow, webGPURenderer); // restore original background\n\n              webGPURenderer.setSuppressClear(originalSuppress);\n              device = model._WebGPURenderWindow.getDevice();\n              texture = model._selectionPass.getColorTexture();\n              depthTexture = model._selectionPass.getDepthTexture(); // as this is async we really don't want to store things in\n              // the class as multiple calls may start before resolving\n              // so anything specific to this request gets put into the\n              // result object (by value in most cases)\n\n              result = {\n                area: [0, 0, texture.getWidth() - 1, texture.getHeight() - 1],\n                captureZValues: model.captureZValues,\n                fieldAssociation: model.fieldAssociation,\n                renderer: renderer,\n                webGPURenderer: webGPURenderer,\n                webGPURenderWindow: model._WebGPURenderWindow,\n                width: texture.getWidth(),\n                height: texture.getHeight()\n              }; // must be a multiple of 256 bytes, so 16 texels with rgba32uint\n\n              result.colorBufferWidth = 16 * Math.floor((result.width + 15) / 16);\n              result.colorBufferSizeInBytes = result.colorBufferWidth * result.height * 4 * 4;\n              colorBuffer = vtkWebGPUBuffer.newInstance({\n                label: 'hardwareSelectColorBuffer'\n              });\n              colorBuffer.setDevice(device);\n              /* eslint-disable no-bitwise */\n\n              /* eslint-disable no-undef */\n\n              colorBuffer.create(result.colorBufferSizeInBytes, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n              /* eslint-enable no-bitwise */\n\n              /* eslint-enable no-undef */\n\n              cmdEnc = model._WebGPURenderWindow.getCommandEncoder();\n              cmdEnc.copyTextureToBuffer({\n                texture: texture.getHandle()\n              }, {\n                buffer: colorBuffer.getHandle(),\n                bytesPerRow: 16 * result.colorBufferWidth,\n                rowsPerImage: result.height\n              }, {\n                width: result.width,\n                height: result.height,\n                depthOrArrayLayers: 1\n              });\n              if (model.captureZValues) {\n                result.zbufferBufferWidth = 64 * Math.floor((result.width + 63) / 64);\n                zbuffer = vtkWebGPUBuffer.newInstance({\n                  label: 'hardwareSelectDepthBuffer'\n                });\n                zbuffer.setDevice(device);\n                result.zbufferSizeInBytes = result.height * result.zbufferBufferWidth * 4;\n                /* eslint-disable no-bitwise */\n\n                /* eslint-disable no-undef */\n\n                zbuffer.create(result.zbufferSizeInBytes, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n                /* eslint-enable no-bitwise */\n\n                /* eslint-enable no-undef */\n\n                cmdEnc.copyTextureToBuffer({\n                  texture: depthTexture.getHandle(),\n                  aspect: 'depth-only'\n                }, {\n                  buffer: zbuffer.getHandle(),\n                  bytesPerRow: 4 * result.zbufferBufferWidth,\n                  rowsPerImage: result.height\n                }, {\n                  width: result.width,\n                  height: result.height,\n                  depthOrArrayLayers: 1\n                });\n              }\n              device.submitCommandEncoder(cmdEnc);\n              /* eslint-disable no-undef */\n\n              cLoad = colorBuffer.mapAsync(GPUMapMode.READ);\n              if (!model.captureZValues) {\n                _context.next = 37;\n                break;\n              }\n              zLoad = zbuffer.mapAsync(GPUMapMode.READ);\n              _context.next = 33;\n              return Promise.all([cLoad, zLoad]);\n            case 33:\n              result.depthValues = new Float32Array(zbuffer.getMappedRange().slice());\n              zbuffer.unmap();\n              _context.next = 39;\n              break;\n            case 37:\n              _context.next = 39;\n              return cLoad;\n            case 39:\n              /* eslint-enable no-undef */\n              result.colorValues = new Uint32Array(colorBuffer.getMappedRange().slice());\n              colorBuffer.unmap();\n              result.generateSelection = function (fx1, fy1, fx2, fy2) {\n                return generateSelectionWithData(result, fx1, fy1, fx2, fy2);\n              };\n              return _context.abrupt(\"return\", result);\n            case 43:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {// WebGPURenderWindow: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkHardwareSelector.extend(publicAPI, model, initialValues);\n  model._selectionPass = vtkWebGPUHardwareSelectionPass.newInstance();\n  macro.setGet(publicAPI, model, ['_WebGPURenderWindow']);\n  macro.moveToProtected(publicAPI, model, ['WebGPURenderWindow']); // Object methods\n\n  vtkWebGPUHardwareSelector(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkWebGPUHardwareSelector'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUHardwareSelector$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkWebGPUHardwareSelector$1 as default, extend, newInstance };","map":{"version":3,"names":["_asyncToGenerator","_regeneratorRuntime","macro","vtkHardwareSelector","vtkWebGPUBuffer","vtkWebGPUHardwareSelectionPass","vtkSelectionNode","vtkDataSet","SelectionContent","SelectionField","FieldAssociations","vtkErrorMacro","getInfoHash","info","concat","propID","compositeID","convert","xx","yy","buffdata","channel","offset","height","colorBufferWidth","colorValues","getPixelInformationWithData","inDisplayPosition","maxDistance","outSelectedPosition","maxDist","width","actorid","_info","captureZValues","zbufferBufferWidth","zValue","depthValues","webGPURenderer","convertToOpenGLDepth","displayPosition","dispPos","curPos","dist","y","x","convertSelection","fieldassociation","dataMap","sel","count","forEach","value","key","child","newInstance","setContentType","INDICES","FIELD_ASSOCIATION_CELLS","setFieldType","CELL","FIELD_ASSOCIATION_POINTS","POINT","getProperties","wprop","getPropFromID","prop","getRenderable","pixelCount","worldPosition","webGPURenderWindow","displayToWorld","renderer","setSelectionList","attributeIDs","generateSelectionWithData","fx1","fy1","fx2","fy2","x1","Math","floor","y1","x2","y2","Map","pos","hash","has","set","attributeID","dmv","get","indexOf","push","fieldAssociation","vtkWebGPUHardwareSelector","publicAPI","model","classHierarchy","endSelection","WebGPURenderer","setSelector","getSourceDataAsync","_ref","mark","_callee","originalSuppress","device","texture","depthTexture","result","colorBuffer","cmdEnc","zbuffer","cLoad","zLoad","wrap","_callee$","_context","prev","next","_WebGPURenderWindow","abrupt","preRender","getInitialized","initialize","Promise","resolve","onInitialized","getViewNodeFor","getSuppressClear","setSuppressClear","_selectionPass","traverse","getDevice","getColorTexture","getDepthTexture","area","getWidth","getHeight","colorBufferSizeInBytes","label","setDevice","create","GPUBufferUsage","MAP_READ","COPY_DST","getCommandEncoder","copyTextureToBuffer","getHandle","buffer","bytesPerRow","rowsPerImage","depthOrArrayLayers","zbufferSizeInBytes","aspect","submitCommandEncoder","mapAsync","GPUMapMode","READ","all","Float32Array","getMappedRange","slice","unmap","Uint32Array","generateSelection","stop","_x","apply","arguments","DEFAULT_VALUES","extend","initialValues","length","undefined","Object","assign","setGet","moveToProtected","vtkWebGPUHardwareSelector$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/HardwareSelector.js"],"sourcesContent":["import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport macro from '../../macros.js';\nimport vtkHardwareSelector from '../Core/HardwareSelector.js';\nimport vtkWebGPUBuffer from './Buffer.js';\nimport vtkWebGPUHardwareSelectionPass from './HardwareSelectionPass.js';\nimport vtkSelectionNode from '../../Common/DataModel/SelectionNode.js';\nimport vtkDataSet from '../../Common/DataModel/DataSet.js';\n\nvar SelectionContent = vtkSelectionNode.SelectionContent,\n    SelectionField = vtkSelectionNode.SelectionField;\nvar FieldAssociations = vtkDataSet.FieldAssociations;\nvar vtkErrorMacro = macro.vtkErrorMacro;\n\nfunction getInfoHash(info) {\n  return \"\".concat(info.propID, \" \").concat(info.compositeID);\n}\n\nfunction convert(xx, yy, buffdata, channel) {\n  var offset = ((buffdata.height - yy - 1) * buffdata.colorBufferWidth + xx) * 4 + channel;\n  return buffdata.colorValues[offset];\n}\n\nfunction getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {\n  // Base case\n  var maxDist = maxDistance < 0 ? 0 : maxDistance;\n\n  if (maxDist === 0) {\n    outSelectedPosition[0] = inDisplayPosition[0];\n    outSelectedPosition[1] = inDisplayPosition[1];\n\n    if (inDisplayPosition[0] < 0 || inDisplayPosition[0] >= buffdata.width || inDisplayPosition[1] < 0 || inDisplayPosition[1] >= buffdata.height) {\n      return null;\n    }\n\n    var actorid = convert(inDisplayPosition[0], inDisplayPosition[1], buffdata, 0);\n\n    if (actorid <= 0) {\n      // the pixel did not hit any actor.\n      return null;\n    }\n\n    var _info = {};\n    _info.propID = actorid;\n    var compositeID = convert(inDisplayPosition[0], inDisplayPosition[1], buffdata, 1);\n\n    if (compositeID < 0 || compositeID > 0xffffff) {\n      compositeID = 0;\n    }\n\n    _info.compositeID = compositeID;\n\n    if (buffdata.captureZValues) {\n      var offset = (buffdata.height - inDisplayPosition[1] - 1) * buffdata.zbufferBufferWidth + inDisplayPosition[0];\n      _info.zValue = buffdata.depthValues[offset];\n      _info.zValue = buffdata.webGPURenderer.convertToOpenGLDepth(_info.zValue);\n      _info.displayPosition = inDisplayPosition;\n    }\n\n    return _info;\n  } // Iterate over successively growing boxes.\n  // They recursively call the base case to handle single pixels.\n\n\n  var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];\n  var curPos = [0, 0];\n  var info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);\n\n  if (info) {\n    return info;\n  }\n\n  for (var dist = 1; dist < maxDist; ++dist) {\n    // Vertical sides of box.\n    for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {\n      curPos[1] = y;\n\n      if (dispPos[0] >= dist) {\n        curPos[0] = dispPos[0] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n        if (info) {\n          return info;\n        }\n      }\n\n      curPos[0] = dispPos[0] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n      if (info) {\n        return info;\n      }\n    } // Horizontal sides of box.\n\n\n    for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {\n      curPos[0] = x;\n\n      if (dispPos[1] >= dist) {\n        curPos[1] = dispPos[1] - dist;\n        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n        if (info) {\n          return info;\n        }\n      }\n\n      curPos[1] = dispPos[1] + dist;\n      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);\n\n      if (info) {\n        return info;\n      }\n    }\n  } // nothing hit.\n\n\n  outSelectedPosition[0] = inDisplayPosition[0];\n  outSelectedPosition[1] = inDisplayPosition[1];\n  return null;\n} //-----------------------------------------------------------------------------\n\n\nfunction convertSelection(fieldassociation, dataMap, buffdata) {\n  var sel = [];\n  var count = 0;\n  dataMap.forEach(function (value, key) {\n    var child = vtkSelectionNode.newInstance();\n    child.setContentType(SelectionContent.INDICES);\n\n    switch (fieldassociation) {\n      case FieldAssociations.FIELD_ASSOCIATION_CELLS:\n        child.setFieldType(SelectionField.CELL);\n        break;\n\n      case FieldAssociations.FIELD_ASSOCIATION_POINTS:\n        child.setFieldType(SelectionField.POINT);\n        break;\n\n      default:\n        vtkErrorMacro('Unknown field association');\n    }\n\n    child.getProperties().propID = value.info.propID;\n    var wprop = buffdata.webGPURenderer.getPropFromID(value.info.propID);\n    child.getProperties().prop = wprop.getRenderable();\n    child.getProperties().compositeID = value.info.compositeID;\n    child.getProperties().pixelCount = value.pixelCount;\n\n    if (buffdata.captureZValues) {\n      child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];\n      child.getProperties().worldPosition = buffdata.webGPURenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, buffdata.renderer);\n    }\n\n    child.setSelectionList(value.attributeIDs);\n    sel[count] = child;\n    count++;\n  });\n  return sel;\n} //----------------------------------------------------------------------------\n\n\nfunction generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {\n  var x1 = Math.floor(fx1);\n  var y1 = Math.floor(fy1);\n  var x2 = Math.floor(fx2);\n  var y2 = Math.floor(fy2);\n  var dataMap = new Map();\n  var outSelectedPosition = [0, 0];\n\n  for (var yy = y1; yy <= y2; yy++) {\n    for (var xx = x1; xx <= x2; xx++) {\n      var pos = [xx, yy];\n      var info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);\n\n      if (info) {\n        var hash = getInfoHash(info);\n\n        if (!dataMap.has(hash)) {\n          dataMap.set(hash, {\n            info: info,\n            pixelCount: 1,\n            attributeIDs: [info.attributeID]\n          });\n        } else {\n          var dmv = dataMap.get(hash);\n          dmv.pixelCount++;\n\n          if (buffdata.captureZValues) {\n            if (info.zValue < dmv.info.zValue) {\n              dmv.info = info;\n            }\n          }\n\n          if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {\n            dmv.attributeIDs.push(info.attributeID);\n          }\n        }\n      }\n    }\n  }\n\n  return convertSelection(buffdata.fieldAssociation, dataMap, buffdata);\n} // ----------------------------------------------------------------------------\n// vtkWebGPUHardwareSelector methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkWebGPUHardwareSelector(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUHardwareSelector'); //----------------------------------------------------------------------------\n\n  publicAPI.endSelection = function () {\n    model.WebGPURenderer.setSelector(null);\n  }; //----------------------------------------------------------------------------\n  // note we ignore the x,y arguments as WebGPU has to do buffer copies\n  // of the entire depth bufer. We could realloc hardware selection textures\n  // based on the passed in size etc but it gets messy so for now we always\n  // render the full size window and copy it to the buffers.\n\n\n  publicAPI.getSourceDataAsync = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(renderer) {\n      var webGPURenderer, originalSuppress, device, texture, depthTexture, result, colorBuffer, cmdEnc, zbuffer, cLoad, zLoad;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!renderer || !model._WebGPURenderWindow)) {\n                _context.next = 3;\n                break;\n              }\n\n              vtkErrorMacro('Renderer and view must be set before calling Select.');\n              return _context.abrupt(\"return\", false);\n\n            case 3:\n              // todo revisit making selection part of core\n              // then we can do this in core\n              model._WebGPURenderWindow.getRenderable().preRender();\n\n              if (model._WebGPURenderWindow.getInitialized()) {\n                _context.next = 8;\n                break;\n              }\n\n              model._WebGPURenderWindow.initialize();\n\n              _context.next = 8;\n              return new Promise(function (resolve) {\n                model._WebGPURenderWindow.onInitialized(resolve);\n              });\n\n            case 8:\n              webGPURenderer = model._WebGPURenderWindow.getViewNodeFor(renderer);\n\n              if (webGPURenderer) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\", false);\n\n            case 11:\n              // Initialize renderer for selection.\n              // change the renderer's background to black, which will indicate a miss\n              originalSuppress = webGPURenderer.getSuppressClear();\n              webGPURenderer.setSuppressClear(true);\n\n              model._selectionPass.traverse(model._WebGPURenderWindow, webGPURenderer); // restore original background\n\n\n              webGPURenderer.setSuppressClear(originalSuppress);\n              device = model._WebGPURenderWindow.getDevice();\n              texture = model._selectionPass.getColorTexture();\n              depthTexture = model._selectionPass.getDepthTexture(); // as this is async we really don't want to store things in\n              // the class as multiple calls may start before resolving\n              // so anything specific to this request gets put into the\n              // result object (by value in most cases)\n\n              result = {\n                area: [0, 0, texture.getWidth() - 1, texture.getHeight() - 1],\n                captureZValues: model.captureZValues,\n                fieldAssociation: model.fieldAssociation,\n                renderer: renderer,\n                webGPURenderer: webGPURenderer,\n                webGPURenderWindow: model._WebGPURenderWindow,\n                width: texture.getWidth(),\n                height: texture.getHeight()\n              }; // must be a multiple of 256 bytes, so 16 texels with rgba32uint\n\n              result.colorBufferWidth = 16 * Math.floor((result.width + 15) / 16);\n              result.colorBufferSizeInBytes = result.colorBufferWidth * result.height * 4 * 4;\n              colorBuffer = vtkWebGPUBuffer.newInstance({\n                label: 'hardwareSelectColorBuffer'\n              });\n              colorBuffer.setDevice(device);\n              /* eslint-disable no-bitwise */\n\n              /* eslint-disable no-undef */\n\n              colorBuffer.create(result.colorBufferSizeInBytes, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n              /* eslint-enable no-bitwise */\n\n              /* eslint-enable no-undef */\n\n              cmdEnc = model._WebGPURenderWindow.getCommandEncoder();\n              cmdEnc.copyTextureToBuffer({\n                texture: texture.getHandle()\n              }, {\n                buffer: colorBuffer.getHandle(),\n                bytesPerRow: 16 * result.colorBufferWidth,\n                rowsPerImage: result.height\n              }, {\n                width: result.width,\n                height: result.height,\n                depthOrArrayLayers: 1\n              });\n\n              if (model.captureZValues) {\n                result.zbufferBufferWidth = 64 * Math.floor((result.width + 63) / 64);\n                zbuffer = vtkWebGPUBuffer.newInstance({\n                  label: 'hardwareSelectDepthBuffer'\n                });\n                zbuffer.setDevice(device);\n                result.zbufferSizeInBytes = result.height * result.zbufferBufferWidth * 4;\n                /* eslint-disable no-bitwise */\n\n                /* eslint-disable no-undef */\n\n                zbuffer.create(result.zbufferSizeInBytes, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n                /* eslint-enable no-bitwise */\n\n                /* eslint-enable no-undef */\n\n                cmdEnc.copyTextureToBuffer({\n                  texture: depthTexture.getHandle(),\n                  aspect: 'depth-only'\n                }, {\n                  buffer: zbuffer.getHandle(),\n                  bytesPerRow: 4 * result.zbufferBufferWidth,\n                  rowsPerImage: result.height\n                }, {\n                  width: result.width,\n                  height: result.height,\n                  depthOrArrayLayers: 1\n                });\n              }\n\n              device.submitCommandEncoder(cmdEnc);\n              /* eslint-disable no-undef */\n\n              cLoad = colorBuffer.mapAsync(GPUMapMode.READ);\n\n              if (!model.captureZValues) {\n                _context.next = 37;\n                break;\n              }\n\n              zLoad = zbuffer.mapAsync(GPUMapMode.READ);\n              _context.next = 33;\n              return Promise.all([cLoad, zLoad]);\n\n            case 33:\n              result.depthValues = new Float32Array(zbuffer.getMappedRange().slice());\n              zbuffer.unmap();\n              _context.next = 39;\n              break;\n\n            case 37:\n              _context.next = 39;\n              return cLoad;\n\n            case 39:\n              /* eslint-enable no-undef */\n              result.colorValues = new Uint32Array(colorBuffer.getMappedRange().slice());\n              colorBuffer.unmap();\n\n              result.generateSelection = function (fx1, fy1, fx2, fy2) {\n                return generateSelectionWithData(result, fx1, fy1, fx2, fy2);\n              };\n\n              return _context.abrupt(\"return\", result);\n\n            case 43:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {// WebGPURenderWindow: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkHardwareSelector.extend(publicAPI, model, initialValues);\n  model._selectionPass = vtkWebGPUHardwareSelectionPass.newInstance();\n  macro.setGet(publicAPI, model, ['_WebGPURenderWindow']);\n  macro.moveToProtected(publicAPI, model, ['WebGPURenderWindow']); // Object methods\n\n  vtkWebGPUHardwareSelector(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkWebGPUHardwareSelector'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUHardwareSelector$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUHardwareSelector$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}