{"ast":null,"code":"import { mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, setGet, obj, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper2D from '../Core/Mapper2D.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport { v as vtkPolyData2DFS } from './glsl/vtkPolyData2DFS.glsl.js';\nimport { v as vtkPolyData2DVS } from './glsl/vtkPolyData2DVS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { L as round } from '../../Common/Core/Math/index.js';\nimport { DisplayLocation } from '../Core/Property2D/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat3, mat4, vec3 } from 'gl-matrix';\nvar primTypes = vtkHelper.primTypes;\nvar ScalarMode = vtkMapper2D.ScalarMode;\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar StartEvent = {\n  type: 'StartEvent'\n};\nvar EndEvent = {\n  type: 'EndEvent'\n}; // ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');\n      model._openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n  publicAPI.overlayPass = function (prepass) {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n  publicAPI.getShaderTemplate = function (shaders, ren, actor) {\n    shaders.Vertex = vtkPolyData2DVS;\n    shaders.Fragment = vtkPolyData2DFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.render = function () {\n    var ctx = model._openGLRenderWindow.getContext();\n    if (model.context !== ctx) {\n      model.context = ctx;\n      for (var i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n    var actor = model.openGLActor2D.getRenderable();\n    var ren = model._openGLRenderer.getRenderable();\n    publicAPI.renderPiece(ren, actor);\n  };\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent(StartEvent);\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    } // if there are no points then we are done\n\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.renderPieceStart = function (ren, actor) {\n    model.primitiveIDOffset = 0;\n    if (model._openGLRenderer.getSelector()) {\n      switch (model._openGLRenderer.getSelector().getCurrentPass()) {\n        default:\n          model._openGLRenderer.getSelector().renderProp(actor);\n      }\n    } // make sure the BOs are up to date\n\n    publicAPI.updateBufferObjects(ren, actor); // Bind the OpenGL, this is shared between the different primitive/cell types.\n\n    model.lastBoundBO = null;\n  };\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    if (cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateBufferObjects = function (ren, actor) {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    var vmtime = model.VBOBuildTime.getMTime();\n    if (vmtime < publicAPI.getMTime() || vmtime < model._openGLRenderWindow.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    var poly = model.currentInput;\n    if (poly === null) {\n      return;\n    }\n    model.renderable.mapScalars(poly, actor.getProperty().getOpacity());\n    var c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    var scalarMode = model.renderable.getScalarMode();\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n    var representation = actor.getProperty().getRepresentation();\n    var tcoords = poly.getPointData().getTCoords();\n    if (!model.openGLActor2D.getActiveTextures()) {\n      tcoords = null;\n    }\n    var transformCoordinate = model.renderable.getTransformCoordinate();\n    var view = ren.getRenderWindow().getViews()[0];\n    var vsize = view.getViewportSize(ren);\n    var toString = \"\".concat(poly.getMTime(), \"A\").concat(representation, \"B\").concat(poly.getMTime()) + \"C\".concat(c ? c.getMTime() : 1) + \"D\".concat(tcoords ? tcoords.getMTime() : 1) + \"E\".concat(transformCoordinate ? ren.getMTime() : 1) + \"F\".concat(vsize);\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      var points = poly.getPoints();\n      if (transformCoordinate) {\n        var p = vtkPoints.newInstance();\n        var numPts = points.getNumberOfPoints();\n        p.setNumberOfPoints(numPts);\n        var point = [];\n        for (var i = 0; i < numPts; ++i) {\n          points.getPoint(i, point);\n          transformCoordinate.setValue(point);\n          var v = transformCoordinate.getComputedDoubleViewportValue(ren);\n          p.setPoint(i, v[0], v[1], 0.0);\n        }\n        points = p;\n      }\n      var options = {\n        points: points,\n        tcoords: tcoords,\n        colors: c,\n        cellOffset: 0,\n        haveCellScalars: model.haveCellSCalars,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {\n          return poly.getPointData().getArrayByName(arrayName);\n        })\n      };\n      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);\n      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);\n      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);\n      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var representation = actor.getProperty().getRepresentation();\n    var gl = model.context;\n    gl.depthMask(true); // for every primitive type\n\n    for (var i = primTypes.Start; i < primTypes.End; i++) {\n      // if there are entries\n      var cabo = model.primitives[i].getCABO();\n      if (cabo.getElementCount()) {\n        model.lastBoundBO = model.primitives[i];\n        model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n      }\n    }\n  };\n  publicAPI.renderPieceFinish = function (ren, actor) {\n    if (model.lastBoundBO) {\n      model.lastBoundBO.getVAO().release();\n    }\n  };\n  publicAPI.replaceShaderValues = function (shaders, ren, actor) {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderColor = function (shaders, ren, actor) {\n    var VSSource = shaders.Vertex;\n    var GSSource = shaders.Geometry;\n    var FSSource = shaders.Fragment;\n    if (model.haveCellScalars) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;\n    }\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\\n', 'out vec4 fcolorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;\n    } else {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;\n    }\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n      var tcdim = model.lastBoundBO.getCABO().getTCoordComponents();\n      if (tcdim === 1) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\\n', 'out float tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;\n      } else if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\\n', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;\n      }\n      if (model.haveCellScalars) {\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;\n      }\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n  };\n  publicAPI.invokeShaderCallbacks = function (cellBO, ren, actor) {\n    var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n    if (listCallbacks) {\n      listCallbacks.forEach(function (object) {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n    if (cellBO.getProgram().isAttributeUsed('vertexWC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n        vtkErrorMacro('Error setting vertexWC in shader VAO.');\n      }\n    }\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {\n        if (cellBO.getProgram().isAttributeUsed(\"\".concat(attrName, \"MC\"))) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), \"\".concat(attrName, \"MC\"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(\"Error setting \".concat(attrName, \"MC in shader VAO.\"));\n          }\n        }\n      });\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n      }\n      var tus = model.openGLActor2D.getActiveTextures();\n      if (tus) {\n        for (var index = 0; index < tus.length; ++index) {\n          var tex = tus[index];\n          var texUnit = tex.getTextureUnit();\n          var tname = \"texture\".concat(texUnit + 1);\n          if (cellBO.getProgram().isUniformUsed(tname)) {\n            cellBO.getProgram().setUniformi(tname, texUnit);\n          }\n        }\n      } // handle wide lines\n\n      cellBO.setMapperShaderParameters(ren, actor, model._openGLRenderer.getTiledSizeAndOrigin());\n      var selector = model._openGLRenderer.getSelector();\n      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n    }\n  };\n  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {\n    var c = model.renderable.getColorMapColors();\n    if (!c || c.getNumberOfComponents() === 0) {\n      var program = cellBO.getProgram();\n      var ppty = actor.getProperty();\n      var opacity = ppty.getOpacity();\n      var dColor = ppty.getColor();\n      var diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];\n      program.setUniform4f('diffuseColor', diffuseColor);\n    }\n  };\n  publicAPI.setLightingShaderParameters = function (cellBO, ren, actor) {// no-op\n  };\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce(function (res, matrix, index) {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram();\n    var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null; // Get the position of the actor\n\n    var view = ren.getRenderWindow().getViews()[0];\n    var size = view.getViewportSize(ren);\n    var vport = ren.getViewport();\n    var actorPos = actor.getActualPositionCoordinate().getComputedDoubleViewportValue(ren); // Get the window info\n    // Assume tile viewport is 0 1 based on vtkOpenGLRenderer\n\n    var tileViewport = [0.0, 0.0, 1.0, 1.0];\n    var visVP = [0.0, 0.0, 1.0, 1.0];\n    visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];\n    visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];\n    visVP[2] = vport[2] <= tileViewport[2] ? vport[2] : tileViewport[2];\n    visVP[3] = vport[3] <= tileViewport[3] ? vport[3] : tileViewport[3];\n    if (visVP[0] >= visVP[2]) {\n      return;\n    }\n    if (visVP[1] >= visVP[3]) {\n      return;\n    }\n    size[0] = round(size[0] * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));\n    size[1] = round(size[1] * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));\n    var winSize = model._openGLRenderer.getParent().getSize();\n    var xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);\n    var yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]); // set ortho projection\n\n    var left = -xoff;\n    var right = -xoff + size[0];\n    var bottom = -yoff;\n    var top = -yoff + size[1]; // it's an error to call glOrtho with\n    // either left==right or top==bottom\n\n    if (left === right) {\n      right = left + 1.0;\n    }\n    if (bottom === top) {\n      top = bottom + 1.0;\n    } // compute the combined ModelView matrix and send it down to save time in the shader\n\n    var tmpMat4 = mat4.identity(new Float64Array(16));\n    tmpMat4[0] = 2.0 / (right - left);\n    tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);\n    tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);\n    tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);\n    tmpMat4[2 * 4 + 2] = 0.0;\n    tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;\n    tmpMat4[3 * 4 + 3] = 1.0;\n    mat4.transpose(tmpMat4, tmpMat4);\n    program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n  for (var i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  } // Build VTK API\n\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  }); // Object methods\n\n  vtkOpenGLPolyDataMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper2D'); // ----------------------------------------------------------------------------\n\nvar vtkPolyDataMapper2D = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkMapper2D', newInstance);\nexport { vtkPolyDataMapper2D as default, extend, newInstance };","map":{"version":3,"names":["mat4","newInstance","newInstance$1","setGet","obj","vtkErrorMacro","vtkErrorMacro$1","vtkHelper","vtkMapper2D","vtkPoints","v","vtkPolyData2DFS","vtkPolyData2DVS","vtkReplacementShaderMapper","vtkShaderProgram","vtkViewNode","L","round","DisplayLocation","registerOverride","primTypes","ScalarMode","StartEvent","type","EndEvent","vtkOpenGLPolyDataMapper2D","publicAPI","model","classHierarchy","push","buildPass","prepass","openGLActor2D","getFirstAncestorOfType","_openGLRenderer","_openGLRenderWindow","getParent","openGLCamera","getViewNodeFor","getRenderable","getActiveCamera","overlayPass","render","getShaderTemplate","shaders","ren","actor","Vertex","Fragment","Geometry","ctx","getContext","context","i","Start","End","primitives","setOpenGLRenderWindow","renderPiece","invokeEvent","renderable","getStatic","update","currentInput","getInputData","getPoints","getNumberOfValues","renderPieceStart","renderPieceDraw","renderPieceFinish","primitiveIDOffset","getSelector","getCurrentPass","renderProp","updateBufferObjects","lastBoundBO","getNeedToRebuildShaders","cellBO","getShaderSourceTime","getMTime","getNeedToRebuildBufferObjects","buildBufferObjects","vmtime","VBOBuildTime","getTransformCoordinate","poly","mapScalars","getProperty","getOpacity","c","getColorMapColors","haveCellScalars","scalarMode","getScalarMode","getScalarVisibility","USE_CELL_DATA","USE_CELL_FIELD_DATA","USE_FIELD_DATA","getPointData","getScalars","USE_POINT_FIELD_DATA","representation","getRepresentation","tcoords","getTCoords","getActiveTextures","transformCoordinate","view","getRenderWindow","getViews","vsize","getViewportSize","toString","concat","VBOBuildString","points","p","numPts","getNumberOfPoints","setNumberOfPoints","point","getPoint","setValue","getComputedDoubleViewportValue","setPoint","options","colors","cellOffset","haveCellSCalars","customAttributes","getCustomShaderAttributes","map","arrayName","getArrayByName","Points","getCABO","createVBO","getVerts","Lines","getLines","Tris","getPolys","TriStrips","getStrips","modified","gl","depthMask","cabo","getElementCount","drawArrays","getVAO","release","replaceShaderValues","replaceShaderColor","replaceShaderTCoord","replaceShaderPicking","replaceShaderPositionVC","VSSource","GSSource","FSSource","substitute","result","getColorComponents","getTCoordOffset","tcdim","getTCoordComponents","invokeShaderCallbacks","listCallbacks","getViewSpecificProperties","ShadersCallbacks","forEach","object","callback","userData","setMapperShaderParameters","getProgram","isUniformUsed","setUniformi","isAttributeUsed","addAttributeArray","getVertexOffset","getStride","FLOAT","getAttributeUpdateTime","attrName","idx","getCustomData","offset","components","removeAttributeArray","internalColorTexture","getTextureUnit","tus","index","length","tex","texUnit","tname","getTiledSizeAndOrigin","selector","setUniform3fArray","getPropColorValue","setPropertyShaderParameters","getNumberOfComponents","program","ppty","opacity","dColor","getColor","diffuseColor","setUniform4f","setLightingShaderParameters","safeMatrixMultiply","matrixArray","matrixType","tmpMat","identity","reduce","res","matrix","copy","multiply","setCameraShaderParameters","shiftScaleEnabled","getCoordShiftAndScaleEnabled","inverseShiftScaleMatrix","getInverseShiftAndScaleMatrix","size","vport","getViewport","actorPos","getActualPositionCoordinate","tileViewport","visVP","winSize","getSize","xoff","yoff","left","right","bottom","top","tmpMat4","Float64Array","getDisplayLocation","FOREGROUND","transpose","setUniformMatrix","DEFAULT_VALUES","shaderRebuildString","extend","initialValues","arguments","undefined","Object","assign","implementReplaceShaderCoincidentOffset","implementBuildShadersWithReplacements","setPrimitiveType","set","lastLightComplexity","lastLightCount","lastSelectionPass","mtime","vtkPolyDataMapper2D","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper2D.js"],"sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { newInstance as newInstance$1, setGet, obj, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport vtkHelper from './Helper.js';\nimport vtkMapper2D from '../Core/Mapper2D.js';\nimport vtkPoints from '../../Common/Core/Points.js';\nimport { v as vtkPolyData2DFS } from './glsl/vtkPolyData2DFS.glsl.js';\nimport { v as vtkPolyData2DVS } from './glsl/vtkPolyData2DVS.glsl.js';\nimport vtkReplacementShaderMapper from './ReplacementShaderMapper.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { L as round } from '../../Common/Core/Math/index.js';\nimport { DisplayLocation } from '../Core/Property2D/Constants.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat3, mat4, vec3 } from 'gl-matrix';\nvar primTypes = vtkHelper.primTypes;\nvar ScalarMode = vtkMapper2D.ScalarMode;\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar StartEvent = {\n  type: 'StartEvent'\n};\nvar EndEvent = {\n  type: 'EndEvent'\n}; // ----------------------------------------------------------------------------\n// vtkOpenGLPolyDataMapper2D methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPolyDataMapper2D(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLPolyDataMapper2D');\n\n  publicAPI.buildPass = function (prepass) {\n    if (prepass) {\n      model.openGLActor2D = publicAPI.getFirstAncestorOfType('vtkOpenGLActor2D');\n      model._openGLRenderer = model.openGLActor2D.getFirstAncestorOfType('vtkOpenGLRenderer');\n      model._openGLRenderWindow = model._openGLRenderer.getParent();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(model._openGLRenderer.getRenderable().getActiveCamera());\n    }\n  };\n\n  publicAPI.overlayPass = function (prepass) {\n    if (prepass) {\n      publicAPI.render();\n    }\n  };\n\n  publicAPI.getShaderTemplate = function (shaders, ren, actor) {\n    shaders.Vertex = vtkPolyData2DVS;\n    shaders.Fragment = vtkPolyData2DFS;\n    shaders.Geometry = '';\n  };\n\n  publicAPI.render = function () {\n    var ctx = model._openGLRenderWindow.getContext();\n\n    if (model.context !== ctx) {\n      model.context = ctx;\n\n      for (var i = primTypes.Start; i < primTypes.End; i++) {\n        model.primitives[i].setOpenGLRenderWindow(model._openGLRenderWindow);\n      }\n    }\n\n    var actor = model.openGLActor2D.getRenderable();\n\n    var ren = model._openGLRenderer.getRenderable();\n\n    publicAPI.renderPiece(ren, actor);\n  };\n\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent(StartEvent);\n\n    if (!model.renderable.getStatic()) {\n      model.renderable.update();\n    }\n\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent(EndEvent);\n\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    } // if there are no points then we are done\n\n\n    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {\n      return;\n    }\n\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n\n  publicAPI.renderPieceStart = function (ren, actor) {\n    model.primitiveIDOffset = 0;\n\n    if (model._openGLRenderer.getSelector()) {\n      switch (model._openGLRenderer.getSelector().getCurrentPass()) {\n        default:\n          model._openGLRenderer.getSelector().renderProp(actor);\n\n      }\n    } // make sure the BOs are up to date\n\n\n    publicAPI.updateBufferObjects(ren, actor); // Bind the OpenGL, this is shared between the different primitive/cell types.\n\n    model.lastBoundBO = null;\n  };\n\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    // has something changed that would require us to recreate the shader?\n    // candidates are\n    // property modified (representation interpolation and lighting)\n    // input modified\n    // light complexity changed\n    if (cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.updateBufferObjects = function (ren, actor) {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    // first do a coarse check\n    // Note that the actor's mtime includes it's properties mtime\n    var vmtime = model.VBOBuildTime.getMTime();\n\n    if (vmtime < publicAPI.getMTime() || vmtime < model._openGLRenderWindow.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime() || model.renderable.getTransformCoordinate() && vmtime < ren.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    var poly = model.currentInput;\n\n    if (poly === null) {\n      return;\n    }\n\n    model.renderable.mapScalars(poly, actor.getProperty().getOpacity());\n    var c = model.renderable.getColorMapColors();\n    model.haveCellScalars = false;\n    var scalarMode = model.renderable.getScalarMode();\n\n    if (model.renderable.getScalarVisibility()) {\n      // We must figure out how the scalars should be mapped to the polydata.\n      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {\n        model.haveCellScalars = true;\n      }\n    }\n\n    var representation = actor.getProperty().getRepresentation();\n    var tcoords = poly.getPointData().getTCoords();\n\n    if (!model.openGLActor2D.getActiveTextures()) {\n      tcoords = null;\n    }\n\n    var transformCoordinate = model.renderable.getTransformCoordinate();\n    var view = ren.getRenderWindow().getViews()[0];\n    var vsize = view.getViewportSize(ren);\n    var toString = \"\".concat(poly.getMTime(), \"A\").concat(representation, \"B\").concat(poly.getMTime()) + \"C\".concat(c ? c.getMTime() : 1) + \"D\".concat(tcoords ? tcoords.getMTime() : 1) + \"E\".concat(transformCoordinate ? ren.getMTime() : 1) + \"F\".concat(vsize);\n\n    if (model.VBOBuildString !== toString) {\n      // Build the VBOs\n      var points = poly.getPoints();\n\n      if (transformCoordinate) {\n        var p = vtkPoints.newInstance();\n        var numPts = points.getNumberOfPoints();\n        p.setNumberOfPoints(numPts);\n        var point = [];\n\n        for (var i = 0; i < numPts; ++i) {\n          points.getPoint(i, point);\n          transformCoordinate.setValue(point);\n          var v = transformCoordinate.getComputedDoubleViewportValue(ren);\n          p.setPoint(i, v[0], v[1], 0.0);\n        }\n\n        points = p;\n      }\n\n      var options = {\n        points: points,\n        tcoords: tcoords,\n        colors: c,\n        cellOffset: 0,\n        haveCellScalars: model.haveCellSCalars,\n        customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {\n          return poly.getPointData().getArrayByName(arrayName);\n        })\n      };\n      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);\n      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);\n      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);\n      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);\n      model.VBOBuildTime.modified();\n      model.VBOBuildString = toString;\n    }\n  };\n\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var representation = actor.getProperty().getRepresentation();\n    var gl = model.context;\n    gl.depthMask(true); // for every primitive type\n\n    for (var i = primTypes.Start; i < primTypes.End; i++) {\n      // if there are entries\n      var cabo = model.primitives[i].getCABO();\n\n      if (cabo.getElementCount()) {\n        model.lastBoundBO = model.primitives[i];\n        model.primitiveIDOffset += model.primitives[i].drawArrays(ren, actor, representation, publicAPI);\n      }\n    }\n  };\n\n  publicAPI.renderPieceFinish = function (ren, actor) {\n    if (model.lastBoundBO) {\n      model.lastBoundBO.getVAO().release();\n    }\n  };\n\n  publicAPI.replaceShaderValues = function (shaders, ren, actor) {\n    publicAPI.replaceShaderColor(shaders, ren, actor);\n    publicAPI.replaceShaderTCoord(shaders, ren, actor);\n    publicAPI.replaceShaderPicking(shaders, ren, actor);\n    publicAPI.replaceShaderPositionVC(shaders, ren, actor);\n  };\n\n  publicAPI.replaceShaderColor = function (shaders, ren, actor) {\n    var VSSource = shaders.Vertex;\n    var GSSource = shaders.Geometry;\n    var FSSource = shaders.Fragment;\n\n    if (model.haveCellScalars) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform samplerBuffer texture1;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = texelFetchBuffer(texture1, gl_PrimitiveID + PrimitiveIDOffset);']).result;\n    }\n\n    if (model.lastBoundBO.getCABO().getColorComponents() !== 0) {\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Dec', ['in vec4 diffuseColor;', 'out vec4 fcolorVSOutput;']).result;\n      VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::Color::Impl', ['fcolorVSOutput = diffuseColor;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput[];\\n', 'out vec4 fcolorGSOutput;']).result;\n      GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::Color::Impl', ['fcolorGSOutput = fcolorVSOutput[i];']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['in vec4 fcolorVSOutput;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = fcolorVSOutput;']).result;\n    } else {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Dec', ['uniform vec4 diffuseColor;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Color::Impl', ['gl_FragData[0] = diffuseColor;']).result;\n    }\n\n    shaders.Vertex = VSSource;\n    shaders.Geometry = GSSource;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {\n    if (model.lastBoundBO.getCABO().getTCoordOffset()) {\n      var VSSource = shaders.Vertex;\n      var GSSource = shaders.Geometry;\n      var FSSource = shaders.Fragment;\n      var tcdim = model.lastBoundBO.getCABO().getTCoordComponents();\n\n      if (tcdim === 1) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in float tcoordMC;', 'out float tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput[];\\n', 'out float tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, ['//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in float tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, vec2(tcoordVCVSOutput,0));']).result;\n      } else if (tcdim === 2) {\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordMC;', 'out vec2 tcoordVCVSOutput;']).result;\n        VSSource = vtkShaderProgram.substitute(VSSource, '//VTK::TCoord::Impl', ['tcoordVCVSOutput = tcoordMC;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];\\n', 'out vec2 tcoordVCGSOutput;']).result;\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::TCoord::Impl', ['tcoordVCGSOutput = tcoordVCVSOutput[i];']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TCoord::Impl', ['gl_FragData[0] = gl_FragData[0]*texture2D(texture1, tcoordVCVSOutput.st);']).result;\n      }\n\n      if (model.haveCellScalars) {\n        GSSource = vtkShaderProgram.substitute(GSSource, '//VTK::PrimID::Impl', ['gl_PrimitiveID = gl_PrimitiveIDIn;']).result;\n      }\n\n      shaders.Vertex = VSSource;\n      shaders.Geometry = GSSource;\n      shaders.Fragment = FSSource;\n    }\n  };\n\n  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {\n    // replace common shader code\n    model.lastBoundBO.replaceShaderPositionVC(shaders, ren, actor);\n  };\n\n  publicAPI.invokeShaderCallbacks = function (cellBO, ren, actor) {\n    var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;\n\n    if (listCallbacks) {\n      listCallbacks.forEach(function (object) {\n        object.callback(object.userData, cellBO, ren, actor);\n      });\n    }\n  };\n\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    // Now to update the VAO too, if necessary.\n    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {\n      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);\n    }\n\n    if (cellBO.getProgram().isAttributeUsed('vertexWC')) {\n      if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexWC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {\n        vtkErrorMacro('Error setting vertexWC in shader VAO.');\n      }\n    }\n\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {\n        if (cellBO.getProgram().isAttributeUsed(\"\".concat(attrName, \"MC\"))) {\n          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), \"\".concat(attrName, \"MC\"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {\n            vtkErrorMacro(\"Error setting \".concat(attrName, \"MC in shader VAO.\"));\n          }\n        }\n      });\n\n      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {\n        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {\n          vtkErrorMacro('Error setting tcoordMC in shader VAO.');\n        }\n      } else {\n        cellBO.getVAO().removeAttributeArray('tcoordMC');\n      }\n\n      if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {\n        cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());\n      }\n\n      var tus = model.openGLActor2D.getActiveTextures();\n\n      if (tus) {\n        for (var index = 0; index < tus.length; ++index) {\n          var tex = tus[index];\n          var texUnit = tex.getTextureUnit();\n          var tname = \"texture\".concat(texUnit + 1);\n\n          if (cellBO.getProgram().isUniformUsed(tname)) {\n            cellBO.getProgram().setUniformi(tname, texUnit);\n          }\n        }\n      } // handle wide lines\n\n\n      cellBO.setMapperShaderParameters(ren, actor, model._openGLRenderer.getTiledSizeAndOrigin());\n\n      var selector = model._openGLRenderer.getSelector();\n\n      cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);\n      cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);\n    }\n  };\n\n  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {\n    var c = model.renderable.getColorMapColors();\n\n    if (!c || c.getNumberOfComponents() === 0) {\n      var program = cellBO.getProgram();\n      var ppty = actor.getProperty();\n      var opacity = ppty.getOpacity();\n      var dColor = ppty.getColor();\n      var diffuseColor = [dColor[0], dColor[1], dColor[2], opacity];\n      program.setUniform4f('diffuseColor', diffuseColor);\n    }\n  };\n\n  publicAPI.setLightingShaderParameters = function (cellBO, ren, actor) {// no-op\n  };\n\n  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {\n    matrixType.identity(tmpMat);\n    return matrixArray.reduce(function (res, matrix, index) {\n      if (index === 0) {\n        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);\n      }\n\n      return matrix ? matrixType.multiply(res, res, matrix) : res;\n    }, tmpMat);\n  }\n\n  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram();\n    var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();\n    var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null; // Get the position of the actor\n\n    var view = ren.getRenderWindow().getViews()[0];\n    var size = view.getViewportSize(ren);\n    var vport = ren.getViewport();\n    var actorPos = actor.getActualPositionCoordinate().getComputedDoubleViewportValue(ren); // Get the window info\n    // Assume tile viewport is 0 1 based on vtkOpenGLRenderer\n\n    var tileViewport = [0.0, 0.0, 1.0, 1.0];\n    var visVP = [0.0, 0.0, 1.0, 1.0];\n    visVP[0] = vport[0] >= tileViewport[0] ? vport[0] : tileViewport[0];\n    visVP[1] = vport[1] >= tileViewport[1] ? vport[1] : tileViewport[1];\n    visVP[2] = vport[2] <= tileViewport[2] ? vport[2] : tileViewport[2];\n    visVP[3] = vport[3] <= tileViewport[3] ? vport[3] : tileViewport[3];\n\n    if (visVP[0] >= visVP[2]) {\n      return;\n    }\n\n    if (visVP[1] >= visVP[3]) {\n      return;\n    }\n\n    size[0] = round(size[0] * (visVP[2] - visVP[0]) / (vport[2] - vport[0]));\n    size[1] = round(size[1] * (visVP[3] - visVP[1]) / (vport[3] - vport[1]));\n\n    var winSize = model._openGLRenderer.getParent().getSize();\n\n    var xoff = round(actorPos[0] - (visVP[0] - vport[0]) * winSize[0]);\n    var yoff = round(actorPos[1] - (visVP[1] - vport[1]) * winSize[1]); // set ortho projection\n\n    var left = -xoff;\n    var right = -xoff + size[0];\n    var bottom = -yoff;\n    var top = -yoff + size[1]; // it's an error to call glOrtho with\n    // either left==right or top==bottom\n\n    if (left === right) {\n      right = left + 1.0;\n    }\n\n    if (bottom === top) {\n      top = bottom + 1.0;\n    } // compute the combined ModelView matrix and send it down to save time in the shader\n\n\n    var tmpMat4 = mat4.identity(new Float64Array(16));\n    tmpMat4[0] = 2.0 / (right - left);\n    tmpMat4[1 * 4 + 1] = 2.0 / (top - bottom);\n    tmpMat4[0 * 4 + 3] = -1.0 * (right + left) / (right - left);\n    tmpMat4[1 * 4 + 3] = -1.0 * (top + bottom) / (top - bottom);\n    tmpMat4[2 * 4 + 2] = 0.0;\n    tmpMat4[2 * 4 + 3] = actor.getProperty().getDisplayLocation() === DisplayLocation.FOREGROUND ? -1.0 : 1.0;\n    tmpMat4[3 * 4 + 3] = 1.0;\n    mat4.transpose(tmpMat4, tmpMat4);\n    program.setUniformMatrix('WCVCMatrix', safeMatrixMultiply([tmpMat4, inverseShiftScaleMatrix], mat4, model.tmpMat4));\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: 0,\n  VBOBuildString: null,\n  primitives: null,\n  primTypes: null,\n  shaderRebuildString: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);\n  vtkReplacementShaderMapper.implementBuildShadersWithReplacements(publicAPI, model, initialValues);\n  model.primitives = [];\n  model.primTypes = primTypes;\n  model.tmpMat4 = mat4.identity(new Float64Array(16));\n\n  for (var i = primTypes.Start; i < primTypes.End; i++) {\n    model.primitives[i] = vtkHelper.newInstance();\n    model.primitives[i].setPrimitiveType(i);\n    model.primitives[i].set({\n      lastLightComplexity: 0,\n      lastLightCount: 0,\n      lastSelectionPass: false\n    }, true);\n  } // Build VTK API\n\n\n  setGet(publicAPI, model, ['context']);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  }); // Object methods\n\n  vtkOpenGLPolyDataMapper2D(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPolyDataMapper2D'); // ----------------------------------------------------------------------------\n\nvar vtkPolyDataMapper2D = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkMapper2D', newInstance);\n\nexport { vtkPolyDataMapper2D as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}