{"ast":null,"code":"import { newInstance as newInstance$1, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat4, vec3 }     from 'gl-matrix';\nvar vtkDebugMacro = vtkDebugMacro$1; // ----------------------------------------------------------------------------\n// vtkOpenGLPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n    model._openGLRenderWindow = model._openGLRenderer.getParent();\n    var aspectRatio = model._openGLRenderer.getAspectRatio();\n    var camera = model._openGLRenderer ? model._openGLRenderer.getRenderable().getActiveCamera() : null;\n    var tsize = model._openGLRenderer.getTiledSizeAndOrigin();\n    var texels = null;\n    if (model.renderable.getUseZValues()) {\n      var zbt = renderPass.getZBufferTexture();\n      var width = Math.floor(zbt.getWidth());\n      var height = Math.floor(zbt.getHeight());\n      var gl = model._openGLRenderWindow.getContext();\n      zbt.bind(); // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)\n\n      var fb = renderPass.getFramebuffer();\n      if (!fb) {\n        vtkDebugMacro('No framebuffer to save/restore');\n      } else {\n        // save framebuffer settings\n        fb.saveCurrentBindingsAndBuffers();\n      }\n      var framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);\n      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n        texels = new Uint8Array(width * height * 4);\n        gl.viewport(0, 0, width, height);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);\n      } // Now we need to restore framebuffer bindings/buffers\n\n      if (fb) {\n        fb.restorePreviousBindingsAndBuffers();\n      }\n      gl.deleteFramebuffer(framebuffer);\n    }\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (model.renderable.getUseZValues()) {\n        renderPass.requestDepth();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Object methods\n\n  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------\n\nvar vtkPixelSpaceCallbackMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\nexport { vtkPixelSpaceCallbackMapper as default, extend, newInstance };","map":{"version":3,"names":["newInstance","newInstance$1","vtkDebugMacro","vtkDebugMacro$1","vtkViewNode","registerOverride","vtkOpenGLPixelSpaceCallbackMapper","publicAPI","model","classHierarchy","push","opaquePass","prepass","renderPass","_openGLRenderer","getFirstAncestorOfType","_openGLRenderWindow","getParent","aspectRatio","getAspectRatio","camera","getRenderable","getActiveCamera","tsize","getTiledSizeAndOrigin","texels","renderable","getUseZValues","zbt","getZBufferTexture","width","Math","floor","getWidth","height","getHeight","gl","getContext","bind","fb","getFramebuffer","saveCurrentBindingsAndBuffers","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","getHandle","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","Uint8Array","viewport","readPixels","RGBA","UNSIGNED_BYTE","restorePreviousBindingsAndBuffers","deleteFramebuffer","invokeCallback","getInputData","queryPass","requestDepth","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","vtkPixelSpaceCallbackMapper","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper.js"],"sourcesContent":["import { newInstance as newInstance$1, vtkDebugMacro as vtkDebugMacro$1 } from '../../macros.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\n// import { mat4, vec3 }     from 'gl-matrix';\nvar vtkDebugMacro = vtkDebugMacro$1; // ----------------------------------------------------------------------------\n// vtkOpenGLPixelSpaceCallbackMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {\n  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');\n\n  publicAPI.opaquePass = function (prepass, renderPass) {\n    model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n    model._openGLRenderWindow = model._openGLRenderer.getParent();\n\n    var aspectRatio = model._openGLRenderer.getAspectRatio();\n\n    var camera = model._openGLRenderer ? model._openGLRenderer.getRenderable().getActiveCamera() : null;\n\n    var tsize = model._openGLRenderer.getTiledSizeAndOrigin();\n\n    var texels = null;\n\n    if (model.renderable.getUseZValues()) {\n      var zbt = renderPass.getZBufferTexture();\n      var width = Math.floor(zbt.getWidth());\n      var height = Math.floor(zbt.getHeight());\n\n      var gl = model._openGLRenderWindow.getContext();\n\n      zbt.bind(); // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)\n\n      var fb = renderPass.getFramebuffer();\n\n      if (!fb) {\n        vtkDebugMacro('No framebuffer to save/restore');\n      } else {\n        // save framebuffer settings\n        fb.saveCurrentBindingsAndBuffers();\n      }\n\n      var framebuffer = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);\n\n      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {\n        texels = new Uint8Array(width * height * 4);\n        gl.viewport(0, 0, width, height);\n        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);\n      } // Now we need to restore framebuffer bindings/buffers\n\n\n      if (fb) {\n        fb.restorePreviousBindingsAndBuffers();\n      }\n\n      gl.deleteFramebuffer(framebuffer);\n    }\n\n    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);\n  };\n\n  publicAPI.queryPass = function (prepass, renderPass) {\n    if (prepass) {\n      if (model.renderable.getUseZValues()) {\n        renderPass.requestDepth();\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues); // Object methods\n\n  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------\n\nvar vtkPixelSpaceCallbackMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkPixelSpaceCallbackMapper', newInstance);\n\nexport { vtkPixelSpaceCallbackMapper as default, extend, newInstance };\n"],"mappings":"AAAA,SAASA,WAAW,IAAIC,aAAa,EAAEC,aAAa,IAAIC,eAAe,QAAQ,iBAAiB;AAChG,OAAOC,WAAW,MAAM,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,sBAAsB;;AAEvD;AACA,IAAIH,aAAa,GAAGC,eAAe,CAAC,CAAC;AACrC;AACA;;AAEA,SAASG,iCAAiCA,CAACC,SAAS,EAAEC,KAAK,EAAE;EAC3DA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,mCAAmC,CAAC;EAE9DH,SAAS,CAACI,UAAU,GAAG,UAAUC,OAAO,EAAEC,UAAU,EAAE;IACpDL,KAAK,CAACM,eAAe,GAAGP,SAAS,CAACQ,sBAAsB,CAAC,mBAAmB,CAAC;IAC7EP,KAAK,CAACQ,mBAAmB,GAAGR,KAAK,CAACM,eAAe,CAACG,SAAS,CAAC,CAAC;IAE7D,IAAIC,WAAW,GAAGV,KAAK,CAACM,eAAe,CAACK,cAAc,CAAC,CAAC;IAExD,IAAIC,MAAM,GAAGZ,KAAK,CAACM,eAAe,GAAGN,KAAK,CAACM,eAAe,CAACO,aAAa,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,GAAG,IAAI;IAEnG,IAAIC,KAAK,GAAGf,KAAK,CAACM,eAAe,CAACU,qBAAqB,CAAC,CAAC;IAEzD,IAAIC,MAAM,GAAG,IAAI;IAEjB,IAAIjB,KAAK,CAACkB,UAAU,CAACC,aAAa,CAAC,CAAC,EAAE;MACpC,IAAIC,GAAG,GAAGf,UAAU,CAACgB,iBAAiB,CAAC,CAAC;MACxC,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACJ,GAAG,CAACK,QAAQ,CAAC,CAAC,CAAC;MACtC,IAAIC,MAAM,GAAGH,IAAI,CAACC,KAAK,CAACJ,GAAG,CAACO,SAAS,CAAC,CAAC,CAAC;MAExC,IAAIC,EAAE,GAAG5B,KAAK,CAACQ,mBAAmB,CAACqB,UAAU,CAAC,CAAC;MAE/CT,GAAG,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEZ,IAAIC,EAAE,GAAG1B,UAAU,CAAC2B,cAAc,CAAC,CAAC;MAEpC,IAAI,CAACD,EAAE,EAAE;QACPrC,aAAa,CAAC,gCAAgC,CAAC;MACjD,CAAC,MAAM;QACL;QACAqC,EAAE,CAACE,6BAA6B,CAAC,CAAC;MACpC;MAEA,IAAIC,WAAW,GAAGN,EAAE,CAACO,iBAAiB,CAAC,CAAC;MACxCP,EAAE,CAACQ,eAAe,CAACR,EAAE,CAACS,WAAW,EAAEH,WAAW,CAAC;MAC/CN,EAAE,CAACU,oBAAoB,CAACV,EAAE,CAACS,WAAW,EAAET,EAAE,CAACW,iBAAiB,EAAEX,EAAE,CAACY,UAAU,EAAEpB,GAAG,CAACqB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MAEhG,IAAIb,EAAE,CAACc,sBAAsB,CAACd,EAAE,CAACS,WAAW,CAAC,KAAKT,EAAE,CAACe,oBAAoB,EAAE;QACzE1B,MAAM,GAAG,IAAI2B,UAAU,CAACtB,KAAK,GAAGI,MAAM,GAAG,CAAC,CAAC;QAC3CE,EAAE,CAACiB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEvB,KAAK,EAAEI,MAAM,CAAC;QAChCE,EAAE,CAACkB,UAAU,CAAC,CAAC,EAAE,CAAC,EAAExB,KAAK,EAAEI,MAAM,EAAEE,EAAE,CAACmB,IAAI,EAAEnB,EAAE,CAACoB,aAAa,EAAE/B,MAAM,CAAC;MACvE,CAAC,CAAC;;MAGF,IAAIc,EAAE,EAAE;QACNA,EAAE,CAACkB,iCAAiC,CAAC,CAAC;MACxC;MAEArB,EAAE,CAACsB,iBAAiB,CAAChB,WAAW,CAAC;IACnC;IAEAlC,KAAK,CAACkB,UAAU,CAACiC,cAAc,CAACnD,KAAK,CAACkB,UAAU,CAACkC,YAAY,CAAC,CAAC,EAAExC,MAAM,EAAEF,WAAW,EAAEK,KAAK,EAAEE,MAAM,CAAC;EACtG,CAAC;EAEDlB,SAAS,CAACsD,SAAS,GAAG,UAAUjD,OAAO,EAAEC,UAAU,EAAE;IACnD,IAAID,OAAO,EAAE;MACX,IAAIJ,KAAK,CAACkB,UAAU,CAACC,aAAa,CAAC,CAAC,EAAE;QACpCd,UAAU,CAACiD,YAAY,CAAC,CAAC;MAC3B;IACF;EACF,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,IAAIC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEzB,SAASC,MAAMA,CAACzD,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAIyD,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FG,MAAM,CAACC,MAAM,CAAC9D,KAAK,EAAEuD,cAAc,EAAEE,aAAa,CAAC,CAAC,CAAC;;EAErD7D,WAAW,CAAC4D,MAAM,CAACzD,SAAS,EAAEC,KAAK,EAAEyD,aAAa,CAAC,CAAC,CAAC;;EAErD3D,iCAAiC,CAACC,SAAS,EAAEC,KAAK,CAAC;AACrD,CAAC,CAAC;;AAEF,IAAIR,WAAW,GAAGC,aAAa,CAAC+D,MAAM,EAAE,mCAAmC,CAAC,CAAC,CAAC;;AAE9E,IAAIO,2BAA2B,GAAG;EAChCvE,WAAW,EAAEA,WAAW;EACxBgE,MAAM,EAAEA;AACV,CAAC,CAAC,CAAC;;AAEH3D,gBAAgB,CAAC,6BAA6B,EAAEL,WAAW,CAAC;AAE5D,SAASuE,2BAA2B,IAAIC,OAAO,EAAER,MAAM,EAAEhE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}