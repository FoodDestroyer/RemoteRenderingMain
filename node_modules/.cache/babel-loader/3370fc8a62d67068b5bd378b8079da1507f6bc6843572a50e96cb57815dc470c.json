{"ast":null,"code":"import macro from '../../macros.js';\nimport vtk from '../../vtk.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkProperty from '../../Rendering/Core/Property.js';\nimport vtkGlyph3DMapper from '../../Rendering/Core/Glyph3DMapper.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkColorTransferFunction from '../../Rendering/Core/ColorTransferFunction.js';\nimport vtkAbstractRepresentationProxy from '../Core/AbstractRepresentationProxy.js';\nimport '../../Filters/Sources/ArrowSource.js';\nimport '../../Filters/Sources/CircleSource.js';\nimport '../../Filters/Sources/ConcentricCylinderSource.js';\nimport '../../Filters/Sources/ConeSource.js';\nimport '../../Filters/Sources/CubeSource.js';\nimport '../../Filters/Sources/Cursor3D.js';\nimport '../../Filters/Sources/CylinderSource.js';\nimport '../../Filters/Sources/ImageGridSource.js';\nimport '../../Filters/Sources/LineSource.js';\nimport '../../Filters/Sources/PlaneSource.js';\nimport '../../Filters/Sources/PointSource.js';\nimport '../../Filters/Sources/RTAnalyticSource.js';\nimport '../../Filters/Sources/SLICSource.js';\nimport '../../Filters/Sources/SphereSource.js';\n\n// vtkGlyphRepresentationProxy methods\n// ----------------------------------------------------------------------------\n\nfunction vtkGlyphRepresentationProxy(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkGlyphRepresentationProxy');\n  model.property = vtkProperty.newInstance();\n  function processJSON(description) {\n    model.actors.length = 0; // Handle colors\n\n    var lookupTable = vtkColorTransferFunction.newInstance();\n    lookupTable.applyColorMap({\n      RGBPoints: description.rgbPoints\n    }); // Handle glyph\n\n    model.glyph = {};\n    var count = description.glyph.length;\n    while (count--) {\n      var glyph = description.glyph[count];\n      model.glyph[glyph.id] = vtk(glyph);\n    } // Handle mapping\n\n    count = description.mapping.length;\n    while (count--) {\n      var sourceDesc = description.mapping[count];\n      var _glyph = model.glyph[sourceDesc.glyphId];\n      var source = vtkPolyData.newInstance();\n      source.getPoints().setData(Float32Array.from(sourceDesc.coordinates), 3);\n      if (sourceDesc.scale) {\n        source.getPointData().addArray(vtkDataArray.newInstance({\n          name: 'scaling',\n          values: Float32Array.from(sourceDesc.scale),\n          numberOfComponents: 3\n        }));\n      }\n      var mapper = vtkGlyph3DMapper.newInstance({\n        useLookupTableScalarRange: true,\n        lookupTable: lookupTable,\n        orient: false,\n        scaling: !!sourceDesc.scale,\n        scaleArray: 'scaling',\n        scaleMode: vtkGlyph3DMapper.ScaleModes.SCALE_BY_COMPONENTS\n      });\n      var actor = vtkActor.newInstance();\n      if (model.property) {\n        actor.setProperty(model.property);\n      }\n      actor.setMapper(mapper);\n      mapper.setInputData(source, 0);\n      mapper.setInputConnection(_glyph.getOutputPort(), 1);\n      model.actors.push(actor);\n    }\n  }\n  model.sourceDependencies.push({\n    setInputData: processJSON\n  }); // Add actors\n  // model.actors.push(model.sphereActor);\n  // model.actors.push(model.stickActor);\n  // API ----------------------------------------------------------------------\n\n  publicAPI.setColorBy = function () {};\n  publicAPI.getColorBy = function () {\n    return [];\n  };\n  publicAPI.listDataArrays = function () {\n    return [];\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  vtkAbstractRepresentationProxy.extend(publicAPI, model, initialValues); // Object specific methods\n\n  vtkGlyphRepresentationProxy(publicAPI, model);\n  macro.proxyPropertyMapping(publicAPI, model, {\n    edgeVisibility: {\n      modelKey: 'property',\n      property: 'edgeVisibility'\n    }\n  });\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkGlyphRepresentationProxy'); // ----------------------------------------------------------------------------\n\nvar vtkGlyphRepresentationProxy$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkGlyphRepresentationProxy$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtk","vtkActor","vtkProperty","vtkGlyph3DMapper","vtkDataArray","vtkPolyData","vtkColorTransferFunction","vtkAbstractRepresentationProxy","vtkGlyphRepresentationProxy","publicAPI","model","classHierarchy","push","property","newInstance","processJSON","description","actors","length","lookupTable","applyColorMap","RGBPoints","rgbPoints","glyph","count","id","mapping","sourceDesc","_glyph","glyphId","source","getPoints","setData","Float32Array","from","coordinates","scale","getPointData","addArray","name","values","numberOfComponents","mapper","useLookupTableScalarRange","orient","scaling","scaleArray","scaleMode","ScaleModes","SCALE_BY_COMPONENTS","actor","setProperty","setMapper","setInputData","setInputConnection","getOutputPort","sourceDependencies","setColorBy","getColorBy","listDataArrays","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","proxyPropertyMapping","edgeVisibility","modelKey","vtkGlyphRepresentationProxy$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Proxy/Representations/GlyphRepresentationProxy.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtk from '../../vtk.js';\nimport vtkActor from '../../Rendering/Core/Actor.js';\nimport vtkProperty from '../../Rendering/Core/Property.js';\nimport vtkGlyph3DMapper from '../../Rendering/Core/Glyph3DMapper.js';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkColorTransferFunction from '../../Rendering/Core/ColorTransferFunction.js';\nimport vtkAbstractRepresentationProxy from '../Core/AbstractRepresentationProxy.js';\nimport '../../Filters/Sources/ArrowSource.js';\nimport '../../Filters/Sources/CircleSource.js';\nimport '../../Filters/Sources/ConcentricCylinderSource.js';\nimport '../../Filters/Sources/ConeSource.js';\nimport '../../Filters/Sources/CubeSource.js';\nimport '../../Filters/Sources/Cursor3D.js';\nimport '../../Filters/Sources/CylinderSource.js';\nimport '../../Filters/Sources/ImageGridSource.js';\nimport '../../Filters/Sources/LineSource.js';\nimport '../../Filters/Sources/PlaneSource.js';\nimport '../../Filters/Sources/PointSource.js';\nimport '../../Filters/Sources/RTAnalyticSource.js';\nimport '../../Filters/Sources/SLICSource.js';\nimport '../../Filters/Sources/SphereSource.js';\n\n// vtkGlyphRepresentationProxy methods\n// ----------------------------------------------------------------------------\n\nfunction vtkGlyphRepresentationProxy(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkGlyphRepresentationProxy');\n  model.property = vtkProperty.newInstance();\n\n  function processJSON(description) {\n    model.actors.length = 0; // Handle colors\n\n    var lookupTable = vtkColorTransferFunction.newInstance();\n    lookupTable.applyColorMap({\n      RGBPoints: description.rgbPoints\n    }); // Handle glyph\n\n    model.glyph = {};\n    var count = description.glyph.length;\n\n    while (count--) {\n      var glyph = description.glyph[count];\n      model.glyph[glyph.id] = vtk(glyph);\n    } // Handle mapping\n\n\n    count = description.mapping.length;\n\n    while (count--) {\n      var sourceDesc = description.mapping[count];\n      var _glyph = model.glyph[sourceDesc.glyphId];\n      var source = vtkPolyData.newInstance();\n      source.getPoints().setData(Float32Array.from(sourceDesc.coordinates), 3);\n\n      if (sourceDesc.scale) {\n        source.getPointData().addArray(vtkDataArray.newInstance({\n          name: 'scaling',\n          values: Float32Array.from(sourceDesc.scale),\n          numberOfComponents: 3\n        }));\n      }\n\n      var mapper = vtkGlyph3DMapper.newInstance({\n        useLookupTableScalarRange: true,\n        lookupTable: lookupTable,\n        orient: false,\n        scaling: !!sourceDesc.scale,\n        scaleArray: 'scaling',\n        scaleMode: vtkGlyph3DMapper.ScaleModes.SCALE_BY_COMPONENTS\n      });\n      var actor = vtkActor.newInstance();\n\n      if (model.property) {\n        actor.setProperty(model.property);\n      }\n\n      actor.setMapper(mapper);\n      mapper.setInputData(source, 0);\n      mapper.setInputConnection(_glyph.getOutputPort(), 1);\n      model.actors.push(actor);\n    }\n  }\n\n  model.sourceDependencies.push({\n    setInputData: processJSON\n  }); // Add actors\n  // model.actors.push(model.sphereActor);\n  // model.actors.push(model.stickActor);\n  // API ----------------------------------------------------------------------\n\n  publicAPI.setColorBy = function () {};\n\n  publicAPI.getColorBy = function () {\n    return [];\n  };\n\n  publicAPI.listDataArrays = function () {\n    return [];\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  vtkAbstractRepresentationProxy.extend(publicAPI, model, initialValues); // Object specific methods\n\n  vtkGlyphRepresentationProxy(publicAPI, model);\n  macro.proxyPropertyMapping(publicAPI, model, {\n    edgeVisibility: {\n      modelKey: 'property',\n      property: 'edgeVisibility'\n    }\n  });\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkGlyphRepresentationProxy'); // ----------------------------------------------------------------------------\n\nvar vtkGlyphRepresentationProxy$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkGlyphRepresentationProxy$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}