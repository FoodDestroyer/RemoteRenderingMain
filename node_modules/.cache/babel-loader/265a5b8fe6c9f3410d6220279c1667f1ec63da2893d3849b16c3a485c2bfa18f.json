{"ast":null,"code":"var _jsxFileName = \"/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/src/VTKClient.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VTKClient = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const gl = canvas.getContext('webgl');\n\n    // Set up shaders, buffers, and other WebGL configurations here\n\n    const ws = new WebSocket('ws://localhost:7500');\n    ws.binaryType = 'arraybuffer';\n    ws.onmessage = event => {\n      const data = new Uint8Array(event.data); // Assuming you're receiving Uint8Array data\n      // Update your WebGL buffers and draw the image here\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 800,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n_s(VTKClient, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = VTKClient;\nexport default VTKClient;\nvar _c;\n$RefreshReg$(_c, \"VTKClient\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","VTKClient","_s","canvasRef","canvas","current","gl","getContext","ws","WebSocket","binaryType","onmessage","event","data","Uint8Array","close","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/src/VTKClient.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst VTKClient = () => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const gl = canvas.getContext('webgl');\n\n    // Set up shaders, buffers, and other WebGL configurations here\n\n    const ws = new WebSocket('ws://localhost:7500');\n\n    ws.binaryType = 'arraybuffer';\n\n    ws.onmessage = event => {\n      const data = new Uint8Array(event.data); // Assuming you're receiving Uint8Array data\n      // Update your WebGL buffers and draw the image here\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} width={800} height={600} />;\n};\n\nexport default VTKClient;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,MAAMM,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,EAAE,GAAGF,MAAM,CAACG,UAAU,CAAC,OAAO,CAAC;;IAErC;;IAEA,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAE/CD,EAAE,CAACE,UAAU,GAAG,aAAa;IAE7BF,EAAE,CAACG,SAAS,GAAGC,KAAK,IAAI;MACtB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACF,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACzC;IACF,CAAC;;IAED,OAAO,MAAM;MACXL,EAAE,CAACO,KAAK,CAAC,CAAC;IACZ,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOf,OAAA;IAAQgB,GAAG,EAAEb,SAAU;IAACc,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5D,CAAC;AAACpB,EAAA,CAxBID,SAAS;AAAAsB,EAAA,GAATtB,SAAS;AA0Bf,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}