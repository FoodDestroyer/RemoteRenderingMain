{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtkAbstractWidgetFactory from '../Core/AbstractWidgetFactory.js';\nimport vtkPlanePointManipulator from '../Manipulators/PlaneManipulator.js';\nimport vtkLineManipulator from '../Manipulators/LineManipulator.js';\nimport vtkSphereHandleRepresentation from '../Representations/SphereHandleRepresentation.js';\nimport vtkCroppingOutlineRepresentation from '../Representations/CroppingOutlineRepresentation.js';\nimport widgetBehavior from './ImageCroppingWidget/behavior.js';\nimport build from './ImageCroppingWidget/state.js';\nimport { transformVec3, AXES } from './ImageCroppingWidget/helpers.js';\nimport { ViewTypes } from '../Core/WidgetManager/Constants.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n// ----------------------------------------------------------------------------\n// Factory\n// ----------------------------------------------------------------------------\n\nfunction vtkImageCroppingWidget(publicAPI, model) {\n  model.classHierarchy.push('vtkImageCroppingWidget');\n  var superClass = _objectSpread({}, publicAPI);\n  var stateSub = null; // --------------------------------------------------------------------------\n\n  function setHandlesEnabled(label, flag) {\n    model.widgetState.getStatesWithLabel(label).forEach(function (handle) {\n      handle.setVisible(flag);\n    });\n  } // Set the visibility of the three classes of handles: face, edge, corner\n\n  publicAPI.setFaceHandlesEnabled = function (flag) {\n    return setHandlesEnabled('faces', flag);\n  };\n  publicAPI.setEdgeHandlesEnabled = function (flag) {\n    return setHandlesEnabled('edges', flag);\n  };\n  publicAPI.setCornerHandlesEnabled = function (flag) {\n    return setHandlesEnabled('corners', flag);\n  }; // --------------------------------------------------------------------------\n  // Copies the transforms and dimension of a vtkImageData\n\n  publicAPI.copyImageDataDescription = function (im) {\n    var _model$widgetState, _model$widgetState2;\n    (_model$widgetState = model.widgetState).setIndexToWorldT.apply(_model$widgetState, _toConsumableArray(im.getIndexToWorld()));\n    (_model$widgetState2 = model.widgetState).setWorldToIndexT.apply(_model$widgetState2, _toConsumableArray(im.getWorldToIndex()));\n    var dims = im.getDimensions();\n    var planeState = model.widgetState.getCroppingPlanes();\n    planeState.setPlanes([0, dims[0], 0, dims[1], 0, dims[2]]);\n    publicAPI.modified();\n  }; // --------------------------------------------------------------------------\n  // Updates handle positions based on cropping planes\n\n  publicAPI.updateHandles = function () {\n    var planes = model.widgetState.getCroppingPlanes().getPlanes();\n    var midpts = [(planes[0] + planes[1]) / 2, (planes[2] + planes[3]) / 2, (planes[4] + planes[5]) / 2];\n    var iAxis = [planes[0], midpts[0], planes[1]];\n    var jAxis = [planes[2], midpts[1], planes[3]];\n    var kAxis = [planes[4], midpts[2], planes[5]];\n    var indexToWorldT = model.widgetState.getIndexToWorldT();\n    var getAxis = function getAxis(a) {\n      return AXES[a];\n    };\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        for (var k = 0; k < 3; k++) {\n          // skip center of box\n          if (i !== 1 || j !== 1 || k !== 1) {\n            var name = [i, j, k].map(getAxis).join('');\n            var coord = transformVec3([iAxis[i], jAxis[j], kAxis[k]], indexToWorldT);\n            var _model$widgetState$ge = model.widgetState.getStatesWithLabel(name),\n              _model$widgetState$ge2 = _slicedToArray(_model$widgetState$ge, 1),\n              handle = _model$widgetState$ge2[0];\n            handle.setOrigin.apply(handle, _toConsumableArray(coord));\n          }\n        }\n      }\n    }\n  }; // --------------------------------------------------------------------------\n\n  publicAPI.delete = macro.chain(publicAPI.delete, function () {\n    if (stateSub) {\n      stateSub.unsubscribe();\n    }\n  }); // --- Widget Requirement ---------------------------------------------------\n\n  model.methodsToLink = ['scaleInPixels']; // Given a view type (geometry, slice, volume), return a description\n  // of what representations to create and what widget state to pass\n  // to the respective representations.\n\n  publicAPI.getRepresentationsForViewType = function (viewType) {\n    switch (viewType) {\n      case ViewTypes.DEFAULT:\n      case ViewTypes.GEOMETRY:\n      case ViewTypes.SLICE:\n      case ViewTypes.VOLUME:\n      default:\n        return [\n        // Describes constructing a vtkSphereHandleRepresentation, and every\n        // time the widget state updates, we will give the representation\n        // a list of all handle states (which have the label \"handles\").\n        {\n          builder: vtkSphereHandleRepresentation,\n          labels: ['handles']\n        }, {\n          builder: vtkCroppingOutlineRepresentation,\n          // outline is defined by corner points\n          labels: ['corners']\n        }];\n    }\n  }; // Update handle positions when cropping planes update\n\n  stateSub = model.widgetState.getCroppingPlanes().onModified(publicAPI.updateHandles);\n  publicAPI.setCornerManipulator = function (manipulator) {\n    superClass.setCornerManipulator(manipulator);\n    model.widgetState.getStatesWithLabel('corners').forEach(function (handle) {\n      return handle.setManipulator(manipulator);\n    });\n  };\n  publicAPI.setEdgeManipulator = function (manipulator) {\n    superClass.setEdgeManipulator(manipulator);\n    model.widgetState.getStatesWithLabel('edges').forEach(function (handle) {\n      return handle.setManipulator(manipulator);\n    });\n  };\n  publicAPI.setFaceManipulator = function (manipulator) {\n    superClass.setFaceManipulator(manipulator);\n    model.widgetState.getStatesWithLabel('faces').forEach(function (handle) {\n      return handle.setManipulator(manipulator);\n    });\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n  publicAPI.setCornerManipulator(vtkPlanePointManipulator.newInstance({\n    useCameraNormal: true\n  }));\n  publicAPI.setEdgeManipulator(vtkPlanePointManipulator.newInstance());\n  publicAPI.setFaceManipulator(vtkLineManipulator.newInstance());\n} // ----------------------------------------------------------------------------\n\nvar defaultValues = function defaultValues(initialValues) {\n  return _objectSpread({\n    // cornerManipulator: null,\n    // edgeManipulator: null,\n    // faceManipulator: null,\n    behavior: widgetBehavior,\n    widgetState: build()\n  }, initialValues);\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  vtkAbstractWidgetFactory.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['cornerManipulator', 'edgeManipulator', 'faceManipulator']);\n  vtkImageCroppingWidget(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkImageCroppingWidget'); // ----------------------------------------------------------------------------\n\nvar vtkImageCroppingWidget$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkImageCroppingWidget$1 as default, extend, newInstance };","map":{"version":3,"names":["_slicedToArray","_toConsumableArray","_defineProperty","macro","vtkAbstractWidgetFactory","vtkPlanePointManipulator","vtkLineManipulator","vtkSphereHandleRepresentation","vtkCroppingOutlineRepresentation","widgetBehavior","build","transformVec3","AXES","ViewTypes","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","vtkImageCroppingWidget","publicAPI","model","classHierarchy","superClass","stateSub","setHandlesEnabled","label","flag","widgetState","getStatesWithLabel","handle","setVisible","setFaceHandlesEnabled","setEdgeHandlesEnabled","setCornerHandlesEnabled","copyImageDataDescription","im","_model$widgetState","_model$widgetState2","setIndexToWorldT","getIndexToWorld","setWorldToIndexT","getWorldToIndex","dims","getDimensions","planeState","getCroppingPlanes","setPlanes","modified","updateHandles","planes","getPlanes","midpts","iAxis","jAxis","kAxis","indexToWorldT","getIndexToWorldT","getAxis","a","j","k","name","map","join","coord","_model$widgetState$ge","_model$widgetState$ge2","setOrigin","delete","chain","unsubscribe","methodsToLink","getRepresentationsForViewType","viewType","DEFAULT","GEOMETRY","SLICE","VOLUME","builder","labels","onModified","setCornerManipulator","manipulator","setManipulator","setEdgeManipulator","setFaceManipulator","newInstance","useCameraNormal","defaultValues","initialValues","behavior","extend","undefined","assign","setGet","vtkImageCroppingWidget$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/ImageCroppingWidget.js"],"sourcesContent":["import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport macro from '../../macros.js';\nimport vtkAbstractWidgetFactory from '../Core/AbstractWidgetFactory.js';\nimport vtkPlanePointManipulator from '../Manipulators/PlaneManipulator.js';\nimport vtkLineManipulator from '../Manipulators/LineManipulator.js';\nimport vtkSphereHandleRepresentation from '../Representations/SphereHandleRepresentation.js';\nimport vtkCroppingOutlineRepresentation from '../Representations/CroppingOutlineRepresentation.js';\nimport widgetBehavior from './ImageCroppingWidget/behavior.js';\nimport build from './ImageCroppingWidget/state.js';\nimport { transformVec3, AXES } from './ImageCroppingWidget/helpers.js';\nimport { ViewTypes } from '../Core/WidgetManager/Constants.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n// ----------------------------------------------------------------------------\n// Factory\n// ----------------------------------------------------------------------------\n\nfunction vtkImageCroppingWidget(publicAPI, model) {\n  model.classHierarchy.push('vtkImageCroppingWidget');\n\n  var superClass = _objectSpread({}, publicAPI);\n\n  var stateSub = null; // --------------------------------------------------------------------------\n\n  function setHandlesEnabled(label, flag) {\n    model.widgetState.getStatesWithLabel(label).forEach(function (handle) {\n      handle.setVisible(flag);\n    });\n  } // Set the visibility of the three classes of handles: face, edge, corner\n\n\n  publicAPI.setFaceHandlesEnabled = function (flag) {\n    return setHandlesEnabled('faces', flag);\n  };\n\n  publicAPI.setEdgeHandlesEnabled = function (flag) {\n    return setHandlesEnabled('edges', flag);\n  };\n\n  publicAPI.setCornerHandlesEnabled = function (flag) {\n    return setHandlesEnabled('corners', flag);\n  }; // --------------------------------------------------------------------------\n  // Copies the transforms and dimension of a vtkImageData\n\n\n  publicAPI.copyImageDataDescription = function (im) {\n    var _model$widgetState, _model$widgetState2;\n\n    (_model$widgetState = model.widgetState).setIndexToWorldT.apply(_model$widgetState, _toConsumableArray(im.getIndexToWorld()));\n\n    (_model$widgetState2 = model.widgetState).setWorldToIndexT.apply(_model$widgetState2, _toConsumableArray(im.getWorldToIndex()));\n\n    var dims = im.getDimensions();\n    var planeState = model.widgetState.getCroppingPlanes();\n    planeState.setPlanes([0, dims[0], 0, dims[1], 0, dims[2]]);\n    publicAPI.modified();\n  }; // --------------------------------------------------------------------------\n  // Updates handle positions based on cropping planes\n\n\n  publicAPI.updateHandles = function () {\n    var planes = model.widgetState.getCroppingPlanes().getPlanes();\n    var midpts = [(planes[0] + planes[1]) / 2, (planes[2] + planes[3]) / 2, (planes[4] + planes[5]) / 2];\n    var iAxis = [planes[0], midpts[0], planes[1]];\n    var jAxis = [planes[2], midpts[1], planes[3]];\n    var kAxis = [planes[4], midpts[2], planes[5]];\n    var indexToWorldT = model.widgetState.getIndexToWorldT();\n\n    var getAxis = function getAxis(a) {\n      return AXES[a];\n    };\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        for (var k = 0; k < 3; k++) {\n          // skip center of box\n          if (i !== 1 || j !== 1 || k !== 1) {\n            var name = [i, j, k].map(getAxis).join('');\n            var coord = transformVec3([iAxis[i], jAxis[j], kAxis[k]], indexToWorldT);\n\n            var _model$widgetState$ge = model.widgetState.getStatesWithLabel(name),\n                _model$widgetState$ge2 = _slicedToArray(_model$widgetState$ge, 1),\n                handle = _model$widgetState$ge2[0];\n\n            handle.setOrigin.apply(handle, _toConsumableArray(coord));\n          }\n        }\n      }\n    }\n  }; // --------------------------------------------------------------------------\n\n\n  publicAPI.delete = macro.chain(publicAPI.delete, function () {\n    if (stateSub) {\n      stateSub.unsubscribe();\n    }\n  }); // --- Widget Requirement ---------------------------------------------------\n\n  model.methodsToLink = ['scaleInPixels']; // Given a view type (geometry, slice, volume), return a description\n  // of what representations to create and what widget state to pass\n  // to the respective representations.\n\n  publicAPI.getRepresentationsForViewType = function (viewType) {\n    switch (viewType) {\n      case ViewTypes.DEFAULT:\n      case ViewTypes.GEOMETRY:\n      case ViewTypes.SLICE:\n      case ViewTypes.VOLUME:\n      default:\n        return [// Describes constructing a vtkSphereHandleRepresentation, and every\n        // time the widget state updates, we will give the representation\n        // a list of all handle states (which have the label \"handles\").\n        {\n          builder: vtkSphereHandleRepresentation,\n          labels: ['handles']\n        }, {\n          builder: vtkCroppingOutlineRepresentation,\n          // outline is defined by corner points\n          labels: ['corners']\n        }];\n    }\n  }; // Update handle positions when cropping planes update\n\n\n  stateSub = model.widgetState.getCroppingPlanes().onModified(publicAPI.updateHandles);\n\n  publicAPI.setCornerManipulator = function (manipulator) {\n    superClass.setCornerManipulator(manipulator);\n    model.widgetState.getStatesWithLabel('corners').forEach(function (handle) {\n      return handle.setManipulator(manipulator);\n    });\n  };\n\n  publicAPI.setEdgeManipulator = function (manipulator) {\n    superClass.setEdgeManipulator(manipulator);\n    model.widgetState.getStatesWithLabel('edges').forEach(function (handle) {\n      return handle.setManipulator(manipulator);\n    });\n  };\n\n  publicAPI.setFaceManipulator = function (manipulator) {\n    superClass.setFaceManipulator(manipulator);\n    model.widgetState.getStatesWithLabel('faces').forEach(function (handle) {\n      return handle.setManipulator(manipulator);\n    });\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n\n  publicAPI.setCornerManipulator(vtkPlanePointManipulator.newInstance({\n    useCameraNormal: true\n  }));\n  publicAPI.setEdgeManipulator(vtkPlanePointManipulator.newInstance());\n  publicAPI.setFaceManipulator(vtkLineManipulator.newInstance());\n} // ----------------------------------------------------------------------------\n\n\nvar defaultValues = function defaultValues(initialValues) {\n  return _objectSpread({\n    // cornerManipulator: null,\n    // edgeManipulator: null,\n    // faceManipulator: null,\n    behavior: widgetBehavior,\n    widgetState: build()\n  }, initialValues);\n}; // ----------------------------------------------------------------------------\n\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, defaultValues(initialValues));\n  vtkAbstractWidgetFactory.extend(publicAPI, model, initialValues);\n  macro.setGet(publicAPI, model, ['cornerManipulator', 'edgeManipulator', 'faceManipulator']);\n  vtkImageCroppingWidget(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkImageCroppingWidget'); // ----------------------------------------------------------------------------\n\nvar vtkImageCroppingWidget$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkImageCroppingWidget$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}