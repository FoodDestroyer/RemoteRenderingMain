{"ast":null,"code":"import macro from '../../macros.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUTextureView from './TextureView.js';\nimport vtkWebGPUTypes from './Types.js';\nimport vtkTexture from '../Core/Texture.js';\nvar BufferUsage = vtkWebGPUBufferManager.BufferUsage; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkWebGPUTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTexture');\n  publicAPI.create = function (device, options) {\n    model.device = device;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    var dimension = model.depth === 1 ? '2d' : '3d';\n    model.format = options.format ? options.format : 'rgba8unorm';\n    model.mipLevel = options.mipLevel ? options.mipLevel : 0;\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n\n    model.handle = model.device.getHandle().createTexture({\n      size: [model.width, model.height, model.depth],\n      format: model.format,\n      // 'rgba8unorm',\n      usage: model.usage,\n      label: model.label,\n      dimension: dimension,\n      mipLevelCount: model.mipLevel + 1\n    });\n  };\n  publicAPI.assignFromHandle = function (device, handle, options) {\n    model.device = device;\n    model.handle = handle;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    model.format = options.format ? options.format : 'rgba8unorm';\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.writeImageData = function (req) {\n    var nativeArray = [];\n    if (req.canvas) {\n      model.device.getHandle().queue.copyExternalImageToTexture({\n        source: req.canvas,\n        flipY: req.flip\n      }, {\n        texture: model.handle,\n        premultipliedAlpha: true\n      }, [model.width, model.height, model.depth]);\n      model.ready = true;\n      return;\n    }\n    if (req.jsImageData && !req.nativeArray) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    var bufferBytesPerRow = model.width * tDetails.stride;\n    var fixAll = function fixAll(arr, height, depth) {\n      // bytesPerRow must be a multiple of 256 so we might need to rebuild\n      // the data here before passing to the buffer. e.g. if it is unorm8x4 then\n      // we need to have width be a multiple of 64\n      var inWidthInBytes = arr.length / (height * depth) * arr.BYTES_PER_ELEMENT; // is this a half float texture?\n\n      var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float'; // if we need to copy the data\n\n      if (halfFloat || inWidthInBytes % 256) {\n        var inArray = arr;\n        var inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;\n        var outBytesPerElement = tDetails.elementSize;\n        var outWidthInBytes = 256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);\n        var outWidth = outWidthInBytes / outBytesPerElement;\n        var outArray = macro.newTypedArray(halfFloat ? 'Uint16Array' : inArray.constructor.name, outWidth * height * depth);\n        for (var v = 0; v < height * depth; v++) {\n          if (halfFloat) {\n            for (var i = 0; i < inWidth; i++) {\n              outArray[v * outWidth + i] = HalfFloat.toHalf(inArray[v * inWidth + i]);\n            }\n          } else {\n            outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * outWidth);\n          }\n        }\n        return [outArray, outWidthInBytes];\n      }\n      return [arr, inWidthInBytes];\n    };\n    if (req.nativeArray) {\n      nativeArray = req.nativeArray;\n    }\n    if (req.image) {\n      var canvas = document.createElement('canvas');\n      canvas.width = req.image.width;\n      canvas.height = req.image.height;\n      var ctx = canvas.getContext('2d');\n      ctx.translate(0, canvas.height);\n      ctx.scale(1, -1);\n      ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);\n      var imageData = ctx.getImageData(0, 0, req.image.width, req.image.height);\n      nativeArray = imageData.data;\n    }\n    var cmdEnc = model.device.createCommandEncoder();\n    if (publicAPI.getDimensionality() !== 3) {\n      // Non-3D, supports mipmaps\n      var mips = vtkTexture.generateMipmaps(nativeArray, model.width, model.height, model.mipLevel);\n      var currentWidth = model.width;\n      var currentHeight = model.height;\n      for (var m = 0; m <= model.mipLevel; m++) {\n        var fix = fixAll(mips[m], currentHeight, 1);\n        bufferBytesPerRow = fix[1];\n        var buffRequest = {\n          dataArray: req.dataArray ? req.dataArray : null,\n          nativeArray: fix[0],\n          /* eslint-disable no-undef */\n          usage: BufferUsage.Texture\n          /* eslint-enable no-undef */\n        };\n\n        var buff = model.device.getBufferManager().getBuffer(buffRequest);\n        cmdEnc.copyBufferToTexture({\n          buffer: buff.getHandle(),\n          offset: 0,\n          bytesPerRow: bufferBytesPerRow,\n          rowsPerImage: currentHeight\n        }, {\n          texture: model.handle,\n          mipLevel: m\n        }, [currentWidth, currentHeight, 1]);\n        currentWidth /= 2;\n        currentHeight /= 2;\n      }\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    } else {\n      // 3D, no mipmaps\n      var _fix = fixAll(nativeArray, model.height, model.depth);\n      bufferBytesPerRow = _fix[1];\n      var _buffRequest = {\n        dataArray: req.dataArray ? req.dataArray : null,\n        /* eslint-disable no-undef */\n        usage: BufferUsage.Texture\n        /* eslint-enable no-undef */\n      };\n\n      _buffRequest.nativeArray = _fix[0];\n      var _buff = model.device.getBufferManager().getBuffer(_buffRequest);\n      cmdEnc.copyBufferToTexture({\n        buffer: _buff.getHandle(),\n        offset: 0,\n        bytesPerRow: bufferBytesPerRow,\n        rowsPerImage: model.height\n      }, {\n        texture: model.handle\n      }, [model.width, model.height, model.depth]);\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    }\n  }; // when data is pulled out of this texture what scale must be applied to\n  // get back to the original source data. For formats such as r8unorm we\n  // have to multiply by 255.0, for formats such as r16float it is 1.0\n\n  publicAPI.getScale = function () {\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n    return halfFloat ? 1.0 : 255.0;\n  };\n  publicAPI.getNumberOfComponents = function () {\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    return tDetails.numComponents;\n  };\n  publicAPI.getDimensionality = function () {\n    var dims = 0;\n    if (model.width > 1) dims++;\n    if (model.height > 1) dims++;\n    if (model.depth > 1) dims++;\n    return dims;\n  };\n  publicAPI.resizeToMatch = function (tex) {\n    if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {\n      model.width = tex.getWidth();\n      model.height = tex.getHeight();\n      model.depth = tex.getDepth();\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n  publicAPI.resize = function (width, height) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (width !== model.width || height !== model.height || depth !== model.depth) {\n      model.width = width;\n      model.height = height;\n      model.depth = depth;\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n  publicAPI.createView = function (label) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // if options is missing values try to add them in\n    if (!options.dimension) {\n      options.dimension = model.depth === 1 ? '2d' : '3d';\n    }\n    var view = vtkWebGPUTextureView.newInstance({\n      label: label\n    });\n    view.create(publicAPI, options);\n    return view;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  buffer: null,\n  ready: false,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);\n  macro.setGet(publicAPI, model, ['device', 'label']);\n  vtkWebGPUTexture(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTexture$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkWebGPUTexture$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","HalfFloat","vtkWebGPUBufferManager","vtkWebGPUTextureView","vtkWebGPUTypes","vtkTexture","BufferUsage","vtkWebGPUTexture","publicAPI","model","classHierarchy","push","create","device","options","width","height","depth","dimension","format","mipLevel","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","handle","getHandle","createTexture","size","label","mipLevelCount","assignFromHandle","writeImageData","req","nativeArray","canvas","queue","copyExternalImageToTexture","source","flipY","flip","texture","premultipliedAlpha","ready","jsImageData","data","tDetails","getDetailsFromTextureFormat","bufferBytesPerRow","stride","fixAll","arr","inWidthInBytes","length","BYTES_PER_ELEMENT","halfFloat","elementSize","sampleType","inArray","inWidth","outBytesPerElement","outWidthInBytes","Math","floor","outWidth","outArray","newTypedArray","constructor","name","v","i","toHalf","set","subarray","image","document","createElement","ctx","getContext","translate","scale","drawImage","imageData","getImageData","cmdEnc","createCommandEncoder","getDimensionality","mips","generateMipmaps","currentWidth","currentHeight","m","fix","buffRequest","dataArray","Texture","buff","getBufferManager","getBuffer","copyBufferToTexture","buffer","offset","bytesPerRow","rowsPerImage","submitCommandEncoder","_fix","_buffRequest","_buff","getScale","getNumberOfComponents","numComponents","dims","resizeToMatch","tex","getWidth","getHeight","getDepth","resize","arguments","undefined","createView","view","newInstance","DEFAULT_VALUES","extend","initialValues","Object","assign","obj","get","setGet","vtkWebGPUTexture$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/Texture.js"],"sourcesContent":["import macro from '../../macros.js';\nimport HalfFloat from '../../Common/Core/HalfFloat.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUTextureView from './TextureView.js';\nimport vtkWebGPUTypes from './Types.js';\nimport vtkTexture from '../Core/Texture.js';\n\nvar BufferUsage = vtkWebGPUBufferManager.BufferUsage; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// vtkWebGPUTexture methods\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUTexture(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUTexture');\n\n  publicAPI.create = function (device, options) {\n    model.device = device;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    var dimension = model.depth === 1 ? '2d' : '3d';\n    model.format = options.format ? options.format : 'rgba8unorm';\n    model.mipLevel = options.mipLevel ? options.mipLevel : 0;\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n\n    model.handle = model.device.getHandle().createTexture({\n      size: [model.width, model.height, model.depth],\n      format: model.format,\n      // 'rgba8unorm',\n      usage: model.usage,\n      label: model.label,\n      dimension: dimension,\n      mipLevelCount: model.mipLevel + 1\n    });\n  };\n\n  publicAPI.assignFromHandle = function (device, handle, options) {\n    model.device = device;\n    model.handle = handle;\n    model.width = options.width;\n    model.height = options.height;\n    model.depth = options.depth ? options.depth : 1;\n    model.format = options.format ? options.format : 'rgba8unorm';\n    /* eslint-disable no-undef */\n\n    /* eslint-disable no-bitwise */\n\n    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    /* eslint-enable no-undef */\n\n    /* eslint-enable no-bitwise */\n  };\n\n  publicAPI.writeImageData = function (req) {\n    var nativeArray = [];\n\n    if (req.canvas) {\n      model.device.getHandle().queue.copyExternalImageToTexture({\n        source: req.canvas,\n        flipY: req.flip\n      }, {\n        texture: model.handle,\n        premultipliedAlpha: true\n      }, [model.width, model.height, model.depth]);\n      model.ready = true;\n      return;\n    }\n\n    if (req.jsImageData && !req.nativeArray) {\n      req.width = req.jsImageData.width;\n      req.height = req.jsImageData.height;\n      req.depth = 1;\n      req.format = 'rgba8unorm';\n      req.flip = true;\n      req.nativeArray = req.jsImageData.data;\n    }\n\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    var bufferBytesPerRow = model.width * tDetails.stride;\n\n    var fixAll = function fixAll(arr, height, depth) {\n      // bytesPerRow must be a multiple of 256 so we might need to rebuild\n      // the data here before passing to the buffer. e.g. if it is unorm8x4 then\n      // we need to have width be a multiple of 64\n      var inWidthInBytes = arr.length / (height * depth) * arr.BYTES_PER_ELEMENT; // is this a half float texture?\n\n      var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float'; // if we need to copy the data\n\n      if (halfFloat || inWidthInBytes % 256) {\n        var inArray = arr;\n        var inWidth = inWidthInBytes / inArray.BYTES_PER_ELEMENT;\n        var outBytesPerElement = tDetails.elementSize;\n        var outWidthInBytes = 256 * Math.floor((inWidth * outBytesPerElement + 255) / 256);\n        var outWidth = outWidthInBytes / outBytesPerElement;\n        var outArray = macro.newTypedArray(halfFloat ? 'Uint16Array' : inArray.constructor.name, outWidth * height * depth);\n\n        for (var v = 0; v < height * depth; v++) {\n          if (halfFloat) {\n            for (var i = 0; i < inWidth; i++) {\n              outArray[v * outWidth + i] = HalfFloat.toHalf(inArray[v * inWidth + i]);\n            }\n          } else {\n            outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * outWidth);\n          }\n        }\n\n        return [outArray, outWidthInBytes];\n      }\n\n      return [arr, inWidthInBytes];\n    };\n\n    if (req.nativeArray) {\n      nativeArray = req.nativeArray;\n    }\n\n    if (req.image) {\n      var canvas = document.createElement('canvas');\n      canvas.width = req.image.width;\n      canvas.height = req.image.height;\n      var ctx = canvas.getContext('2d');\n      ctx.translate(0, canvas.height);\n      ctx.scale(1, -1);\n      ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);\n      var imageData = ctx.getImageData(0, 0, req.image.width, req.image.height);\n      nativeArray = imageData.data;\n    }\n\n    var cmdEnc = model.device.createCommandEncoder();\n\n    if (publicAPI.getDimensionality() !== 3) {\n      // Non-3D, supports mipmaps\n      var mips = vtkTexture.generateMipmaps(nativeArray, model.width, model.height, model.mipLevel);\n      var currentWidth = model.width;\n      var currentHeight = model.height;\n\n      for (var m = 0; m <= model.mipLevel; m++) {\n        var fix = fixAll(mips[m], currentHeight, 1);\n        bufferBytesPerRow = fix[1];\n        var buffRequest = {\n          dataArray: req.dataArray ? req.dataArray : null,\n          nativeArray: fix[0],\n\n          /* eslint-disable no-undef */\n          usage: BufferUsage.Texture\n          /* eslint-enable no-undef */\n\n        };\n        var buff = model.device.getBufferManager().getBuffer(buffRequest);\n        cmdEnc.copyBufferToTexture({\n          buffer: buff.getHandle(),\n          offset: 0,\n          bytesPerRow: bufferBytesPerRow,\n          rowsPerImage: currentHeight\n        }, {\n          texture: model.handle,\n          mipLevel: m\n        }, [currentWidth, currentHeight, 1]);\n        currentWidth /= 2;\n        currentHeight /= 2;\n      }\n\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    } else {\n      // 3D, no mipmaps\n      var _fix = fixAll(nativeArray, model.height, model.depth);\n\n      bufferBytesPerRow = _fix[1];\n      var _buffRequest = {\n        dataArray: req.dataArray ? req.dataArray : null,\n\n        /* eslint-disable no-undef */\n        usage: BufferUsage.Texture\n        /* eslint-enable no-undef */\n\n      };\n      _buffRequest.nativeArray = _fix[0];\n\n      var _buff = model.device.getBufferManager().getBuffer(_buffRequest);\n\n      cmdEnc.copyBufferToTexture({\n        buffer: _buff.getHandle(),\n        offset: 0,\n        bytesPerRow: bufferBytesPerRow,\n        rowsPerImage: model.height\n      }, {\n        texture: model.handle\n      }, [model.width, model.height, model.depth]);\n      model.device.submitCommandEncoder(cmdEnc);\n      model.ready = true;\n    }\n  }; // when data is pulled out of this texture what scale must be applied to\n  // get back to the original source data. For formats such as r8unorm we\n  // have to multiply by 255.0, for formats such as r16float it is 1.0\n\n\n  publicAPI.getScale = function () {\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float';\n    return halfFloat ? 1.0 : 255.0;\n  };\n\n  publicAPI.getNumberOfComponents = function () {\n    var tDetails = vtkWebGPUTypes.getDetailsFromTextureFormat(model.format);\n    return tDetails.numComponents;\n  };\n\n  publicAPI.getDimensionality = function () {\n    var dims = 0;\n    if (model.width > 1) dims++;\n    if (model.height > 1) dims++;\n    if (model.depth > 1) dims++;\n    return dims;\n  };\n\n  publicAPI.resizeToMatch = function (tex) {\n    if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {\n      model.width = tex.getWidth();\n      model.height = tex.getHeight();\n      model.depth = tex.getDepth();\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n\n  publicAPI.resize = function (width, height) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n    if (width !== model.width || height !== model.height || depth !== model.depth) {\n      model.width = width;\n      model.height = height;\n      model.depth = depth;\n      model.handle = model.device.getHandle().createTexture({\n        size: [model.width, model.height, model.depth],\n        format: model.format,\n        usage: model.usage,\n        label: model.label\n      });\n    }\n  };\n\n  publicAPI.createView = function (label) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // if options is missing values try to add them in\n    if (!options.dimension) {\n      options.dimension = model.depth === 1 ? '2d' : '3d';\n    }\n\n    var view = vtkWebGPUTextureView.newInstance({\n      label: label\n    });\n    view.create(publicAPI, options);\n    return view;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  device: null,\n  handle: null,\n  buffer: null,\n  ready: false,\n  label: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods\n\n  macro.obj(publicAPI, model);\n  macro.get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);\n  macro.setGet(publicAPI, model, ['device', 'label']);\n  vtkWebGPUTexture(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUTexture$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUTexture$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}