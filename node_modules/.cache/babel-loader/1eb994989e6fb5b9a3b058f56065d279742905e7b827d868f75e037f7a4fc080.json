{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUVolumePassFSQ from './VolumePassFSQ.js';\nimport { e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\nvar Representation = vtkProperty.Representation;\nvar BufferUsage = vtkWebGPUBufferManager.BufferUsage,\n  PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes; // The volume rendering pass consists of two sub passes. The first\n// (depthRange) renders polygonal cubes for the volumes to compute min and\n// max bounds in depth for the image. This is then fed into the second pass\n// (final) which actually does the raycasting between those bounds sampling\n// the volumes along the way. So the first pass tends to be very fast whicle\n// the second is where most of the work is done.\n// given x then y then z ordering\n//\n//     2-----3\n//   / |   / |\n//  6-----7  |\n//  |  |  |  |\n//  |  0-----1\n//  |/    |/\n//  4-----5\n//\n\nvar cubeFaceTriangles = [[0, 4, 6], [0, 6, 2], [1, 3, 7], [1, 7, 5], [0, 5, 4], [0, 1, 5], [2, 6, 7], [2, 7, 3], [0, 3, 1], [0, 2, 3], [4, 5, 7], [4, 7, 6]];\nvar DepthBoundsFS = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Select::Dec\\n\\n//VTK::VolumePass::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output : fragmentOutput;\\n\\n  //VTK::Select::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::VolumePass::Impl\\n\\n  // use the maximum (closest) of the current value and the zbuffer\\n  // the blend func will then take the min to find the farthest stop value\\n  var stopval: f32 = max(input.fragPos.z, textureLoad(opaquePassDepthTexture, vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y)), 0));\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\nvar volumeCopyFragTemplate = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = textureSample(volumePassColorTexture,\\n    volumePassColorTextureSampler, mapperUBO.tscale*input.tcoordVS);\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\n/* eslint-disable no-undef */\n\n/* eslint-disable no-bitwise */\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolumePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolumePass'); // create the required textures, encoders, FSQ etc\n\n  publicAPI.initialize = function (viewNode) {\n    if (!model._clearEncoder) {\n      publicAPI.createClearEncoder(viewNode);\n    }\n    if (!model._mergeEncoder) {\n      publicAPI.createMergeEncoder(viewNode);\n    }\n    if (!model._copyEncoder) {\n      publicAPI.createCopyEncoder(viewNode);\n    }\n    if (!model._depthRangeEncoder) {\n      publicAPI.createDepthRangeEncoder(viewNode);\n    }\n    if (!model.fullScreenQuad) {\n      model.fullScreenQuad = vtkWebGPUVolumePassFSQ.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setTextureViews(_toConsumableArray(model._depthRangeEncoder.getColorTextureViews()));\n    }\n    if (!model._volumeCopyQuad) {\n      model._volumeCopyQuad = vtkWebGPUFullScreenQuad.newInstance();\n      model._volumeCopyQuad.setPipelineHash('volpassfsq');\n      model._volumeCopyQuad.setDevice(viewNode.getDevice());\n      model._volumeCopyQuad.setFragmentShaderTemplate(volumeCopyFragTemplate);\n      model._copyUBO = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n      model._copyUBO.addEntry('tscale', 'vec2<f32>');\n      model._volumeCopyQuad.setUBO(model._copyUBO);\n      model._volumeCopyQuad.setTextureViews([model._colorTextureView]);\n    }\n  };\n  publicAPI.traverse = function (renNode, viewNode) {\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n    model._currentParent = viewNode; // create stuff we need\n\n    publicAPI.initialize(viewNode); // determine if we are rendering a small size\n\n    publicAPI.computeTiming(viewNode); // first render the boxes to generate a min max depth\n    // map for all the volumes\n\n    publicAPI.renderDepthBounds(renNode, viewNode); // always mark true\n\n    model._firstGroup = true;\n    var device = viewNode.getDevice(); // determine how many volumes we can render at a time. We subtract\n    // 4 because we use know we use textures for min, max, ofun and tfun\n\n    var maxVolumes = device.getHandle().limits.maxSampledTexturesPerShaderStage - 4; // if we have to make multiple passes then break the volumes up into groups\n    // rendered from farthest to closest\n\n    if (model.volumes.length > maxVolumes) {\n      var cameraPos = renNode.getRenderable().getActiveCamera().getPosition(); // sort from back to front based on volume centroid\n\n      var distances = [];\n      for (var v = 0; v < model.volumes.length; v++) {\n        var bounds = model.volumes[v].getRenderable().getBounds();\n        var centroid = [0.5 * (bounds[1] + bounds[0]), 0.5 * (bounds[3] + bounds[2]), 0.5 * (bounds[5] + bounds[4])];\n        distances[v] = distance2BetweenPoints(centroid, cameraPos);\n      } // sort by distance\n\n      var volumeOrder = _toConsumableArray(Array(model.volumes.length).keys());\n      volumeOrder.sort(function (a, b) {\n        return distances[b] - distances[a];\n      }); // render in chunks back to front\n\n      var volumesToRender = []; // start with smallest chunk so that the last (closest) chunk\n      // has a full maxVolumes;\n\n      var chunkSize = volumeOrder.length % maxVolumes;\n      for (var _v = 0; _v < volumeOrder.length; _v++) {\n        volumesToRender.push(model.volumes[volumeOrder[_v]]);\n        if (volumesToRender.length >= chunkSize) {\n          publicAPI.rayCastPass(viewNode, renNode, volumesToRender);\n          volumesToRender = [];\n          chunkSize = maxVolumes;\n          model._firstGroup = false;\n        }\n      }\n    } else {\n      // if not rendering in chunks then just draw all of them at once\n      publicAPI.rayCastPass(viewNode, renNode, model.volumes);\n    } // copy back to the original color buffer\n    // final composite\n\n    model._volumeCopyQuad.setWebGPURenderer(renNode);\n    if (model._useSmallViewport) {\n      var width = model._colorTextureView.getTexture().getWidth();\n      var height = model._colorTextureView.getTexture().getHeight();\n      model._copyUBO.setArray('tscale', [model._smallViewportWidth / width, model._smallViewportHeight / height]);\n    } else {\n      model._copyUBO.setArray('tscale', [1.0, 1.0]);\n    }\n    model._copyUBO.sendIfNeeded(device);\n    model._copyEncoder.setColorTextureView(0, model.colorTextureView);\n    model._copyEncoder.attachTextureViews();\n    model._copyEncoder.begin(viewNode.getCommandEncoder());\n    renNode.scissorAndViewport(model._copyEncoder);\n    model._volumeCopyQuad.prepareAndDraw(model._copyEncoder);\n    model._copyEncoder.end();\n  }; // unsubscribe from our listeners\n\n  publicAPI.delete = macro.chain(function () {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n  publicAPI.computeTiming = function (viewNode) {\n    var rwi = viewNode.getRenderable().getInteractor();\n    if (model._lastScale == null) {\n      var firstMapper = model.volumes[0].getRenderable().getMapper();\n      model._lastScale = firstMapper.getInitialInteractionScale() || 1.0;\n    }\n    model._useSmallViewport = false;\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n    model._colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(function () {\n        var firstMapper = model.volumes[0].getRenderable().getMapper();\n        if (firstMapper.getAutoAdjustSampleDistances()) {\n          var frate = rwi.getRecentAnimationFrameRate();\n          var targetScale = model._lastScale * rwi.getDesiredUpdateRate() / frate;\n          model._lastScale = targetScale; // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n        } else {\n          model._lastScale = firstMapper.getImageSampleDistance() * firstMapper.getImageSampleDistance();\n        }\n        if (model._lastScale < 1.5) {\n          model._lastScale = 1.5;\n        }\n      });\n    }\n  };\n  publicAPI.rayCastPass = function (viewNode, renNode, volumes) {\n    var encoder = model._firstGroup ? model._clearEncoder : model._mergeEncoder;\n    encoder.attachTextureViews();\n    encoder.begin(viewNode.getCommandEncoder());\n    var width = model._colorTextureView.getTexture().getWidth();\n    var height = model._colorTextureView.getTexture().getHeight();\n    if (model._useSmallViewport) {\n      var canvas = viewNode.getCanvas();\n      var scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * canvas.width);\n      model._smallViewportHeight = Math.ceil(scaleFactor * canvas.height);\n      width = model._smallViewportWidth;\n      height = model._smallViewportHeight;\n    }\n    encoder.getHandle().setViewport(0, 0, width, height, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(0, 0, width, height);\n    model.fullScreenQuad.setWebGPURenderer(renNode);\n    model.fullScreenQuad.setVolumes(volumes);\n    model.fullScreenQuad.prepareAndDraw(encoder);\n    encoder.end();\n  };\n  publicAPI.renderDepthBounds = function (renNode, viewNode) {\n    publicAPI.updateDepthPolyData(renNode);\n    var pd = model._boundsPoly;\n    var points = pd.getPoints();\n    var cells = pd.getPolys();\n    var buffRequest = {\n      hash: \"vp\".concat(cells.getMTime()),\n      usage: BufferUsage.Index,\n      cells: cells,\n      numberOfPoints: points.getNumberOfPoints(),\n      primitiveType: PrimitiveTypes.Triangles,\n      representation: Representation.SURFACE\n    };\n    var indexBuffer = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().setIndexBuffer(indexBuffer); // points\n\n    buffRequest = {\n      usage: BufferUsage.PointArray,\n      format: 'float32x4',\n      hash: \"vp\".concat(points.getMTime()).concat(cells.getMTime()),\n      dataArray: points,\n      indexBuffer: indexBuffer,\n      packExtra: true\n    };\n    var buff = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n    model._mapper.getVertexInput().addBuffer(buff, ['vertexBC']);\n    model._mapper.setNumberOfVertices(buff.getSizeInBytes() / buff.getStrideInBytes());\n    publicAPI.drawDepthRange(renNode, viewNode);\n  };\n  publicAPI.updateDepthPolyData = function (renNode) {\n    // check mtimes first\n    var update = false;\n    for (var i = 0; i < model.volumes.length; i++) {\n      var mtime = model.volumes[i].getMTime();\n      if (!model._lastMTimes[i] || mtime !== model._lastMTimes[i]) {\n        update = true;\n        model._lastMTimes[i] = mtime;\n      }\n    } // also check stabilized time\n\n    var stime = renNode.getStabilizedTime();\n    if (model._lastMTimes.length <= model.volumes.length || stime !== model._lastMTimes[model.volumes.length]) {\n      update = true;\n      model._lastMTimes[model.volumes.length] = stime;\n    } // if no need to update then return\n\n    if (!update) {\n      return;\n    } // rebuild\n\n    var center = renNode.getStabilizedCenterByReference();\n    var numPts = model.volumes.length * 8;\n    var points = new Float64Array(numPts * 3);\n    var numTris = model.volumes.length * 12;\n    var polys = new Uint16Array(numTris * 4); // add points and cells\n\n    for (var _i = 0; _i < model.volumes.length; _i++) {\n      model.volumes[_i].getBoundingCubePoints(points, _i * 24);\n      var cellIdx = _i * 12 * 4;\n      var offset = _i * 8;\n      for (var t = 0; t < 12; t++) {\n        polys[cellIdx++] = 3;\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][0];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][1];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][2];\n      }\n    }\n    for (var p = 0; p < points.length; p += 3) {\n      points[p] -= center[0];\n      points[p + 1] -= center[1];\n      points[p + 2] -= center[2];\n    }\n    model._boundsPoly.getPoints().setData(points, 3);\n    model._boundsPoly.getPoints().modified();\n    model._boundsPoly.getPolys().setData(polys, 1);\n    model._boundsPoly.getPolys().modified();\n    model._boundsPoly.modified();\n  };\n  publicAPI.drawDepthRange = function (renNode, viewNode) {\n    // copy current depth buffer to\n    model._depthRangeTexture.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeTexture2.resizeToMatch(model.colorTextureView.getTexture());\n    model._depthRangeEncoder.attachTextureViews();\n    publicAPI.setCurrentOperation('volumeDepthRangePass');\n    renNode.setRenderEncoder(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(true);\n    model._mapper.setWebGPURenderer(renNode);\n    model._mapper.prepareToDraw(model._depthRangeEncoder);\n    model._mapper.registerDrawCallback(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(false);\n  };\n  publicAPI.createDepthRangeEncoder = function (viewNode) {\n    var device = viewNode.getDevice();\n    model._depthRangeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass DepthRange'\n    });\n    model._depthRangeEncoder.setPipelineHash('volr');\n    model._depthRangeEncoder.setReplaceShaderCodeFunction(function (pipeline) {\n      var fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor1');\n      fDesc.addOutput('vec4<f32>', 'outColor2');\n      var code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor1 = vec4<f32>(input.fragPos.z, 0.0, 0.0, 0.0);', 'output.outColor2 = vec4<f32>(stopval, 0.0, 0.0, 0.0);']).result;\n      fDesc.setCode(code);\n    });\n    model._depthRangeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }, {\n        view: null,\n        clearValue: [1.0, 1.0, 1.0, 1.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n    model._depthRangeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            }\n          }\n        }]\n      }\n    }); // and the textures it needs\n\n    model._depthRangeTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassMaxDepth'\n    });\n    model._depthRangeTexture.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n    var maxView = model._depthRangeTexture.createView('maxTexture');\n    model._depthRangeEncoder.setColorTextureView(0, maxView);\n    model._depthRangeTexture2 = vtkWebGPUTexture.newInstance({\n      label: 'volumePassDepthMin'\n    });\n    model._depthRangeTexture2.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n    var minView = model._depthRangeTexture2.createView('minTexture');\n    model._depthRangeEncoder.setColorTextureView(1, minView);\n    model._mapper.setDevice(viewNode.getDevice());\n    model._mapper.setTextureViews([model.depthTextureView]);\n  };\n  publicAPI.createClearEncoder = function (viewNode) {\n    model._colorTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassColor'\n    });\n    model._colorTexture.create(viewNode.getDevice(), {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'bgra8unorm',\n      /* eslint-disable no-undef */\n\n      /* eslint-disable no-bitwise */\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n    });\n    model._colorTextureView = model._colorTexture.createView('volumePassColorTexture');\n    model._colorTextureView.addSampler(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n    model._clearEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass Clear'\n    });\n    model._clearEncoder.setColorTextureView(0, model._colorTextureView);\n    model._clearEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n    model._clearEncoder.setPipelineHash('volpf');\n    model._clearEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createCopyEncoder = function (viewNode) {\n    model._copyEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassCopy'\n    });\n    model._copyEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._copyEncoder.setPipelineHash('volcopypf');\n    model._copyEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n  publicAPI.createMergeEncoder = function (viewNode) {\n    model._mergeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassMerge'\n    });\n    model._mergeEncoder.setColorTextureView(0, model._colorTextureView);\n    model._mergeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n    model._mergeEncoder.setReplaceShaderCodeFunction(function (pipeline) {\n      var fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      var code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n    model._mergeEncoder.setPipelineHash('volpf');\n    model._mergeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  }; // marks modified when needed\n\n  publicAPI.setVolumes = function (val) {\n    if (!model.volumes || model.volumes.length !== val.length) {\n      model.volumes = _toConsumableArray(val);\n      publicAPI.modified();\n      return;\n    }\n    for (var i = 0; i < val.length; i++) {\n      if (val[i] !== model.volumes[i]) {\n        model.volumes = _toConsumableArray(val);\n        publicAPI.modified();\n        return;\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n  volumes: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model._mapper = vtkWebGPUSimpleMapper.newInstance();\n  model._mapper.setFragmentShaderTemplate(DepthBoundsFS);\n  model._mapper.getShaderReplacements().set('replaceShaderVolumePass', function (hash, pipeline, vertexInput) {\n    var fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n  });\n  model._boundsPoly = vtkPolyData.newInstance();\n  model._lastMTimes = [];\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']); // Object methods\n\n  vtkWebGPUVolumePass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkWebGPUVolumePass'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUVolumePass$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkWebGPUVolumePass$1 as default, extend, newInstance };","map":{"version":3,"names":["_toConsumableArray","macro","vtkPolyData","vtkProperty","vtkRenderPass","vtkWebGPUBufferManager","vtkWebGPUSimpleMapper","vtkWebGPURenderEncoder","vtkWebGPUShaderCache","vtkWebGPUTexture","vtkWebGPUUniformBuffer","vtkWebGPUFullScreenQuad","vtkWebGPUVolumePassFSQ","e","distance2BetweenPoints","Representation","BufferUsage","PrimitiveTypes","cubeFaceTriangles","DepthBoundsFS","volumeCopyFragTemplate","vtkWebGPUVolumePass","publicAPI","model","classHierarchy","push","initialize","viewNode","_clearEncoder","createClearEncoder","_mergeEncoder","createMergeEncoder","_copyEncoder","createCopyEncoder","_depthRangeEncoder","createDepthRangeEncoder","fullScreenQuad","newInstance","setDevice","getDevice","setTextureViews","getColorTextureViews","_volumeCopyQuad","setPipelineHash","setFragmentShaderTemplate","_copyUBO","label","addEntry","setUBO","_colorTextureView","traverse","renNode","deleted","_currentParent","computeTiming","renderDepthBounds","_firstGroup","device","maxVolumes","getHandle","limits","maxSampledTexturesPerShaderStage","volumes","length","cameraPos","getRenderable","getActiveCamera","getPosition","distances","v","bounds","getBounds","centroid","volumeOrder","Array","keys","sort","a","b","volumesToRender","chunkSize","_v","rayCastPass","setWebGPURenderer","_useSmallViewport","width","getTexture","getWidth","height","getHeight","setArray","_smallViewportWidth","_smallViewportHeight","sendIfNeeded","setColorTextureView","colorTextureView","attachTextureViews","begin","getCommandEncoder","scissorAndViewport","prepareAndDraw","end","delete","chain","_animationRateSubscription","unsubscribe","rwi","getInteractor","_lastScale","firstMapper","getMapper","getInitialInteractionScale","isAnimating","_colorTexture","resize","getCanvas","onAnimationFrameRateUpdate","getAutoAdjustSampleDistances","frate","getRecentAnimationFrameRate","targetScale","getDesiredUpdateRate","getImageSampleDistance","encoder","canvas","scaleFactor","Math","sqrt","ceil","setViewport","setScissorRect","setVolumes","updateDepthPolyData","pd","_boundsPoly","points","getPoints","cells","getPolys","buffRequest","hash","concat","getMTime","usage","Index","numberOfPoints","getNumberOfPoints","primitiveType","Triangles","representation","SURFACE","indexBuffer","getBufferManager","getBuffer","_mapper","getVertexInput","setIndexBuffer","PointArray","format","dataArray","packExtra","buff","addBuffer","setNumberOfVertices","getSizeInBytes","getStrideInBytes","drawDepthRange","update","i","mtime","_lastMTimes","stime","getStabilizedTime","center","getStabilizedCenterByReference","numPts","Float64Array","numTris","polys","Uint16Array","_i","getBoundingCubePoints","cellIdx","offset","t","p","setData","modified","_depthRangeTexture","resizeToMatch","_depthRangeTexture2","setCurrentOperation","setRenderEncoder","volumeDepthRangePass","prepareToDraw","registerDrawCallback","setReplaceShaderCodeFunction","pipeline","fDesc","getShaderDescription","addOutput","code","getCode","substitute","result","setCode","setDescription","colorAttachments","view","clearValue","loadOp","storeOp","setPipelineSettings","primitive","cullMode","fragment","targets","blend","color","srcFactor","dstFactor","operation","alpha","srcfactor","create","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","maxView","createView","minView","depthTextureView","COPY_SRC","addSampler","minFilter","magFilter","val","DEFAULT_VALUES","extend","initialValues","arguments","undefined","Object","assign","getShaderReplacements","set","vertexInput","addBuiltinInput","setGet","vtkWebGPUVolumePass$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/VolumePass.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../macros.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\nimport vtkProperty from '../Core/Property.js';\nimport vtkRenderPass from '../SceneGraph/RenderPass.js';\nimport vtkWebGPUBufferManager from './BufferManager.js';\nimport vtkWebGPUSimpleMapper from './SimpleMapper.js';\nimport vtkWebGPURenderEncoder from './RenderEncoder.js';\nimport vtkWebGPUShaderCache from './ShaderCache.js';\nimport vtkWebGPUTexture from './Texture.js';\nimport vtkWebGPUUniformBuffer from './UniformBuffer.js';\nimport vtkWebGPUFullScreenQuad from './FullScreenQuad.js';\nimport vtkWebGPUVolumePassFSQ from './VolumePassFSQ.js';\nimport { e as distance2BetweenPoints } from '../../Common/Core/Math/index.js';\n\nvar Representation = vtkProperty.Representation;\nvar BufferUsage = vtkWebGPUBufferManager.BufferUsage,\n    PrimitiveTypes = vtkWebGPUBufferManager.PrimitiveTypes; // The volume rendering pass consists of two sub passes. The first\n// (depthRange) renders polygonal cubes for the volumes to compute min and\n// max bounds in depth for the image. This is then fed into the second pass\n// (final) which actually does the raycasting between those bounds sampling\n// the volumes along the way. So the first pass tends to be very fast whicle\n// the second is where most of the work is done.\n// given x then y then z ordering\n//\n//     2-----3\n//   / |   / |\n//  6-----7  |\n//  |  |  |  |\n//  |  0-----1\n//  |/    |/\n//  4-----5\n//\n\nvar cubeFaceTriangles = [[0, 4, 6], [0, 6, 2], [1, 3, 7], [1, 7, 5], [0, 5, 4], [0, 1, 5], [2, 6, 7], [2, 7, 3], [0, 3, 1], [0, 2, 3], [4, 5, 7], [4, 7, 6]];\nvar DepthBoundsFS = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Select::Dec\\n\\n//VTK::VolumePass::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output : fragmentOutput;\\n\\n  //VTK::Select::Impl\\n\\n  //VTK::TCoord::Impl\\n\\n  //VTK::VolumePass::Impl\\n\\n  // use the maximum (closest) of the current value and the zbuffer\\n  // the blend func will then take the min to find the farthest stop value\\n  var stopval: f32 = max(input.fragPos.z, textureLoad(opaquePassDepthTexture, vec2<i32>(i32(input.fragPos.x), i32(input.fragPos.y)), 0));\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\nvar volumeCopyFragTemplate = \"\\n//VTK::Renderer::Dec\\n\\n//VTK::Mapper::Dec\\n\\n//VTK::TCoord::Dec\\n\\n//VTK::RenderEncoder::Dec\\n\\n//VTK::IOStructs::Dec\\n\\n@fragment\\nfn main(\\n//VTK::IOStructs::Input\\n)\\n//VTK::IOStructs::Output\\n{\\n  var output: fragmentOutput;\\n\\n  var computedColor: vec4<f32> = textureSample(volumePassColorTexture,\\n    volumePassColorTextureSampler, mapperUBO.tscale*input.tcoordVS);\\n\\n  //VTK::RenderEncoder::Impl\\n  return output;\\n}\\n\";\n/* eslint-disable no-undef */\n\n/* eslint-disable no-bitwise */\n// ----------------------------------------------------------------------------\n\nfunction vtkWebGPUVolumePass(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkWebGPUVolumePass'); // create the required textures, encoders, FSQ etc\n\n  publicAPI.initialize = function (viewNode) {\n    if (!model._clearEncoder) {\n      publicAPI.createClearEncoder(viewNode);\n    }\n\n    if (!model._mergeEncoder) {\n      publicAPI.createMergeEncoder(viewNode);\n    }\n\n    if (!model._copyEncoder) {\n      publicAPI.createCopyEncoder(viewNode);\n    }\n\n    if (!model._depthRangeEncoder) {\n      publicAPI.createDepthRangeEncoder(viewNode);\n    }\n\n    if (!model.fullScreenQuad) {\n      model.fullScreenQuad = vtkWebGPUVolumePassFSQ.newInstance();\n      model.fullScreenQuad.setDevice(viewNode.getDevice());\n      model.fullScreenQuad.setTextureViews(_toConsumableArray(model._depthRangeEncoder.getColorTextureViews()));\n    }\n\n    if (!model._volumeCopyQuad) {\n      model._volumeCopyQuad = vtkWebGPUFullScreenQuad.newInstance();\n\n      model._volumeCopyQuad.setPipelineHash('volpassfsq');\n\n      model._volumeCopyQuad.setDevice(viewNode.getDevice());\n\n      model._volumeCopyQuad.setFragmentShaderTemplate(volumeCopyFragTemplate);\n\n      model._copyUBO = vtkWebGPUUniformBuffer.newInstance({\n        label: 'mapperUBO'\n      });\n\n      model._copyUBO.addEntry('tscale', 'vec2<f32>');\n\n      model._volumeCopyQuad.setUBO(model._copyUBO);\n\n      model._volumeCopyQuad.setTextureViews([model._colorTextureView]);\n    }\n  };\n\n  publicAPI.traverse = function (renNode, viewNode) {\n    if (model.deleted) {\n      return;\n    } // we just render our delegates in order\n\n\n    model._currentParent = viewNode; // create stuff we need\n\n    publicAPI.initialize(viewNode); // determine if we are rendering a small size\n\n    publicAPI.computeTiming(viewNode); // first render the boxes to generate a min max depth\n    // map for all the volumes\n\n    publicAPI.renderDepthBounds(renNode, viewNode); // always mark true\n\n    model._firstGroup = true;\n    var device = viewNode.getDevice(); // determine how many volumes we can render at a time. We subtract\n    // 4 because we use know we use textures for min, max, ofun and tfun\n\n    var maxVolumes = device.getHandle().limits.maxSampledTexturesPerShaderStage - 4; // if we have to make multiple passes then break the volumes up into groups\n    // rendered from farthest to closest\n\n    if (model.volumes.length > maxVolumes) {\n      var cameraPos = renNode.getRenderable().getActiveCamera().getPosition(); // sort from back to front based on volume centroid\n\n      var distances = [];\n\n      for (var v = 0; v < model.volumes.length; v++) {\n        var bounds = model.volumes[v].getRenderable().getBounds();\n        var centroid = [0.5 * (bounds[1] + bounds[0]), 0.5 * (bounds[3] + bounds[2]), 0.5 * (bounds[5] + bounds[4])];\n        distances[v] = distance2BetweenPoints(centroid, cameraPos);\n      } // sort by distance\n\n\n      var volumeOrder = _toConsumableArray(Array(model.volumes.length).keys());\n\n      volumeOrder.sort(function (a, b) {\n        return distances[b] - distances[a];\n      }); // render in chunks back to front\n\n      var volumesToRender = []; // start with smallest chunk so that the last (closest) chunk\n      // has a full maxVolumes;\n\n      var chunkSize = volumeOrder.length % maxVolumes;\n\n      for (var _v = 0; _v < volumeOrder.length; _v++) {\n        volumesToRender.push(model.volumes[volumeOrder[_v]]);\n\n        if (volumesToRender.length >= chunkSize) {\n          publicAPI.rayCastPass(viewNode, renNode, volumesToRender);\n          volumesToRender = [];\n          chunkSize = maxVolumes;\n          model._firstGroup = false;\n        }\n      }\n    } else {\n      // if not rendering in chunks then just draw all of them at once\n      publicAPI.rayCastPass(viewNode, renNode, model.volumes);\n    } // copy back to the original color buffer\n    // final composite\n\n\n    model._volumeCopyQuad.setWebGPURenderer(renNode);\n\n    if (model._useSmallViewport) {\n      var width = model._colorTextureView.getTexture().getWidth();\n\n      var height = model._colorTextureView.getTexture().getHeight();\n\n      model._copyUBO.setArray('tscale', [model._smallViewportWidth / width, model._smallViewportHeight / height]);\n    } else {\n      model._copyUBO.setArray('tscale', [1.0, 1.0]);\n    }\n\n    model._copyUBO.sendIfNeeded(device);\n\n    model._copyEncoder.setColorTextureView(0, model.colorTextureView);\n\n    model._copyEncoder.attachTextureViews();\n\n    model._copyEncoder.begin(viewNode.getCommandEncoder());\n\n    renNode.scissorAndViewport(model._copyEncoder);\n\n    model._volumeCopyQuad.prepareAndDraw(model._copyEncoder);\n\n    model._copyEncoder.end();\n  }; // unsubscribe from our listeners\n\n\n  publicAPI.delete = macro.chain(function () {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n\n  publicAPI.computeTiming = function (viewNode) {\n    var rwi = viewNode.getRenderable().getInteractor();\n\n    if (model._lastScale == null) {\n      var firstMapper = model.volumes[0].getRenderable().getMapper();\n      model._lastScale = firstMapper.getInitialInteractionScale() || 1.0;\n    }\n\n    model._useSmallViewport = false;\n\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n\n    model._colorTexture.resize(viewNode.getCanvas().width, viewNode.getCanvas().height);\n\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(function () {\n        var firstMapper = model.volumes[0].getRenderable().getMapper();\n\n        if (firstMapper.getAutoAdjustSampleDistances()) {\n          var frate = rwi.getRecentAnimationFrameRate();\n          var targetScale = model._lastScale * rwi.getDesiredUpdateRate() / frate;\n          model._lastScale = targetScale; // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n        } else {\n          model._lastScale = firstMapper.getImageSampleDistance() * firstMapper.getImageSampleDistance();\n        }\n\n        if (model._lastScale < 1.5) {\n          model._lastScale = 1.5;\n        }\n      });\n    }\n  };\n\n  publicAPI.rayCastPass = function (viewNode, renNode, volumes) {\n    var encoder = model._firstGroup ? model._clearEncoder : model._mergeEncoder;\n    encoder.attachTextureViews();\n    encoder.begin(viewNode.getCommandEncoder());\n\n    var width = model._colorTextureView.getTexture().getWidth();\n\n    var height = model._colorTextureView.getTexture().getHeight();\n\n    if (model._useSmallViewport) {\n      var canvas = viewNode.getCanvas();\n      var scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * canvas.width);\n      model._smallViewportHeight = Math.ceil(scaleFactor * canvas.height);\n      width = model._smallViewportWidth;\n      height = model._smallViewportHeight;\n    }\n\n    encoder.getHandle().setViewport(0, 0, width, height, 0.0, 1.0); // set scissor\n\n    encoder.getHandle().setScissorRect(0, 0, width, height);\n    model.fullScreenQuad.setWebGPURenderer(renNode);\n    model.fullScreenQuad.setVolumes(volumes);\n    model.fullScreenQuad.prepareAndDraw(encoder);\n    encoder.end();\n  };\n\n  publicAPI.renderDepthBounds = function (renNode, viewNode) {\n    publicAPI.updateDepthPolyData(renNode);\n    var pd = model._boundsPoly;\n    var points = pd.getPoints();\n    var cells = pd.getPolys();\n    var buffRequest = {\n      hash: \"vp\".concat(cells.getMTime()),\n      usage: BufferUsage.Index,\n      cells: cells,\n      numberOfPoints: points.getNumberOfPoints(),\n      primitiveType: PrimitiveTypes.Triangles,\n      representation: Representation.SURFACE\n    };\n    var indexBuffer = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n\n    model._mapper.getVertexInput().setIndexBuffer(indexBuffer); // points\n\n\n    buffRequest = {\n      usage: BufferUsage.PointArray,\n      format: 'float32x4',\n      hash: \"vp\".concat(points.getMTime()).concat(cells.getMTime()),\n      dataArray: points,\n      indexBuffer: indexBuffer,\n      packExtra: true\n    };\n    var buff = viewNode.getDevice().getBufferManager().getBuffer(buffRequest);\n\n    model._mapper.getVertexInput().addBuffer(buff, ['vertexBC']);\n\n    model._mapper.setNumberOfVertices(buff.getSizeInBytes() / buff.getStrideInBytes());\n\n    publicAPI.drawDepthRange(renNode, viewNode);\n  };\n\n  publicAPI.updateDepthPolyData = function (renNode) {\n    // check mtimes first\n    var update = false;\n\n    for (var i = 0; i < model.volumes.length; i++) {\n      var mtime = model.volumes[i].getMTime();\n\n      if (!model._lastMTimes[i] || mtime !== model._lastMTimes[i]) {\n        update = true;\n        model._lastMTimes[i] = mtime;\n      }\n    } // also check stabilized time\n\n\n    var stime = renNode.getStabilizedTime();\n\n    if (model._lastMTimes.length <= model.volumes.length || stime !== model._lastMTimes[model.volumes.length]) {\n      update = true;\n      model._lastMTimes[model.volumes.length] = stime;\n    } // if no need to update then return\n\n\n    if (!update) {\n      return;\n    } // rebuild\n\n\n    var center = renNode.getStabilizedCenterByReference();\n    var numPts = model.volumes.length * 8;\n    var points = new Float64Array(numPts * 3);\n    var numTris = model.volumes.length * 12;\n    var polys = new Uint16Array(numTris * 4); // add points and cells\n\n    for (var _i = 0; _i < model.volumes.length; _i++) {\n      model.volumes[_i].getBoundingCubePoints(points, _i * 24);\n\n      var cellIdx = _i * 12 * 4;\n      var offset = _i * 8;\n\n      for (var t = 0; t < 12; t++) {\n        polys[cellIdx++] = 3;\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][0];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][1];\n        polys[cellIdx++] = offset + cubeFaceTriangles[t][2];\n      }\n    }\n\n    for (var p = 0; p < points.length; p += 3) {\n      points[p] -= center[0];\n      points[p + 1] -= center[1];\n      points[p + 2] -= center[2];\n    }\n\n    model._boundsPoly.getPoints().setData(points, 3);\n\n    model._boundsPoly.getPoints().modified();\n\n    model._boundsPoly.getPolys().setData(polys, 1);\n\n    model._boundsPoly.getPolys().modified();\n\n    model._boundsPoly.modified();\n  };\n\n  publicAPI.drawDepthRange = function (renNode, viewNode) {\n    // copy current depth buffer to\n    model._depthRangeTexture.resizeToMatch(model.colorTextureView.getTexture());\n\n    model._depthRangeTexture2.resizeToMatch(model.colorTextureView.getTexture());\n\n    model._depthRangeEncoder.attachTextureViews();\n\n    publicAPI.setCurrentOperation('volumeDepthRangePass');\n    renNode.setRenderEncoder(model._depthRangeEncoder);\n    renNode.volumeDepthRangePass(true);\n\n    model._mapper.setWebGPURenderer(renNode);\n\n    model._mapper.prepareToDraw(model._depthRangeEncoder);\n\n    model._mapper.registerDrawCallback(model._depthRangeEncoder);\n\n    renNode.volumeDepthRangePass(false);\n  };\n\n  publicAPI.createDepthRangeEncoder = function (viewNode) {\n    var device = viewNode.getDevice();\n    model._depthRangeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass DepthRange'\n    });\n\n    model._depthRangeEncoder.setPipelineHash('volr');\n\n    model._depthRangeEncoder.setReplaceShaderCodeFunction(function (pipeline) {\n      var fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor1');\n      fDesc.addOutput('vec4<f32>', 'outColor2');\n      var code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor1 = vec4<f32>(input.fragPos.z, 0.0, 0.0, 0.0);', 'output.outColor2 = vec4<f32>(stopval, 0.0, 0.0, 0.0);']).result;\n      fDesc.setCode(code);\n    });\n\n    model._depthRangeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }, {\n        view: null,\n        clearValue: [1.0, 1.0, 1.0, 1.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n\n    model._depthRangeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'max'\n            }\n          }\n        }, {\n          format: 'r16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one',\n              operation: 'min'\n            }\n          }\n        }]\n      }\n    }); // and the textures it needs\n\n\n    model._depthRangeTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassMaxDepth'\n    });\n\n    model._depthRangeTexture.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n\n    var maxView = model._depthRangeTexture.createView('maxTexture');\n\n    model._depthRangeEncoder.setColorTextureView(0, maxView);\n\n    model._depthRangeTexture2 = vtkWebGPUTexture.newInstance({\n      label: 'volumePassDepthMin'\n    });\n\n    model._depthRangeTexture2.create(device, {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'r16float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n    });\n\n    var minView = model._depthRangeTexture2.createView('minTexture');\n\n    model._depthRangeEncoder.setColorTextureView(1, minView);\n\n    model._mapper.setDevice(viewNode.getDevice());\n\n    model._mapper.setTextureViews([model.depthTextureView]);\n  };\n\n  publicAPI.createClearEncoder = function (viewNode) {\n    model._colorTexture = vtkWebGPUTexture.newInstance({\n      label: 'volumePassColor'\n    });\n\n    model._colorTexture.create(viewNode.getDevice(), {\n      width: viewNode.getCanvas().width,\n      height: viewNode.getCanvas().height,\n      format: 'bgra8unorm',\n\n      /* eslint-disable no-undef */\n\n      /* eslint-disable no-bitwise */\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC\n    });\n\n    model._colorTextureView = model._colorTexture.createView('volumePassColorTexture');\n\n    model._colorTextureView.addSampler(viewNode.getDevice(), {\n      minFilter: 'linear',\n      magFilter: 'linear'\n    });\n\n    model._clearEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'VolumePass Clear'\n    });\n\n    model._clearEncoder.setColorTextureView(0, model._colorTextureView);\n\n    model._clearEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        clearValue: [0.0, 0.0, 0.0, 0.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n    });\n\n    model._clearEncoder.setPipelineHash('volpf');\n\n    model._clearEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  publicAPI.createCopyEncoder = function (viewNode) {\n    model._copyEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassCopy'\n    });\n\n    model._copyEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n\n    model._copyEncoder.setPipelineHash('volcopypf');\n\n    model._copyEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'rgba16float',\n          blend: {\n            color: {\n              srcFactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  };\n\n  publicAPI.createMergeEncoder = function (viewNode) {\n    model._mergeEncoder = vtkWebGPURenderEncoder.newInstance({\n      label: 'volumePassMerge'\n    });\n\n    model._mergeEncoder.setColorTextureView(0, model._colorTextureView);\n\n    model._mergeEncoder.setDescription({\n      colorAttachments: [{\n        view: null,\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n    });\n\n    model._mergeEncoder.setReplaceShaderCodeFunction(function (pipeline) {\n      var fDesc = pipeline.getShaderDescription('fragment');\n      fDesc.addOutput('vec4<f32>', 'outColor');\n      var code = fDesc.getCode();\n      code = vtkWebGPUShaderCache.substitute(code, '//VTK::RenderEncoder::Impl', ['output.outColor = vec4<f32>(computedColor.rgb, computedColor.a);']).result;\n      fDesc.setCode(code);\n    });\n\n    model._mergeEncoder.setPipelineHash('volpf');\n\n    model._mergeEncoder.setPipelineSettings({\n      primitive: {\n        cullMode: 'none'\n      },\n      fragment: {\n        targets: [{\n          format: 'bgra8unorm',\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha'\n            },\n            alpha: {\n              srcfactor: 'one',\n              dstFactor: 'one-minus-src-alpha'\n            }\n          }\n        }]\n      }\n    });\n  }; // marks modified when needed\n\n\n  publicAPI.setVolumes = function (val) {\n    if (!model.volumes || model.volumes.length !== val.length) {\n      model.volumes = _toConsumableArray(val);\n      publicAPI.modified();\n      return;\n    }\n\n    for (var i = 0; i < val.length; i++) {\n      if (val[i] !== model.volumes[i]) {\n        model.volumes = _toConsumableArray(val);\n        publicAPI.modified();\n        return;\n      }\n    }\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  colorTextureView: null,\n  depthTextureView: null,\n  volumes: null\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API\n\n  vtkRenderPass.extend(publicAPI, model, initialValues);\n  model._mapper = vtkWebGPUSimpleMapper.newInstance();\n\n  model._mapper.setFragmentShaderTemplate(DepthBoundsFS);\n\n  model._mapper.getShaderReplacements().set('replaceShaderVolumePass', function (hash, pipeline, vertexInput) {\n    var fDesc = pipeline.getShaderDescription('fragment');\n    fDesc.addBuiltinInput('vec4<f32>', '@builtin(position) fragPos');\n  });\n\n  model._boundsPoly = vtkPolyData.newInstance();\n  model._lastMTimes = [];\n  macro.setGet(publicAPI, model, ['colorTextureView', 'depthTextureView']); // Object methods\n\n  vtkWebGPUVolumePass(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkWebGPUVolumePass'); // ----------------------------------------------------------------------------\n\nvar vtkWebGPUVolumePass$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkWebGPUVolumePass$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}