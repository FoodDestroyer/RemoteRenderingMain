{"ast":null,"code":"import macro from '../../macros.js';\nimport vtkCompositeVRManipulator from './CompositeVRManipulator.js';\nimport { Device, Input } from '../../Rendering/Core/RenderWindowInteractor/Constants.js';\nimport { States } from '../../Rendering/Core/InteractorStyle/Constants.js';\n\n// vtkVRButtonPanManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVRButtonPanManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVRButtonPanManipulator');\n  publicAPI.onButton3D = function (interactorStyle, renderer, state, device, input, pressed) {\n    if (pressed) {\n      interactorStyle.startCameraPose();\n    } else if (state === States.IS_CAMERA_POSE) {\n      interactorStyle.endCameraPose();\n    }\n  };\n  publicAPI.onMove3D = function (interactorStyle, renderer, state, data) {\n    if (state !== States.IS_CAMERA_POSE) {\n      return;\n    } // move the world in the direction of the\n    // controller\n\n    var camera = renderer.getActiveCamera();\n    var oldTrans = camera.getPhysicalTranslation(); // look at the y axis to determine how fast / what direction to move\n\n    var speed = data.gamepad.axes[1]; // 0.05 meters / frame movement\n\n    var pscale = speed * 0.05 * camera.getPhysicalScale(); // convert orientation to world coordinate direction\n\n    var dir = camera.physicalOrientationToWorldDirection(data.orientation);\n    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  device: Device.RightController,\n  input: Input.TrackPad\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkCompositeVRManipulator.extend(publicAPI, model, initialValues); // Object specific methods\n\n  vtkVRButtonPanManipulator(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkVRButtonPanManipulator'); // ----------------------------------------------------------------------------\n\nvar vtkVRButtonPanManipulator$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkVRButtonPanManipulator$1 as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkCompositeVRManipulator","Device","Input","States","vtkVRButtonPanManipulator","publicAPI","model","classHierarchy","push","onButton3D","interactorStyle","renderer","state","device","input","pressed","startCameraPose","IS_CAMERA_POSE","endCameraPose","onMove3D","data","camera","getActiveCamera","oldTrans","getPhysicalTranslation","speed","gamepad","axes","pscale","getPhysicalScale","dir","physicalOrientationToWorldDirection","orientation","setPhysicalTranslation","DEFAULT_VALUES","RightController","TrackPad","extend","initialValues","arguments","length","undefined","Object","assign","obj","newInstance","vtkVRButtonPanManipulator$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Interaction/Manipulators/VRButtonPanManipulator.js"],"sourcesContent":["import macro from '../../macros.js';\nimport vtkCompositeVRManipulator from './CompositeVRManipulator.js';\nimport { Device, Input } from '../../Rendering/Core/RenderWindowInteractor/Constants.js';\nimport { States } from '../../Rendering/Core/InteractorStyle/Constants.js';\n\n// vtkVRButtonPanManipulator methods\n// ----------------------------------------------------------------------------\n\nfunction vtkVRButtonPanManipulator(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkVRButtonPanManipulator');\n\n  publicAPI.onButton3D = function (interactorStyle, renderer, state, device, input, pressed) {\n    if (pressed) {\n      interactorStyle.startCameraPose();\n    } else if (state === States.IS_CAMERA_POSE) {\n      interactorStyle.endCameraPose();\n    }\n  };\n\n  publicAPI.onMove3D = function (interactorStyle, renderer, state, data) {\n    if (state !== States.IS_CAMERA_POSE) {\n      return;\n    } // move the world in the direction of the\n    // controller\n\n\n    var camera = renderer.getActiveCamera();\n    var oldTrans = camera.getPhysicalTranslation(); // look at the y axis to determine how fast / what direction to move\n\n    var speed = data.gamepad.axes[1]; // 0.05 meters / frame movement\n\n    var pscale = speed * 0.05 * camera.getPhysicalScale(); // convert orientation to world coordinate direction\n\n    var dir = camera.physicalOrientationToWorldDirection(data.orientation);\n    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  device: Device.RightController,\n  input: Input.TrackPad\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  vtkCompositeVRManipulator.extend(publicAPI, model, initialValues); // Object specific methods\n\n  vtkVRButtonPanManipulator(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkVRButtonPanManipulator'); // ----------------------------------------------------------------------------\n\nvar vtkVRButtonPanManipulator$1 = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkVRButtonPanManipulator$1 as default, extend, newInstance };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;AACnC,OAAOC,yBAAyB,MAAM,6BAA6B;AACnE,SAASC,MAAM,EAAEC,KAAK,QAAQ,0DAA0D;AACxF,SAASC,MAAM,QAAQ,mDAAmD;;AAE1E;AACA;;AAEA,SAASC,yBAAyBA,CAACC,SAAS,EAAEC,KAAK,EAAE;EACnD;EACAA,KAAK,CAACC,cAAc,CAACC,IAAI,CAAC,2BAA2B,CAAC;EAEtDH,SAAS,CAACI,UAAU,GAAG,UAAUC,eAAe,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;IACzF,IAAIA,OAAO,EAAE;MACXL,eAAe,CAACM,eAAe,CAAC,CAAC;IACnC,CAAC,MAAM,IAAIJ,KAAK,KAAKT,MAAM,CAACc,cAAc,EAAE;MAC1CP,eAAe,CAACQ,aAAa,CAAC,CAAC;IACjC;EACF,CAAC;EAEDb,SAAS,CAACc,QAAQ,GAAG,UAAUT,eAAe,EAAEC,QAAQ,EAAEC,KAAK,EAAEQ,IAAI,EAAE;IACrE,IAAIR,KAAK,KAAKT,MAAM,CAACc,cAAc,EAAE;MACnC;IACF,CAAC,CAAC;IACF;;IAGA,IAAII,MAAM,GAAGV,QAAQ,CAACW,eAAe,CAAC,CAAC;IACvC,IAAIC,QAAQ,GAAGF,MAAM,CAACG,sBAAsB,CAAC,CAAC,CAAC,CAAC;;IAEhD,IAAIC,KAAK,GAAGL,IAAI,CAACM,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAElC,IAAIC,MAAM,GAAGH,KAAK,GAAG,IAAI,GAAGJ,MAAM,CAACQ,gBAAgB,CAAC,CAAC,CAAC,CAAC;;IAEvD,IAAIC,GAAG,GAAGT,MAAM,CAACU,mCAAmC,CAACX,IAAI,CAACY,WAAW,CAAC;IACtEX,MAAM,CAACY,sBAAsB,CAACV,QAAQ,CAAC,CAAC,CAAC,GAAGO,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM,EAAEL,QAAQ,CAAC,CAAC,CAAC,GAAGO,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM,EAAEL,QAAQ,CAAC,CAAC,CAAC,GAAGO,GAAG,CAAC,CAAC,CAAC,GAAGF,MAAM,CAAC;EAC5H,CAAC;AACH,CAAC,CAAC;AACF;AACA;;AAGA,IAAIM,cAAc,GAAG;EACnBrB,MAAM,EAAEZ,MAAM,CAACkC,eAAe;EAC9BrB,KAAK,EAAEZ,KAAK,CAACkC;AACf,CAAC,CAAC,CAAC;;AAEH,SAASC,MAAMA,CAAChC,SAAS,EAAEC,KAAK,EAAE;EAChC,IAAIgC,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1FG,MAAM,CAACC,MAAM,CAACrC,KAAK,EAAE4B,cAAc,EAAEI,aAAa,CAAC;EACnDvC,KAAK,CAAC6C,GAAG,CAACvC,SAAS,EAAEC,KAAK,CAAC;EAC3BN,yBAAyB,CAACqC,MAAM,CAAChC,SAAS,EAAEC,KAAK,EAAEgC,aAAa,CAAC,CAAC,CAAC;;EAEnElC,yBAAyB,CAACC,SAAS,EAAEC,KAAK,CAAC;AAC7C,CAAC,CAAC;;AAEF,IAAIuC,WAAW,GAAG9C,KAAK,CAAC8C,WAAW,CAACR,MAAM,EAAE,2BAA2B,CAAC,CAAC,CAAC;;AAE1E,IAAIS,2BAA2B,GAAG;EAChCD,WAAW,EAAEA,WAAW;EACxBR,MAAM,EAAEA;AACV,CAAC;AAED,SAASS,2BAA2B,IAAIC,OAAO,EAAEV,MAAM,EAAEQ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}