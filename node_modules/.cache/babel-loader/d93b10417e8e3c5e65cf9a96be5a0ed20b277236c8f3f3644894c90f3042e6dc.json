{"ast":null,"code":"import { s as subtract, w as multiplyScalar, k as add, B as areEquals } from '../../../Common/Core/Math/index.js';\nfunction calculateTextPosition(model) {\n  var vector = [0, 0, 0];\n  var handle1WorldPos = model.widgetState.getHandle1().getOrigin();\n  var handle2WorldPos = model.widgetState.getHandle2().getOrigin();\n  if (!handle1WorldPos || !handle2WorldPos) {\n    return null;\n  }\n  var statePositionOnLine = model.widgetState.getPositionOnLine().getPosOnLine();\n  statePositionOnLine = 1 - statePositionOnLine;\n  subtract(handle1WorldPos, handle2WorldPos, vector);\n  multiplyScalar(vector, statePositionOnLine);\n  add(vector, handle2WorldPos, vector);\n  return vector;\n}\nfunction updateTextPosition(model) {\n  var SVGTextState = model.widgetState.getText();\n  SVGTextState.setOrigin(calculateTextPosition(model));\n}\nfunction isHandlePlaced(handleIndex, widgetState) {\n  if (handleIndex === 2) {\n    return widgetState.getMoveHandle().getOrigin() != null;\n  }\n  var handle1Origin = widgetState.getHandle1().getOrigin();\n  if (handleIndex === 0) {\n    return handle1Origin != null;\n  }\n  var handle2Origin = widgetState.getHandle2().getOrigin();\n  return handle1Origin && handle2Origin && !areEquals(handle1Origin, handle2Origin, 0);\n}\n/**\n * Returns the world position of line extremities (placed or not).\n * Returns null if no extremity exist.\n * @param {number} handleIndex 0 or 1\n * @param {object} widgetState state of line widget\n * @param {bool} moveHandle Get move handle position if moveHandle is true and handle is not placed\n */\n\nfunction getPoint(handleIndex, widgetState) {\n  var moveHandle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var handle = moveHandle && !isHandlePlaced(handleIndex, widgetState) ? widgetState.getMoveHandle() : widgetState[\"getHandle\".concat(handleIndex + 1)]();\n  var origin = handle.getOrigin();\n  return origin || null;\n}\n/**\n * Returns the number of handle placed on the scene by checking\n * handle positions. Returns 2 when the user is still\n * placing 2nd handle\n * */\n\nfunction getNumberOfPlacedHandles(widgetState) {\n  var numberOfPlacedHandles = 0;\n  if (isHandlePlaced(0, widgetState)) {\n    numberOfPlacedHandles = 1 + isHandlePlaced(1, widgetState);\n  }\n  return numberOfPlacedHandles;\n}\nexport { calculateTextPosition, getNumberOfPlacedHandles, getPoint, isHandlePlaced, updateTextPosition };","map":{"version":3,"names":["s","subtract","w","multiplyScalar","k","add","B","areEquals","calculateTextPosition","model","vector","handle1WorldPos","widgetState","getHandle1","getOrigin","handle2WorldPos","getHandle2","statePositionOnLine","getPositionOnLine","getPosOnLine","updateTextPosition","SVGTextState","getText","setOrigin","isHandlePlaced","handleIndex","getMoveHandle","handle1Origin","handle2Origin","getPoint","moveHandle","arguments","length","undefined","handle","concat","origin","getNumberOfPlacedHandles","numberOfPlacedHandles"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/LineWidget/helpers.js"],"sourcesContent":["import { s as subtract, w as multiplyScalar, k as add, B as areEquals } from '../../../Common/Core/Math/index.js';\n\nfunction calculateTextPosition(model) {\n  var vector = [0, 0, 0];\n  var handle1WorldPos = model.widgetState.getHandle1().getOrigin();\n  var handle2WorldPos = model.widgetState.getHandle2().getOrigin();\n\n  if (!handle1WorldPos || !handle2WorldPos) {\n    return null;\n  }\n\n  var statePositionOnLine = model.widgetState.getPositionOnLine().getPosOnLine();\n  statePositionOnLine = 1 - statePositionOnLine;\n  subtract(handle1WorldPos, handle2WorldPos, vector);\n  multiplyScalar(vector, statePositionOnLine);\n  add(vector, handle2WorldPos, vector);\n  return vector;\n}\nfunction updateTextPosition(model) {\n  var SVGTextState = model.widgetState.getText();\n  SVGTextState.setOrigin(calculateTextPosition(model));\n}\nfunction isHandlePlaced(handleIndex, widgetState) {\n  if (handleIndex === 2) {\n    return widgetState.getMoveHandle().getOrigin() != null;\n  }\n\n  var handle1Origin = widgetState.getHandle1().getOrigin();\n\n  if (handleIndex === 0) {\n    return handle1Origin != null;\n  }\n\n  var handle2Origin = widgetState.getHandle2().getOrigin();\n  return handle1Origin && handle2Origin && !areEquals(handle1Origin, handle2Origin, 0);\n}\n/**\n * Returns the world position of line extremities (placed or not).\n * Returns null if no extremity exist.\n * @param {number} handleIndex 0 or 1\n * @param {object} widgetState state of line widget\n * @param {bool} moveHandle Get move handle position if moveHandle is true and handle is not placed\n */\n\nfunction getPoint(handleIndex, widgetState) {\n  var moveHandle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var handle = moveHandle && !isHandlePlaced(handleIndex, widgetState) ? widgetState.getMoveHandle() : widgetState[\"getHandle\".concat(handleIndex + 1)]();\n  var origin = handle.getOrigin();\n  return origin || null;\n}\n/**\n * Returns the number of handle placed on the scene by checking\n * handle positions. Returns 2 when the user is still\n * placing 2nd handle\n * */\n\nfunction getNumberOfPlacedHandles(widgetState) {\n  var numberOfPlacedHandles = 0;\n\n  if (isHandlePlaced(0, widgetState)) {\n    numberOfPlacedHandles = 1 + isHandlePlaced(1, widgetState);\n  }\n\n  return numberOfPlacedHandles;\n}\n\nexport { calculateTextPosition, getNumberOfPlacedHandles, getPoint, isHandlePlaced, updateTextPosition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}