{"ast":null,"code":"import macro from '../../macros.js';\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkOpenGLTextureUnitManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTextureUnitManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------\n  // Description:\n  // Delete the allocation table and check if it is not called before\n  // all the texture units have been released.\n\n  publicAPI.deleteTable = function () {\n    for (var i = 0; i < model.numberOfTextureUnits; ++i) {\n      if (model.textureUnits[i] === true) {\n        vtkErrorMacro('some texture units  were not properly released');\n      }\n    }\n    model.textureUnits = [];\n    model.numberOfTextureUnits = 0;\n  }; // ----------------------------------------------------------------------------\n\n  publicAPI.setContext = function (ctx) {\n    if (model.context !== ctx) {\n      if (model.context !== 0) {\n        publicAPI.deleteTable();\n      }\n      model.context = ctx;\n      if (model.context) {\n        model.numberOfTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\n        for (var i = 0; i < model.numberOfTextureUnits; ++i) {\n          model.textureUnits[i] = false;\n        }\n      }\n      publicAPI.modified();\n    }\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Reserve a texture unit. It returns its number.\n  // It returns -1 if the allocation failed (because there are no more\n  // texture units left).\n  // \\post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())\n  // \\post allocated: result==-1 || this->IsAllocated(result)\n\n  publicAPI.allocate = function () {\n    for (var i = 0; i < model.numberOfTextureUnits; i++) {\n      if (!publicAPI.isAllocated(i)) {\n        model.textureUnits[i] = true;\n        return i;\n      }\n    }\n    return -1;\n  };\n  publicAPI.allocateUnit = function (unit) {\n    if (publicAPI.isAllocated(unit)) {\n      return -1;\n    }\n    model.textureUnits[unit] = true;\n    return unit;\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Tell if texture unit `textureUnitId' is already allocated.\n  // \\pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n\n  publicAPI.isAllocated = function (textureUnitId) {\n    return model.textureUnits[textureUnitId];\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Release a texture unit.\n  // \\pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  // \\pre allocated_id: this->IsAllocated(textureUnitId)\n\n  publicAPI.free = function (val) {\n    model.textureUnits[val] = false;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  context: null,\n  numberOfTextureUnits: 0,\n  textureUnits: 0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  model.textureUnits = []; // Build VTK API\n\n  macro.get(publicAPI, model, ['numberOfTextureUnits']);\n  macro.setGet(publicAPI, model, ['context']); // Object methods\n\n  vtkOpenGLTextureUnitManager(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------\n\nvar vtkTextureUnitManager = {\n  newInstance: newInstance,\n  extend: extend\n};\nexport { vtkTextureUnitManager as default, extend, newInstance };","map":{"version":3,"names":["macro","vtkErrorMacro","vtkOpenGLTextureUnitManager","publicAPI","model","classHierarchy","push","deleteTable","i","numberOfTextureUnits","textureUnits","setContext","ctx","context","getParameter","MAX_TEXTURE_IMAGE_UNITS","modified","allocate","isAllocated","allocateUnit","unit","textureUnitId","free","val","DEFAULT_VALUES","extend","initialValues","arguments","length","undefined","Object","assign","obj","get","setGet","newInstance","vtkTextureUnitManager","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/TextureUnitManager.js"],"sourcesContent":["import macro from '../../macros.js';\n\nvar vtkErrorMacro = macro.vtkErrorMacro; // ----------------------------------------------------------------------------\n// vtkOpenGLTextureUnitManager methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLTextureUnitManager(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------\n  // Description:\n  // Delete the allocation table and check if it is not called before\n  // all the texture units have been released.\n\n  publicAPI.deleteTable = function () {\n    for (var i = 0; i < model.numberOfTextureUnits; ++i) {\n      if (model.textureUnits[i] === true) {\n        vtkErrorMacro('some texture units  were not properly released');\n      }\n    }\n\n    model.textureUnits = [];\n    model.numberOfTextureUnits = 0;\n  }; // ----------------------------------------------------------------------------\n\n\n  publicAPI.setContext = function (ctx) {\n    if (model.context !== ctx) {\n      if (model.context !== 0) {\n        publicAPI.deleteTable();\n      }\n\n      model.context = ctx;\n\n      if (model.context) {\n        model.numberOfTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);\n\n        for (var i = 0; i < model.numberOfTextureUnits; ++i) {\n          model.textureUnits[i] = false;\n        }\n      }\n\n      publicAPI.modified();\n    }\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Reserve a texture unit. It returns its number.\n  // It returns -1 if the allocation failed (because there are no more\n  // texture units left).\n  // \\post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())\n  // \\post allocated: result==-1 || this->IsAllocated(result)\n\n\n  publicAPI.allocate = function () {\n    for (var i = 0; i < model.numberOfTextureUnits; i++) {\n      if (!publicAPI.isAllocated(i)) {\n        model.textureUnits[i] = true;\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  publicAPI.allocateUnit = function (unit) {\n    if (publicAPI.isAllocated(unit)) {\n      return -1;\n    }\n\n    model.textureUnits[unit] = true;\n    return unit;\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Tell if texture unit `textureUnitId' is already allocated.\n  // \\pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n\n\n  publicAPI.isAllocated = function (textureUnitId) {\n    return model.textureUnits[textureUnitId];\n  }; // ----------------------------------------------------------------------------\n  // Description:\n  // Release a texture unit.\n  // \\pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()\n  // \\pre allocated_id: this->IsAllocated(textureUnitId)\n\n\n  publicAPI.free = function (val) {\n    model.textureUnits[val] = false;\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  numberOfTextureUnits: 0,\n  textureUnits: 0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  model.textureUnits = []; // Build VTK API\n\n  macro.get(publicAPI, model, ['numberOfTextureUnits']);\n  macro.setGet(publicAPI, model, ['context']); // Object methods\n\n  vtkOpenGLTextureUnitManager(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = macro.newInstance(extend, 'vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------\n\nvar vtkTextureUnitManager = {\n  newInstance: newInstance,\n  extend: extend\n};\n\nexport { vtkTextureUnitManager as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}