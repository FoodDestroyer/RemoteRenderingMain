{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1, obj, setGet, chain, vtkWarningMacro as vtkWarningMacro$1, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport { mat4, mat3, vec3 } from 'gl-matrix';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport vtkHelper from './Helper.js';\nimport { u as uninitializeBounds } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { Wrap, Filter } from './Texture/Constants.js';\nimport { InterpolationType, OpacityMode } from '../Core/VolumeProperty/Constants.js';\nimport { BlendMode } from '../Core/VolumeMapper/Constants.js';\nimport { v as vtkVolumeVS } from './glsl/vtkVolumeVS.glsl.js';\nimport { v as vtkVolumeFS } from './glsl/vtkVolumeFS.glsl.js';\nimport { registerOverride } from './ViewNodeFactory.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar vtkWarningMacro = vtkWarningMacro$1,\n  vtkErrorMacro = vtkErrorMacro$1; // TODO: Do we want this in some shared utility? Shouldwe just use lodash.isEqual\n\nfunction arrayEquals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n} // ----------------------------------------------------------------------------\n// vtkOpenGLVolumeMapper methods\n// ----------------------------------------------------------------------------\n\nfunction vtkOpenGLVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVolumeMapper');\n  publicAPI.buildPass = function () {\n    model.zBufferTexture = null;\n  }; // ohh someone is doing a zbuffer pass, use that for\n  // intermixed volume rendering\n\n  publicAPI.zBufferPass = function (prepass, renderPass) {\n    if (prepass) {\n      var zbt = renderPass.getZBufferTexture();\n      if (zbt !== model.zBufferTexture) {\n        model.zBufferTexture = zbt;\n      }\n    }\n  };\n  publicAPI.opaqueZBufferPass = function (prepass, renderPass) {\n    return publicAPI.zBufferPass(prepass, renderPass);\n  }; // Renders myself\n\n  publicAPI.volumePass = function (prepass, renderPass) {\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.jitterTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow); // Per Component?\n\n      model.scalarTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.opacityTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.openGLVolume = publicAPI.getFirstAncestorOfType('vtkOpenGLVolume');\n      var actor = model.openGLVolume.getRenderable();\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n      var ren = model._openGLRenderer.getRenderable();\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n      publicAPI.renderPiece(ren, actor);\n    }\n  };\n  publicAPI.buildShaders = function (shaders, ren, actor) {\n    publicAPI.getShaderTemplate(shaders, ren, actor);\n    publicAPI.replaceShaderValues(shaders, ren, actor);\n  };\n  publicAPI.getShaderTemplate = function (shaders, ren, actor) {\n    shaders.Vertex = vtkVolumeVS;\n    shaders.Fragment = vtkVolumeFS;\n    shaders.Geometry = '';\n  };\n  publicAPI.replaceShaderValues = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment; // define some values in the shader\n\n    var iType = actor.getProperty().getInterpolationType();\n    if (iType === InterpolationType.LINEAR) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TrilinearOn', '#define vtkTrilinearOn').result;\n    }\n    var vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n    if (vtkImageLabelOutline === true) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ImageLabelOutlineOn', '#define vtkImageLabelOutlineOn').result;\n    }\n    var numComp = model.scalarTexture.getComponents();\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::NumComponents', \"#define vtkNumComponents \".concat(numComp)).result;\n    var iComps = actor.getProperty().getIndependentComponents();\n    if (iComps) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::IndependentComponentsOn', '#define vtkIndependentComponentsOn').result; // Define any proportional components\n\n      var proportionalComponents = [];\n      for (var nc = 0; nc < numComp; nc++) {\n        if (actor.getProperty().getOpacityMode(nc) === OpacityMode.PROPORTIONAL) {\n          proportionalComponents.push(\"#define vtkComponent\".concat(nc, \"Proportional\"));\n        }\n      }\n      if (proportionalComponents.length > 0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkProportionalComponents', proportionalComponents.join('\\n')).result;\n      }\n    } // WebGL only supports loops over constants\n    // and does not support while loops so we\n    // have to hard code how many steps/samples to take\n    // We do a break so most systems will gracefully\n    // early terminate, but it is always possible\n    // a system will execute every step regardless\n\n    var ext = model.currentInput.getSpatialExtent();\n    var spc = model.currentInput.getSpacing();\n    var vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    var maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::MaximumSamplesValue', \"\".concat(Math.ceil(maxSamples))).result; // set light complexity\n\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LightComplexity', \"#define vtkLightComplexity \".concat(model.lastLightComplexity)).result; // set shadow blending flag\n\n    if (model.lastLightComplexity > 0) {\n      if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::VolumeShadowOn', \"#define VolumeShadowOn\").result;\n      }\n      if (model.renderable.getVolumetricScatteringBlending() < 1.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::SurfaceShadowOn', \"#define SurfaceShadowOn\").result;\n      }\n      if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::localAmbientOcclusionOn', \"#define localAmbientOcclusionOn\").result;\n      }\n    } // if using gradient opacity define that\n\n    model.gopacity = actor.getProperty().getUseGradientOpacity(0);\n    for (var _nc = 1; iComps && !model.gopacity && _nc < numComp; ++_nc) {\n      if (actor.getProperty().getUseGradientOpacity(_nc)) {\n        model.gopacity = true;\n      }\n    }\n    if (model.gopacity) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::GradientOpacityOn', '#define vtkGradientOpacityOn').result;\n    } // set normal from density\n\n    if (model.renderable.getComputeNormalFromOpacity()) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkComputeNormalFromOpacity', \"#define vtkComputeNormalFromOpacity\").result;\n    } // if we have a ztexture then declare it and use it\n\n    if (model.zBufferTexture !== null) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', ['uniform sampler2D zBufferTexture;', 'uniform float vpWidth;', 'uniform float vpHeight;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['vec4 depthVec = texture2D(zBufferTexture, vec2(gl_FragCoord.x / vpWidth, gl_FragCoord.y/vpHeight));', 'float zdepth = (depthVec.r*256.0 + depthVec.g)/257.0;', 'zdepth = zdepth * 2.0 - 1.0;', 'if (cameraParallel == 0) {', 'zdepth = -2.0 * camFar * camNear / (zdepth*(camFar-camNear)-(camFar+camNear)) - camNear;}', 'else {', 'zdepth = (zdepth + 1.0) * 0.5 * (camFar - camNear);}\\n', 'zdepth = -zdepth/rayDir.z;', 'dists.y = min(zdepth,dists.y);']).result;\n    } // Set the BlendMode approach\n\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::BlendMode', \"\".concat(model.renderable.getBlendMode())).result;\n    shaders.Fragment = FSSource;\n    publicAPI.replaceShaderLight(shaders, ren, actor);\n    publicAPI.replaceShaderClippingPlane(shaders, ren, actor);\n  };\n  publicAPI.replaceShaderLight = function (shaders, ren, actor) {\n    if (model.lastLightComplexity === 0) {\n      return;\n    }\n    var FSSource = shaders.Fragment; // check for shadow maps - not implemented yet, skip\n    // const shadowFactor = '';\n    // to-do: single out the case when complexity = 1\n    // only account for lights that are switched on\n\n    var lightNum = 0;\n    ren.getLights().forEach(function (light) {\n      if (light.getSwitch()) {\n        lightNum += 1;\n      }\n    });\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', [\"uniform int lightNum;\", \"uniform bool twoSidedLighting;\", \"uniform vec3 lightColor[\".concat(lightNum, \"];\"), \"uniform vec3 lightDirectionVC[\".concat(lightNum, \"]; // normalized\"), \"uniform vec3 lightHalfAngleVC[\".concat(lightNum, \"];\"), '//VTK::Light::Dec'], false).result; // support any number of lights\n\n    if (model.lastLightComplexity === 3) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', [\"uniform vec3 lightPositionVC[\".concat(lightNum, \"];\"), \"uniform vec3 lightAttenuation[\".concat(lightNum, \"];\"), \"uniform float lightConeAngle[\".concat(lightNum, \"];\"), \"uniform float lightExponent[\".concat(lightNum, \"];\"), \"uniform int lightPositional[\".concat(lightNum, \"];\")], false).result;\n    }\n    if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::VolumeShadow::Dec', [\"uniform float volumetricScatteringBlending;\", \"uniform float giReach;\", \"uniform float volumeShadowSamplingDistFactor;\", \"uniform float anisotropy;\", \"uniform float anisotropy2;\"], false).result;\n    }\n    if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LAO::Dec', [\"uniform int kernelRadius;\", \"uniform vec2 kernelSample[\".concat(model.renderable.getLAOKernelRadius(), \"];\"), \"uniform int kernelSize;\"], false).result;\n    }\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.replaceShaderClippingPlane = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment;\n    if (model.renderable.getClippingPlanes().length > 0) {\n      var clipPlaneSize = model.renderable.getClippingPlanes().length;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ClipPlane::Dec', [\"uniform vec3 vClipPlaneNormals[6];\", \"uniform float vClipPlaneDistances[6];\", \"uniform vec3 vClipPlaneOrigins[6];\", \"uniform int clip_numPlanes;\", '//VTK::ClipPlane::Dec', '#define vtkClippingPlanesOn'], false).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ClipPlane::Impl', [\"for(int i = 0; i < \".concat(clipPlaneSize, \"; i++) {\"), '  float rayDirRatio = dot(rayDir, vClipPlaneNormals[i]);', '  float equationResult = dot(vertexVCVSOutput, vClipPlaneNormals[i]) + vClipPlaneDistances[i];', '  if (rayDirRatio == 0.0)', '  {', '    if (equationResult < 0.0) dists.x = dists.y;', '    continue;', '  }', '  float result = -1.0 * equationResult / rayDirRatio;', '  if (rayDirRatio < 0.0) dists.y = min(dists.y, result);', '  else dists.x = max(dists.x, result);', '}', '//VTK::ClipPlane::Impl'], false).result;\n    }\n    shaders.Fragment = FSSource;\n  };\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    // do we need lighting?\n    var lightComplexity = 0;\n    if (actor.getProperty().getShade() && model.renderable.getBlendMode() === BlendMode.COMPOSITE_BLEND) {\n      // consider the lighting complexity to determine which case applies\n      // simple headlight, Light Kit, the whole feature set of VTK\n      lightComplexity = 0;\n      model.numberOfLights = 0;\n      ren.getLights().forEach(function (light) {\n        var status = light.getSwitch();\n        if (status > 0) {\n          model.numberOfLights++;\n          if (lightComplexity === 0) {\n            lightComplexity = 1;\n          }\n        }\n        if (lightComplexity === 1 && (model.numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {\n          lightComplexity = 2;\n        }\n        if (lightComplexity < 3 && light.getPositional()) {\n          lightComplexity = 3;\n        }\n      });\n    }\n    var needRebuild = false;\n    if (model.lastLightComplexity !== lightComplexity) {\n      model.lastLightComplexity = lightComplexity;\n      needRebuild = true;\n    }\n    var numComp = model.scalarTexture.getComponents();\n    var iComps = actor.getProperty().getIndependentComponents();\n    var usesProportionalComponents = false;\n    var proportionalComponents = [];\n    if (iComps) {\n      // Define any proportional components\n      for (var nc = 0; nc < numComp; nc++) {\n        proportionalComponents.push(actor.getProperty().getOpacityMode(nc));\n      }\n      if (proportionalComponents.length > 0) {\n        usesProportionalComponents = true;\n      }\n    }\n    var ext = model.currentInput.getSpatialExtent();\n    var spc = model.currentInput.getSpacing();\n    var vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    var maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    var state = {\n      interpolationType: actor.getProperty().getInterpolationType(),\n      useLabelOutline: actor.getProperty().getUseLabelOutline(),\n      numComp: numComp,\n      usesProportionalComponents: usesProportionalComponents,\n      iComps: iComps,\n      maxSamples: maxSamples,\n      useGradientOpacity: actor.getProperty().getUseGradientOpacity(0),\n      blendMode: model.renderable.getBlendMode(),\n      proportionalComponents: proportionalComponents\n    }; // We only need to rebuild the shader if one of these variables has changed,\n    // since they are used in the shader template replacement step.\n\n    if (!model.previousState || model.previousState.interpolationType !== state.interpolationType || model.previousState.useLabelOutline !== state.useLabelOutline || model.previousState.numComp !== state.numComp || model.previousState.usesProportionalComponents !== state.usesProportionalComponents || model.previousState.iComps !== state.iComps || model.previousState.maxSamples !== state.maxSamples || model.previousState.useGradientOpacity !== state.useGradientOpacity || model.previousState.blendMode !== state.blendMode || !arrayEquals(model.previousState.proportionalComponents, state.proportionalComponents)) {\n      model.previousState = _objectSpread({}, state);\n      return true;\n    } // has something changed that would require us to recreate the shader?\n\n    if (cellBO.getProgram() === 0 || needRebuild || model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || !!model.lastZBufferTexture !== !!model.zBufferTexture || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime()) {\n      model.lastZBufferTexture = model.zBufferTexture;\n      return true;\n    }\n    return false;\n  };\n  publicAPI.updateShaders = function (cellBO, ren, actor) {\n    model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?\n\n    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {\n      var shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed\n\n      var newShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO\n\n      if (newShader !== cellBO.getProgram()) {\n        cellBO.setProgram(newShader); // reset the VAO as the shader has changed\n\n        cellBO.getVAO().releaseGraphicsResources();\n      }\n      cellBO.getShaderSourceTime().modified();\n    } else {\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());\n    }\n    cellBO.getVAO().bind();\n    publicAPI.setMapperShaderParameters(cellBO, ren, actor);\n    publicAPI.setCameraShaderParameters(cellBO, ren, actor);\n    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);\n    publicAPI.getClippingPlaneShaderParameters(cellBO, ren, actor);\n  };\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    // Now to update the VAO too, if necessary.\n    var program = cellBO.getProgram();\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (program.isAttributeUsed('vertexDC')) {\n        if (!cellBO.getVAO().addAttributeArray(program, cellBO.getCABO(), 'vertexDC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexDC in shader VAO.');\n        }\n      }\n      cellBO.getAttributeUpdateTime().modified();\n    }\n    program.setUniformi('texture1', model.scalarTexture.getTextureUnit());\n    program.setUniformf('sampleDistance', publicAPI.getCurrentSampleDistance(ren));\n    var volInfo = model.scalarTexture.getVolumeInfo();\n    var ipScalarRange = model.renderable.getIpScalarRange();\n    var minVals = [];\n    var maxVals = [];\n    for (var i = 0; i < 4; i++) {\n      // convert iprange from 0-1 into data range values\n      minVals[i] = ipScalarRange[0] * volInfo.dataComputedScale[i] + volInfo.dataComputedOffset[i];\n      maxVals[i] = ipScalarRange[1] * volInfo.dataComputedScale[i] + volInfo.dataComputedOffset[i]; // convert data ranges into texture values\n\n      minVals[i] = (minVals[i] - volInfo.offset[i]) / volInfo.scale[i];\n      maxVals[i] = (maxVals[i] - volInfo.offset[i]) / volInfo.scale[i];\n    }\n    program.setUniform4f('ipScalarRangeMin', minVals[0], minVals[1], minVals[2], minVals[3]);\n    program.setUniform4f('ipScalarRangeMax', maxVals[0], maxVals[1], maxVals[2], maxVals[3]); // if we have a zbuffer texture then set it\n\n    if (model.zBufferTexture !== null) {\n      program.setUniformi('zBufferTexture', model.zBufferTexture.getTextureUnit());\n      var size = model._useSmallViewport ? [model._smallViewportWidth, model._smallViewportHeight] : model._openGLRenderWindow.getFramebufferSize();\n      program.setUniformf('vpWidth', size[0]);\n      program.setUniformf('vpHeight', size[1]);\n    }\n  };\n  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {\n    // // [WMVP]C == {world, model, view, projection} coordinates\n    // // E.g., WCPC == world to projection coordinate transformation\n    var keyMats = model.openGLCamera.getKeyMatrices(ren);\n    var actMats = model.openGLVolume.getKeyMatrices();\n    mat4.multiply(model.modelToView, keyMats.wcvc, actMats.mcwc);\n    var program = cellBO.getProgram();\n    var cam = model.openGLCamera.getRenderable();\n    var crange = cam.getClippingRange();\n    program.setUniformf('camThick', crange[1] - crange[0]);\n    program.setUniformf('camNear', crange[0]);\n    program.setUniformf('camFar', crange[1]);\n    var bounds = model.currentInput.getBounds();\n    var dims = model.currentInput.getDimensions(); // compute the viewport bounds of the volume\n    // we will only render those fragments.\n\n    var pos = new Float64Array(3);\n    var dir = new Float64Array(3);\n    var dcxmin = 1.0;\n    var dcxmax = -1.0;\n    var dcymin = 1.0;\n    var dcymax = -1.0;\n    for (var i = 0; i < 8; ++i) {\n      vec3.set(pos, bounds[i % 2], bounds[2 + Math.floor(i / 2) % 2], bounds[4 + Math.floor(i / 4)]);\n      vec3.transformMat4(pos, pos, model.modelToView);\n      if (!cam.getParallelProjection()) {\n        vec3.normalize(dir, pos); // now find the projection of this point onto a\n        // nearZ distance plane. Since the camera is at 0,0,0\n        // in VC the ray is just t*pos and\n        // t is -nearZ/dir.z\n        // intersection becomes pos.x/pos.z\n\n        var t = -crange[0] / pos[2];\n        vec3.scale(pos, dir, t);\n      } // now convert to DC\n\n      vec3.transformMat4(pos, pos, keyMats.vcpc);\n      dcxmin = Math.min(pos[0], dcxmin);\n      dcxmax = Math.max(pos[0], dcxmax);\n      dcymin = Math.min(pos[1], dcymin);\n      dcymax = Math.max(pos[1], dcymax);\n    }\n    program.setUniformf('dcxmin', dcxmin);\n    program.setUniformf('dcxmax', dcxmax);\n    program.setUniformf('dcymin', dcymin);\n    program.setUniformf('dcymax', dcymax);\n    if (program.isUniformUsed('cameraParallel')) {\n      program.setUniformi('cameraParallel', cam.getParallelProjection());\n    }\n    var ext = model.currentInput.getSpatialExtent();\n    var spc = model.currentInput.getSpacing();\n    var vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    program.setUniform3f('vSpacing', spc[0], spc[1], spc[2]);\n    vec3.set(pos, ext[0], ext[2], ext[4]);\n    model.currentInput.indexToWorldVec3(pos, pos);\n    vec3.transformMat4(pos, pos, model.modelToView);\n    program.setUniform3f('vOriginVC', pos[0], pos[1], pos[2]); // apply the image directions\n\n    var i2wmat4 = model.currentInput.getIndexToWorld();\n    mat4.multiply(model.idxToView, model.modelToView, i2wmat4);\n    mat3.multiply(model.idxNormalMatrix, keyMats.normalMatrix, actMats.normalMatrix);\n    mat3.multiply(model.idxNormalMatrix, model.idxNormalMatrix, model.currentInput.getDirectionByReference());\n    var maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    if (maxSamples > model.renderable.getMaximumSamplesPerRay()) {\n      vtkWarningMacro(\"The number of steps required \".concat(Math.ceil(maxSamples), \" is larger than the\\n        specified maximum number of steps \").concat(model.renderable.getMaximumSamplesPerRay(), \".\\n        Please either change the\\n        volumeMapper sampleDistance or its maximum number of samples.\"));\n    }\n    var vctoijk = new Float64Array(3);\n    vec3.set(vctoijk, 1.0, 1.0, 1.0);\n    vec3.divide(vctoijk, vctoijk, vsize);\n    program.setUniform3f('vVCToIJK', vctoijk[0], vctoijk[1], vctoijk[2]);\n    program.setUniform3i('volumeDimensions', dims[0], dims[1], dims[2]);\n    if (!model._openGLRenderWindow.getWebgl2()) {\n      var volInfo = model.scalarTexture.getVolumeInfo();\n      program.setUniformf('texWidth', model.scalarTexture.getWidth());\n      program.setUniformf('texHeight', model.scalarTexture.getHeight());\n      program.setUniformi('xreps', volInfo.xreps);\n      program.setUniformi('xstride', volInfo.xstride);\n      program.setUniformi('ystride', volInfo.ystride);\n    } // map normals through normal matrix\n    // then use a point on the plane to compute the distance\n\n    var normal = new Float64Array(3);\n    var pos2 = new Float64Array(3);\n    for (var _i = 0; _i < 6; ++_i) {\n      switch (_i) {\n        case 1:\n          vec3.set(normal, -1.0, 0.0, 0.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n        case 2:\n          vec3.set(normal, 0.0, 1.0, 0.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n        case 3:\n          vec3.set(normal, 0.0, -1.0, 0.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n        case 4:\n          vec3.set(normal, 0.0, 0.0, 1.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n        case 5:\n          vec3.set(normal, 0.0, 0.0, -1.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n        case 0:\n        default:\n          vec3.set(normal, 1.0, 0.0, 0.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n      }\n      vec3.transformMat3(normal, normal, model.idxNormalMatrix);\n      vec3.transformMat4(pos2, pos2, model.idxToView);\n      var dist = -1.0 * vec3.dot(pos2, normal); // we have the plane in view coordinates\n      // specify the planes in view coordinates\n\n      program.setUniform3f(\"vPlaneNormal\".concat(_i), normal[0], normal[1], normal[2]);\n      program.setUniformf(\"vPlaneDistance\".concat(_i), dist);\n    }\n    if (actor.getProperty().getUseLabelOutline()) {\n      var image = model.currentInput;\n      var worldToIndex = image.getWorldToIndex();\n      program.setUniformMatrix('vWCtoIDX', worldToIndex);\n      var camera = ren.getActiveCamera();\n      var _camera$getClippingRa = camera.getClippingRange(),\n        _camera$getClippingRa2 = _slicedToArray(_camera$getClippingRa, 2),\n        cRange0 = _camera$getClippingRa2[0],\n        cRange1 = _camera$getClippingRa2[1];\n      var distance = camera.getDistance(); // set the clipping range to be model.distance and model.distance + 0.1\n      // since we use the in the keyMats.wcpc (world to projection) matrix\n      // the projection matrix calculation relies on the clipping range to be\n      // set correctly. This is done inside the interactorStyleMPRSlice which\n      // limits use cases where the interactor style is not used.\n\n      camera.setClippingRange(distance, distance + 0.1);\n      var labelOutlineKeyMats = model.openGLCamera.getKeyMatrices(ren); // Get the projection coordinate to world coordinate transformation matrix.\n\n      mat4.invert(model.projectionToWorld, labelOutlineKeyMats.wcpc); // reset the clipping range since the keyMats are cached\n\n      camera.setClippingRange(cRange0, cRange1); // to re compute the matrices for the current camera and cache them\n\n      model.openGLCamera.getKeyMatrices(ren);\n      program.setUniformMatrix('PCWCMatrix', model.projectionToWorld);\n      var size = publicAPI.getRenderTargetSize();\n      program.setUniformf('vpWidth', size[0]);\n      program.setUniformf('vpHeight', size[1]);\n      var offset = publicAPI.getRenderTargetOffset();\n      program.setUniformf('vpOffsetX', offset[0] / size[0]);\n      program.setUniformf('vpOffsetY', offset[1] / size[1]);\n    }\n    mat4.invert(model.projectionToView, keyMats.vcpc);\n    program.setUniformMatrix('PCVCMatrix', model.projectionToView); // handle lighting values\n\n    if (model.lastLightComplexity === 0) {\n      return;\n    }\n    var lightNum = 0;\n    var lightColor = [];\n    var lightDir = [];\n    var halfAngle = [];\n    ren.getLights().forEach(function (light) {\n      var status = light.getSwitch();\n      if (status > 0) {\n        var dColor = light.getColor();\n        var intensity = light.getIntensity();\n        lightColor[0 + lightNum * 3] = dColor[0] * intensity;\n        lightColor[1 + lightNum * 3] = dColor[1] * intensity;\n        lightColor[2 + lightNum * 3] = dColor[2] * intensity;\n        var ldir = light.getDirection();\n        vec3.set(normal, ldir[0], ldir[1], ldir[2]);\n        vec3.transformMat3(normal, normal, keyMats.normalMatrix); // in view coordinat\n\n        vec3.normalize(normal, normal);\n        lightDir[0 + lightNum * 3] = normal[0];\n        lightDir[1 + lightNum * 3] = normal[1];\n        lightDir[2 + lightNum * 3] = normal[2]; // camera DOP is 0,0,-1.0 in VC\n\n        halfAngle[0 + lightNum * 3] = -0.5 * normal[0];\n        halfAngle[1 + lightNum * 3] = -0.5 * normal[1];\n        halfAngle[2 + lightNum * 3] = -0.5 * (normal[2] - 1.0);\n        lightNum++;\n      }\n    });\n    program.setUniformi('twoSidedLighting', ren.getTwoSidedLighting());\n    program.setUniformi('lightNum', lightNum);\n    program.setUniform3fv('lightColor', lightColor);\n    program.setUniform3fv('lightDirectionVC', lightDir);\n    program.setUniform3fv('lightHalfAngleVC', halfAngle);\n    if (model.lastLightComplexity === 3) {\n      lightNum = 0;\n      var lightPositionVC = [];\n      var lightAttenuation = [];\n      var lightConeAngle = [];\n      var lightExponent = [];\n      var lightPositional = [];\n      ren.getLights().forEach(function (light) {\n        var status = light.getSwitch();\n        if (status > 0) {\n          var attenuation = light.getAttenuationValues();\n          lightAttenuation[0 + lightNum * 3] = attenuation[0];\n          lightAttenuation[1 + lightNum * 3] = attenuation[1];\n          lightAttenuation[2 + lightNum * 3] = attenuation[2];\n          lightExponent[lightNum] = light.getExponent();\n          lightConeAngle[lightNum] = light.getConeAngle();\n          lightPositional[lightNum] = light.getPositional();\n          var lp = light.getTransformedPosition();\n          vec3.transformMat4(lp, lp, model.modelToView);\n          lightPositionVC[0 + lightNum * 3] = lp[0];\n          lightPositionVC[1 + lightNum * 3] = lp[1];\n          lightPositionVC[2 + lightNum * 3] = lp[2];\n          lightNum += 1;\n        }\n      });\n      program.setUniform3fv('lightPositionVC', lightPositionVC);\n      program.setUniform3fv('lightAttenuation', lightAttenuation);\n      program.setUniformfv('lightConeAngle', lightConeAngle);\n      program.setUniformfv('lightExponent', lightExponent);\n      program.setUniformiv('lightPositional', lightPositional);\n    }\n    if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n      program.setUniformf('giReach', model.renderable.getGlobalIlluminationReach());\n      program.setUniformf('volumetricScatteringBlending', model.renderable.getVolumetricScatteringBlending());\n      program.setUniformf('volumeShadowSamplingDistFactor', model.renderable.getVolumeShadowSamplingDistFactor());\n      program.setUniformf('anisotropy', model.renderable.getAnisotropy());\n      program.setUniformf('anisotropy2', Math.pow(model.renderable.getAnisotropy(), 2.0));\n    }\n    if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n      var ks = model.renderable.getLAOKernelSize();\n      program.setUniformi('kernelSize', ks);\n      var kernelSample = [];\n      for (var _i2 = 0; _i2 < ks; _i2++) {\n        kernelSample[_i2 * 2] = Math.random() * 0.5;\n        kernelSample[_i2 * 2 + 1] = Math.random() * 0.5;\n      }\n      program.setUniform2fv('kernelSample', kernelSample);\n      program.setUniformi('kernelRadius', model.renderable.getLAOKernelRadius());\n    }\n  };\n  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram();\n    program.setUniformi('ctexture', model.colorTexture.getTextureUnit());\n    program.setUniformi('otexture', model.opacityTexture.getTextureUnit());\n    program.setUniformi('jtexture', model.jitterTexture.getTextureUnit());\n    var volInfo = model.scalarTexture.getVolumeInfo();\n    var vprop = actor.getProperty(); // set the component mix when independent\n\n    var numComp = model.scalarTexture.getComponents();\n    var iComps = actor.getProperty().getIndependentComponents();\n    if (iComps && numComp >= 2) {\n      for (var i = 0; i < numComp; i++) {\n        program.setUniformf(\"mix\".concat(i), actor.getProperty().getComponentWeight(i));\n      }\n    } // three levels of shift scale combined into one\n    // for performance in the fragment shader\n\n    for (var _i3 = 0; _i3 < numComp; _i3++) {\n      var target = iComps ? _i3 : 0;\n      var sscale = volInfo.scale[_i3];\n      var ofun = vprop.getScalarOpacity(target);\n      var oRange = ofun.getRange();\n      var oscale = sscale / (oRange[1] - oRange[0]);\n      var oshift = (volInfo.offset[_i3] - oRange[0]) / (oRange[1] - oRange[0]);\n      program.setUniformf(\"oshift\".concat(_i3), oshift);\n      program.setUniformf(\"oscale\".concat(_i3), oscale);\n      var cfun = vprop.getRGBTransferFunction(target);\n      var cRange = cfun.getRange();\n      var cshift = (volInfo.offset[_i3] - cRange[0]) / (cRange[1] - cRange[0]);\n      var cScale = sscale / (cRange[1] - cRange[0]);\n      program.setUniformf(\"cshift\".concat(_i3), cshift);\n      program.setUniformf(\"cscale\".concat(_i3), cScale);\n    }\n    if (model.gopacity) {\n      if (iComps) {\n        for (var nc = 0; nc < numComp; ++nc) {\n          var _sscale = volInfo.scale[nc];\n          var useGO = vprop.getUseGradientOpacity(nc);\n          if (useGO) {\n            var gomin = vprop.getGradientOpacityMinimumOpacity(nc);\n            var gomax = vprop.getGradientOpacityMaximumOpacity(nc);\n            program.setUniformf(\"gomin\".concat(nc), gomin);\n            program.setUniformf(\"gomax\".concat(nc), gomax);\n            var goRange = [vprop.getGradientOpacityMinimumValue(nc), vprop.getGradientOpacityMaximumValue(nc)];\n            program.setUniformf(\"goscale\".concat(nc), _sscale * (gomax - gomin) / (goRange[1] - goRange[0]));\n            program.setUniformf(\"goshift\".concat(nc), -goRange[0] * (gomax - gomin) / (goRange[1] - goRange[0]) + gomin);\n          } else {\n            program.setUniformf(\"gomin\".concat(nc), 1.0);\n            program.setUniformf(\"gomax\".concat(nc), 1.0);\n            program.setUniformf(\"goscale\".concat(nc), 0.0);\n            program.setUniformf(\"goshift\".concat(nc), 1.0);\n          }\n        }\n      } else {\n        var _sscale2 = volInfo.scale[numComp - 1];\n        var _gomin = vprop.getGradientOpacityMinimumOpacity(0);\n        var _gomax = vprop.getGradientOpacityMaximumOpacity(0);\n        program.setUniformf('gomin0', _gomin);\n        program.setUniformf('gomax0', _gomax);\n        var _goRange = [vprop.getGradientOpacityMinimumValue(0), vprop.getGradientOpacityMaximumValue(0)];\n        program.setUniformf('goscale0', _sscale2 * (_gomax - _gomin) / (_goRange[1] - _goRange[0]));\n        program.setUniformf('goshift0', -_goRange[0] * (_gomax - _gomin) / (_goRange[1] - _goRange[0]) + _gomin);\n      }\n    }\n    var vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n    if (vtkImageLabelOutline === true) {\n      var labelOutlineThickness = actor.getProperty().getLabelOutlineThickness();\n      var labelOutlineOpacity = actor.getProperty().getLabelOutlineOpacity();\n      program.setUniformi('outlineThickness', labelOutlineThickness);\n      program.setUniformf('outlineOpacity', labelOutlineOpacity);\n    }\n    if (model.lastLightComplexity > 0) {\n      program.setUniformf('vAmbient', vprop.getAmbient());\n      program.setUniformf('vDiffuse', vprop.getDiffuse());\n      program.setUniformf('vSpecular', vprop.getSpecular());\n      program.setUniformf('vSpecularPower', vprop.getSpecularPower());\n    }\n  };\n  publicAPI.getClippingPlaneShaderParameters = function (cellBO, ren, actor) {\n    if (model.renderable.getClippingPlanes().length > 0) {\n      var keyMats = model.openGLCamera.getKeyMatrices(ren);\n      var clipPlaneNormals = [];\n      var clipPlaneDistances = [];\n      var clipPlaneOrigins = [];\n      var clipPlanes = model.renderable.getClippingPlanes();\n      var clipPlaneSize = clipPlanes.length;\n      for (var i = 0; i < clipPlaneSize; ++i) {\n        var clipPlaneNormal = clipPlanes[i].getNormal();\n        var clipPlanePos = clipPlanes[i].getOrigin();\n        vec3.transformMat3(clipPlaneNormal, clipPlaneNormal, keyMats.normalMatrix);\n        vec3.transformMat4(clipPlanePos, clipPlanePos, keyMats.wcvc);\n        var clipPlaneDist = -1.0 * vec3.dot(clipPlanePos, clipPlaneNormal);\n        clipPlaneNormals.push(clipPlaneNormal[0]);\n        clipPlaneNormals.push(clipPlaneNormal[1]);\n        clipPlaneNormals.push(clipPlaneNormal[2]);\n        clipPlaneDistances.push(clipPlaneDist);\n        clipPlaneOrigins.push(clipPlanePos[0]);\n        clipPlaneOrigins.push(clipPlanePos[1]);\n        clipPlaneOrigins.push(clipPlanePos[2]);\n      }\n      var program = cellBO.getProgram();\n      program.setUniform3fv(\"vClipPlaneNormals\", clipPlaneNormals);\n      program.setUniformfv(\"vClipPlaneDistances\", clipPlaneDistances);\n      program.setUniform3fv(\"vClipPlaneOrigins\", clipPlaneOrigins);\n      program.setUniformi(\"clip_numPlanes\", clipPlaneSize);\n    }\n  }; // unsubscribe from our listeners\n\n  publicAPI.delete = chain(function () {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n  publicAPI.getRenderTargetSize = function () {\n    if (model._useSmallViewport) {\n      return [model._smallViewportWidth, model._smallViewportHeight];\n    }\n    var _model$_openGLRendere = model._openGLRenderer.getTiledSizeAndOrigin(),\n      usize = _model$_openGLRendere.usize,\n      vsize = _model$_openGLRendere.vsize;\n    return [usize, vsize];\n  };\n  publicAPI.getRenderTargetOffset = function () {\n    var _model$_openGLRendere2 = model._openGLRenderer.getTiledSizeAndOrigin(),\n      lowerLeftU = _model$_openGLRendere2.lowerLeftU,\n      lowerLeftV = _model$_openGLRendere2.lowerLeftV;\n    return [lowerLeftU, lowerLeftV];\n  };\n  publicAPI.getCurrentSampleDistance = function (ren) {\n    var rwi = ren.getVTKWindow().getInteractor();\n    var baseSampleDistance = model.renderable.getSampleDistance();\n    if (rwi.isAnimating()) {\n      var factor = model.renderable.getInteractionSampleDistanceFactor();\n      return baseSampleDistance * factor;\n    }\n    return baseSampleDistance;\n  };\n  publicAPI.renderPieceStart = function (ren, actor) {\n    var rwi = ren.getVTKWindow().getInteractor();\n    if (!model._lastScale) {\n      model._lastScale = model.renderable.getInitialInteractionScale();\n    }\n    model._useSmallViewport = false;\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(function () {\n        if (model.renderable.getAutoAdjustSampleDistances()) {\n          var frate = rwi.getRecentAnimationFrameRate();\n          var adjustment = rwi.getDesiredUpdateRate() / frate; // only change if we are off by 15%\n\n          if (adjustment > 1.15 || adjustment < 0.85) {\n            model._lastScale *= adjustment;\n          } // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n          if (model._lastScale < 1.5) {\n            model._lastScale = 1.5;\n          }\n        } else {\n          model._lastScale = model.renderable.getImageSampleDistance() * model.renderable.getImageSampleDistance();\n        }\n      });\n    } // use/create/resize framebuffer if needed\n\n    if (model._useSmallViewport) {\n      var size = model._openGLRenderWindow.getFramebufferSize();\n      var scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * size[0]);\n      model._smallViewportHeight = Math.ceil(scaleFactor * size[1]); // adjust viewportSize to always be at most the dest fo size\n\n      if (model._smallViewportHeight > size[1]) {\n        model._smallViewportHeight = size[1];\n      }\n      if (model._smallViewportWidth > size[0]) {\n        model._smallViewportWidth = size[0];\n      }\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n      if (model.framebuffer.getGLFramebuffer() === null) {\n        model.framebuffer.create(size[0], size[1]);\n        model.framebuffer.populateFramebuffer();\n      } else {\n        var fbSize = model.framebuffer.getSize();\n        if (fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n          model.framebuffer.create(size[0], size[1]);\n          model.framebuffer.populateFramebuffer();\n        }\n      }\n      model.framebuffer.bind();\n      var gl = model.context;\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\n      gl.colorMask(true, true, true, true);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.viewport(0, 0, model._smallViewportWidth, model._smallViewportHeight);\n      model.fvp = [model._smallViewportWidth / size[0], model._smallViewportHeight / size[1]];\n    }\n    model.context.disable(model.context.DEPTH_TEST); // make sure the BOs are up to date\n\n    publicAPI.updateBufferObjects(ren, actor); // set interpolation on the texture based on property setting\n\n    var iType = actor.getProperty().getInterpolationType();\n    if (iType === InterpolationType.NEAREST) {\n      model.scalarTexture.setMinificationFilter(Filter.NEAREST);\n      model.scalarTexture.setMagnificationFilter(Filter.NEAREST);\n    } else {\n      model.scalarTexture.setMinificationFilter(Filter.LINEAR);\n      model.scalarTexture.setMagnificationFilter(Filter.LINEAR);\n    } // Bind the OpenGL, this is shared between the different primitive/cell types.\n\n    model.lastBoundBO = null; // if we have a zbuffer texture then activate it\n\n    if (model.zBufferTexture !== null) {\n      model.zBufferTexture.activate();\n    }\n  };\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var gl = model.context; // render the texture\n\n    model.scalarTexture.activate();\n    model.opacityTexture.activate();\n    model.colorTexture.activate();\n    model.jitterTexture.activate();\n    publicAPI.updateShaders(model.tris, ren, actor); // First we do the triangles, update the shader, set uniforms, etc.\n    // for (let i = 0; i < 11; ++i) {\n    //   gl.drawArrays(gl.TRIANGLES, 66 * i, 66);\n    // }\n\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    model.tris.getVAO().release();\n    model.scalarTexture.deactivate();\n    model.colorTexture.deactivate();\n    model.opacityTexture.deactivate();\n    model.jitterTexture.deactivate();\n  };\n  publicAPI.renderPieceFinish = function (ren, actor) {\n    // if we have a zbuffer texture then deactivate it\n    if (model.zBufferTexture !== null) {\n      model.zBufferTexture.deactivate();\n    }\n    if (model._useSmallViewport) {\n      // now copy the framebuffer with the volume into the\n      // regular buffer\n      model.framebuffer.restorePreviousBindingsAndBuffers();\n      if (model.copyShader === null) {\n        model.copyShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'uniform vec2 tfactor;', 'varying vec2 tcoord;', 'void main() { tcoord = vec2(vertexDC.x*0.5 + 0.5, vertexDC.y*0.5 + 0.5) * tfactor; gl_Position = vertexDC; }'].join('\\n'), ['//VTK::System::Dec', '//VTK::Output::Dec', 'uniform sampler2D texture1;', 'varying vec2 tcoord;', 'void main() { gl_FragData[0] = texture2D(texture1,tcoord); }'].join('\\n'), '');\n        var program = model.copyShader;\n        model.copyVAO = vtkVertexArrayObject.newInstance();\n        model.copyVAO.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.tris.getCABO().bind();\n        if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n        }\n      } else {\n        model._openGLRenderWindow.getShaderCache().readyShaderProgram(model.copyShader);\n      }\n      var size = model._openGLRenderWindow.getFramebufferSize();\n      model.context.viewport(0, 0, size[0], size[1]); // activate texture\n\n      var tex = model.framebuffer.getColorTexture();\n      tex.activate();\n      model.copyShader.setUniformi('texture', tex.getTextureUnit());\n      model.copyShader.setUniform2f('tfactor', model.fvp[0], model.fvp[1]);\n      var gl = model.context;\n      gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA); // render quad\n\n      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      tex.deactivate();\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n  };\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n    model.renderable.update();\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n  publicAPI.computeBounds = function (ren, actor) {\n    if (!publicAPI.getInput()) {\n      uninitializeBounds(model.Bounds);\n      return;\n    }\n    model.bounds = publicAPI.getInput().getBounds();\n  };\n  publicAPI.updateBufferObjects = function (ren, actor) {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    // first do a coarse check\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n    return false;\n  };\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    var image = model.currentInput;\n    if (!image) {\n      return;\n    }\n    var scalars = image.getPointData() && image.getPointData().getScalars();\n    if (!scalars) {\n      return;\n    }\n    var vprop = actor.getProperty();\n    if (!model.jitterTexture.getHandle()) {\n      var oTable = new Uint8Array(32 * 32);\n      for (var i = 0; i < 32 * 32; ++i) {\n        oTable[i] = 255.0 * Math.random();\n      }\n      model.jitterTexture.setMinificationFilter(Filter.LINEAR);\n      model.jitterTexture.setMagnificationFilter(Filter.LINEAR);\n      model.jitterTexture.create2DFromRaw(32, 32, 1, VtkDataTypes.UNSIGNED_CHAR, oTable);\n    }\n    var numComp = scalars.getNumberOfComponents();\n    var iComps = vprop.getIndependentComponents();\n    var numIComps = iComps ? numComp : 1; // rebuild opacity tfun?\n\n    var toString = \"\".concat(vprop.getMTime());\n    if (model.opacityTextureString !== toString) {\n      var oWidth = 1024;\n      var oSize = oWidth * 2 * numIComps;\n      var ofTable = new Float32Array(oSize);\n      var tmpTable = new Float32Array(oWidth);\n      for (var c = 0; c < numIComps; ++c) {\n        var ofun = vprop.getScalarOpacity(c);\n        var opacityFactor = publicAPI.getCurrentSampleDistance(ren) / vprop.getScalarOpacityUnitDistance(c);\n        var oRange = ofun.getRange();\n        ofun.getTable(oRange[0], oRange[1], oWidth, tmpTable, 1); // adjust for sample distance etc\n\n        for (var _i4 = 0; _i4 < oWidth; ++_i4) {\n          ofTable[c * oWidth * 2 + _i4] = 1.0 - Math.pow(1.0 - tmpTable[_i4], opacityFactor);\n          ofTable[c * oWidth * 2 + _i4 + oWidth] = ofTable[c * oWidth * 2 + _i4];\n        }\n      }\n      model.opacityTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.opacityTexture.setMinificationFilter(Filter.LINEAR);\n      model.opacityTexture.setMagnificationFilter(Filter.LINEAR); // use float texture where possible because we really need the resolution\n      // for this table. Errors in low values of opacity accumulate to\n      // visible artifacts. High values of opacity quickly terminate without\n      // artifacts.\n\n      if (model._openGLRenderWindow.getWebgl2() || model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.FLOAT, ofTable);\n      } else {\n        var _oTable = new Uint8Array(oSize);\n        for (var _i5 = 0; _i5 < oSize; ++_i5) {\n          _oTable[_i5] = 255.0 * ofTable[_i5];\n        }\n        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.UNSIGNED_CHAR, _oTable);\n      }\n      model.opacityTextureString = toString;\n    } // rebuild color tfun?\n\n    toString = \"\".concat(vprop.getMTime());\n    if (model.colorTextureString !== toString) {\n      var cWidth = 1024;\n      var cSize = cWidth * 2 * numIComps * 3;\n      var cTable = new Uint8Array(cSize);\n      var _tmpTable = new Float32Array(cWidth * 3);\n      for (var _c = 0; _c < numIComps; ++_c) {\n        var cfun = vprop.getRGBTransferFunction(_c);\n        var cRange = cfun.getRange();\n        cfun.getTable(cRange[0], cRange[1], cWidth, _tmpTable, 1);\n        for (var _i6 = 0; _i6 < cWidth * 3; ++_i6) {\n          cTable[_c * cWidth * 6 + _i6] = 255.0 * _tmpTable[_i6];\n          cTable[_c * cWidth * 6 + _i6 + cWidth * 3] = 255.0 * _tmpTable[_i6];\n        }\n      }\n      model.colorTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.colorTexture.setMinificationFilter(Filter.LINEAR);\n      model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n      model.colorTexture.create2DFromRaw(cWidth, 2 * numIComps, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      model.colorTextureString = toString;\n    } // rebuild the scalarTexture if the data has changed\n\n    toString = \"\".concat(image.getMTime());\n    if (model.scalarTextureString !== toString) {\n      // Build the textures\n      var dims = image.getDimensions(); // Use norm16 for scalar texture if the extension is available\n\n      model.scalarTexture.setOglNorm16Ext(model.context.getExtension('EXT_texture_norm16'));\n      model.scalarTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.scalarTexture.resetFormatAndType();\n      model.scalarTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, model.renderable.getPreferSizeOverAccuracy());\n      model.scalarTextureString = toString;\n    }\n    if (!model.tris.getCABO().getElementCount()) {\n      // build the CABO\n      var ptsArray = new Float32Array(12);\n      for (var _i7 = 0; _i7 < 4; _i7++) {\n        ptsArray[_i7 * 3] = _i7 % 2 * 2 - 1.0;\n        ptsArray[_i7 * 3 + 1] = _i7 > 1 ? 1.0 : -1.0;\n        ptsArray[_i7 * 3 + 2] = -1.0;\n      }\n      var cellArray = new Uint16Array(8);\n      cellArray[0] = 3;\n      cellArray[1] = 0;\n      cellArray[2] = 1;\n      cellArray[3] = 3;\n      cellArray[4] = 3;\n      cellArray[5] = 0;\n      cellArray[6] = 3;\n      cellArray[7] = 2; // const dim = 12.0;\n      // const ptsArray = new Float32Array(3 * dim * dim);\n      // for (let i = 0; i < dim; i++) {\n      //   for (let j = 0; j < dim; j++) {\n      //     const offset = ((i * dim) + j) * 3;\n      //     ptsArray[offset] = (2.0 * (i / (dim - 1.0))) - 1.0;\n      //     ptsArray[offset + 1] = (2.0 * (j / (dim - 1.0))) - 1.0;\n      //     ptsArray[offset + 2] = -1.0;\n      //   }\n      // }\n      // const cellArray = new Uint16Array(8 * (dim - 1) * (dim - 1));\n      // for (let i = 0; i < dim - 1; i++) {\n      //   for (let j = 0; j < dim - 1; j++) {\n      //     const offset = 8 * ((i * (dim - 1)) + j);\n      //     cellArray[offset] = 3;\n      //     cellArray[offset + 1] = (i * dim) + j;\n      //     cellArray[offset + 2] = (i * dim) + 1 + j;\n      //     cellArray[offset + 3] = ((i + 1) * dim) + 1 + j;\n      //     cellArray[offset + 4] = 3;\n      //     cellArray[offset + 5] = (i * dim) + j;\n      //     cellArray[offset + 6] = ((i + 1) * dim) + 1 + j;\n      //     cellArray[offset + 7] = ((i + 1) * dim) + j;\n      //   }\n      // }\n\n      var points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n      var cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points: points,\n        cellOffset: 0\n      });\n    }\n    model.VBOBuildTime.modified();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: null,\n  scalarTexture: null,\n  scalarTextureString: null,\n  opacityTexture: null,\n  opacityTextureString: null,\n  colorTexture: null,\n  colorTextureString: null,\n  jitterTexture: null,\n  tris: null,\n  framebuffer: null,\n  copyShader: null,\n  copyVAO: null,\n  lastXYF: 1.0,\n  targetXYF: 1.0,\n  zBufferTexture: null,\n  lastZBufferTexture: null,\n  lastLightComplexity: 0,\n  fullViewportTime: 1.0,\n  idxToView: null,\n  idxNormalMatrix: null,\n  modelToView: null,\n  projectionToView: null,\n  avgWindowArea: 0.0,\n  avgFrameTime: 0.0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  model.scalarTexture = vtkOpenGLTexture.newInstance();\n  model.opacityTexture = vtkOpenGLTexture.newInstance();\n  model.colorTexture = vtkOpenGLTexture.newInstance();\n  model.jitterTexture = vtkOpenGLTexture.newInstance();\n  model.jitterTexture.setWrapS(Wrap.REPEAT);\n  model.jitterTexture.setWrapT(Wrap.REPEAT);\n  model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n  model.idxToView = mat4.identity(new Float64Array(16));\n  model.idxNormalMatrix = mat3.identity(new Float64Array(9));\n  model.modelToView = mat4.identity(new Float64Array(16));\n  model.projectionToView = mat4.identity(new Float64Array(16));\n  model.projectionToWorld = mat4.identity(new Float64Array(16)); // Build VTK API\n\n  setGet(publicAPI, model, ['context']); // Object methods\n\n  vtkOpenGLVolumeMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLVolumeMapper'); // ----------------------------------------------------------------------------\n\nvar vtkVolumeMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkVolumeMapper', newInstance);\nexport { vtkVolumeMapper as default, extend, newInstance };","map":{"version":3,"names":["_slicedToArray","_defineProperty","newInstance","newInstance$1","obj","setGet","chain","vtkWarningMacro","vtkWarningMacro$1","vtkErrorMacro","vtkErrorMacro$1","mat4","mat3","vec3","vtkDataArray","VtkDataTypes","vtkHelper","u","uninitializeBounds","vtkOpenGLFramebuffer","vtkOpenGLTexture","vtkShaderProgram","vtkVertexArrayObject","vtkViewNode","Representation","Wrap","Filter","InterpolationType","OpacityMode","BlendMode","v","vtkVolumeVS","vtkVolumeFS","registerOverride","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","arrayEquals","a","b","vtkOpenGLVolumeMapper","publicAPI","model","classHierarchy","buildPass","zBufferTexture","zBufferPass","prepass","renderPass","zbt","getZBufferTexture","opaqueZBufferPass","volumePass","_openGLRenderWindow","getFirstAncestorOfType","context","getContext","tris","setOpenGLRenderWindow","jitterTexture","framebuffer","scalarTexture","colorTexture","opacityTexture","openGLVolume","actor","getRenderable","_openGLRenderer","ren","openGLCamera","getViewNodeFor","getActiveCamera","renderPiece","buildShaders","shaders","getShaderTemplate","replaceShaderValues","Vertex","Fragment","Geometry","FSSource","iType","getProperty","getInterpolationType","LINEAR","substitute","result","vtkImageLabelOutline","getUseLabelOutline","numComp","getComponents","concat","iComps","getIndependentComponents","proportionalComponents","nc","getOpacityMode","PROPORTIONAL","join","ext","currentInput","getSpatialExtent","spc","getSpacing","vsize","Float64Array","set","maxSamples","getCurrentSampleDistance","Math","ceil","lastLightComplexity","renderable","getVolumetricScatteringBlending","getLocalAmbientOcclusion","getAmbient","gopacity","getUseGradientOpacity","_nc","getComputeNormalFromOpacity","getBlendMode","replaceShaderLight","replaceShaderClippingPlane","lightNum","getLights","light","getSwitch","getLAOKernelRadius","getClippingPlanes","clipPlaneSize","getNeedToRebuildShaders","cellBO","lightComplexity","getShade","COMPOSITE_BLEND","numberOfLights","status","getIntensity","lightTypeIsHeadLight","getPositional","needRebuild","usesProportionalComponents","state","interpolationType","useLabelOutline","useGradientOpacity","blendMode","previousState","getProgram","lastHaveSeenDepthRequest","haveSeenDepthRequest","lastZBufferTexture","getShaderSourceTime","getMTime","updateShaders","lastBoundBO","newShader","getShaderCache","readyShaderProgramArray","setProgram","getVAO","releaseGraphicsResources","modified","readyShaderProgram","bind","setMapperShaderParameters","setCameraShaderParameters","setPropertyShaderParameters","getClippingPlaneShaderParameters","program","getCABO","getElementCount","VBOBuildTime","getAttributeUpdateTime","isAttributeUsed","addAttributeArray","getVertexOffset","getStride","FLOAT","FALSE","setUniformi","getTextureUnit","setUniformf","volInfo","getVolumeInfo","ipScalarRange","getIpScalarRange","minVals","maxVals","dataComputedScale","dataComputedOffset","offset","scale","setUniform4f","size","_useSmallViewport","_smallViewportWidth","_smallViewportHeight","getFramebufferSize","keyMats","getKeyMatrices","actMats","multiply","modelToView","wcvc","mcwc","cam","crange","getClippingRange","bounds","getBounds","dims","getDimensions","pos","dir","dcxmin","dcxmax","dcymin","dcymax","floor","transformMat4","getParallelProjection","normalize","t","vcpc","min","max","isUniformUsed","setUniform3f","indexToWorldVec3","i2wmat4","getIndexToWorld","idxToView","idxNormalMatrix","normalMatrix","getDirectionByReference","getMaximumSamplesPerRay","vctoijk","divide","setUniform3i","getWebgl2","getWidth","getHeight","xreps","xstride","ystride","normal","pos2","_i","transformMat3","dist","dot","image","worldToIndex","getWorldToIndex","setUniformMatrix","camera","_camera$getClippingRa","_camera$getClippingRa2","cRange0","cRange1","distance","getDistance","setClippingRange","labelOutlineKeyMats","invert","projectionToWorld","wcpc","getRenderTargetSize","getRenderTargetOffset","projectionToView","lightColor","lightDir","halfAngle","dColor","getColor","intensity","ldir","getDirection","getTwoSidedLighting","setUniform3fv","lightPositionVC","lightAttenuation","lightConeAngle","lightExponent","lightPositional","attenuation","getAttenuationValues","getExponent","getConeAngle","lp","getTransformedPosition","setUniformfv","setUniformiv","getGlobalIlluminationReach","getVolumeShadowSamplingDistFactor","getAnisotropy","pow","ks","getLAOKernelSize","kernelSample","_i2","random","setUniform2fv","vprop","getComponentWeight","_i3","sscale","ofun","getScalarOpacity","oRange","getRange","oscale","oshift","cfun","getRGBTransferFunction","cRange","cshift","cScale","_sscale","useGO","gomin","getGradientOpacityMinimumOpacity","gomax","getGradientOpacityMaximumOpacity","goRange","getGradientOpacityMinimumValue","getGradientOpacityMaximumValue","_sscale2","_gomin","_gomax","_goRange","labelOutlineThickness","getLabelOutlineThickness","labelOutlineOpacity","getLabelOutlineOpacity","getDiffuse","getSpecular","getSpecularPower","clipPlaneNormals","clipPlaneDistances","clipPlaneOrigins","clipPlanes","clipPlaneNormal","getNormal","clipPlanePos","getOrigin","clipPlaneDist","delete","_animationRateSubscription","unsubscribe","_model$_openGLRendere","getTiledSizeAndOrigin","usize","_model$_openGLRendere2","lowerLeftU","lowerLeftV","rwi","getVTKWindow","getInteractor","baseSampleDistance","getSampleDistance","isAnimating","factor","getInteractionSampleDistanceFactor","renderPieceStart","_lastScale","getInitialInteractionScale","onAnimationFrameRateUpdate","getAutoAdjustSampleDistances","frate","getRecentAnimationFrameRate","adjustment","getDesiredUpdateRate","getImageSampleDistance","scaleFactor","sqrt","saveCurrentBindingsAndBuffers","getGLFramebuffer","create","populateFramebuffer","fbSize","getSize","gl","clearColor","colorMask","clear","COLOR_BUFFER_BIT","viewport","fvp","disable","DEPTH_TEST","updateBufferObjects","NEAREST","setMinificationFilter","setMagnificationFilter","activate","renderPieceDraw","drawArrays","TRIANGLES","release","deactivate","renderPieceFinish","restorePreviousBindingsAndBuffers","copyShader","copyVAO","tex","getColorTexture","setUniform2f","blendFuncSeparate","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","invokeEvent","type","update","getInputData","computeBounds","getInput","Bounds","getNeedToRebuildBufferObjects","buildBufferObjects","scalars","getPointData","getScalars","getHandle","oTable","Uint8Array","create2DFromRaw","UNSIGNED_CHAR","getNumberOfComponents","numIComps","toString","opacityTextureString","oWidth","oSize","ofTable","Float32Array","tmpTable","c","opacityFactor","getScalarOpacityUnitDistance","getTable","_i4","getExtension","_oTable","_i5","colorTextureString","cWidth","cSize","cTable","_tmpTable","_c","_i6","scalarTextureString","setOglNorm16Ext","resetFormatAndType","create3DFilterableFromDataArray","getPreferSizeOverAccuracy","ptsArray","_i7","cellArray","Uint16Array","points","numberOfComponents","values","setName","cells","createVBO","SURFACE","cellOffset","DEFAULT_VALUES","lastXYF","targetXYF","fullViewportTime","avgWindowArea","avgFrameTime","extend","initialValues","undefined","assign","mtime","setWrapS","REPEAT","setWrapT","identity","vtkVolumeMapper","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/OpenGL/VolumeMapper.js"],"sourcesContent":["import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { newInstance as newInstance$1, obj, setGet, chain, vtkWarningMacro as vtkWarningMacro$1, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport { mat4, mat3, vec3 } from 'gl-matrix';\nimport vtkDataArray from '../../Common/Core/DataArray.js';\nimport { VtkDataTypes } from '../../Common/Core/DataArray/Constants.js';\nimport vtkHelper from './Helper.js';\nimport { u as uninitializeBounds } from '../../Common/Core/Math/index.js';\nimport vtkOpenGLFramebuffer from './Framebuffer.js';\nimport vtkOpenGLTexture from './Texture.js';\nimport vtkShaderProgram from './ShaderProgram.js';\nimport vtkVertexArrayObject from './VertexArrayObject.js';\nimport vtkViewNode from '../SceneGraph/ViewNode.js';\nimport { Representation } from '../Core/Property/Constants.js';\nimport { Wrap, Filter } from './Texture/Constants.js';\nimport { InterpolationType, OpacityMode } from '../Core/VolumeProperty/Constants.js';\nimport { BlendMode } from '../Core/VolumeMapper/Constants.js';\nimport { v as vtkVolumeVS } from './glsl/vtkVolumeVS.glsl.js';\nimport { v as vtkVolumeFS } from './glsl/vtkVolumeFS.glsl.js';\nimport { registerOverride } from './ViewNodeFactory.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar vtkWarningMacro = vtkWarningMacro$1,\n    vtkErrorMacro = vtkErrorMacro$1; // TODO: Do we want this in some shared utility? Shouldwe just use lodash.isEqual\n\nfunction arrayEquals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n} // ----------------------------------------------------------------------------\n// vtkOpenGLVolumeMapper methods\n// ----------------------------------------------------------------------------\n\n\nfunction vtkOpenGLVolumeMapper(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkOpenGLVolumeMapper');\n\n  publicAPI.buildPass = function () {\n    model.zBufferTexture = null;\n  }; // ohh someone is doing a zbuffer pass, use that for\n  // intermixed volume rendering\n\n\n  publicAPI.zBufferPass = function (prepass, renderPass) {\n    if (prepass) {\n      var zbt = renderPass.getZBufferTexture();\n\n      if (zbt !== model.zBufferTexture) {\n        model.zBufferTexture = zbt;\n      }\n    }\n  };\n\n  publicAPI.opaqueZBufferPass = function (prepass, renderPass) {\n    return publicAPI.zBufferPass(prepass, renderPass);\n  }; // Renders myself\n\n\n  publicAPI.volumePass = function (prepass, renderPass) {\n    if (prepass) {\n      model._openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');\n      model.context = model._openGLRenderWindow.getContext();\n      model.tris.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.jitterTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.framebuffer.setOpenGLRenderWindow(model._openGLRenderWindow); // Per Component?\n\n      model.scalarTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.colorTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.opacityTexture.setOpenGLRenderWindow(model._openGLRenderWindow);\n      model.openGLVolume = publicAPI.getFirstAncestorOfType('vtkOpenGLVolume');\n      var actor = model.openGLVolume.getRenderable();\n      model._openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');\n\n      var ren = model._openGLRenderer.getRenderable();\n\n      model.openGLCamera = model._openGLRenderer.getViewNodeFor(ren.getActiveCamera());\n      publicAPI.renderPiece(ren, actor);\n    }\n  };\n\n  publicAPI.buildShaders = function (shaders, ren, actor) {\n    publicAPI.getShaderTemplate(shaders, ren, actor);\n    publicAPI.replaceShaderValues(shaders, ren, actor);\n  };\n\n  publicAPI.getShaderTemplate = function (shaders, ren, actor) {\n    shaders.Vertex = vtkVolumeVS;\n    shaders.Fragment = vtkVolumeFS;\n    shaders.Geometry = '';\n  };\n\n  publicAPI.replaceShaderValues = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment; // define some values in the shader\n\n    var iType = actor.getProperty().getInterpolationType();\n\n    if (iType === InterpolationType.LINEAR) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::TrilinearOn', '#define vtkTrilinearOn').result;\n    }\n\n    var vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n\n    if (vtkImageLabelOutline === true) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ImageLabelOutlineOn', '#define vtkImageLabelOutlineOn').result;\n    }\n\n    var numComp = model.scalarTexture.getComponents();\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::NumComponents', \"#define vtkNumComponents \".concat(numComp)).result;\n    var iComps = actor.getProperty().getIndependentComponents();\n\n    if (iComps) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::IndependentComponentsOn', '#define vtkIndependentComponentsOn').result; // Define any proportional components\n\n      var proportionalComponents = [];\n\n      for (var nc = 0; nc < numComp; nc++) {\n        if (actor.getProperty().getOpacityMode(nc) === OpacityMode.PROPORTIONAL) {\n          proportionalComponents.push(\"#define vtkComponent\".concat(nc, \"Proportional\"));\n        }\n      }\n\n      if (proportionalComponents.length > 0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkProportionalComponents', proportionalComponents.join('\\n')).result;\n      }\n    } // WebGL only supports loops over constants\n    // and does not support while loops so we\n    // have to hard code how many steps/samples to take\n    // We do a break so most systems will gracefully\n    // early terminate, but it is always possible\n    // a system will execute every step regardless\n\n\n    var ext = model.currentInput.getSpatialExtent();\n    var spc = model.currentInput.getSpacing();\n    var vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    var maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::MaximumSamplesValue', \"\".concat(Math.ceil(maxSamples))).result; // set light complexity\n\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LightComplexity', \"#define vtkLightComplexity \".concat(model.lastLightComplexity)).result; // set shadow blending flag\n\n    if (model.lastLightComplexity > 0) {\n      if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::VolumeShadowOn', \"#define VolumeShadowOn\").result;\n      }\n\n      if (model.renderable.getVolumetricScatteringBlending() < 1.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::SurfaceShadowOn', \"#define SurfaceShadowOn\").result;\n      }\n\n      if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n        FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::localAmbientOcclusionOn', \"#define localAmbientOcclusionOn\").result;\n      }\n    } // if using gradient opacity define that\n\n\n    model.gopacity = actor.getProperty().getUseGradientOpacity(0);\n\n    for (var _nc = 1; iComps && !model.gopacity && _nc < numComp; ++_nc) {\n      if (actor.getProperty().getUseGradientOpacity(_nc)) {\n        model.gopacity = true;\n      }\n    }\n\n    if (model.gopacity) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::GradientOpacityOn', '#define vtkGradientOpacityOn').result;\n    } // set normal from density\n\n\n    if (model.renderable.getComputeNormalFromOpacity()) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::vtkComputeNormalFromOpacity', \"#define vtkComputeNormalFromOpacity\").result;\n    } // if we have a ztexture then declare it and use it\n\n\n    if (model.zBufferTexture !== null) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Dec', ['uniform sampler2D zBufferTexture;', 'uniform float vpWidth;', 'uniform float vpHeight;']).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ZBuffer::Impl', ['vec4 depthVec = texture2D(zBufferTexture, vec2(gl_FragCoord.x / vpWidth, gl_FragCoord.y/vpHeight));', 'float zdepth = (depthVec.r*256.0 + depthVec.g)/257.0;', 'zdepth = zdepth * 2.0 - 1.0;', 'if (cameraParallel == 0) {', 'zdepth = -2.0 * camFar * camNear / (zdepth*(camFar-camNear)-(camFar+camNear)) - camNear;}', 'else {', 'zdepth = (zdepth + 1.0) * 0.5 * (camFar - camNear);}\\n', 'zdepth = -zdepth/rayDir.z;', 'dists.y = min(zdepth,dists.y);']).result;\n    } // Set the BlendMode approach\n\n\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::BlendMode', \"\".concat(model.renderable.getBlendMode())).result;\n    shaders.Fragment = FSSource;\n    publicAPI.replaceShaderLight(shaders, ren, actor);\n    publicAPI.replaceShaderClippingPlane(shaders, ren, actor);\n  };\n\n  publicAPI.replaceShaderLight = function (shaders, ren, actor) {\n    if (model.lastLightComplexity === 0) {\n      return;\n    }\n\n    var FSSource = shaders.Fragment; // check for shadow maps - not implemented yet, skip\n    // const shadowFactor = '';\n    // to-do: single out the case when complexity = 1\n    // only account for lights that are switched on\n\n    var lightNum = 0;\n    ren.getLights().forEach(function (light) {\n      if (light.getSwitch()) {\n        lightNum += 1;\n      }\n    });\n    FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', [\"uniform int lightNum;\", \"uniform bool twoSidedLighting;\", \"uniform vec3 lightColor[\".concat(lightNum, \"];\"), \"uniform vec3 lightDirectionVC[\".concat(lightNum, \"]; // normalized\"), \"uniform vec3 lightHalfAngleVC[\".concat(lightNum, \"];\"), '//VTK::Light::Dec'], false).result; // support any number of lights\n\n    if (model.lastLightComplexity === 3) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::Light::Dec', [\"uniform vec3 lightPositionVC[\".concat(lightNum, \"];\"), \"uniform vec3 lightAttenuation[\".concat(lightNum, \"];\"), \"uniform float lightConeAngle[\".concat(lightNum, \"];\"), \"uniform float lightExponent[\".concat(lightNum, \"];\"), \"uniform int lightPositional[\".concat(lightNum, \"];\")], false).result;\n    }\n\n    if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::VolumeShadow::Dec', [\"uniform float volumetricScatteringBlending;\", \"uniform float giReach;\", \"uniform float volumeShadowSamplingDistFactor;\", \"uniform float anisotropy;\", \"uniform float anisotropy2;\"], false).result;\n    }\n\n    if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::LAO::Dec', [\"uniform int kernelRadius;\", \"uniform vec2 kernelSample[\".concat(model.renderable.getLAOKernelRadius(), \"];\"), \"uniform int kernelSize;\"], false).result;\n    }\n\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.replaceShaderClippingPlane = function (shaders, ren, actor) {\n    var FSSource = shaders.Fragment;\n\n    if (model.renderable.getClippingPlanes().length > 0) {\n      var clipPlaneSize = model.renderable.getClippingPlanes().length;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ClipPlane::Dec', [\"uniform vec3 vClipPlaneNormals[6];\", \"uniform float vClipPlaneDistances[6];\", \"uniform vec3 vClipPlaneOrigins[6];\", \"uniform int clip_numPlanes;\", '//VTK::ClipPlane::Dec', '#define vtkClippingPlanesOn'], false).result;\n      FSSource = vtkShaderProgram.substitute(FSSource, '//VTK::ClipPlane::Impl', [\"for(int i = 0; i < \".concat(clipPlaneSize, \"; i++) {\"), '  float rayDirRatio = dot(rayDir, vClipPlaneNormals[i]);', '  float equationResult = dot(vertexVCVSOutput, vClipPlaneNormals[i]) + vClipPlaneDistances[i];', '  if (rayDirRatio == 0.0)', '  {', '    if (equationResult < 0.0) dists.x = dists.y;', '    continue;', '  }', '  float result = -1.0 * equationResult / rayDirRatio;', '  if (rayDirRatio < 0.0) dists.y = min(dists.y, result);', '  else dists.x = max(dists.x, result);', '}', '//VTK::ClipPlane::Impl'], false).result;\n    }\n\n    shaders.Fragment = FSSource;\n  };\n\n  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {\n    // do we need lighting?\n    var lightComplexity = 0;\n\n    if (actor.getProperty().getShade() && model.renderable.getBlendMode() === BlendMode.COMPOSITE_BLEND) {\n      // consider the lighting complexity to determine which case applies\n      // simple headlight, Light Kit, the whole feature set of VTK\n      lightComplexity = 0;\n      model.numberOfLights = 0;\n      ren.getLights().forEach(function (light) {\n        var status = light.getSwitch();\n\n        if (status > 0) {\n          model.numberOfLights++;\n\n          if (lightComplexity === 0) {\n            lightComplexity = 1;\n          }\n        }\n\n        if (lightComplexity === 1 && (model.numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {\n          lightComplexity = 2;\n        }\n\n        if (lightComplexity < 3 && light.getPositional()) {\n          lightComplexity = 3;\n        }\n      });\n    }\n\n    var needRebuild = false;\n\n    if (model.lastLightComplexity !== lightComplexity) {\n      model.lastLightComplexity = lightComplexity;\n      needRebuild = true;\n    }\n\n    var numComp = model.scalarTexture.getComponents();\n    var iComps = actor.getProperty().getIndependentComponents();\n    var usesProportionalComponents = false;\n    var proportionalComponents = [];\n\n    if (iComps) {\n      // Define any proportional components\n      for (var nc = 0; nc < numComp; nc++) {\n        proportionalComponents.push(actor.getProperty().getOpacityMode(nc));\n      }\n\n      if (proportionalComponents.length > 0) {\n        usesProportionalComponents = true;\n      }\n    }\n\n    var ext = model.currentInput.getSpatialExtent();\n    var spc = model.currentInput.getSpacing();\n    var vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    var maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n    var state = {\n      interpolationType: actor.getProperty().getInterpolationType(),\n      useLabelOutline: actor.getProperty().getUseLabelOutline(),\n      numComp: numComp,\n      usesProportionalComponents: usesProportionalComponents,\n      iComps: iComps,\n      maxSamples: maxSamples,\n      useGradientOpacity: actor.getProperty().getUseGradientOpacity(0),\n      blendMode: model.renderable.getBlendMode(),\n      proportionalComponents: proportionalComponents\n    }; // We only need to rebuild the shader if one of these variables has changed,\n    // since they are used in the shader template replacement step.\n\n    if (!model.previousState || model.previousState.interpolationType !== state.interpolationType || model.previousState.useLabelOutline !== state.useLabelOutline || model.previousState.numComp !== state.numComp || model.previousState.usesProportionalComponents !== state.usesProportionalComponents || model.previousState.iComps !== state.iComps || model.previousState.maxSamples !== state.maxSamples || model.previousState.useGradientOpacity !== state.useGradientOpacity || model.previousState.blendMode !== state.blendMode || !arrayEquals(model.previousState.proportionalComponents, state.proportionalComponents)) {\n      model.previousState = _objectSpread({}, state);\n      return true;\n    } // has something changed that would require us to recreate the shader?\n\n\n    if (cellBO.getProgram() === 0 || needRebuild || model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || !!model.lastZBufferTexture !== !!model.zBufferTexture || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime()) {\n      model.lastZBufferTexture = model.zBufferTexture;\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.updateShaders = function (cellBO, ren, actor) {\n    model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?\n\n    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {\n      var shaders = {\n        Vertex: null,\n        Fragment: null,\n        Geometry: null\n      };\n      publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed\n\n      var newShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO\n\n\n      if (newShader !== cellBO.getProgram()) {\n        cellBO.setProgram(newShader); // reset the VAO as the shader has changed\n\n        cellBO.getVAO().releaseGraphicsResources();\n      }\n\n      cellBO.getShaderSourceTime().modified();\n    } else {\n      model._openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());\n    }\n\n    cellBO.getVAO().bind();\n    publicAPI.setMapperShaderParameters(cellBO, ren, actor);\n    publicAPI.setCameraShaderParameters(cellBO, ren, actor);\n    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);\n    publicAPI.getClippingPlaneShaderParameters(cellBO, ren, actor);\n  };\n\n  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {\n    // Now to update the VAO too, if necessary.\n    var program = cellBO.getProgram();\n\n    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {\n      if (program.isAttributeUsed('vertexDC')) {\n        if (!cellBO.getVAO().addAttributeArray(program, cellBO.getCABO(), 'vertexDC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexDC in shader VAO.');\n        }\n      }\n\n      cellBO.getAttributeUpdateTime().modified();\n    }\n\n    program.setUniformi('texture1', model.scalarTexture.getTextureUnit());\n    program.setUniformf('sampleDistance', publicAPI.getCurrentSampleDistance(ren));\n    var volInfo = model.scalarTexture.getVolumeInfo();\n    var ipScalarRange = model.renderable.getIpScalarRange();\n    var minVals = [];\n    var maxVals = [];\n\n    for (var i = 0; i < 4; i++) {\n      // convert iprange from 0-1 into data range values\n      minVals[i] = ipScalarRange[0] * volInfo.dataComputedScale[i] + volInfo.dataComputedOffset[i];\n      maxVals[i] = ipScalarRange[1] * volInfo.dataComputedScale[i] + volInfo.dataComputedOffset[i]; // convert data ranges into texture values\n\n      minVals[i] = (minVals[i] - volInfo.offset[i]) / volInfo.scale[i];\n      maxVals[i] = (maxVals[i] - volInfo.offset[i]) / volInfo.scale[i];\n    }\n\n    program.setUniform4f('ipScalarRangeMin', minVals[0], minVals[1], minVals[2], minVals[3]);\n    program.setUniform4f('ipScalarRangeMax', maxVals[0], maxVals[1], maxVals[2], maxVals[3]); // if we have a zbuffer texture then set it\n\n    if (model.zBufferTexture !== null) {\n      program.setUniformi('zBufferTexture', model.zBufferTexture.getTextureUnit());\n      var size = model._useSmallViewport ? [model._smallViewportWidth, model._smallViewportHeight] : model._openGLRenderWindow.getFramebufferSize();\n      program.setUniformf('vpWidth', size[0]);\n      program.setUniformf('vpHeight', size[1]);\n    }\n  };\n\n  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {\n    // // [WMVP]C == {world, model, view, projection} coordinates\n    // // E.g., WCPC == world to projection coordinate transformation\n    var keyMats = model.openGLCamera.getKeyMatrices(ren);\n    var actMats = model.openGLVolume.getKeyMatrices();\n    mat4.multiply(model.modelToView, keyMats.wcvc, actMats.mcwc);\n    var program = cellBO.getProgram();\n    var cam = model.openGLCamera.getRenderable();\n    var crange = cam.getClippingRange();\n    program.setUniformf('camThick', crange[1] - crange[0]);\n    program.setUniformf('camNear', crange[0]);\n    program.setUniformf('camFar', crange[1]);\n    var bounds = model.currentInput.getBounds();\n    var dims = model.currentInput.getDimensions(); // compute the viewport bounds of the volume\n    // we will only render those fragments.\n\n    var pos = new Float64Array(3);\n    var dir = new Float64Array(3);\n    var dcxmin = 1.0;\n    var dcxmax = -1.0;\n    var dcymin = 1.0;\n    var dcymax = -1.0;\n\n    for (var i = 0; i < 8; ++i) {\n      vec3.set(pos, bounds[i % 2], bounds[2 + Math.floor(i / 2) % 2], bounds[4 + Math.floor(i / 4)]);\n      vec3.transformMat4(pos, pos, model.modelToView);\n\n      if (!cam.getParallelProjection()) {\n        vec3.normalize(dir, pos); // now find the projection of this point onto a\n        // nearZ distance plane. Since the camera is at 0,0,0\n        // in VC the ray is just t*pos and\n        // t is -nearZ/dir.z\n        // intersection becomes pos.x/pos.z\n\n        var t = -crange[0] / pos[2];\n        vec3.scale(pos, dir, t);\n      } // now convert to DC\n\n\n      vec3.transformMat4(pos, pos, keyMats.vcpc);\n      dcxmin = Math.min(pos[0], dcxmin);\n      dcxmax = Math.max(pos[0], dcxmax);\n      dcymin = Math.min(pos[1], dcymin);\n      dcymax = Math.max(pos[1], dcymax);\n    }\n\n    program.setUniformf('dcxmin', dcxmin);\n    program.setUniformf('dcxmax', dcxmax);\n    program.setUniformf('dcymin', dcymin);\n    program.setUniformf('dcymax', dcymax);\n\n    if (program.isUniformUsed('cameraParallel')) {\n      program.setUniformi('cameraParallel', cam.getParallelProjection());\n    }\n\n    var ext = model.currentInput.getSpatialExtent();\n    var spc = model.currentInput.getSpacing();\n    var vsize = new Float64Array(3);\n    vec3.set(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);\n    program.setUniform3f('vSpacing', spc[0], spc[1], spc[2]);\n    vec3.set(pos, ext[0], ext[2], ext[4]);\n    model.currentInput.indexToWorldVec3(pos, pos);\n    vec3.transformMat4(pos, pos, model.modelToView);\n    program.setUniform3f('vOriginVC', pos[0], pos[1], pos[2]); // apply the image directions\n\n    var i2wmat4 = model.currentInput.getIndexToWorld();\n    mat4.multiply(model.idxToView, model.modelToView, i2wmat4);\n    mat3.multiply(model.idxNormalMatrix, keyMats.normalMatrix, actMats.normalMatrix);\n    mat3.multiply(model.idxNormalMatrix, model.idxNormalMatrix, model.currentInput.getDirectionByReference());\n    var maxSamples = vec3.length(vsize) / publicAPI.getCurrentSampleDistance(ren);\n\n    if (maxSamples > model.renderable.getMaximumSamplesPerRay()) {\n      vtkWarningMacro(\"The number of steps required \".concat(Math.ceil(maxSamples), \" is larger than the\\n        specified maximum number of steps \").concat(model.renderable.getMaximumSamplesPerRay(), \".\\n        Please either change the\\n        volumeMapper sampleDistance or its maximum number of samples.\"));\n    }\n\n    var vctoijk = new Float64Array(3);\n    vec3.set(vctoijk, 1.0, 1.0, 1.0);\n    vec3.divide(vctoijk, vctoijk, vsize);\n    program.setUniform3f('vVCToIJK', vctoijk[0], vctoijk[1], vctoijk[2]);\n    program.setUniform3i('volumeDimensions', dims[0], dims[1], dims[2]);\n\n    if (!model._openGLRenderWindow.getWebgl2()) {\n      var volInfo = model.scalarTexture.getVolumeInfo();\n      program.setUniformf('texWidth', model.scalarTexture.getWidth());\n      program.setUniformf('texHeight', model.scalarTexture.getHeight());\n      program.setUniformi('xreps', volInfo.xreps);\n      program.setUniformi('xstride', volInfo.xstride);\n      program.setUniformi('ystride', volInfo.ystride);\n    } // map normals through normal matrix\n    // then use a point on the plane to compute the distance\n\n\n    var normal = new Float64Array(3);\n    var pos2 = new Float64Array(3);\n\n    for (var _i = 0; _i < 6; ++_i) {\n      switch (_i) {\n        case 1:\n          vec3.set(normal, -1.0, 0.0, 0.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n\n        case 2:\n          vec3.set(normal, 0.0, 1.0, 0.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n\n        case 3:\n          vec3.set(normal, 0.0, -1.0, 0.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n\n        case 4:\n          vec3.set(normal, 0.0, 0.0, 1.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n\n        case 5:\n          vec3.set(normal, 0.0, 0.0, -1.0);\n          vec3.set(pos2, ext[0], ext[2], ext[4]);\n          break;\n\n        case 0:\n        default:\n          vec3.set(normal, 1.0, 0.0, 0.0);\n          vec3.set(pos2, ext[1], ext[3], ext[5]);\n          break;\n      }\n\n      vec3.transformMat3(normal, normal, model.idxNormalMatrix);\n      vec3.transformMat4(pos2, pos2, model.idxToView);\n      var dist = -1.0 * vec3.dot(pos2, normal); // we have the plane in view coordinates\n      // specify the planes in view coordinates\n\n      program.setUniform3f(\"vPlaneNormal\".concat(_i), normal[0], normal[1], normal[2]);\n      program.setUniformf(\"vPlaneDistance\".concat(_i), dist);\n    }\n\n    if (actor.getProperty().getUseLabelOutline()) {\n      var image = model.currentInput;\n      var worldToIndex = image.getWorldToIndex();\n      program.setUniformMatrix('vWCtoIDX', worldToIndex);\n      var camera = ren.getActiveCamera();\n\n      var _camera$getClippingRa = camera.getClippingRange(),\n          _camera$getClippingRa2 = _slicedToArray(_camera$getClippingRa, 2),\n          cRange0 = _camera$getClippingRa2[0],\n          cRange1 = _camera$getClippingRa2[1];\n\n      var distance = camera.getDistance(); // set the clipping range to be model.distance and model.distance + 0.1\n      // since we use the in the keyMats.wcpc (world to projection) matrix\n      // the projection matrix calculation relies on the clipping range to be\n      // set correctly. This is done inside the interactorStyleMPRSlice which\n      // limits use cases where the interactor style is not used.\n\n      camera.setClippingRange(distance, distance + 0.1);\n      var labelOutlineKeyMats = model.openGLCamera.getKeyMatrices(ren); // Get the projection coordinate to world coordinate transformation matrix.\n\n      mat4.invert(model.projectionToWorld, labelOutlineKeyMats.wcpc); // reset the clipping range since the keyMats are cached\n\n      camera.setClippingRange(cRange0, cRange1); // to re compute the matrices for the current camera and cache them\n\n      model.openGLCamera.getKeyMatrices(ren);\n      program.setUniformMatrix('PCWCMatrix', model.projectionToWorld);\n      var size = publicAPI.getRenderTargetSize();\n      program.setUniformf('vpWidth', size[0]);\n      program.setUniformf('vpHeight', size[1]);\n      var offset = publicAPI.getRenderTargetOffset();\n      program.setUniformf('vpOffsetX', offset[0] / size[0]);\n      program.setUniformf('vpOffsetY', offset[1] / size[1]);\n    }\n\n    mat4.invert(model.projectionToView, keyMats.vcpc);\n    program.setUniformMatrix('PCVCMatrix', model.projectionToView); // handle lighting values\n\n    if (model.lastLightComplexity === 0) {\n      return;\n    }\n\n    var lightNum = 0;\n    var lightColor = [];\n    var lightDir = [];\n    var halfAngle = [];\n    ren.getLights().forEach(function (light) {\n      var status = light.getSwitch();\n\n      if (status > 0) {\n        var dColor = light.getColor();\n        var intensity = light.getIntensity();\n        lightColor[0 + lightNum * 3] = dColor[0] * intensity;\n        lightColor[1 + lightNum * 3] = dColor[1] * intensity;\n        lightColor[2 + lightNum * 3] = dColor[2] * intensity;\n        var ldir = light.getDirection();\n        vec3.set(normal, ldir[0], ldir[1], ldir[2]);\n        vec3.transformMat3(normal, normal, keyMats.normalMatrix); // in view coordinat\n\n        vec3.normalize(normal, normal);\n        lightDir[0 + lightNum * 3] = normal[0];\n        lightDir[1 + lightNum * 3] = normal[1];\n        lightDir[2 + lightNum * 3] = normal[2]; // camera DOP is 0,0,-1.0 in VC\n\n        halfAngle[0 + lightNum * 3] = -0.5 * normal[0];\n        halfAngle[1 + lightNum * 3] = -0.5 * normal[1];\n        halfAngle[2 + lightNum * 3] = -0.5 * (normal[2] - 1.0);\n        lightNum++;\n      }\n    });\n    program.setUniformi('twoSidedLighting', ren.getTwoSidedLighting());\n    program.setUniformi('lightNum', lightNum);\n    program.setUniform3fv('lightColor', lightColor);\n    program.setUniform3fv('lightDirectionVC', lightDir);\n    program.setUniform3fv('lightHalfAngleVC', halfAngle);\n\n    if (model.lastLightComplexity === 3) {\n      lightNum = 0;\n      var lightPositionVC = [];\n      var lightAttenuation = [];\n      var lightConeAngle = [];\n      var lightExponent = [];\n      var lightPositional = [];\n      ren.getLights().forEach(function (light) {\n        var status = light.getSwitch();\n\n        if (status > 0) {\n          var attenuation = light.getAttenuationValues();\n          lightAttenuation[0 + lightNum * 3] = attenuation[0];\n          lightAttenuation[1 + lightNum * 3] = attenuation[1];\n          lightAttenuation[2 + lightNum * 3] = attenuation[2];\n          lightExponent[lightNum] = light.getExponent();\n          lightConeAngle[lightNum] = light.getConeAngle();\n          lightPositional[lightNum] = light.getPositional();\n          var lp = light.getTransformedPosition();\n          vec3.transformMat4(lp, lp, model.modelToView);\n          lightPositionVC[0 + lightNum * 3] = lp[0];\n          lightPositionVC[1 + lightNum * 3] = lp[1];\n          lightPositionVC[2 + lightNum * 3] = lp[2];\n          lightNum += 1;\n        }\n      });\n      program.setUniform3fv('lightPositionVC', lightPositionVC);\n      program.setUniform3fv('lightAttenuation', lightAttenuation);\n      program.setUniformfv('lightConeAngle', lightConeAngle);\n      program.setUniformfv('lightExponent', lightExponent);\n      program.setUniformiv('lightPositional', lightPositional);\n    }\n\n    if (model.renderable.getVolumetricScatteringBlending() > 0.0) {\n      program.setUniformf('giReach', model.renderable.getGlobalIlluminationReach());\n      program.setUniformf('volumetricScatteringBlending', model.renderable.getVolumetricScatteringBlending());\n      program.setUniformf('volumeShadowSamplingDistFactor', model.renderable.getVolumeShadowSamplingDistFactor());\n      program.setUniformf('anisotropy', model.renderable.getAnisotropy());\n      program.setUniformf('anisotropy2', Math.pow(model.renderable.getAnisotropy(), 2.0));\n    }\n\n    if (model.renderable.getLocalAmbientOcclusion() && actor.getProperty().getAmbient() > 0.0) {\n      var ks = model.renderable.getLAOKernelSize();\n      program.setUniformi('kernelSize', ks);\n      var kernelSample = [];\n\n      for (var _i2 = 0; _i2 < ks; _i2++) {\n        kernelSample[_i2 * 2] = Math.random() * 0.5;\n        kernelSample[_i2 * 2 + 1] = Math.random() * 0.5;\n      }\n\n      program.setUniform2fv('kernelSample', kernelSample);\n      program.setUniformi('kernelRadius', model.renderable.getLAOKernelRadius());\n    }\n  };\n\n  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {\n    var program = cellBO.getProgram();\n    program.setUniformi('ctexture', model.colorTexture.getTextureUnit());\n    program.setUniformi('otexture', model.opacityTexture.getTextureUnit());\n    program.setUniformi('jtexture', model.jitterTexture.getTextureUnit());\n    var volInfo = model.scalarTexture.getVolumeInfo();\n    var vprop = actor.getProperty(); // set the component mix when independent\n\n    var numComp = model.scalarTexture.getComponents();\n    var iComps = actor.getProperty().getIndependentComponents();\n\n    if (iComps && numComp >= 2) {\n      for (var i = 0; i < numComp; i++) {\n        program.setUniformf(\"mix\".concat(i), actor.getProperty().getComponentWeight(i));\n      }\n    } // three levels of shift scale combined into one\n    // for performance in the fragment shader\n\n\n    for (var _i3 = 0; _i3 < numComp; _i3++) {\n      var target = iComps ? _i3 : 0;\n      var sscale = volInfo.scale[_i3];\n      var ofun = vprop.getScalarOpacity(target);\n      var oRange = ofun.getRange();\n      var oscale = sscale / (oRange[1] - oRange[0]);\n      var oshift = (volInfo.offset[_i3] - oRange[0]) / (oRange[1] - oRange[0]);\n      program.setUniformf(\"oshift\".concat(_i3), oshift);\n      program.setUniformf(\"oscale\".concat(_i3), oscale);\n      var cfun = vprop.getRGBTransferFunction(target);\n      var cRange = cfun.getRange();\n      var cshift = (volInfo.offset[_i3] - cRange[0]) / (cRange[1] - cRange[0]);\n      var cScale = sscale / (cRange[1] - cRange[0]);\n      program.setUniformf(\"cshift\".concat(_i3), cshift);\n      program.setUniformf(\"cscale\".concat(_i3), cScale);\n    }\n\n    if (model.gopacity) {\n      if (iComps) {\n        for (var nc = 0; nc < numComp; ++nc) {\n          var _sscale = volInfo.scale[nc];\n          var useGO = vprop.getUseGradientOpacity(nc);\n\n          if (useGO) {\n            var gomin = vprop.getGradientOpacityMinimumOpacity(nc);\n            var gomax = vprop.getGradientOpacityMaximumOpacity(nc);\n            program.setUniformf(\"gomin\".concat(nc), gomin);\n            program.setUniformf(\"gomax\".concat(nc), gomax);\n            var goRange = [vprop.getGradientOpacityMinimumValue(nc), vprop.getGradientOpacityMaximumValue(nc)];\n            program.setUniformf(\"goscale\".concat(nc), _sscale * (gomax - gomin) / (goRange[1] - goRange[0]));\n            program.setUniformf(\"goshift\".concat(nc), -goRange[0] * (gomax - gomin) / (goRange[1] - goRange[0]) + gomin);\n          } else {\n            program.setUniformf(\"gomin\".concat(nc), 1.0);\n            program.setUniformf(\"gomax\".concat(nc), 1.0);\n            program.setUniformf(\"goscale\".concat(nc), 0.0);\n            program.setUniformf(\"goshift\".concat(nc), 1.0);\n          }\n        }\n      } else {\n        var _sscale2 = volInfo.scale[numComp - 1];\n\n        var _gomin = vprop.getGradientOpacityMinimumOpacity(0);\n\n        var _gomax = vprop.getGradientOpacityMaximumOpacity(0);\n\n        program.setUniformf('gomin0', _gomin);\n        program.setUniformf('gomax0', _gomax);\n        var _goRange = [vprop.getGradientOpacityMinimumValue(0), vprop.getGradientOpacityMaximumValue(0)];\n        program.setUniformf('goscale0', _sscale2 * (_gomax - _gomin) / (_goRange[1] - _goRange[0]));\n        program.setUniformf('goshift0', -_goRange[0] * (_gomax - _gomin) / (_goRange[1] - _goRange[0]) + _gomin);\n      }\n    }\n\n    var vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();\n\n    if (vtkImageLabelOutline === true) {\n      var labelOutlineThickness = actor.getProperty().getLabelOutlineThickness();\n      var labelOutlineOpacity = actor.getProperty().getLabelOutlineOpacity();\n      program.setUniformi('outlineThickness', labelOutlineThickness);\n      program.setUniformf('outlineOpacity', labelOutlineOpacity);\n    }\n\n    if (model.lastLightComplexity > 0) {\n      program.setUniformf('vAmbient', vprop.getAmbient());\n      program.setUniformf('vDiffuse', vprop.getDiffuse());\n      program.setUniformf('vSpecular', vprop.getSpecular());\n      program.setUniformf('vSpecularPower', vprop.getSpecularPower());\n    }\n  };\n\n  publicAPI.getClippingPlaneShaderParameters = function (cellBO, ren, actor) {\n    if (model.renderable.getClippingPlanes().length > 0) {\n      var keyMats = model.openGLCamera.getKeyMatrices(ren);\n      var clipPlaneNormals = [];\n      var clipPlaneDistances = [];\n      var clipPlaneOrigins = [];\n      var clipPlanes = model.renderable.getClippingPlanes();\n      var clipPlaneSize = clipPlanes.length;\n\n      for (var i = 0; i < clipPlaneSize; ++i) {\n        var clipPlaneNormal = clipPlanes[i].getNormal();\n        var clipPlanePos = clipPlanes[i].getOrigin();\n        vec3.transformMat3(clipPlaneNormal, clipPlaneNormal, keyMats.normalMatrix);\n        vec3.transformMat4(clipPlanePos, clipPlanePos, keyMats.wcvc);\n        var clipPlaneDist = -1.0 * vec3.dot(clipPlanePos, clipPlaneNormal);\n        clipPlaneNormals.push(clipPlaneNormal[0]);\n        clipPlaneNormals.push(clipPlaneNormal[1]);\n        clipPlaneNormals.push(clipPlaneNormal[2]);\n        clipPlaneDistances.push(clipPlaneDist);\n        clipPlaneOrigins.push(clipPlanePos[0]);\n        clipPlaneOrigins.push(clipPlanePos[1]);\n        clipPlaneOrigins.push(clipPlanePos[2]);\n      }\n\n      var program = cellBO.getProgram();\n      program.setUniform3fv(\"vClipPlaneNormals\", clipPlaneNormals);\n      program.setUniformfv(\"vClipPlaneDistances\", clipPlaneDistances);\n      program.setUniform3fv(\"vClipPlaneOrigins\", clipPlaneOrigins);\n      program.setUniformi(\"clip_numPlanes\", clipPlaneSize);\n    }\n  }; // unsubscribe from our listeners\n\n\n  publicAPI.delete = chain(function () {\n    if (model._animationRateSubscription) {\n      model._animationRateSubscription.unsubscribe();\n\n      model._animationRateSubscription = null;\n    }\n  }, publicAPI.delete);\n\n  publicAPI.getRenderTargetSize = function () {\n    if (model._useSmallViewport) {\n      return [model._smallViewportWidth, model._smallViewportHeight];\n    }\n\n    var _model$_openGLRendere = model._openGLRenderer.getTiledSizeAndOrigin(),\n        usize = _model$_openGLRendere.usize,\n        vsize = _model$_openGLRendere.vsize;\n\n    return [usize, vsize];\n  };\n\n  publicAPI.getRenderTargetOffset = function () {\n    var _model$_openGLRendere2 = model._openGLRenderer.getTiledSizeAndOrigin(),\n        lowerLeftU = _model$_openGLRendere2.lowerLeftU,\n        lowerLeftV = _model$_openGLRendere2.lowerLeftV;\n\n    return [lowerLeftU, lowerLeftV];\n  };\n\n  publicAPI.getCurrentSampleDistance = function (ren) {\n    var rwi = ren.getVTKWindow().getInteractor();\n    var baseSampleDistance = model.renderable.getSampleDistance();\n\n    if (rwi.isAnimating()) {\n      var factor = model.renderable.getInteractionSampleDistanceFactor();\n      return baseSampleDistance * factor;\n    }\n\n    return baseSampleDistance;\n  };\n\n  publicAPI.renderPieceStart = function (ren, actor) {\n    var rwi = ren.getVTKWindow().getInteractor();\n\n    if (!model._lastScale) {\n      model._lastScale = model.renderable.getInitialInteractionScale();\n    }\n\n    model._useSmallViewport = false;\n\n    if (rwi.isAnimating() && model._lastScale > 1.5) {\n      model._useSmallViewport = true;\n    }\n\n    if (!model._animationRateSubscription) {\n      // when the animation frame rate changes recompute the scale factor\n      model._animationRateSubscription = rwi.onAnimationFrameRateUpdate(function () {\n        if (model.renderable.getAutoAdjustSampleDistances()) {\n          var frate = rwi.getRecentAnimationFrameRate();\n          var adjustment = rwi.getDesiredUpdateRate() / frate; // only change if we are off by 15%\n\n          if (adjustment > 1.15 || adjustment < 0.85) {\n            model._lastScale *= adjustment;\n          } // clamp scale to some reasonable values.\n          // Below 1.5 we will just be using full resolution as that is close enough\n          // Above 400 seems like a lot so we limit to that 1/20th per axis\n\n\n          if (model._lastScale > 400) {\n            model._lastScale = 400;\n          }\n\n          if (model._lastScale < 1.5) {\n            model._lastScale = 1.5;\n          }\n        } else {\n          model._lastScale = model.renderable.getImageSampleDistance() * model.renderable.getImageSampleDistance();\n        }\n      });\n    } // use/create/resize framebuffer if needed\n\n\n    if (model._useSmallViewport) {\n      var size = model._openGLRenderWindow.getFramebufferSize();\n\n      var scaleFactor = 1 / Math.sqrt(model._lastScale);\n      model._smallViewportWidth = Math.ceil(scaleFactor * size[0]);\n      model._smallViewportHeight = Math.ceil(scaleFactor * size[1]); // adjust viewportSize to always be at most the dest fo size\n\n      if (model._smallViewportHeight > size[1]) {\n        model._smallViewportHeight = size[1];\n      }\n\n      if (model._smallViewportWidth > size[0]) {\n        model._smallViewportWidth = size[0];\n      }\n\n      model.framebuffer.saveCurrentBindingsAndBuffers();\n\n      if (model.framebuffer.getGLFramebuffer() === null) {\n        model.framebuffer.create(size[0], size[1]);\n        model.framebuffer.populateFramebuffer();\n      } else {\n        var fbSize = model.framebuffer.getSize();\n\n        if (fbSize[0] !== size[0] || fbSize[1] !== size[1]) {\n          model.framebuffer.create(size[0], size[1]);\n          model.framebuffer.populateFramebuffer();\n        }\n      }\n\n      model.framebuffer.bind();\n      var gl = model.context;\n      gl.clearColor(0.0, 0.0, 0.0, 0.0);\n      gl.colorMask(true, true, true, true);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.viewport(0, 0, model._smallViewportWidth, model._smallViewportHeight);\n      model.fvp = [model._smallViewportWidth / size[0], model._smallViewportHeight / size[1]];\n    }\n\n    model.context.disable(model.context.DEPTH_TEST); // make sure the BOs are up to date\n\n    publicAPI.updateBufferObjects(ren, actor); // set interpolation on the texture based on property setting\n\n    var iType = actor.getProperty().getInterpolationType();\n\n    if (iType === InterpolationType.NEAREST) {\n      model.scalarTexture.setMinificationFilter(Filter.NEAREST);\n      model.scalarTexture.setMagnificationFilter(Filter.NEAREST);\n    } else {\n      model.scalarTexture.setMinificationFilter(Filter.LINEAR);\n      model.scalarTexture.setMagnificationFilter(Filter.LINEAR);\n    } // Bind the OpenGL, this is shared between the different primitive/cell types.\n\n\n    model.lastBoundBO = null; // if we have a zbuffer texture then activate it\n\n    if (model.zBufferTexture !== null) {\n      model.zBufferTexture.activate();\n    }\n  };\n\n  publicAPI.renderPieceDraw = function (ren, actor) {\n    var gl = model.context; // render the texture\n\n    model.scalarTexture.activate();\n    model.opacityTexture.activate();\n    model.colorTexture.activate();\n    model.jitterTexture.activate();\n    publicAPI.updateShaders(model.tris, ren, actor); // First we do the triangles, update the shader, set uniforms, etc.\n    // for (let i = 0; i < 11; ++i) {\n    //   gl.drawArrays(gl.TRIANGLES, 66 * i, 66);\n    // }\n\n    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n    model.tris.getVAO().release();\n    model.scalarTexture.deactivate();\n    model.colorTexture.deactivate();\n    model.opacityTexture.deactivate();\n    model.jitterTexture.deactivate();\n  };\n\n  publicAPI.renderPieceFinish = function (ren, actor) {\n    // if we have a zbuffer texture then deactivate it\n    if (model.zBufferTexture !== null) {\n      model.zBufferTexture.deactivate();\n    }\n\n    if (model._useSmallViewport) {\n      // now copy the framebuffer with the volume into the\n      // regular buffer\n      model.framebuffer.restorePreviousBindingsAndBuffers();\n\n      if (model.copyShader === null) {\n        model.copyShader = model._openGLRenderWindow.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'uniform vec2 tfactor;', 'varying vec2 tcoord;', 'void main() { tcoord = vec2(vertexDC.x*0.5 + 0.5, vertexDC.y*0.5 + 0.5) * tfactor; gl_Position = vertexDC; }'].join('\\n'), ['//VTK::System::Dec', '//VTK::Output::Dec', 'uniform sampler2D texture1;', 'varying vec2 tcoord;', 'void main() { gl_FragData[0] = texture2D(texture1,tcoord); }'].join('\\n'), '');\n        var program = model.copyShader;\n        model.copyVAO = vtkVertexArrayObject.newInstance();\n        model.copyVAO.setOpenGLRenderWindow(model._openGLRenderWindow);\n        model.tris.getCABO().bind();\n\n        if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {\n          vtkErrorMacro('Error setting vertexDC in copy shader VAO.');\n        }\n      } else {\n        model._openGLRenderWindow.getShaderCache().readyShaderProgram(model.copyShader);\n      }\n\n      var size = model._openGLRenderWindow.getFramebufferSize();\n\n      model.context.viewport(0, 0, size[0], size[1]); // activate texture\n\n      var tex = model.framebuffer.getColorTexture();\n      tex.activate();\n      model.copyShader.setUniformi('texture', tex.getTextureUnit());\n      model.copyShader.setUniform2f('tfactor', model.fvp[0], model.fvp[1]);\n      var gl = model.context;\n      gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA); // render quad\n\n      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());\n      tex.deactivate();\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n  };\n\n  publicAPI.renderPiece = function (ren, actor) {\n    publicAPI.invokeEvent({\n      type: 'StartEvent'\n    });\n    model.renderable.update();\n    model.currentInput = model.renderable.getInputData();\n    publicAPI.invokeEvent({\n      type: 'EndEvent'\n    });\n\n    if (!model.currentInput) {\n      vtkErrorMacro('No input!');\n      return;\n    }\n\n    publicAPI.renderPieceStart(ren, actor);\n    publicAPI.renderPieceDraw(ren, actor);\n    publicAPI.renderPieceFinish(ren, actor);\n  };\n\n  publicAPI.computeBounds = function (ren, actor) {\n    if (!publicAPI.getInput()) {\n      uninitializeBounds(model.Bounds);\n      return;\n    }\n\n    model.bounds = publicAPI.getInput().getBounds();\n  };\n\n  publicAPI.updateBufferObjects = function (ren, actor) {\n    // Rebuild buffers if needed\n    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {\n      publicAPI.buildBufferObjects(ren, actor);\n    }\n  };\n\n  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {\n    // first do a coarse check\n    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  publicAPI.buildBufferObjects = function (ren, actor) {\n    var image = model.currentInput;\n\n    if (!image) {\n      return;\n    }\n\n    var scalars = image.getPointData() && image.getPointData().getScalars();\n\n    if (!scalars) {\n      return;\n    }\n\n    var vprop = actor.getProperty();\n\n    if (!model.jitterTexture.getHandle()) {\n      var oTable = new Uint8Array(32 * 32);\n\n      for (var i = 0; i < 32 * 32; ++i) {\n        oTable[i] = 255.0 * Math.random();\n      }\n\n      model.jitterTexture.setMinificationFilter(Filter.LINEAR);\n      model.jitterTexture.setMagnificationFilter(Filter.LINEAR);\n      model.jitterTexture.create2DFromRaw(32, 32, 1, VtkDataTypes.UNSIGNED_CHAR, oTable);\n    }\n\n    var numComp = scalars.getNumberOfComponents();\n    var iComps = vprop.getIndependentComponents();\n    var numIComps = iComps ? numComp : 1; // rebuild opacity tfun?\n\n    var toString = \"\".concat(vprop.getMTime());\n\n    if (model.opacityTextureString !== toString) {\n      var oWidth = 1024;\n      var oSize = oWidth * 2 * numIComps;\n      var ofTable = new Float32Array(oSize);\n      var tmpTable = new Float32Array(oWidth);\n\n      for (var c = 0; c < numIComps; ++c) {\n        var ofun = vprop.getScalarOpacity(c);\n        var opacityFactor = publicAPI.getCurrentSampleDistance(ren) / vprop.getScalarOpacityUnitDistance(c);\n        var oRange = ofun.getRange();\n        ofun.getTable(oRange[0], oRange[1], oWidth, tmpTable, 1); // adjust for sample distance etc\n\n        for (var _i4 = 0; _i4 < oWidth; ++_i4) {\n          ofTable[c * oWidth * 2 + _i4] = 1.0 - Math.pow(1.0 - tmpTable[_i4], opacityFactor);\n          ofTable[c * oWidth * 2 + _i4 + oWidth] = ofTable[c * oWidth * 2 + _i4];\n        }\n      }\n\n      model.opacityTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.opacityTexture.setMinificationFilter(Filter.LINEAR);\n      model.opacityTexture.setMagnificationFilter(Filter.LINEAR); // use float texture where possible because we really need the resolution\n      // for this table. Errors in low values of opacity accumulate to\n      // visible artifacts. High values of opacity quickly terminate without\n      // artifacts.\n\n      if (model._openGLRenderWindow.getWebgl2() || model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {\n        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.FLOAT, ofTable);\n      } else {\n        var _oTable = new Uint8Array(oSize);\n\n        for (var _i5 = 0; _i5 < oSize; ++_i5) {\n          _oTable[_i5] = 255.0 * ofTable[_i5];\n        }\n\n        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, VtkDataTypes.UNSIGNED_CHAR, _oTable);\n      }\n\n      model.opacityTextureString = toString;\n    } // rebuild color tfun?\n\n\n    toString = \"\".concat(vprop.getMTime());\n\n    if (model.colorTextureString !== toString) {\n      var cWidth = 1024;\n      var cSize = cWidth * 2 * numIComps * 3;\n      var cTable = new Uint8Array(cSize);\n\n      var _tmpTable = new Float32Array(cWidth * 3);\n\n      for (var _c = 0; _c < numIComps; ++_c) {\n        var cfun = vprop.getRGBTransferFunction(_c);\n        var cRange = cfun.getRange();\n        cfun.getTable(cRange[0], cRange[1], cWidth, _tmpTable, 1);\n\n        for (var _i6 = 0; _i6 < cWidth * 3; ++_i6) {\n          cTable[_c * cWidth * 6 + _i6] = 255.0 * _tmpTable[_i6];\n          cTable[_c * cWidth * 6 + _i6 + cWidth * 3] = 255.0 * _tmpTable[_i6];\n        }\n      }\n\n      model.colorTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.colorTexture.setMinificationFilter(Filter.LINEAR);\n      model.colorTexture.setMagnificationFilter(Filter.LINEAR);\n      model.colorTexture.create2DFromRaw(cWidth, 2 * numIComps, 3, VtkDataTypes.UNSIGNED_CHAR, cTable);\n      model.colorTextureString = toString;\n    } // rebuild the scalarTexture if the data has changed\n\n\n    toString = \"\".concat(image.getMTime());\n\n    if (model.scalarTextureString !== toString) {\n      // Build the textures\n      var dims = image.getDimensions(); // Use norm16 for scalar texture if the extension is available\n\n      model.scalarTexture.setOglNorm16Ext(model.context.getExtension('EXT_texture_norm16'));\n      model.scalarTexture.releaseGraphicsResources(model._openGLRenderWindow);\n      model.scalarTexture.resetFormatAndType();\n      model.scalarTexture.create3DFilterableFromDataArray(dims[0], dims[1], dims[2], scalars, model.renderable.getPreferSizeOverAccuracy());\n      model.scalarTextureString = toString;\n    }\n\n    if (!model.tris.getCABO().getElementCount()) {\n      // build the CABO\n      var ptsArray = new Float32Array(12);\n\n      for (var _i7 = 0; _i7 < 4; _i7++) {\n        ptsArray[_i7 * 3] = _i7 % 2 * 2 - 1.0;\n        ptsArray[_i7 * 3 + 1] = _i7 > 1 ? 1.0 : -1.0;\n        ptsArray[_i7 * 3 + 2] = -1.0;\n      }\n\n      var cellArray = new Uint16Array(8);\n      cellArray[0] = 3;\n      cellArray[1] = 0;\n      cellArray[2] = 1;\n      cellArray[3] = 3;\n      cellArray[4] = 3;\n      cellArray[5] = 0;\n      cellArray[6] = 3;\n      cellArray[7] = 2; // const dim = 12.0;\n      // const ptsArray = new Float32Array(3 * dim * dim);\n      // for (let i = 0; i < dim; i++) {\n      //   for (let j = 0; j < dim; j++) {\n      //     const offset = ((i * dim) + j) * 3;\n      //     ptsArray[offset] = (2.0 * (i / (dim - 1.0))) - 1.0;\n      //     ptsArray[offset + 1] = (2.0 * (j / (dim - 1.0))) - 1.0;\n      //     ptsArray[offset + 2] = -1.0;\n      //   }\n      // }\n      // const cellArray = new Uint16Array(8 * (dim - 1) * (dim - 1));\n      // for (let i = 0; i < dim - 1; i++) {\n      //   for (let j = 0; j < dim - 1; j++) {\n      //     const offset = 8 * ((i * (dim - 1)) + j);\n      //     cellArray[offset] = 3;\n      //     cellArray[offset + 1] = (i * dim) + j;\n      //     cellArray[offset + 2] = (i * dim) + 1 + j;\n      //     cellArray[offset + 3] = ((i + 1) * dim) + 1 + j;\n      //     cellArray[offset + 4] = 3;\n      //     cellArray[offset + 5] = (i * dim) + j;\n      //     cellArray[offset + 6] = ((i + 1) * dim) + 1 + j;\n      //     cellArray[offset + 7] = ((i + 1) * dim) + j;\n      //   }\n      // }\n\n      var points = vtkDataArray.newInstance({\n        numberOfComponents: 3,\n        values: ptsArray\n      });\n      points.setName('points');\n      var cells = vtkDataArray.newInstance({\n        numberOfComponents: 1,\n        values: cellArray\n      });\n      model.tris.getCABO().createVBO(cells, 'polys', Representation.SURFACE, {\n        points: points,\n        cellOffset: 0\n      });\n    }\n\n    model.VBOBuildTime.modified();\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\n\nvar DEFAULT_VALUES = {\n  context: null,\n  VBOBuildTime: null,\n  scalarTexture: null,\n  scalarTextureString: null,\n  opacityTexture: null,\n  opacityTextureString: null,\n  colorTexture: null,\n  colorTextureString: null,\n  jitterTexture: null,\n  tris: null,\n  framebuffer: null,\n  copyShader: null,\n  copyVAO: null,\n  lastXYF: 1.0,\n  targetXYF: 1.0,\n  zBufferTexture: null,\n  lastZBufferTexture: null,\n  lastLightComplexity: 0,\n  fullViewportTime: 1.0,\n  idxToView: null,\n  idxNormalMatrix: null,\n  modelToView: null,\n  projectionToView: null,\n  avgWindowArea: 0.0,\n  avgFrameTime: 0.0\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance\n\n  vtkViewNode.extend(publicAPI, model, initialValues);\n  model.VBOBuildTime = {};\n  obj(model.VBOBuildTime, {\n    mtime: 0\n  });\n  model.tris = vtkHelper.newInstance();\n  model.scalarTexture = vtkOpenGLTexture.newInstance();\n  model.opacityTexture = vtkOpenGLTexture.newInstance();\n  model.colorTexture = vtkOpenGLTexture.newInstance();\n  model.jitterTexture = vtkOpenGLTexture.newInstance();\n  model.jitterTexture.setWrapS(Wrap.REPEAT);\n  model.jitterTexture.setWrapT(Wrap.REPEAT);\n  model.framebuffer = vtkOpenGLFramebuffer.newInstance();\n  model.idxToView = mat4.identity(new Float64Array(16));\n  model.idxNormalMatrix = mat3.identity(new Float64Array(9));\n  model.modelToView = mat4.identity(new Float64Array(16));\n  model.projectionToView = mat4.identity(new Float64Array(16));\n  model.projectionToWorld = mat4.identity(new Float64Array(16)); // Build VTK API\n\n  setGet(publicAPI, model, ['context']); // Object methods\n\n  vtkOpenGLVolumeMapper(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkOpenGLVolumeMapper'); // ----------------------------------------------------------------------------\n\nvar vtkVolumeMapper = {\n  newInstance: newInstance,\n  extend: extend\n}; // Register ourself to OpenGL backend if imported\n\nregisterOverride('vtkVolumeMapper', newInstance);\n\nexport { vtkVolumeMapper as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}