{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Constants from './DataArray/Constants.js';\nimport { newInstance as newInstance$1, newTypedArray, newTypedArrayFrom, obj, set, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport { n as norm } from './Math/index.js';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar DefaultDataType = Constants.DefaultDataType; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// Original source from https://www.npmjs.com/package/compute-range\n// Modified to accept type arrays\n\nfunction fastComputeRange(arr, offset, numberOfComponents) {\n  var len = arr.length;\n  var min;\n  var max;\n  var x;\n  var i;\n  if (len === 0) {\n    return {\n      min: Number.MAX_VALUE,\n      max: -Number.MAX_VALUE\n    };\n  }\n  min = arr[offset];\n  max = min;\n  for (i = offset; i < len; i += numberOfComponents) {\n    x = arr[i];\n    if (x < min) {\n      min = x;\n    } else if (x > max) {\n      max = x;\n    }\n  }\n  return {\n    min: min,\n    max: max\n  };\n}\n/**\n * @deprecated please use fastComputeRange instead\n */\n\nfunction createRangeHelper() {\n  var min = Number.MAX_VALUE;\n  var max = -Number.MAX_VALUE;\n  var count = 0;\n  var sum = 0;\n  return {\n    add: function add(value) {\n      if (min > value) {\n        min = value;\n      }\n      if (max < value) {\n        max = value;\n      }\n      count++;\n      sum += value;\n    },\n    get: function get() {\n      return {\n        min: min,\n        max: max,\n        count: count,\n        sum: sum,\n        mean: sum / count\n      };\n    },\n    getRange: function getRange() {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  };\n}\nfunction computeRange(values) {\n  var component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var numberOfComponents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (component < 0 && numberOfComponents > 1) {\n    // Compute magnitude\n    var size = values.length;\n    var numberOfValues = size / numberOfComponents;\n    var data = new Float64Array(numberOfValues);\n    for (var i = 0, j = 0; i < numberOfValues; ++i) {\n      var _i;\n      for (var nextJ = j + numberOfComponents; j < nextJ; ++j) {\n        data[i] += values[j] * values[j];\n      }\n      _i = i, data[_i] = Math.pow(data[_i], 0.5);\n    }\n    return fastComputeRange(data, 0, 1);\n  }\n  return fastComputeRange(values, component < 0 ? 0 : component, numberOfComponents);\n}\nfunction ensureRangeSize(rangeArray) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ranges = rangeArray || []; // Pad ranges with null value to get the\n\n  while (ranges.length <= size) {\n    ranges.push(null);\n  }\n  return ranges;\n}\nfunction getDataType(typedArray) {\n  // Expects toString() to return \"[object ...Array]\"\n  return Object.prototype.toString.call(typedArray).slice(8, -1);\n}\nfunction getMaxNorm(normArray) {\n  var numComps = normArray.getNumberOfComponents();\n  var maxNorm = 0.0;\n  var tuple = new Array(numComps);\n  for (var i = 0; i < normArray.getNumberOfTuples(); ++i) {\n    normArray.getTuple(i, tuple);\n    var norm$1 = norm(tuple, numComps);\n    if (norm$1 > maxNorm) {\n      maxNorm = norm$1;\n    }\n  }\n  return maxNorm;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\nvar STATIC = {\n  computeRange: computeRange,\n  createRangeHelper: createRangeHelper,\n  fastComputeRange: fastComputeRange,\n  getDataType: getDataType,\n  getMaxNorm: getMaxNorm\n}; // ----------------------------------------------------------------------------\n// vtkDataArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataArray');\n  /**\n   * Resize model.values and copy the old values to the new array.\n   * @param {Number} requestedNumTuples Final expected number of tuples; must be >= 0\n   * @returns {Boolean} True if a resize occured, false otherwise\n   */\n\n  function resize(requestedNumTuples) {\n    if (requestedNumTuples < 0) {\n      return false;\n    }\n    var numComps = publicAPI.getNumberOfComponents();\n    var curNumTuples = model.values.length / (numComps > 0 ? numComps : 1);\n    if (requestedNumTuples === curNumTuples) {\n      return true;\n    }\n    if (requestedNumTuples > curNumTuples) {\n      // Requested size is bigger than current size.  Allocate enough\n      // memory to fit the requested size and be more than double the\n      // currently allocated memory.\n      var oldValues = model.values;\n      model.values = newTypedArray(model.dataType, (requestedNumTuples + curNumTuples) * numComps);\n      model.values.set(oldValues);\n      return true;\n    } // Requested size is smaller than currently allocated size\n\n    if (model.size > requestedNumTuples * numComps) {\n      model.size = requestedNumTuples * numComps;\n      publicAPI.dataChange();\n    }\n    return true;\n  }\n  publicAPI.dataChange = function () {\n    model.ranges = null;\n    publicAPI.modified();\n  };\n  publicAPI.resize = function (requestedNumTuples) {\n    resize(requestedNumTuples);\n    var newSize = requestedNumTuples * publicAPI.getNumberOfComponents();\n    if (model.size !== newSize) {\n      model.size = newSize;\n      publicAPI.dataChange();\n      return true;\n    }\n    return false;\n  }; // FIXME, to rename into \"clear()\" or \"reset()\"\n\n  publicAPI.initialize = function () {\n    publicAPI.resize(0);\n  };\n  publicAPI.getElementComponentSize = function () {\n    return model.values.BYTES_PER_ELEMENT;\n  }; // Description:\n  // Return the data component at the location specified by tupleIdx and\n  // compIdx.\n\n  publicAPI.getComponent = function (tupleIdx) {\n    var compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return model.values[tupleIdx * model.numberOfComponents + compIdx];\n  }; // Description:\n  // Set the data component at the location specified by tupleIdx and compIdx\n  // to value.\n  // Note that i is less than NumberOfTuples and j is less than\n  //  NumberOfComponents. Make sure enough memory has been allocated\n  // (use SetNumberOfTuples() and SetNumberOfComponents()).\n\n  publicAPI.setComponent = function (tupleIdx, compIdx, value) {\n    if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {\n      model.values[tupleIdx * model.numberOfComponents + compIdx] = value;\n      publicAPI.dataChange();\n    }\n  };\n  publicAPI.getValue = function (valueIdx) {\n    var idx = valueIdx / model.numberOfComponents;\n    var comp = valueIdx % model.numberOfComponents;\n    return publicAPI.getComponent(idx, comp);\n  };\n  publicAPI.setValue = function (valueIdx, value) {\n    var idx = valueIdx / model.numberOfComponents;\n    var comp = valueIdx % model.numberOfComponents;\n    publicAPI.setComponent(idx, comp, value);\n  };\n  publicAPI.getData = function () {\n    return model.size === model.values.length ? model.values : model.values.subarray(0, model.size);\n  };\n  publicAPI.getRange = function () {\n    var componentIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    var rangeIdx = componentIndex;\n    if (rangeIdx < 0) {\n      // If scalar data, then store in slot 0 (same as componentIndex = 0).\n      // If vector data, then store in last slot.\n      rangeIdx = model.numberOfComponents === 1 ? 0 : model.numberOfComponents;\n    }\n    var range = null;\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n    range = model.ranges[rangeIdx];\n    if (range) {\n      model.rangeTuple[0] = range.min;\n      model.rangeTuple[1] = range.max;\n      return model.rangeTuple;\n    } // Need to compute ranges...\n\n    range = computeRange(publicAPI.getData(), componentIndex, model.numberOfComponents);\n    model.ranges[rangeIdx] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n  publicAPI.setRange = function (rangeValue, componentIndex) {\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n    var range = {\n      min: rangeValue.min,\n      max: rangeValue.max\n    };\n    model.ranges[componentIndex] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n  publicAPI.setTuple = function (idx, tuple) {\n    var offset = idx * model.numberOfComponents;\n    for (var i = 0; i < model.numberOfComponents; i++) {\n      model.values[offset + i] = tuple[i];\n    }\n  };\n  publicAPI.setTuples = function (idx, tuples) {\n    var i = idx * model.numberOfComponents;\n    var last = Math.min(tuples.length, model.size - i);\n    for (var j = 0; j < last;) {\n      model.values[i++] = tuples[j++];\n    }\n  };\n  publicAPI.insertTuple = function (idx, tuple) {\n    if (model.size <= idx * model.numberOfComponents) {\n      model.size = (idx + 1) * model.numberOfComponents;\n      resize(idx + 1);\n    }\n    publicAPI.setTuple(idx, tuple);\n    return idx;\n  };\n  publicAPI.insertTuples = function (idx, tuples) {\n    var end = idx + tuples.length / model.numberOfComponents;\n    if (model.size < end * model.numberOfComponents) {\n      model.size = end * model.numberOfComponents;\n      resize(end);\n    }\n    publicAPI.setTuples(idx, tuples);\n    return end;\n  };\n  publicAPI.insertNextTuple = function (tuple) {\n    var idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuple(idx, tuple);\n  };\n  publicAPI.insertNextTuples = function (tuples) {\n    var idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuples(idx, tuples);\n  };\n  publicAPI.getTuple = function (idx) {\n    var tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var numberOfComponents = model.numberOfComponents || 1;\n    var offset = idx * numberOfComponents; // Check most common component sizes first\n    // to avoid doing a for loop if possible\n\n    switch (numberOfComponents) {\n      case 4:\n        tupleToFill[3] = model.values[offset + 3];\n      // eslint-disable-next-line no-fallthrough\n\n      case 3:\n        tupleToFill[2] = model.values[offset + 2];\n      // eslint-disable-next-line no-fallthrough\n\n      case 2:\n        tupleToFill[1] = model.values[offset + 1];\n      // eslint-disable-next-line no-fallthrough\n\n      case 1:\n        tupleToFill[0] = model.values[offset];\n        break;\n      default:\n        for (var i = numberOfComponents - 1; i >= 0; --i) {\n          tupleToFill[i] = model.values[offset + i];\n        }\n    }\n    return tupleToFill;\n  };\n  publicAPI.getTuples = function (fromId, toId) {\n    var from = (fromId !== null && fromId !== void 0 ? fromId : 0) * model.numberOfComponents;\n    var to = (toId !== null && toId !== void 0 ? toId : publicAPI.getNumberOfTuples()) * model.numberOfComponents;\n    var arr = publicAPI.getData().subarray(from, to);\n    return arr.length > 0 ? arr : null;\n  };\n  publicAPI.getTupleLocation = function () {\n    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return idx * model.numberOfComponents;\n  };\n  publicAPI.getNumberOfComponents = function () {\n    return model.numberOfComponents;\n  };\n  publicAPI.getNumberOfValues = function () {\n    return model.size;\n  };\n  publicAPI.getNumberOfTuples = function () {\n    return model.size / model.numberOfComponents;\n  };\n  publicAPI.getDataType = function () {\n    return model.dataType;\n  };\n  /* eslint-disable no-use-before-define */\n\n  publicAPI.newClone = function () {\n    return newInstance({\n      empty: true,\n      name: model.name,\n      dataType: model.dataType,\n      numberOfComponents: model.numberOfComponents\n    });\n  };\n  /* eslint-enable no-use-before-define */\n\n  publicAPI.getName = function () {\n    if (!model.name) {\n      publicAPI.modified();\n      model.name = \"vtkDataArray\".concat(publicAPI.getMTime());\n    }\n    return model.name;\n  };\n  publicAPI.setData = function (typedArray, numberOfComponents) {\n    model.values = typedArray;\n    model.size = typedArray.length;\n    model.dataType = getDataType(typedArray);\n    if (numberOfComponents) {\n      model.numberOfComponents = numberOfComponents;\n    }\n    if (model.size % model.numberOfComponents !== 0) {\n      model.numberOfComponents = 1;\n    }\n    publicAPI.dataChange();\n  }; // Override serialization support\n\n  publicAPI.getState = function () {\n    if (model.deleted) {\n      return null;\n    }\n    var jsonArchive = _objectSpread(_objectSpread({}, model), {}, {\n      vtkClass: publicAPI.getClassName()\n    }); // Convert typed array to regular array\n\n    jsonArchive.values = Array.from(jsonArchive.values);\n    delete jsonArchive.buffer; // Clean any empty data\n\n    Object.keys(jsonArchive).forEach(function (keyName) {\n      if (!jsonArchive[keyName]) {\n        delete jsonArchive[keyName];\n      }\n    }); // Sort resulting object by key name\n\n    var sortedObj = {};\n    Object.keys(jsonArchive).sort().forEach(function (name) {\n      sortedObj[name] = jsonArchive[name];\n    }); // Remove mtime\n\n    if (sortedObj.mtime) {\n      delete sortedObj.mtime;\n    }\n    return sortedObj;\n  };\n  publicAPI.deepCopy = function (other) {\n    // Retain current dataType and array reference before shallowCopy call.\n    var currentType = publicAPI.getDataType();\n    var currentArray = model.values;\n    publicAPI.shallowCopy(other); // Avoid array reallocation if size already sufficient\n    // and dataTypes match.\n\n    if ((currentArray === null || currentArray === void 0 ? void 0 : currentArray.length) >= other.getNumberOfValues() && currentType === other.getDataType()) {\n      currentArray.set(other.getData());\n      model.values = currentArray;\n      publicAPI.dataChange();\n    } else {\n      publicAPI.setData(other.getData().slice());\n    }\n  };\n  publicAPI.interpolateTuple = function (idx, source1, source1Idx, source2, source2Idx, t) {\n    var numberOfComponents = model.numberOfComponents || 1;\n    if (numberOfComponents !== source1.getNumberOfComponents() || numberOfComponents !== source2.getNumberOfComponents()) {\n      vtkErrorMacro('numberOfComponents must match');\n    }\n    var tuple1 = source1.getTuple(source1Idx);\n    var tuple2 = source2.getTuple(source2Idx);\n    var out = [];\n    out.length = numberOfComponents; // Check most common component sizes first\n    // to avoid doing a for loop if possible\n\n    switch (numberOfComponents) {\n      case 4:\n        out[3] = tuple1[3] + (tuple2[3] - tuple1[3]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 3:\n        out[2] = tuple1[2] + (tuple2[2] - tuple1[2]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 2:\n        out[1] = tuple1[1] + (tuple2[1] - tuple1[1]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 1:\n        out[0] = tuple1[0] + (tuple2[0] - tuple1[0]) * t;\n        break;\n      default:\n        for (var i = 0; i < numberOfComponents; i++) {\n          out[i] = tuple1[i] + (tuple2[i] - tuple1[i]) * t;\n        }\n    }\n    return publicAPI.insertTuple(idx, out);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n// size: The current size of the dataArray.\n// NOTE: The underlying typed array may be larger than 'size'.\n\nvar DEFAULT_VALUES = {\n  name: '',\n  numberOfComponents: 1,\n  dataType: DefaultDataType,\n  rangeTuple: [0, 0] // size: undefined,\n  // values: null,\n  // ranges: null,\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  if (!model.empty && !model.values && !model.size) {\n    throw new TypeError('Cannot create vtkDataArray object without: size > 0, values');\n  }\n  if (!model.values) {\n    model.values = newTypedArray(model.dataType, model.size);\n  } else if (Array.isArray(model.values)) {\n    model.values = newTypedArrayFrom(model.dataType, model.values);\n  }\n  if (model.values) {\n    var _model$size;\n\n    // Takes the size if provided (can be lower than `model.values`) otherwise the actual length of `values`.\n    model.size = (_model$size = model.size) !== null && _model$size !== void 0 ? _model$size : model.values.length;\n    model.dataType = getDataType(model.values);\n  } // Object methods\n\n  obj(publicAPI, model);\n  set(publicAPI, model, ['name', 'numberOfComponents']); // Object specific methods\n\n  vtkDataArray(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkDataArray'); // ----------------------------------------------------------------------------\n\nvar vtkDataArray$1 = _objectSpread(_objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, STATIC), Constants);\nexport { STATIC, vtkDataArray$1 as default, extend, newInstance };","map":{"version":3,"names":["_defineProperty","Constants","newInstance","newInstance$1","newTypedArray","newTypedArrayFrom","obj","set","vtkErrorMacro","vtkErrorMacro$1","n","norm","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","DefaultDataType","fastComputeRange","arr","offset","numberOfComponents","len","min","max","x","Number","MAX_VALUE","createRangeHelper","count","sum","add","value","get","mean","getRange","computeRange","values","component","undefined","size","numberOfValues","data","Float64Array","j","_i","nextJ","Math","pow","ensureRangeSize","rangeArray","ranges","getDataType","typedArray","prototype","toString","call","slice","getMaxNorm","normArray","numComps","getNumberOfComponents","maxNorm","tuple","Array","getNumberOfTuples","getTuple","norm$1","STATIC","vtkDataArray","publicAPI","model","classHierarchy","resize","requestedNumTuples","curNumTuples","oldValues","dataType","dataChange","modified","newSize","initialize","getElementComponentSize","BYTES_PER_ELEMENT","getComponent","tupleIdx","compIdx","setComponent","getValue","valueIdx","idx","comp","setValue","getData","subarray","componentIndex","rangeIdx","range","rangeTuple","setRange","rangeValue","setTuple","setTuples","tuples","last","insertTuple","insertTuples","end","insertNextTuple","insertNextTuples","tupleToFill","getTuples","fromId","toId","from","to","getTupleLocation","getNumberOfValues","newClone","empty","name","getName","concat","getMTime","setData","getState","deleted","jsonArchive","vtkClass","getClassName","buffer","keyName","sortedObj","sort","mtime","deepCopy","other","currentType","currentArray","shallowCopy","interpolateTuple","source1","source1Idx","source2","source2Idx","t","tuple1","tuple2","out","DEFAULT_VALUES","extend","initialValues","assign","TypeError","isArray","_model$size","vtkDataArray$1","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Common/Core/DataArray.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Constants from './DataArray/Constants.js';\nimport { newInstance as newInstance$1, newTypedArray, newTypedArrayFrom, obj, set, vtkErrorMacro as vtkErrorMacro$1 } from '../../macros.js';\nimport { n as norm } from './Math/index.js';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar vtkErrorMacro = vtkErrorMacro$1;\nvar DefaultDataType = Constants.DefaultDataType; // ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n// Original source from https://www.npmjs.com/package/compute-range\n// Modified to accept type arrays\n\nfunction fastComputeRange(arr, offset, numberOfComponents) {\n  var len = arr.length;\n  var min;\n  var max;\n  var x;\n  var i;\n\n  if (len === 0) {\n    return {\n      min: Number.MAX_VALUE,\n      max: -Number.MAX_VALUE\n    };\n  }\n\n  min = arr[offset];\n  max = min;\n\n  for (i = offset; i < len; i += numberOfComponents) {\n    x = arr[i];\n\n    if (x < min) {\n      min = x;\n    } else if (x > max) {\n      max = x;\n    }\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n}\n/**\n * @deprecated please use fastComputeRange instead\n */\n\n\nfunction createRangeHelper() {\n  var min = Number.MAX_VALUE;\n  var max = -Number.MAX_VALUE;\n  var count = 0;\n  var sum = 0;\n  return {\n    add: function add(value) {\n      if (min > value) {\n        min = value;\n      }\n\n      if (max < value) {\n        max = value;\n      }\n\n      count++;\n      sum += value;\n    },\n    get: function get() {\n      return {\n        min: min,\n        max: max,\n        count: count,\n        sum: sum,\n        mean: sum / count\n      };\n    },\n    getRange: function getRange() {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  };\n}\n\nfunction computeRange(values) {\n  var component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var numberOfComponents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (component < 0 && numberOfComponents > 1) {\n    // Compute magnitude\n    var size = values.length;\n    var numberOfValues = size / numberOfComponents;\n    var data = new Float64Array(numberOfValues);\n\n    for (var i = 0, j = 0; i < numberOfValues; ++i) {\n      var _i;\n\n      for (var nextJ = j + numberOfComponents; j < nextJ; ++j) {\n        data[i] += values[j] * values[j];\n      }\n\n      _i = i, data[_i] = Math.pow(data[_i], 0.5);\n    }\n\n    return fastComputeRange(data, 0, 1);\n  }\n\n  return fastComputeRange(values, component < 0 ? 0 : component, numberOfComponents);\n}\n\nfunction ensureRangeSize(rangeArray) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ranges = rangeArray || []; // Pad ranges with null value to get the\n\n  while (ranges.length <= size) {\n    ranges.push(null);\n  }\n\n  return ranges;\n}\n\nfunction getDataType(typedArray) {\n  // Expects toString() to return \"[object ...Array]\"\n  return Object.prototype.toString.call(typedArray).slice(8, -1);\n}\n\nfunction getMaxNorm(normArray) {\n  var numComps = normArray.getNumberOfComponents();\n  var maxNorm = 0.0;\n  var tuple = new Array(numComps);\n\n  for (var i = 0; i < normArray.getNumberOfTuples(); ++i) {\n    normArray.getTuple(i, tuple);\n    var norm$1 = norm(tuple, numComps);\n\n    if (norm$1 > maxNorm) {\n      maxNorm = norm$1;\n    }\n  }\n\n  return maxNorm;\n} // ----------------------------------------------------------------------------\n// Static API\n// ----------------------------------------------------------------------------\n\n\nvar STATIC = {\n  computeRange: computeRange,\n  createRangeHelper: createRangeHelper,\n  fastComputeRange: fastComputeRange,\n  getDataType: getDataType,\n  getMaxNorm: getMaxNorm\n}; // ----------------------------------------------------------------------------\n// vtkDataArray methods\n// ----------------------------------------------------------------------------\n\nfunction vtkDataArray(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkDataArray');\n  /**\n   * Resize model.values and copy the old values to the new array.\n   * @param {Number} requestedNumTuples Final expected number of tuples; must be >= 0\n   * @returns {Boolean} True if a resize occured, false otherwise\n   */\n\n  function resize(requestedNumTuples) {\n    if (requestedNumTuples < 0) {\n      return false;\n    }\n\n    var numComps = publicAPI.getNumberOfComponents();\n    var curNumTuples = model.values.length / (numComps > 0 ? numComps : 1);\n\n    if (requestedNumTuples === curNumTuples) {\n      return true;\n    }\n\n    if (requestedNumTuples > curNumTuples) {\n      // Requested size is bigger than current size.  Allocate enough\n      // memory to fit the requested size and be more than double the\n      // currently allocated memory.\n      var oldValues = model.values;\n      model.values = newTypedArray(model.dataType, (requestedNumTuples + curNumTuples) * numComps);\n      model.values.set(oldValues);\n      return true;\n    } // Requested size is smaller than currently allocated size\n\n\n    if (model.size > requestedNumTuples * numComps) {\n      model.size = requestedNumTuples * numComps;\n      publicAPI.dataChange();\n    }\n\n    return true;\n  }\n\n  publicAPI.dataChange = function () {\n    model.ranges = null;\n    publicAPI.modified();\n  };\n\n  publicAPI.resize = function (requestedNumTuples) {\n    resize(requestedNumTuples);\n    var newSize = requestedNumTuples * publicAPI.getNumberOfComponents();\n\n    if (model.size !== newSize) {\n      model.size = newSize;\n      publicAPI.dataChange();\n      return true;\n    }\n\n    return false;\n  }; // FIXME, to rename into \"clear()\" or \"reset()\"\n\n\n  publicAPI.initialize = function () {\n    publicAPI.resize(0);\n  };\n\n  publicAPI.getElementComponentSize = function () {\n    return model.values.BYTES_PER_ELEMENT;\n  }; // Description:\n  // Return the data component at the location specified by tupleIdx and\n  // compIdx.\n\n\n  publicAPI.getComponent = function (tupleIdx) {\n    var compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return model.values[tupleIdx * model.numberOfComponents + compIdx];\n  }; // Description:\n  // Set the data component at the location specified by tupleIdx and compIdx\n  // to value.\n  // Note that i is less than NumberOfTuples and j is less than\n  //  NumberOfComponents. Make sure enough memory has been allocated\n  // (use SetNumberOfTuples() and SetNumberOfComponents()).\n\n\n  publicAPI.setComponent = function (tupleIdx, compIdx, value) {\n    if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {\n      model.values[tupleIdx * model.numberOfComponents + compIdx] = value;\n      publicAPI.dataChange();\n    }\n  };\n\n  publicAPI.getValue = function (valueIdx) {\n    var idx = valueIdx / model.numberOfComponents;\n    var comp = valueIdx % model.numberOfComponents;\n    return publicAPI.getComponent(idx, comp);\n  };\n\n  publicAPI.setValue = function (valueIdx, value) {\n    var idx = valueIdx / model.numberOfComponents;\n    var comp = valueIdx % model.numberOfComponents;\n    publicAPI.setComponent(idx, comp, value);\n  };\n\n  publicAPI.getData = function () {\n    return model.size === model.values.length ? model.values : model.values.subarray(0, model.size);\n  };\n\n  publicAPI.getRange = function () {\n    var componentIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    var rangeIdx = componentIndex;\n\n    if (rangeIdx < 0) {\n      // If scalar data, then store in slot 0 (same as componentIndex = 0).\n      // If vector data, then store in last slot.\n      rangeIdx = model.numberOfComponents === 1 ? 0 : model.numberOfComponents;\n    }\n\n    var range = null;\n\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n\n    range = model.ranges[rangeIdx];\n\n    if (range) {\n      model.rangeTuple[0] = range.min;\n      model.rangeTuple[1] = range.max;\n      return model.rangeTuple;\n    } // Need to compute ranges...\n\n\n    range = computeRange(publicAPI.getData(), componentIndex, model.numberOfComponents);\n    model.ranges[rangeIdx] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n\n  publicAPI.setRange = function (rangeValue, componentIndex) {\n    if (!model.ranges) {\n      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);\n    }\n\n    var range = {\n      min: rangeValue.min,\n      max: rangeValue.max\n    };\n    model.ranges[componentIndex] = range;\n    model.rangeTuple[0] = range.min;\n    model.rangeTuple[1] = range.max;\n    return model.rangeTuple;\n  };\n\n  publicAPI.setTuple = function (idx, tuple) {\n    var offset = idx * model.numberOfComponents;\n\n    for (var i = 0; i < model.numberOfComponents; i++) {\n      model.values[offset + i] = tuple[i];\n    }\n  };\n\n  publicAPI.setTuples = function (idx, tuples) {\n    var i = idx * model.numberOfComponents;\n    var last = Math.min(tuples.length, model.size - i);\n\n    for (var j = 0; j < last;) {\n      model.values[i++] = tuples[j++];\n    }\n  };\n\n  publicAPI.insertTuple = function (idx, tuple) {\n    if (model.size <= idx * model.numberOfComponents) {\n      model.size = (idx + 1) * model.numberOfComponents;\n      resize(idx + 1);\n    }\n\n    publicAPI.setTuple(idx, tuple);\n    return idx;\n  };\n\n  publicAPI.insertTuples = function (idx, tuples) {\n    var end = idx + tuples.length / model.numberOfComponents;\n\n    if (model.size < end * model.numberOfComponents) {\n      model.size = end * model.numberOfComponents;\n      resize(end);\n    }\n\n    publicAPI.setTuples(idx, tuples);\n    return end;\n  };\n\n  publicAPI.insertNextTuple = function (tuple) {\n    var idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuple(idx, tuple);\n  };\n\n  publicAPI.insertNextTuples = function (tuples) {\n    var idx = model.size / model.numberOfComponents;\n    return publicAPI.insertTuples(idx, tuples);\n  };\n\n  publicAPI.getTuple = function (idx) {\n    var tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var numberOfComponents = model.numberOfComponents || 1;\n    var offset = idx * numberOfComponents; // Check most common component sizes first\n    // to avoid doing a for loop if possible\n\n    switch (numberOfComponents) {\n      case 4:\n        tupleToFill[3] = model.values[offset + 3];\n      // eslint-disable-next-line no-fallthrough\n\n      case 3:\n        tupleToFill[2] = model.values[offset + 2];\n      // eslint-disable-next-line no-fallthrough\n\n      case 2:\n        tupleToFill[1] = model.values[offset + 1];\n      // eslint-disable-next-line no-fallthrough\n\n      case 1:\n        tupleToFill[0] = model.values[offset];\n        break;\n\n      default:\n        for (var i = numberOfComponents - 1; i >= 0; --i) {\n          tupleToFill[i] = model.values[offset + i];\n        }\n\n    }\n\n    return tupleToFill;\n  };\n\n  publicAPI.getTuples = function (fromId, toId) {\n    var from = (fromId !== null && fromId !== void 0 ? fromId : 0) * model.numberOfComponents;\n    var to = (toId !== null && toId !== void 0 ? toId : publicAPI.getNumberOfTuples()) * model.numberOfComponents;\n    var arr = publicAPI.getData().subarray(from, to);\n    return arr.length > 0 ? arr : null;\n  };\n\n  publicAPI.getTupleLocation = function () {\n    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return idx * model.numberOfComponents;\n  };\n\n  publicAPI.getNumberOfComponents = function () {\n    return model.numberOfComponents;\n  };\n\n  publicAPI.getNumberOfValues = function () {\n    return model.size;\n  };\n\n  publicAPI.getNumberOfTuples = function () {\n    return model.size / model.numberOfComponents;\n  };\n\n  publicAPI.getDataType = function () {\n    return model.dataType;\n  };\n  /* eslint-disable no-use-before-define */\n\n\n  publicAPI.newClone = function () {\n    return newInstance({\n      empty: true,\n      name: model.name,\n      dataType: model.dataType,\n      numberOfComponents: model.numberOfComponents\n    });\n  };\n  /* eslint-enable no-use-before-define */\n\n\n  publicAPI.getName = function () {\n    if (!model.name) {\n      publicAPI.modified();\n      model.name = \"vtkDataArray\".concat(publicAPI.getMTime());\n    }\n\n    return model.name;\n  };\n\n  publicAPI.setData = function (typedArray, numberOfComponents) {\n    model.values = typedArray;\n    model.size = typedArray.length;\n    model.dataType = getDataType(typedArray);\n\n    if (numberOfComponents) {\n      model.numberOfComponents = numberOfComponents;\n    }\n\n    if (model.size % model.numberOfComponents !== 0) {\n      model.numberOfComponents = 1;\n    }\n\n    publicAPI.dataChange();\n  }; // Override serialization support\n\n\n  publicAPI.getState = function () {\n    if (model.deleted) {\n      return null;\n    }\n\n    var jsonArchive = _objectSpread(_objectSpread({}, model), {}, {\n      vtkClass: publicAPI.getClassName()\n    }); // Convert typed array to regular array\n\n\n    jsonArchive.values = Array.from(jsonArchive.values);\n    delete jsonArchive.buffer; // Clean any empty data\n\n    Object.keys(jsonArchive).forEach(function (keyName) {\n      if (!jsonArchive[keyName]) {\n        delete jsonArchive[keyName];\n      }\n    }); // Sort resulting object by key name\n\n    var sortedObj = {};\n    Object.keys(jsonArchive).sort().forEach(function (name) {\n      sortedObj[name] = jsonArchive[name];\n    }); // Remove mtime\n\n    if (sortedObj.mtime) {\n      delete sortedObj.mtime;\n    }\n\n    return sortedObj;\n  };\n\n  publicAPI.deepCopy = function (other) {\n    // Retain current dataType and array reference before shallowCopy call.\n    var currentType = publicAPI.getDataType();\n    var currentArray = model.values;\n    publicAPI.shallowCopy(other); // Avoid array reallocation if size already sufficient\n    // and dataTypes match.\n\n    if ((currentArray === null || currentArray === void 0 ? void 0 : currentArray.length) >= other.getNumberOfValues() && currentType === other.getDataType()) {\n      currentArray.set(other.getData());\n      model.values = currentArray;\n      publicAPI.dataChange();\n    } else {\n      publicAPI.setData(other.getData().slice());\n    }\n  };\n\n  publicAPI.interpolateTuple = function (idx, source1, source1Idx, source2, source2Idx, t) {\n    var numberOfComponents = model.numberOfComponents || 1;\n\n    if (numberOfComponents !== source1.getNumberOfComponents() || numberOfComponents !== source2.getNumberOfComponents()) {\n      vtkErrorMacro('numberOfComponents must match');\n    }\n\n    var tuple1 = source1.getTuple(source1Idx);\n    var tuple2 = source2.getTuple(source2Idx);\n    var out = [];\n    out.length = numberOfComponents; // Check most common component sizes first\n    // to avoid doing a for loop if possible\n\n    switch (numberOfComponents) {\n      case 4:\n        out[3] = tuple1[3] + (tuple2[3] - tuple1[3]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 3:\n        out[2] = tuple1[2] + (tuple2[2] - tuple1[2]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 2:\n        out[1] = tuple1[1] + (tuple2[1] - tuple1[1]) * t;\n      // eslint-disable-next-line no-fallthrough\n\n      case 1:\n        out[0] = tuple1[0] + (tuple2[0] - tuple1[0]) * t;\n        break;\n\n      default:\n        for (var i = 0; i < numberOfComponents; i++) {\n          out[i] = tuple1[i] + (tuple2[i] - tuple1[i]) * t;\n        }\n\n    }\n\n    return publicAPI.insertTuple(idx, out);\n  };\n} // ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n// size: The current size of the dataArray.\n// NOTE: The underlying typed array may be larger than 'size'.\n\n\nvar DEFAULT_VALUES = {\n  name: '',\n  numberOfComponents: 1,\n  dataType: DefaultDataType,\n  rangeTuple: [0, 0] // size: undefined,\n  // values: null,\n  // ranges: null,\n\n}; // ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  if (!model.empty && !model.values && !model.size) {\n    throw new TypeError('Cannot create vtkDataArray object without: size > 0, values');\n  }\n\n  if (!model.values) {\n    model.values = newTypedArray(model.dataType, model.size);\n  } else if (Array.isArray(model.values)) {\n    model.values = newTypedArrayFrom(model.dataType, model.values);\n  }\n\n  if (model.values) {\n    var _model$size;\n\n    // Takes the size if provided (can be lower than `model.values`) otherwise the actual length of `values`.\n    model.size = (_model$size = model.size) !== null && _model$size !== void 0 ? _model$size : model.values.length;\n    model.dataType = getDataType(model.values);\n  } // Object methods\n\n\n  obj(publicAPI, model);\n  set(publicAPI, model, ['name', 'numberOfComponents']); // Object specific methods\n\n  vtkDataArray(publicAPI, model);\n} // ----------------------------------------------------------------------------\n\nvar newInstance = newInstance$1(extend, 'vtkDataArray'); // ----------------------------------------------------------------------------\n\nvar vtkDataArray$1 = _objectSpread(_objectSpread({\n  newInstance: newInstance,\n  extend: extend\n}, STATIC), Constants);\n\nexport { STATIC, vtkDataArray$1 as default, extend, newInstance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}