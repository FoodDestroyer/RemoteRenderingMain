{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../../macros.js';\nimport { handleTypeFromName, AXES, transformVec3, rotateVec3 } from './helpers.js';\nfunction widgetBehavior(publicAPI, model) {\n  model._isDragging = false;\n  publicAPI.setDisplayCallback = function (callback) {\n    return model.representations[0].setDisplayCallback(callback);\n  };\n  publicAPI.handleLeftButtonPress = function () {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable) {\n      return macro.VOID;\n    }\n    if (model.dragable) {\n      model._isDragging = true;\n      model._apiSpecificRenderWindow.setCursor('grabbing');\n      model._interactor.requestAnimation(publicAPI);\n    }\n    return macro.EVENT_ABORT;\n  };\n  publicAPI.handleMouseMove = function (callData) {\n    if (model._isDragging) {\n      return publicAPI.handleEvent(callData);\n    }\n    return macro.VOID;\n  };\n  publicAPI.handleLeftButtonRelease = function () {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable) {\n      return macro.VOID;\n    }\n    if (model._isDragging) {\n      model._isDragging = false;\n      model._interactor.cancelAnimation(publicAPI);\n      model.widgetState.deactivate();\n    }\n    return macro.EVENT_ABORT;\n  };\n  publicAPI.handleEvent = function (callData) {\n    if (model.pickable && model.activeState && model.activeState.getActive()) {\n      var manipulator = model.activeState.getManipulator();\n      if (manipulator) {\n        var name = model.activeState.getName();\n        var type = handleTypeFromName(name);\n        var index = name.split('').map(function (l) {\n          return AXES.indexOf(l);\n        });\n        var planes = model.widgetState.getCroppingPlanes().getPlanes();\n        var indexToWorldT = model.widgetState.getIndexToWorldT();\n        var worldCoords = [];\n        if (type === 'corners') {\n          // manipulator should be a plane manipulator\n          worldCoords = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n        }\n        if (type === 'faces') {\n          // constraint axis is line defined by the index and center point.\n          // Since our index point is defined inside a box [0, 2, 0, 2, 0, 2],\n          // center point is [1, 1, 1].\n          var constraintAxis = [1 - index[0], 1 - index[1], 1 - index[2]]; // get center of current crop box\n\n          var center = [(planes[0] + planes[1]) / 2, (planes[2] + planes[3]) / 2, (planes[4] + planes[5]) / 2]; // manipulator should be a line manipulator\n\n          manipulator.setHandleOrigin(transformVec3(center, indexToWorldT));\n          manipulator.setHandleNormal(rotateVec3(constraintAxis, indexToWorldT));\n          worldCoords = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n        }\n        if (type === 'edges') {\n          // constrain to a plane with a normal parallel to the edge\n          var edgeAxis = index.map(function (a) {\n            return a === 1 ? a : 0;\n          });\n          manipulator.setHandleNormal(rotateVec3(edgeAxis, indexToWorldT));\n          worldCoords = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n        }\n        if (worldCoords.length) {\n          var _model$activeState, _model$widgetState$ge;\n\n          // transform worldCoords to indexCoords, and then update the croppingPlanes() state with setPlanes().\n          var worldToIndexT = model.widgetState.getWorldToIndexT();\n          var indexCoords = transformVec3(worldCoords, worldToIndexT);\n          for (var i = 0; i < 3; i++) {\n            if (index[i] === 0) {\n              planes[i * 2] = indexCoords[i];\n            } else if (index[i] === 2) {\n              planes[i * 2 + 1] = indexCoords[i];\n            }\n          }\n          (_model$activeState = model.activeState).setOrigin.apply(_model$activeState, _toConsumableArray(worldCoords));\n          (_model$widgetState$ge = model.widgetState.getCroppingPlanes()).setPlanes.apply(_model$widgetState$ge, _toConsumableArray(planes));\n          return macro.EVENT_ABORT;\n        }\n      }\n    }\n    return macro.VOID;\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n  model._camera = model._renderer.getActiveCamera();\n  model.classHierarchy.push('vtkImageCroppingWidgetProp');\n}\nexport { widgetBehavior as default };","map":{"version":3,"names":["_toConsumableArray","macro","handleTypeFromName","AXES","transformVec3","rotateVec3","widgetBehavior","publicAPI","model","_isDragging","setDisplayCallback","callback","representations","handleLeftButtonPress","activeState","getActive","pickable","VOID","dragable","_apiSpecificRenderWindow","setCursor","_interactor","requestAnimation","EVENT_ABORT","handleMouseMove","callData","handleEvent","handleLeftButtonRelease","cancelAnimation","widgetState","deactivate","manipulator","getManipulator","name","getName","type","index","split","map","l","indexOf","planes","getCroppingPlanes","getPlanes","indexToWorldT","getIndexToWorldT","worldCoords","constraintAxis","center","setHandleOrigin","setHandleNormal","edgeAxis","a","length","_model$activeState","_model$widgetState$ge","worldToIndexT","getWorldToIndexT","indexCoords","i","setOrigin","apply","setPlanes","_camera","_renderer","getActiveCamera","classHierarchy","push","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Widgets/Widgets3D/ImageCroppingWidget/behavior.js"],"sourcesContent":["import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport macro from '../../../macros.js';\nimport { handleTypeFromName, AXES, transformVec3, rotateVec3 } from './helpers.js';\n\nfunction widgetBehavior(publicAPI, model) {\n  model._isDragging = false;\n\n  publicAPI.setDisplayCallback = function (callback) {\n    return model.representations[0].setDisplayCallback(callback);\n  };\n\n  publicAPI.handleLeftButtonPress = function () {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable) {\n      return macro.VOID;\n    }\n\n    if (model.dragable) {\n      model._isDragging = true;\n\n      model._apiSpecificRenderWindow.setCursor('grabbing');\n\n      model._interactor.requestAnimation(publicAPI);\n    }\n\n    return macro.EVENT_ABORT;\n  };\n\n  publicAPI.handleMouseMove = function (callData) {\n    if (model._isDragging) {\n      return publicAPI.handleEvent(callData);\n    }\n\n    return macro.VOID;\n  };\n\n  publicAPI.handleLeftButtonRelease = function () {\n    if (!model.activeState || !model.activeState.getActive() || !model.pickable) {\n      return macro.VOID;\n    }\n\n    if (model._isDragging) {\n      model._isDragging = false;\n\n      model._interactor.cancelAnimation(publicAPI);\n\n      model.widgetState.deactivate();\n    }\n\n    return macro.EVENT_ABORT;\n  };\n\n  publicAPI.handleEvent = function (callData) {\n    if (model.pickable && model.activeState && model.activeState.getActive()) {\n      var manipulator = model.activeState.getManipulator();\n\n      if (manipulator) {\n        var name = model.activeState.getName();\n        var type = handleTypeFromName(name);\n        var index = name.split('').map(function (l) {\n          return AXES.indexOf(l);\n        });\n        var planes = model.widgetState.getCroppingPlanes().getPlanes();\n        var indexToWorldT = model.widgetState.getIndexToWorldT();\n        var worldCoords = [];\n\n        if (type === 'corners') {\n          // manipulator should be a plane manipulator\n          worldCoords = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n        }\n\n        if (type === 'faces') {\n          // constraint axis is line defined by the index and center point.\n          // Since our index point is defined inside a box [0, 2, 0, 2, 0, 2],\n          // center point is [1, 1, 1].\n          var constraintAxis = [1 - index[0], 1 - index[1], 1 - index[2]]; // get center of current crop box\n\n          var center = [(planes[0] + planes[1]) / 2, (planes[2] + planes[3]) / 2, (planes[4] + planes[5]) / 2]; // manipulator should be a line manipulator\n\n          manipulator.setHandleOrigin(transformVec3(center, indexToWorldT));\n          manipulator.setHandleNormal(rotateVec3(constraintAxis, indexToWorldT));\n          worldCoords = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n        }\n\n        if (type === 'edges') {\n          // constrain to a plane with a normal parallel to the edge\n          var edgeAxis = index.map(function (a) {\n            return a === 1 ? a : 0;\n          });\n          manipulator.setHandleNormal(rotateVec3(edgeAxis, indexToWorldT));\n          worldCoords = manipulator.handleEvent(callData, model._apiSpecificRenderWindow).worldCoords;\n        }\n\n        if (worldCoords.length) {\n          var _model$activeState, _model$widgetState$ge;\n\n          // transform worldCoords to indexCoords, and then update the croppingPlanes() state with setPlanes().\n          var worldToIndexT = model.widgetState.getWorldToIndexT();\n          var indexCoords = transformVec3(worldCoords, worldToIndexT);\n\n          for (var i = 0; i < 3; i++) {\n            if (index[i] === 0) {\n              planes[i * 2] = indexCoords[i];\n            } else if (index[i] === 2) {\n              planes[i * 2 + 1] = indexCoords[i];\n            }\n          }\n\n          (_model$activeState = model.activeState).setOrigin.apply(_model$activeState, _toConsumableArray(worldCoords));\n\n          (_model$widgetState$ge = model.widgetState.getCroppingPlanes()).setPlanes.apply(_model$widgetState$ge, _toConsumableArray(planes));\n\n          return macro.EVENT_ABORT;\n        }\n      }\n    }\n\n    return macro.VOID;\n  }; // --------------------------------------------------------------------------\n  // initialization\n  // --------------------------------------------------------------------------\n\n\n  model._camera = model._renderer.getActiveCamera();\n  model.classHierarchy.push('vtkImageCroppingWidgetProp');\n}\n\nexport { widgetBehavior as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}