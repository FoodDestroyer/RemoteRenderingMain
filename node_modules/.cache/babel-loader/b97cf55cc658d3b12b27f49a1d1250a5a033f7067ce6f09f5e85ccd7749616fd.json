{"ast":null,"code":"import { vtkErrorMacro } from '../../macros.js';\n\n// vtkWebGPUDevice static functions\n//\n// WebGPU uses types in a many places and calls, and often those types\n// need to be associated with byte sizes, alignments, native arrays etc.\n// The folowing methods are designed to help vtk.js introspect those types.\n// WebGPU currently tends to use multiple type formats:\n//  - buffer types such as float32x4\n//  - shader types suchs as vec4<f32>\n//  - texture types such as rgba32float\n// ----------------------------------------------------------------------------\n// see https://gpuweb.github.io/gpuweb/#texture-formats\n// for possible formats, there are a lot of them\n\nvar textureDetails = {\n  // 8-bit formats\n  r8unorm: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8snorm: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8uint: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  r8sint: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 16-bit formats\n  r16uint: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  r16sint: {\n    numComponents: 1,\n    nativeType: Int16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  r16float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rg8unorm: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8snorm: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8uint: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rg8sint: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 32-bit formats\n  r32uint: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  r32sint: {\n    numComponents: 1,\n    nativeType: Int32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  r32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rg16uint: {\n    numComponents: 2,\n    nativeType: Uint16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rg16sint: {\n    numComponents: 2,\n    nativeType: Int16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rg16float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rgba8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'rgba8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8snorm: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8uint: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rgba8sint: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  bgra8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'bgra8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  // Packed 32-bit formats\n  rgb9e5ufloat: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rgb10a2unorm: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rg11b10ufloat: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  // 64-bit formats\n  rg32uint: {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rg32sint: {\n    numComponents: 2,\n    nativeType: Int32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rg32float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rgba16uint: {\n    numComponents: 4,\n    nativeType: Uint16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rgba16sint: {\n    numComponents: 4,\n    nativeType: Int16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rgba16float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  // 128-bit formats\n  rgba32uint: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rgba32sint: {\n    numComponents: 4,\n    nativeType: Int32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rgba32float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  // Depth and stencil formats\n  stencil8: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  depth16unorm: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'depth'\n  },\n  depth24plus: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 3,\n    sampleType: 'depth'\n  },\n  'depth24plus-stencil8': {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'mixed'\n  },\n  depth32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'depth'\n  }\n};\nfunction getDetailsFromTextureFormat(format) {\n  if (!format || format.length < 6) return 0;\n  if (format in textureDetails === true) {\n    return textureDetails[format];\n  }\n  vtkErrorMacro(\"unknown format \".concat(format));\n  return null;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\nfunction getByteStrideFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing\n\n  var numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  var sizeStart = numComp === 1 ? format.length - 1 : format.length - 3; // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n\n  var num = Number(format[sizeStart]);\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return 0;\n  }\n  var typeSize = 5 - num / 2;\n  return numComp * typeSize;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\nfunction getNumberOfComponentsFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing\n\n  var numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  return numComp;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\nfunction getNativeTypeFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // raw types are Uint Int or Float as follows\n\n  var result;\n  if (format[0] === 'f') {\n    result = 'Float';\n  } else if (format[0] === 's') {\n    result = 'Int';\n  } else if (format[0] === 'u') {\n    result = 'Uint';\n  } else {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return undefined;\n  } // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n\n  var base = format.split('x')[0];\n  var num = Number(base[base.length - 1]);\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return undefined;\n  }\n  result += 8 * (5 - num / 2);\n  result += 'Array';\n  return result;\n}\nfunction getShaderTypeFromBufferFormat(format) {\n  var dataType;\n  if (format[0] === 'f' || format[1] === 'n') {\n    dataType = 'f32';\n  } else if (format[0] === 's' && format[1] === 'i') {\n    dataType = 'i32';\n  } else if (format[0] === 'u' && format[1] === 'i') {\n    dataType = 'u32';\n  } else {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return undefined;\n  } // options are x2, x3, x4 or nothing\n\n  var numComp = 1;\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n  if (numComp === 4) return \"vec4<\".concat(dataType, \">\");\n  if (numComp === 3) return \"vec3<\".concat(dataType, \">\");\n  if (numComp === 2) return \"vec2<\".concat(dataType, \">\");\n  return dataType;\n}\nfunction getByteStrideFromShaderFormat(format) {\n  if (!format) return 0;\n  var numComp = 1;\n  if (format.substring(0, 3) === 'vec') {\n    numComp = Number(format[3]);\n  } else if (format.substring(0, 3) === 'mat') {\n    numComp = format[3] * format[5];\n  }\n  var typeSize = 4;\n  return numComp * typeSize;\n}\nfunction getNativeTypeFromShaderFormat(format) {\n  if (!format) return undefined;\n  if (format.includes('f32')) return 'Float32Array';\n  if (format.includes('i32')) return 'Int32Array';\n  if (format.includes('u32')) return 'Uint32Array';\n  vtkErrorMacro(\"unknown format \".concat(format));\n  return undefined;\n}\nvar vtkWebGPUTypes = {\n  getDetailsFromTextureFormat: getDetailsFromTextureFormat,\n  getByteStrideFromBufferFormat: getByteStrideFromBufferFormat,\n  getNumberOfComponentsFromBufferFormat: getNumberOfComponentsFromBufferFormat,\n  getNativeTypeFromBufferFormat: getNativeTypeFromBufferFormat,\n  getShaderTypeFromBufferFormat: getShaderTypeFromBufferFormat,\n  getByteStrideFromShaderFormat: getByteStrideFromShaderFormat,\n  getNativeTypeFromShaderFormat: getNativeTypeFromShaderFormat\n};\nexport { vtkWebGPUTypes as default };","map":{"version":3,"names":["vtkErrorMacro","textureDetails","r8unorm","numComponents","nativeType","Uint8Array","stride","elementSize","sampleType","r8snorm","Int8Array","r8uint","r8sint","r16uint","Uint16Array","r16sint","Int16Array","r16float","Float32Array","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","Uint32Array","r32sint","Int32Array","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","rgb9e5ufloat","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth32float","getDetailsFromTextureFormat","format","length","concat","getByteStrideFromBufferFormat","numComp","Number","sizeStart","num","isNaN","typeSize","getNumberOfComponentsFromBufferFormat","getNativeTypeFromBufferFormat","result","undefined","base","split","getShaderTypeFromBufferFormat","dataType","getByteStrideFromShaderFormat","substring","getNativeTypeFromShaderFormat","includes","vtkWebGPUTypes","default"],"sources":["/home/rakshith/Documents/RemoteRendering/vtk-js-react-app/node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js"],"sourcesContent":["import { vtkErrorMacro } from '../../macros.js';\n\n// vtkWebGPUDevice static functions\n//\n// WebGPU uses types in a many places and calls, and often those types\n// need to be associated with byte sizes, alignments, native arrays etc.\n// The folowing methods are designed to help vtk.js introspect those types.\n// WebGPU currently tends to use multiple type formats:\n//  - buffer types such as float32x4\n//  - shader types suchs as vec4<f32>\n//  - texture types such as rgba32float\n// ----------------------------------------------------------------------------\n// see https://gpuweb.github.io/gpuweb/#texture-formats\n// for possible formats, there are a lot of them\n\nvar textureDetails = {\n  // 8-bit formats\n  r8unorm: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8snorm: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  r8uint: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  r8sint: {\n    numComponents: 1,\n    nativeType: Int8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 16-bit formats\n  r16uint: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  r16sint: {\n    numComponents: 1,\n    nativeType: Int16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  r16float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rg8unorm: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8snorm: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rg8uint: {\n    numComponents: 2,\n    nativeType: Uint8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rg8sint: {\n    numComponents: 2,\n    nativeType: Int8Array,\n    stride: 2,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  // 32-bit formats\n  r32uint: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  r32sint: {\n    numComponents: 1,\n    nativeType: Int32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  r32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rg16uint: {\n    numComponents: 2,\n    nativeType: Uint16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rg16sint: {\n    numComponents: 2,\n    nativeType: Int16Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rg16float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  rgba8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'rgba8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8snorm: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  rgba8uint: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  rgba8sint: {\n    numComponents: 4,\n    nativeType: Int8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'sint'\n  },\n  bgra8unorm: {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  'bgra8unorm-srgb': {\n    numComponents: 4,\n    nativeType: Uint8Array,\n    stride: 4,\n    elementSize: 1,\n    sampleType: 'float'\n  },\n  // Packed 32-bit formats\n  rgb9e5ufloat: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rgb10a2unorm: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  rg11b10ufloat: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 4,\n    sampleType: 'float'\n  },\n  // 64-bit formats\n  rg32uint: {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rg32sint: {\n    numComponents: 2,\n    nativeType: Int32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rg32float: {\n    numComponents: 2,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  rgba16uint: {\n    numComponents: 4,\n    nativeType: Uint16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'uint'\n  },\n  rgba16sint: {\n    numComponents: 4,\n    nativeType: Int16Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'sint'\n  },\n  rgba16float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 8,\n    elementSize: 2,\n    sampleType: 'float'\n  },\n  // 128-bit formats\n  rgba32uint: {\n    numComponents: 4,\n    nativeType: Uint32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'uint'\n  },\n  rgba32sint: {\n    numComponents: 4,\n    nativeType: Int32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'sint'\n  },\n  rgba32float: {\n    numComponents: 4,\n    nativeType: Float32Array,\n    stride: 16,\n    elementSize: 4,\n    sampleType: 'unfilterable-float'\n  },\n  // Depth and stencil formats\n  stencil8: {\n    numComponents: 1,\n    nativeType: Uint8Array,\n    stride: 1,\n    elementSize: 1,\n    sampleType: 'uint'\n  },\n  depth16unorm: {\n    numComponents: 1,\n    nativeType: Uint16Array,\n    stride: 2,\n    elementSize: 2,\n    sampleType: 'depth'\n  },\n  depth24plus: {\n    numComponents: 1,\n    nativeType: Uint32Array,\n    stride: 4,\n    elementSize: 3,\n    sampleType: 'depth'\n  },\n  'depth24plus-stencil8': {\n    numComponents: 2,\n    nativeType: Uint32Array,\n    stride: 4,\n    sampleType: 'mixed'\n  },\n  depth32float: {\n    numComponents: 1,\n    nativeType: Float32Array,\n    stride: 4,\n    elementSize: 4,\n    sampleType: 'depth'\n  }\n};\n\nfunction getDetailsFromTextureFormat(format) {\n  if (!format || format.length < 6) return 0;\n\n  if (format in textureDetails === true) {\n    return textureDetails[format];\n  }\n\n  vtkErrorMacro(\"unknown format \".concat(format));\n  return null;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\n\nfunction getByteStrideFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing\n\n  var numComp = 1;\n\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  var sizeStart = numComp === 1 ? format.length - 1 : format.length - 3; // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n\n  var num = Number(format[sizeStart]);\n\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return 0;\n  }\n\n  var typeSize = 5 - num / 2;\n  return numComp * typeSize;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\n\nfunction getNumberOfComponentsFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing\n\n  var numComp = 1;\n\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  return numComp;\n} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat\n// for possible formats\n\n\nfunction getNativeTypeFromBufferFormat(format) {\n  if (!format || format.length < 5) return 0; // raw types are Uint Int or Float as follows\n\n  var result;\n\n  if (format[0] === 'f') {\n    result = 'Float';\n  } else if (format[0] === 's') {\n    result = 'Int';\n  } else if (format[0] === 'u') {\n    result = 'Uint';\n  } else {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return undefined;\n  } // options are 8, 16, 32 resulting in 8, 6, 2 as the last char\n  // plugged into the formula below gives 1, 2, 4 respectively\n\n\n  var base = format.split('x')[0];\n  var num = Number(base[base.length - 1]);\n\n  if (Number.isNaN(num)) {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return undefined;\n  }\n\n  result += 8 * (5 - num / 2);\n  result += 'Array';\n  return result;\n}\n\nfunction getShaderTypeFromBufferFormat(format) {\n  var dataType;\n\n  if (format[0] === 'f' || format[1] === 'n') {\n    dataType = 'f32';\n  } else if (format[0] === 's' && format[1] === 'i') {\n    dataType = 'i32';\n  } else if (format[0] === 'u' && format[1] === 'i') {\n    dataType = 'u32';\n  } else {\n    vtkErrorMacro(\"unknown format \".concat(format));\n    return undefined;\n  } // options are x2, x3, x4 or nothing\n\n\n  var numComp = 1;\n\n  if (format[format.length - 2] === 'x') {\n    numComp = Number(format[format.length - 1]);\n  }\n\n  if (numComp === 4) return \"vec4<\".concat(dataType, \">\");\n  if (numComp === 3) return \"vec3<\".concat(dataType, \">\");\n  if (numComp === 2) return \"vec2<\".concat(dataType, \">\");\n  return dataType;\n}\n\nfunction getByteStrideFromShaderFormat(format) {\n  if (!format) return 0;\n  var numComp = 1;\n\n  if (format.substring(0, 3) === 'vec') {\n    numComp = Number(format[3]);\n  } else if (format.substring(0, 3) === 'mat') {\n    numComp = format[3] * format[5];\n  }\n\n  var typeSize = 4;\n  return numComp * typeSize;\n}\n\nfunction getNativeTypeFromShaderFormat(format) {\n  if (!format) return undefined;\n  if (format.includes('f32')) return 'Float32Array';\n  if (format.includes('i32')) return 'Int32Array';\n  if (format.includes('u32')) return 'Uint32Array';\n  vtkErrorMacro(\"unknown format \".concat(format));\n  return undefined;\n}\n\nvar vtkWebGPUTypes = {\n  getDetailsFromTextureFormat: getDetailsFromTextureFormat,\n  getByteStrideFromBufferFormat: getByteStrideFromBufferFormat,\n  getNumberOfComponentsFromBufferFormat: getNumberOfComponentsFromBufferFormat,\n  getNativeTypeFromBufferFormat: getNativeTypeFromBufferFormat,\n  getShaderTypeFromBufferFormat: getShaderTypeFromBufferFormat,\n  getByteStrideFromShaderFormat: getByteStrideFromShaderFormat,\n  getNativeTypeFromShaderFormat: getNativeTypeFromShaderFormat\n};\n\nexport { vtkWebGPUTypes as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}